/* 
 * ArubaSignService
 *
 * <h1>ArubaSignService</h1>
 *
 * OpenAPI spec version: 2.3.2-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using ArubaSignServiceRest.Client;
using ArubaSignServiceRest.Model;

namespace ArubaSignServiceRest
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IArubaSignServiceApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This method add a joint signature to a document (a document already signed).
        /// </summary>
        /// <remarks>
        /// This method add a joint signature to a document (a document already signed).&lt;br/&gt;  The parameter \&quot;detached\&quot; must not be valorized.
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object, it provides a Signature Request for a document already signed (optional)</param>
        /// <returns>JsonSignReturnV2</returns>
        JsonSignReturnV2 ResourceArubaSignServiceRestAddpkcs7signPOST (JsonBodyRequestAddPkcs7Sign body = null);

        /// <summary>
        /// This method add a joint signature to a document (a document already signed).
        /// </summary>
        /// <remarks>
        /// This method add a joint signature to a document (a document already signed).&lt;br/&gt;  The parameter \&quot;detached\&quot; must not be valorized.
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object, it provides a Signature Request for a document already signed (optional)</param>
        /// <returns>ApiResponse of JsonSignReturnV2</returns>
        ApiResponse<JsonSignReturnV2> ResourceArubaSignServiceRestAddpkcs7signPOSTWithHttpInfo (JsonBodyRequestAddPkcs7Sign body = null);
        /// <summary>
        /// This method returns the authentication methods of the user.
        /// </summary>
        /// <remarks>
        /// This method returns the authentication methods of the user
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing the User Identity (optional)</param>
        /// <returns>JsonAuthMethodsReturn</returns>
        JsonAuthMethodsReturn ResourceArubaSignServiceRestAuthMethodsPOST (JsonBodyRequestAuthMethod body = null);

        /// <summary>
        /// This method returns the authentication methods of the user.
        /// </summary>
        /// <remarks>
        /// This method returns the authentication methods of the user
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing the User Identity (optional)</param>
        /// <returns>ApiResponse of JsonAuthMethodsReturn</returns>
        ApiResponse<JsonAuthMethodsReturn> ResourceArubaSignServiceRestAuthMethodsPOSTWithHttpInfo (JsonBodyRequestAuthMethod body = null);
        /// <summary>
        /// This Method closes and invalidates a session.
        /// </summary>
        /// <remarks>
        /// This Method closes and invalidates a session.  It&#39;s not possible generate signatures with a closed session.
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object that containing signature credentials (optional)</param>
        /// <returns>string</returns>
        string ResourceArubaSignServiceRestClosesessionPOST (JsonBodyRequestCloseSession body = null);

        /// <summary>
        /// This Method closes and invalidates a session.
        /// </summary>
        /// <remarks>
        /// This Method closes and invalidates a session.  It&#39;s not possible generate signatures with a closed session.
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object that containing signature credentials (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ResourceArubaSignServiceRestClosesessionPOSTWithHttpInfo (JsonBodyRequestCloseSession body = null);
        /// <summary>
        /// This method test one otp.
        /// </summary>
        /// <remarks>
        /// This method test one otp
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing credential to test (optional)</param>
        /// <returns>JsonCredentialListReturn</returns>
        JsonCredentialListReturn ResourceArubaSignServiceRestCredentialsQueryPOST (JsonBodyRequestCredentialsQuery body = null);

        /// <summary>
        /// This method test one otp.
        /// </summary>
        /// <remarks>
        /// This method test one otp
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing credential to test (optional)</param>
        /// <returns>ApiResponse of JsonCredentialListReturn</returns>
        ApiResponse<JsonCredentialListReturn> ResourceArubaSignServiceRestCredentialsQueryPOSTWithHttpInfo (JsonBodyRequestCredentialsQuery body = null);
        /// <summary>
        /// This method encrypts a file.
        /// </summary>
        /// <remarks>
        /// This method encrypts a file
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing an Encryption Request (optional)</param>
        /// <returns>JsonEncryptedEnvelopReturn</returns>
        JsonEncryptedEnvelopReturn ResourceArubaSignServiceRestEncryptedEnvelopePOST (JsonBodyRequestEncryptedEnvelope body = null);

        /// <summary>
        /// This method encrypts a file.
        /// </summary>
        /// <remarks>
        /// This method encrypts a file
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing an Encryption Request (optional)</param>
        /// <returns>ApiResponse of JsonEncryptedEnvelopReturn</returns>
        ApiResponse<JsonEncryptedEnvelopReturn> ResourceArubaSignServiceRestEncryptedEnvelopePOSTWithHttpInfo (JsonBodyRequestEncryptedEnvelope body = null);
        /// <summary>
        /// Return current Server Version.
        /// </summary>
        /// <remarks>
        /// Return current Server Version
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>string</returns>
        string ResourceArubaSignServiceRestGetVersionPOST ();

        /// <summary>
        /// Return current Server Version.
        /// </summary>
        /// <remarks>
        /// Return current Server Version
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ResourceArubaSignServiceRestGetVersionPOSTWithHttpInfo ();
        /// <summary>
        /// This method returns a list of certificates associated to user (by admin credential).
        /// </summary>
        /// <remarks>
        /// This method returns a list of certificates associated to user (by admin credential)
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing the User Identity, the domain and the username for which you&#39;re requesting the list of certificates (optional)</param>
        /// <returns>JsonUserCertListAuth</returns>
        JsonUserCertListAuth ResourceArubaSignServiceRestListCertAuthPOST (JsonBodyRequestListCertAuth body = null);

        /// <summary>
        /// This method returns a list of certificates associated to user (by admin credential).
        /// </summary>
        /// <remarks>
        /// This method returns a list of certificates associated to user (by admin credential)
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing the User Identity, the domain and the username for which you&#39;re requesting the list of certificates (optional)</param>
        /// <returns>ApiResponse of JsonUserCertListAuth</returns>
        ApiResponse<JsonUserCertListAuth> ResourceArubaSignServiceRestListCertAuthPOSTWithHttpInfo (JsonBodyRequestListCertAuth body = null);
        /// <summary>
        /// This method returns a list of certificates associated to user.
        /// </summary>
        /// <remarks>
        /// This method returns a list of certificates associated to user
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing the User Identity for which you&#39;re requesting the list of certificates (optional)</param>
        /// <returns>JsonUserCertList</returns>
        JsonUserCertList ResourceArubaSignServiceRestListCertPOST (JsonBodyRequestListCert body = null);

        /// <summary>
        /// This method returns a list of certificates associated to user.
        /// </summary>
        /// <remarks>
        /// This method returns a list of certificates associated to user
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing the User Identity for which you&#39;re requesting the list of certificates (optional)</param>
        /// <returns>ApiResponse of JsonUserCertList</returns>
        ApiResponse<JsonUserCertList> ResourceArubaSignServiceRestListCertPOSTWithHttpInfo (JsonBodyRequestListCert body = null);
        /// <summary>
        /// This method returns the list of signature active processes.
        /// </summary>
        /// <remarks>
        /// This method returns the list of signature active processes
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing the User Identity for which you&#39;re requesting the process list (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> ResourceArubaSignServiceRestListprocessPOST (JsonBodyRequestListProcess body = null);

        /// <summary>
        /// This method returns the list of signature active processes.
        /// </summary>
        /// <remarks>
        /// This method returns the list of signature active processes
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing the User Identity for which you&#39;re requesting the process list (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> ResourceArubaSignServiceRestListprocessPOSTWithHttpInfo (JsonBodyRequestListProcess body = null);
        /// <summary>
        /// Generate a Time-Stamp Marking Request (M7M Format).
        /// </summary>
        /// <remarks>
        /// Generate a Time-Stamp Marking Request (M7M Format)
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object, it provides a Time-Stamp Marking Request (optional)</param>
        /// <returns>JsonMarkReturn</returns>
        JsonMarkReturn ResourceArubaSignServiceRestM7mPOST (JsonBodyRequestMarkReturn body = null);

        /// <summary>
        /// Generate a Time-Stamp Marking Request (M7M Format).
        /// </summary>
        /// <remarks>
        /// Generate a Time-Stamp Marking Request (M7M Format)
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object, it provides a Time-Stamp Marking Request (optional)</param>
        /// <returns>ApiResponse of JsonMarkReturn</returns>
        ApiResponse<JsonMarkReturn> ResourceArubaSignServiceRestM7mPOSTWithHttpInfo (JsonBodyRequestMarkReturn body = null);
        /// <summary>
        /// Open a session of multiple signature.
        /// </summary>
        /// <remarks>
        /// Open a session of multiple signature.  If a signature request contains a session it can generate signatures without pin
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object that containing signature credentials (optional)</param>
        /// <returns>string</returns>
        string ResourceArubaSignServiceRestOpensessionPOST (JsonBodyRequestOpenSession body = null);

        /// <summary>
        /// Open a session of multiple signature.
        /// </summary>
        /// <remarks>
        /// Open a session of multiple signature.  If a signature request contains a session it can generate signatures without pin
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object that containing signature credentials (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ResourceArubaSignServiceRestOpensessionPOSTWithHttpInfo (JsonBodyRequestOpenSession body = null);
        /// <summary>
        /// This method perform a PDF Signature of a PDF file (PAdES standard).
        /// </summary>
        /// <remarks>
        /// This method perform a PDF Signature of a PDF file (PAdES standard)
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object, it provides a Sign Request for a PDF document (optional)</param>
        /// <returns>JsonSignReturn</returns>
        JsonSignReturn ResourceArubaSignServiceRestPdfsignaturePOST (JsonBodyRequestPdfSignature body = null);

        /// <summary>
        /// This method perform a PDF Signature of a PDF file (PAdES standard).
        /// </summary>
        /// <remarks>
        /// This method perform a PDF Signature of a PDF file (PAdES standard)
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object, it provides a Sign Request for a PDF document (optional)</param>
        /// <returns>ApiResponse of JsonSignReturn</returns>
        ApiResponse<JsonSignReturn> ResourceArubaSignServiceRestPdfsignaturePOSTWithHttpInfo (JsonBodyRequestPdfSignature body = null);
        /// <summary>
        /// This method performs multiple PDF signatures.
        /// </summary>
        /// <remarks>
        /// This method performs multiple PDF signatures
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing the User Identity, the list of Signature Request and other parameters (optional)</param>
        /// <returns>JsonSignReturnV2Multiple</returns>
        JsonSignReturnV2Multiple ResourceArubaSignServiceRestPdfsignatureV2MultiplePOST (JsonBodyRequestPdfSignatureV2Multiple body = null);

        /// <summary>
        /// This method performs multiple PDF signatures.
        /// </summary>
        /// <remarks>
        /// This method performs multiple PDF signatures
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing the User Identity, the list of Signature Request and other parameters (optional)</param>
        /// <returns>ApiResponse of JsonSignReturnV2Multiple</returns>
        ApiResponse<JsonSignReturnV2Multiple> ResourceArubaSignServiceRestPdfsignatureV2MultiplePOSTWithHttpInfo (JsonBodyRequestPdfSignatureV2Multiple body = null);
        /// <summary>
        /// This method perform a PDF Signature of a PDF file (PAdES standard)  In input accepts an entire document depending of type of trasport used.
        /// </summary>
        /// <remarks>
        /// This method perform a PDF Signature of a PDF file (PAdES standard)  In input accepts an entire document depending of type of trasport used
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object, it provides a Sign Request for a PDF (PAdES standard) (optional)</param>
        /// <returns>JsonSignReturnV2</returns>
        JsonSignReturnV2 ResourceArubaSignServiceRestPdfsignatureV2POST (JsonBodyRequestPdfSignatureV2 body = null);

        /// <summary>
        /// This method perform a PDF Signature of a PDF file (PAdES standard)  In input accepts an entire document depending of type of trasport used.
        /// </summary>
        /// <remarks>
        /// This method perform a PDF Signature of a PDF file (PAdES standard)  In input accepts an entire document depending of type of trasport used
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object, it provides a Sign Request for a PDF (PAdES standard) (optional)</param>
        /// <returns>ApiResponse of JsonSignReturnV2</returns>
        ApiResponse<JsonSignReturnV2> ResourceArubaSignServiceRestPdfsignatureV2POSTWithHttpInfo (JsonBodyRequestPdfSignatureV2 body = null);
        /// <summary>
        /// Ping Server.
        /// </summary>
        /// <remarks>
        /// Ping Server
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>string</returns>
        string ResourceArubaSignServiceRestPingGET ();

        /// <summary>
        /// Ping Server.
        /// </summary>
        /// <remarks>
        /// Ping Server
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ResourceArubaSignServiceRestPingGETWithHttpInfo ();
        /// <summary>
        /// Creates a signature from a file in the CADES standard.
        /// </summary>
        /// <remarks>
        /// Creates a signature from a file in the CADES standard
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object, it provides a Signature Request (optional)</param>
        /// <returns>JsonSignReturn</returns>
        JsonSignReturn ResourceArubaSignServiceRestPkcs7signPOST (JsonBodyRequestPkcs7Sign body = null);

        /// <summary>
        /// Creates a signature from a file in the CADES standard.
        /// </summary>
        /// <remarks>
        /// Creates a signature from a file in the CADES standard
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object, it provides a Signature Request (optional)</param>
        /// <returns>ApiResponse of JsonSignReturn</returns>
        ApiResponse<JsonSignReturn> ResourceArubaSignServiceRestPkcs7signPOSTWithHttpInfo (JsonBodyRequestPkcs7Sign body = null);
        /// <summary>
        /// This method performs multiple signature in the CAdES standard to a generic file.
        /// </summary>
        /// <remarks>
        /// This method performs multiple signature in the CAdES standard to a generic file
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing the User Identity and the list of Signature Request (optional)</param>
        /// <returns>JsonSignReturnV2Multiple</returns>
        JsonSignReturnV2Multiple ResourceArubaSignServiceRestPkcs7signV2MultiplePOST (JsonBodyRequestPkcs7sSignV2Multiple body = null);

        /// <summary>
        /// This method performs multiple signature in the CAdES standard to a generic file.
        /// </summary>
        /// <remarks>
        /// This method performs multiple signature in the CAdES standard to a generic file
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing the User Identity and the list of Signature Request (optional)</param>
        /// <returns>ApiResponse of JsonSignReturnV2Multiple</returns>
        ApiResponse<JsonSignReturnV2Multiple> ResourceArubaSignServiceRestPkcs7signV2MultiplePOSTWithHttpInfo (JsonBodyRequestPkcs7sSignV2Multiple body = null);
        /// <summary>
        /// Creates a signature to a file in the CAdES standard  In input accepts an entire document depending of type of trasport used.
        /// </summary>
        /// <remarks>
        /// Creates a signature to a file in the CAdES standard  In input accepts an entire document depending of type of trasport used
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object, it provides a Signature Request for the document (optional)</param>
        /// <returns>JsonSignReturnV2</returns>
        JsonSignReturnV2 ResourceArubaSignServiceRestPkcs7signV2POST (JsonBodyRequestPkcs7SignV2 body = null);

        /// <summary>
        /// Creates a signature to a file in the CAdES standard  In input accepts an entire document depending of type of trasport used.
        /// </summary>
        /// <remarks>
        /// Creates a signature to a file in the CAdES standard  In input accepts an entire document depending of type of trasport used
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object, it provides a Signature Request for the document (optional)</param>
        /// <returns>ApiResponse of JsonSignReturnV2</returns>
        ApiResponse<JsonSignReturnV2> ResourceArubaSignServiceRestPkcs7signV2POSTWithHttpInfo (JsonBodyRequestPkcs7SignV2 body = null);
        /// <summary>
        /// This method performs multiple Hash signature.
        /// </summary>
        /// <remarks>
        /// This method performs multiple Hash signature
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing the User Identity and the list of Signature Request (optional)</param>
        /// <returns>JsonSignReturnV2Multiple</returns>
        JsonSignReturnV2Multiple ResourceArubaSignServiceRestPkcs7signhashMultiplePOST (JsonBodyRequestPkcs7SignHashMultiple body = null);

        /// <summary>
        /// This method performs multiple Hash signature.
        /// </summary>
        /// <remarks>
        /// This method performs multiple Hash signature
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing the User Identity and the list of Signature Request (optional)</param>
        /// <returns>ApiResponse of JsonSignReturnV2Multiple</returns>
        ApiResponse<JsonSignReturnV2Multiple> ResourceArubaSignServiceRestPkcs7signhashMultiplePOSTWithHttpInfo (JsonBodyRequestPkcs7SignHashMultiple body = null);
        /// <summary>
        /// Creates a PKCS7 Detached for Hash sended as document.
        /// </summary>
        /// <remarks>
        /// Creates a PKCS7 Detached for Hash sended as document.  They are not supported the following transportation type  &lt;ul&gt;  &lt;li&gt;DIRECTORYNAME&lt;/li&gt;  &lt;li&gt;FILENAME&lt;/li&gt;  &lt;/ul&gt;
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object that containing a signature request (optional)</param>
        /// <returns>JsonSignReturnV2</returns>
        JsonSignReturnV2 ResourceArubaSignServiceRestPkcs7signhashPOST (JsonBodyRequestPkcs7SignHash body = null);

        /// <summary>
        /// Creates a PKCS7 Detached for Hash sended as document.
        /// </summary>
        /// <remarks>
        /// Creates a PKCS7 Detached for Hash sended as document.  They are not supported the following transportation type  &lt;ul&gt;  &lt;li&gt;DIRECTORYNAME&lt;/li&gt;  &lt;li&gt;FILENAME&lt;/li&gt;  &lt;/ul&gt;
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object that containing a signature request (optional)</param>
        /// <returns>ApiResponse of JsonSignReturnV2</returns>
        ApiResponse<JsonSignReturnV2> ResourceArubaSignServiceRestPkcs7signhashPOSTWithHttpInfo (JsonBodyRequestPkcs7SignHash body = null);
        /// <summary>
        /// Retrieve credential from user.
        /// </summary>
        /// <remarks>
        /// Retrieve credential from user
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing the User Identity and the crendential type (optional)</param>
        /// <returns>JsonRetriveCredentialReturn</returns>
        JsonRetriveCredentialReturn ResourceArubaSignServiceRestRetriveCredentialPOST (JsonBodyRequestRetriveCredential body = null);

        /// <summary>
        /// Retrieve credential from user.
        /// </summary>
        /// <remarks>
        /// Retrieve credential from user
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing the User Identity and the crendential type (optional)</param>
        /// <returns>ApiResponse of JsonRetriveCredentialReturn</returns>
        ApiResponse<JsonRetriveCredentialReturn> ResourceArubaSignServiceRestRetriveCredentialPOSTWithHttpInfo (JsonBodyRequestRetriveCredential body = null);
        /// <summary>
        /// Send OPT credentials to the users (SMS or ARUBACALL).
        /// </summary>
        /// <remarks>
        /// Send OPT credentials to the users (SMS or ARUBACALL)
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing the User Identity and the crendential type for which you&#39;re requesting the sending (optional)</param>
        /// <returns>JsonArssReturn</returns>
        JsonArssReturn ResourceArubaSignServiceRestSendCredentialPOST (JsonBodyRequestSendCredential body = null);

        /// <summary>
        /// Send OPT credentials to the users (SMS or ARUBACALL).
        /// </summary>
        /// <remarks>
        /// Send OPT credentials to the users (SMS or ARUBACALL)
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing the User Identity and the crendential type for which you&#39;re requesting the sending (optional)</param>
        /// <returns>ApiResponse of JsonArssReturn</returns>
        ApiResponse<JsonArssReturn> ResourceArubaSignServiceRestSendCredentialPOSTWithHttpInfo (JsonBodyRequestSendCredential body = null);
        /// <summary>
        /// This method perform a Hash Signature (pkcs1 standard).
        /// </summary>
        /// <remarks>
        /// This method perform a Hash Signature (pkcs1 standard)
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object, it provides a Signature Request (optional)</param>
        /// <returns>JsonSignHashReturn</returns>
        JsonSignHashReturn ResourceArubaSignServiceRestSignhashPOST (JsonBodyRequestSignHash body = null);

        /// <summary>
        /// This method perform a Hash Signature (pkcs1 standard).
        /// </summary>
        /// <remarks>
        /// This method perform a Hash Signature (pkcs1 standard)
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object, it provides a Signature Request (optional)</param>
        /// <returns>ApiResponse of JsonSignHashReturn</returns>
        ApiResponse<JsonSignHashReturn> ResourceArubaSignServiceRestSignhashPOSTWithHttpInfo (JsonBodyRequestSignHash body = null);
        /// <summary>
        /// This method test one otp.
        /// </summary>
        /// <remarks>
        /// This method test one otp
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing credential to test (optional)</param>
        /// <returns>JsonGWReturn</returns>
        JsonGWReturn ResourceArubaSignServiceRestTestOtpPOST (JsonBodyRequestTestOtp body = null);

        /// <summary>
        /// This method test one otp.
        /// </summary>
        /// <remarks>
        /// This method test one otp
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing credential to test (optional)</param>
        /// <returns>ApiResponse of JsonGWReturn</returns>
        ApiResponse<JsonGWReturn> ResourceArubaSignServiceRestTestOtpPOSTWithHttpInfo (JsonBodyRequestTestOtp body = null);
        /// <summary>
        /// Generate a Time-Stamp Marking Request (TSD Format).
        /// </summary>
        /// <remarks>
        /// Generate a Time-Stamp Marking Request (TSD Format)
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object, it provides a Time-Stamp Marking Request (optional)</param>
        /// <returns>JsonMarkReturn</returns>
        JsonMarkReturn ResourceArubaSignServiceRestTsdPOST (JsonBodyRequestMarkReturn body = null);

        /// <summary>
        /// Generate a Time-Stamp Marking Request (TSD Format).
        /// </summary>
        /// <remarks>
        /// Generate a Time-Stamp Marking Request (TSD Format)
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object, it provides a Time-Stamp Marking Request (optional)</param>
        /// <returns>ApiResponse of JsonMarkReturn</returns>
        ApiResponse<JsonMarkReturn> ResourceArubaSignServiceRestTsdPOSTWithHttpInfo (JsonBodyRequestMarkReturn body = null);
        /// <summary>
        /// Generate a Time-Stamp Marking Request (TSR Format).
        /// </summary>
        /// <remarks>
        /// Generate a Time-Stamp Marking Request (TSR Format)
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object, it provides a Time-Stamp Marking Request (optional)</param>
        /// <returns>JsonMarkReturn</returns>
        JsonMarkReturn ResourceArubaSignServiceRestTsrPOST (JsonBodyRequestMarkReturn body = null);

        /// <summary>
        /// Generate a Time-Stamp Marking Request (TSR Format).
        /// </summary>
        /// <remarks>
        /// Generate a Time-Stamp Marking Request (TSR Format)
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object, it provides a Time-Stamp Marking Request (optional)</param>
        /// <returns>ApiResponse of JsonMarkReturn</returns>
        ApiResponse<JsonMarkReturn> ResourceArubaSignServiceRestTsrPOSTWithHttpInfo (JsonBodyRequestMarkReturn body = null);
        /// <summary>
        /// Method to autenticate credential.
        /// </summary>
        /// <remarks>
        /// Method to autenticate credential
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing the User Identity for which you&#39;re requesting the verify (optional)</param>
        /// <returns>JsonArssReturn</returns>
        JsonArssReturn ResourceArubaSignServiceRestVerifyOtpPOST (JsonBodyRequestVerifyOtp body = null);

        /// <summary>
        /// Method to autenticate credential.
        /// </summary>
        /// <remarks>
        /// Method to autenticate credential
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing the User Identity for which you&#39;re requesting the verify (optional)</param>
        /// <returns>ApiResponse of JsonArssReturn</returns>
        ApiResponse<JsonArssReturn> ResourceArubaSignServiceRestVerifyOtpPOSTWithHttpInfo (JsonBodyRequestVerifyOtp body = null);
        /// <summary>
        /// This method verify a document.
        /// </summary>
        /// <remarks>
        /// This method verify a document
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object that containing a verify request (optional)</param>
        /// <returns>JsonVerifyReturn</returns>
        JsonVerifyReturn ResourceArubaSignServiceRestVerifyPOST (JsonBodyRequestVerify body = null);

        /// <summary>
        /// This method verify a document.
        /// </summary>
        /// <remarks>
        /// This method verify a document
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object that containing a verify request (optional)</param>
        /// <returns>ApiResponse of JsonVerifyReturn</returns>
        ApiResponse<JsonVerifyReturn> ResourceArubaSignServiceRestVerifyPOSTWithHttpInfo (JsonBodyRequestVerify body = null);
        /// <summary>
        /// This method performs multiple XML signatures.
        /// </summary>
        /// <remarks>
        /// This method performs multiple XML signatures
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing the User Identity, the list of Signature Request and other parameters (optional)</param>
        /// <returns>JsonSignReturnV2Multiple</returns>
        JsonSignReturnV2Multiple ResourceArubaSignServiceRestXmlsignatureMultiplePOST (JsonBodyRequestXmlSignatureMultiple body = null);

        /// <summary>
        /// This method performs multiple XML signatures.
        /// </summary>
        /// <remarks>
        /// This method performs multiple XML signatures
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing the User Identity, the list of Signature Request and other parameters (optional)</param>
        /// <returns>ApiResponse of JsonSignReturnV2Multiple</returns>
        ApiResponse<JsonSignReturnV2Multiple> ResourceArubaSignServiceRestXmlsignatureMultiplePOSTWithHttpInfo (JsonBodyRequestXmlSignatureMultiple body = null);
        /// <summary>
        /// XML Signature (XAdES format)  This method is not complete and it should not be used.
        /// </summary>
        /// <remarks>
        /// XML Signature (XAdES format)  This method is not complete and it should not be used
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object, it provides a Signature Request (optional)</param>
        /// <returns>JsonSignReturnV2</returns>
        JsonSignReturnV2 ResourceArubaSignServiceRestXmlsignaturePOST (JsonBodyRequestXmlSignature body = null);

        /// <summary>
        /// XML Signature (XAdES format)  This method is not complete and it should not be used.
        /// </summary>
        /// <remarks>
        /// XML Signature (XAdES format)  This method is not complete and it should not be used
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object, it provides a Signature Request (optional)</param>
        /// <returns>ApiResponse of JsonSignReturnV2</returns>
        ApiResponse<JsonSignReturnV2> ResourceArubaSignServiceRestXmlsignaturePOSTWithHttpInfo (JsonBodyRequestXmlSignature body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This method add a joint signature to a document (a document already signed).
        /// </summary>
        /// <remarks>
        /// This method add a joint signature to a document (a document already signed).&lt;br/&gt;  The parameter \&quot;detached\&quot; must not be valorized.
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object, it provides a Signature Request for a document already signed (optional)</param>
        /// <returns>Task of JsonSignReturnV2</returns>
        System.Threading.Tasks.Task<JsonSignReturnV2> ResourceArubaSignServiceRestAddpkcs7signPOSTAsync (JsonBodyRequestAddPkcs7Sign body = null);

        /// <summary>
        /// This method add a joint signature to a document (a document already signed).
        /// </summary>
        /// <remarks>
        /// This method add a joint signature to a document (a document already signed).&lt;br/&gt;  The parameter \&quot;detached\&quot; must not be valorized.
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object, it provides a Signature Request for a document already signed (optional)</param>
        /// <returns>Task of ApiResponse (JsonSignReturnV2)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonSignReturnV2>> ResourceArubaSignServiceRestAddpkcs7signPOSTAsyncWithHttpInfo (JsonBodyRequestAddPkcs7Sign body = null);
        /// <summary>
        /// This method returns the authentication methods of the user.
        /// </summary>
        /// <remarks>
        /// This method returns the authentication methods of the user
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing the User Identity (optional)</param>
        /// <returns>Task of JsonAuthMethodsReturn</returns>
        System.Threading.Tasks.Task<JsonAuthMethodsReturn> ResourceArubaSignServiceRestAuthMethodsPOSTAsync (JsonBodyRequestAuthMethod body = null);

        /// <summary>
        /// This method returns the authentication methods of the user.
        /// </summary>
        /// <remarks>
        /// This method returns the authentication methods of the user
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing the User Identity (optional)</param>
        /// <returns>Task of ApiResponse (JsonAuthMethodsReturn)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonAuthMethodsReturn>> ResourceArubaSignServiceRestAuthMethodsPOSTAsyncWithHttpInfo (JsonBodyRequestAuthMethod body = null);
        /// <summary>
        /// This Method closes and invalidates a session.
        /// </summary>
        /// <remarks>
        /// This Method closes and invalidates a session.  It&#39;s not possible generate signatures with a closed session.
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object that containing signature credentials (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ResourceArubaSignServiceRestClosesessionPOSTAsync (JsonBodyRequestCloseSession body = null);

        /// <summary>
        /// This Method closes and invalidates a session.
        /// </summary>
        /// <remarks>
        /// This Method closes and invalidates a session.  It&#39;s not possible generate signatures with a closed session.
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object that containing signature credentials (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ResourceArubaSignServiceRestClosesessionPOSTAsyncWithHttpInfo (JsonBodyRequestCloseSession body = null);
        /// <summary>
        /// This method test one otp.
        /// </summary>
        /// <remarks>
        /// This method test one otp
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing credential to test (optional)</param>
        /// <returns>Task of JsonCredentialListReturn</returns>
        System.Threading.Tasks.Task<JsonCredentialListReturn> ResourceArubaSignServiceRestCredentialsQueryPOSTAsync (JsonBodyRequestCredentialsQuery body = null);

        /// <summary>
        /// This method test one otp.
        /// </summary>
        /// <remarks>
        /// This method test one otp
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing credential to test (optional)</param>
        /// <returns>Task of ApiResponse (JsonCredentialListReturn)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonCredentialListReturn>> ResourceArubaSignServiceRestCredentialsQueryPOSTAsyncWithHttpInfo (JsonBodyRequestCredentialsQuery body = null);
        /// <summary>
        /// This method encrypts a file.
        /// </summary>
        /// <remarks>
        /// This method encrypts a file
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing an Encryption Request (optional)</param>
        /// <returns>Task of JsonEncryptedEnvelopReturn</returns>
        System.Threading.Tasks.Task<JsonEncryptedEnvelopReturn> ResourceArubaSignServiceRestEncryptedEnvelopePOSTAsync (JsonBodyRequestEncryptedEnvelope body = null);

        /// <summary>
        /// This method encrypts a file.
        /// </summary>
        /// <remarks>
        /// This method encrypts a file
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing an Encryption Request (optional)</param>
        /// <returns>Task of ApiResponse (JsonEncryptedEnvelopReturn)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonEncryptedEnvelopReturn>> ResourceArubaSignServiceRestEncryptedEnvelopePOSTAsyncWithHttpInfo (JsonBodyRequestEncryptedEnvelope body = null);
        /// <summary>
        /// Return current Server Version.
        /// </summary>
        /// <remarks>
        /// Return current Server Version
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ResourceArubaSignServiceRestGetVersionPOSTAsync ();

        /// <summary>
        /// Return current Server Version.
        /// </summary>
        /// <remarks>
        /// Return current Server Version
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ResourceArubaSignServiceRestGetVersionPOSTAsyncWithHttpInfo ();
        /// <summary>
        /// This method returns a list of certificates associated to user (by admin credential).
        /// </summary>
        /// <remarks>
        /// This method returns a list of certificates associated to user (by admin credential)
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing the User Identity, the domain and the username for which you&#39;re requesting the list of certificates (optional)</param>
        /// <returns>Task of JsonUserCertListAuth</returns>
        System.Threading.Tasks.Task<JsonUserCertListAuth> ResourceArubaSignServiceRestListCertAuthPOSTAsync (JsonBodyRequestListCertAuth body = null);

        /// <summary>
        /// This method returns a list of certificates associated to user (by admin credential).
        /// </summary>
        /// <remarks>
        /// This method returns a list of certificates associated to user (by admin credential)
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing the User Identity, the domain and the username for which you&#39;re requesting the list of certificates (optional)</param>
        /// <returns>Task of ApiResponse (JsonUserCertListAuth)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonUserCertListAuth>> ResourceArubaSignServiceRestListCertAuthPOSTAsyncWithHttpInfo (JsonBodyRequestListCertAuth body = null);
        /// <summary>
        /// This method returns a list of certificates associated to user.
        /// </summary>
        /// <remarks>
        /// This method returns a list of certificates associated to user
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing the User Identity for which you&#39;re requesting the list of certificates (optional)</param>
        /// <returns>Task of JsonUserCertList</returns>
        System.Threading.Tasks.Task<JsonUserCertList> ResourceArubaSignServiceRestListCertPOSTAsync (JsonBodyRequestListCert body = null);

        /// <summary>
        /// This method returns a list of certificates associated to user.
        /// </summary>
        /// <remarks>
        /// This method returns a list of certificates associated to user
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing the User Identity for which you&#39;re requesting the list of certificates (optional)</param>
        /// <returns>Task of ApiResponse (JsonUserCertList)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonUserCertList>> ResourceArubaSignServiceRestListCertPOSTAsyncWithHttpInfo (JsonBodyRequestListCert body = null);
        /// <summary>
        /// This method returns the list of signature active processes.
        /// </summary>
        /// <remarks>
        /// This method returns the list of signature active processes
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing the User Identity for which you&#39;re requesting the process list (optional)</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> ResourceArubaSignServiceRestListprocessPOSTAsync (JsonBodyRequestListProcess body = null);

        /// <summary>
        /// This method returns the list of signature active processes.
        /// </summary>
        /// <remarks>
        /// This method returns the list of signature active processes
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing the User Identity for which you&#39;re requesting the process list (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> ResourceArubaSignServiceRestListprocessPOSTAsyncWithHttpInfo (JsonBodyRequestListProcess body = null);
        /// <summary>
        /// Generate a Time-Stamp Marking Request (M7M Format).
        /// </summary>
        /// <remarks>
        /// Generate a Time-Stamp Marking Request (M7M Format)
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object, it provides a Time-Stamp Marking Request (optional)</param>
        /// <returns>Task of JsonMarkReturn</returns>
        System.Threading.Tasks.Task<JsonMarkReturn> ResourceArubaSignServiceRestM7mPOSTAsync (JsonBodyRequestMarkReturn body = null);

        /// <summary>
        /// Generate a Time-Stamp Marking Request (M7M Format).
        /// </summary>
        /// <remarks>
        /// Generate a Time-Stamp Marking Request (M7M Format)
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object, it provides a Time-Stamp Marking Request (optional)</param>
        /// <returns>Task of ApiResponse (JsonMarkReturn)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonMarkReturn>> ResourceArubaSignServiceRestM7mPOSTAsyncWithHttpInfo (JsonBodyRequestMarkReturn body = null);
        /// <summary>
        /// Open a session of multiple signature.
        /// </summary>
        /// <remarks>
        /// Open a session of multiple signature.  If a signature request contains a session it can generate signatures without pin
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object that containing signature credentials (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ResourceArubaSignServiceRestOpensessionPOSTAsync (JsonBodyRequestOpenSession body = null);

        /// <summary>
        /// Open a session of multiple signature.
        /// </summary>
        /// <remarks>
        /// Open a session of multiple signature.  If a signature request contains a session it can generate signatures without pin
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object that containing signature credentials (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ResourceArubaSignServiceRestOpensessionPOSTAsyncWithHttpInfo (JsonBodyRequestOpenSession body = null);
        /// <summary>
        /// This method perform a PDF Signature of a PDF file (PAdES standard).
        /// </summary>
        /// <remarks>
        /// This method perform a PDF Signature of a PDF file (PAdES standard)
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object, it provides a Sign Request for a PDF document (optional)</param>
        /// <returns>Task of JsonSignReturn</returns>
        System.Threading.Tasks.Task<JsonSignReturn> ResourceArubaSignServiceRestPdfsignaturePOSTAsync (JsonBodyRequestPdfSignature body = null);

        /// <summary>
        /// This method perform a PDF Signature of a PDF file (PAdES standard).
        /// </summary>
        /// <remarks>
        /// This method perform a PDF Signature of a PDF file (PAdES standard)
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object, it provides a Sign Request for a PDF document (optional)</param>
        /// <returns>Task of ApiResponse (JsonSignReturn)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonSignReturn>> ResourceArubaSignServiceRestPdfsignaturePOSTAsyncWithHttpInfo (JsonBodyRequestPdfSignature body = null);
        /// <summary>
        /// This method performs multiple PDF signatures.
        /// </summary>
        /// <remarks>
        /// This method performs multiple PDF signatures
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing the User Identity, the list of Signature Request and other parameters (optional)</param>
        /// <returns>Task of JsonSignReturnV2Multiple</returns>
        System.Threading.Tasks.Task<JsonSignReturnV2Multiple> ResourceArubaSignServiceRestPdfsignatureV2MultiplePOSTAsync (JsonBodyRequestPdfSignatureV2Multiple body = null);

        /// <summary>
        /// This method performs multiple PDF signatures.
        /// </summary>
        /// <remarks>
        /// This method performs multiple PDF signatures
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing the User Identity, the list of Signature Request and other parameters (optional)</param>
        /// <returns>Task of ApiResponse (JsonSignReturnV2Multiple)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonSignReturnV2Multiple>> ResourceArubaSignServiceRestPdfsignatureV2MultiplePOSTAsyncWithHttpInfo (JsonBodyRequestPdfSignatureV2Multiple body = null);
        /// <summary>
        /// This method perform a PDF Signature of a PDF file (PAdES standard)  In input accepts an entire document depending of type of trasport used.
        /// </summary>
        /// <remarks>
        /// This method perform a PDF Signature of a PDF file (PAdES standard)  In input accepts an entire document depending of type of trasport used
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object, it provides a Sign Request for a PDF (PAdES standard) (optional)</param>
        /// <returns>Task of JsonSignReturnV2</returns>
        System.Threading.Tasks.Task<JsonSignReturnV2> ResourceArubaSignServiceRestPdfsignatureV2POSTAsync (JsonBodyRequestPdfSignatureV2 body = null);

        /// <summary>
        /// This method perform a PDF Signature of a PDF file (PAdES standard)  In input accepts an entire document depending of type of trasport used.
        /// </summary>
        /// <remarks>
        /// This method perform a PDF Signature of a PDF file (PAdES standard)  In input accepts an entire document depending of type of trasport used
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object, it provides a Sign Request for a PDF (PAdES standard) (optional)</param>
        /// <returns>Task of ApiResponse (JsonSignReturnV2)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonSignReturnV2>> ResourceArubaSignServiceRestPdfsignatureV2POSTAsyncWithHttpInfo (JsonBodyRequestPdfSignatureV2 body = null);
        /// <summary>
        /// Ping Server.
        /// </summary>
        /// <remarks>
        /// Ping Server
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ResourceArubaSignServiceRestPingGETAsync ();

        /// <summary>
        /// Ping Server.
        /// </summary>
        /// <remarks>
        /// Ping Server
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ResourceArubaSignServiceRestPingGETAsyncWithHttpInfo ();
        /// <summary>
        /// Creates a signature from a file in the CADES standard.
        /// </summary>
        /// <remarks>
        /// Creates a signature from a file in the CADES standard
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object, it provides a Signature Request (optional)</param>
        /// <returns>Task of JsonSignReturn</returns>
        System.Threading.Tasks.Task<JsonSignReturn> ResourceArubaSignServiceRestPkcs7signPOSTAsync (JsonBodyRequestPkcs7Sign body = null);

        /// <summary>
        /// Creates a signature from a file in the CADES standard.
        /// </summary>
        /// <remarks>
        /// Creates a signature from a file in the CADES standard
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object, it provides a Signature Request (optional)</param>
        /// <returns>Task of ApiResponse (JsonSignReturn)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonSignReturn>> ResourceArubaSignServiceRestPkcs7signPOSTAsyncWithHttpInfo (JsonBodyRequestPkcs7Sign body = null);
        /// <summary>
        /// This method performs multiple signature in the CAdES standard to a generic file.
        /// </summary>
        /// <remarks>
        /// This method performs multiple signature in the CAdES standard to a generic file
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing the User Identity and the list of Signature Request (optional)</param>
        /// <returns>Task of JsonSignReturnV2Multiple</returns>
        System.Threading.Tasks.Task<JsonSignReturnV2Multiple> ResourceArubaSignServiceRestPkcs7signV2MultiplePOSTAsync (JsonBodyRequestPkcs7sSignV2Multiple body = null);

        /// <summary>
        /// This method performs multiple signature in the CAdES standard to a generic file.
        /// </summary>
        /// <remarks>
        /// This method performs multiple signature in the CAdES standard to a generic file
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing the User Identity and the list of Signature Request (optional)</param>
        /// <returns>Task of ApiResponse (JsonSignReturnV2Multiple)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonSignReturnV2Multiple>> ResourceArubaSignServiceRestPkcs7signV2MultiplePOSTAsyncWithHttpInfo (JsonBodyRequestPkcs7sSignV2Multiple body = null);
        /// <summary>
        /// Creates a signature to a file in the CAdES standard  In input accepts an entire document depending of type of trasport used.
        /// </summary>
        /// <remarks>
        /// Creates a signature to a file in the CAdES standard  In input accepts an entire document depending of type of trasport used
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object, it provides a Signature Request for the document (optional)</param>
        /// <returns>Task of JsonSignReturnV2</returns>
        System.Threading.Tasks.Task<JsonSignReturnV2> ResourceArubaSignServiceRestPkcs7signV2POSTAsync (JsonBodyRequestPkcs7SignV2 body = null);

        /// <summary>
        /// Creates a signature to a file in the CAdES standard  In input accepts an entire document depending of type of trasport used.
        /// </summary>
        /// <remarks>
        /// Creates a signature to a file in the CAdES standard  In input accepts an entire document depending of type of trasport used
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object, it provides a Signature Request for the document (optional)</param>
        /// <returns>Task of ApiResponse (JsonSignReturnV2)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonSignReturnV2>> ResourceArubaSignServiceRestPkcs7signV2POSTAsyncWithHttpInfo (JsonBodyRequestPkcs7SignV2 body = null);
        /// <summary>
        /// This method performs multiple Hash signature.
        /// </summary>
        /// <remarks>
        /// This method performs multiple Hash signature
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing the User Identity and the list of Signature Request (optional)</param>
        /// <returns>Task of JsonSignReturnV2Multiple</returns>
        System.Threading.Tasks.Task<JsonSignReturnV2Multiple> ResourceArubaSignServiceRestPkcs7signhashMultiplePOSTAsync (JsonBodyRequestPkcs7SignHashMultiple body = null);

        /// <summary>
        /// This method performs multiple Hash signature.
        /// </summary>
        /// <remarks>
        /// This method performs multiple Hash signature
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing the User Identity and the list of Signature Request (optional)</param>
        /// <returns>Task of ApiResponse (JsonSignReturnV2Multiple)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonSignReturnV2Multiple>> ResourceArubaSignServiceRestPkcs7signhashMultiplePOSTAsyncWithHttpInfo (JsonBodyRequestPkcs7SignHashMultiple body = null);
        /// <summary>
        /// Creates a PKCS7 Detached for Hash sended as document.
        /// </summary>
        /// <remarks>
        /// Creates a PKCS7 Detached for Hash sended as document.  They are not supported the following transportation type  &lt;ul&gt;  &lt;li&gt;DIRECTORYNAME&lt;/li&gt;  &lt;li&gt;FILENAME&lt;/li&gt;  &lt;/ul&gt;
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object that containing a signature request (optional)</param>
        /// <returns>Task of JsonSignReturnV2</returns>
        System.Threading.Tasks.Task<JsonSignReturnV2> ResourceArubaSignServiceRestPkcs7signhashPOSTAsync (JsonBodyRequestPkcs7SignHash body = null);

        /// <summary>
        /// Creates a PKCS7 Detached for Hash sended as document.
        /// </summary>
        /// <remarks>
        /// Creates a PKCS7 Detached for Hash sended as document.  They are not supported the following transportation type  &lt;ul&gt;  &lt;li&gt;DIRECTORYNAME&lt;/li&gt;  &lt;li&gt;FILENAME&lt;/li&gt;  &lt;/ul&gt;
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object that containing a signature request (optional)</param>
        /// <returns>Task of ApiResponse (JsonSignReturnV2)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonSignReturnV2>> ResourceArubaSignServiceRestPkcs7signhashPOSTAsyncWithHttpInfo (JsonBodyRequestPkcs7SignHash body = null);
        /// <summary>
        /// Retrieve credential from user.
        /// </summary>
        /// <remarks>
        /// Retrieve credential from user
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing the User Identity and the crendential type (optional)</param>
        /// <returns>Task of JsonRetriveCredentialReturn</returns>
        System.Threading.Tasks.Task<JsonRetriveCredentialReturn> ResourceArubaSignServiceRestRetriveCredentialPOSTAsync (JsonBodyRequestRetriveCredential body = null);

        /// <summary>
        /// Retrieve credential from user.
        /// </summary>
        /// <remarks>
        /// Retrieve credential from user
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing the User Identity and the crendential type (optional)</param>
        /// <returns>Task of ApiResponse (JsonRetriveCredentialReturn)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonRetriveCredentialReturn>> ResourceArubaSignServiceRestRetriveCredentialPOSTAsyncWithHttpInfo (JsonBodyRequestRetriveCredential body = null);
        /// <summary>
        /// Send OPT credentials to the users (SMS or ARUBACALL).
        /// </summary>
        /// <remarks>
        /// Send OPT credentials to the users (SMS or ARUBACALL)
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing the User Identity and the crendential type for which you&#39;re requesting the sending (optional)</param>
        /// <returns>Task of JsonArssReturn</returns>
        System.Threading.Tasks.Task<JsonArssReturn> ResourceArubaSignServiceRestSendCredentialPOSTAsync (JsonBodyRequestSendCredential body = null);

        /// <summary>
        /// Send OPT credentials to the users (SMS or ARUBACALL).
        /// </summary>
        /// <remarks>
        /// Send OPT credentials to the users (SMS or ARUBACALL)
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing the User Identity and the crendential type for which you&#39;re requesting the sending (optional)</param>
        /// <returns>Task of ApiResponse (JsonArssReturn)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonArssReturn>> ResourceArubaSignServiceRestSendCredentialPOSTAsyncWithHttpInfo (JsonBodyRequestSendCredential body = null);
        /// <summary>
        /// This method perform a Hash Signature (pkcs1 standard).
        /// </summary>
        /// <remarks>
        /// This method perform a Hash Signature (pkcs1 standard)
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object, it provides a Signature Request (optional)</param>
        /// <returns>Task of JsonSignHashReturn</returns>
        System.Threading.Tasks.Task<JsonSignHashReturn> ResourceArubaSignServiceRestSignhashPOSTAsync (JsonBodyRequestSignHash body = null);

        /// <summary>
        /// This method perform a Hash Signature (pkcs1 standard).
        /// </summary>
        /// <remarks>
        /// This method perform a Hash Signature (pkcs1 standard)
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object, it provides a Signature Request (optional)</param>
        /// <returns>Task of ApiResponse (JsonSignHashReturn)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonSignHashReturn>> ResourceArubaSignServiceRestSignhashPOSTAsyncWithHttpInfo (JsonBodyRequestSignHash body = null);
        /// <summary>
        /// This method test one otp.
        /// </summary>
        /// <remarks>
        /// This method test one otp
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing credential to test (optional)</param>
        /// <returns>Task of JsonGWReturn</returns>
        System.Threading.Tasks.Task<JsonGWReturn> ResourceArubaSignServiceRestTestOtpPOSTAsync (JsonBodyRequestTestOtp body = null);

        /// <summary>
        /// This method test one otp.
        /// </summary>
        /// <remarks>
        /// This method test one otp
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing credential to test (optional)</param>
        /// <returns>Task of ApiResponse (JsonGWReturn)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonGWReturn>> ResourceArubaSignServiceRestTestOtpPOSTAsyncWithHttpInfo (JsonBodyRequestTestOtp body = null);
        /// <summary>
        /// Generate a Time-Stamp Marking Request (TSD Format).
        /// </summary>
        /// <remarks>
        /// Generate a Time-Stamp Marking Request (TSD Format)
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object, it provides a Time-Stamp Marking Request (optional)</param>
        /// <returns>Task of JsonMarkReturn</returns>
        System.Threading.Tasks.Task<JsonMarkReturn> ResourceArubaSignServiceRestTsdPOSTAsync (JsonBodyRequestMarkReturn body = null);

        /// <summary>
        /// Generate a Time-Stamp Marking Request (TSD Format).
        /// </summary>
        /// <remarks>
        /// Generate a Time-Stamp Marking Request (TSD Format)
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object, it provides a Time-Stamp Marking Request (optional)</param>
        /// <returns>Task of ApiResponse (JsonMarkReturn)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonMarkReturn>> ResourceArubaSignServiceRestTsdPOSTAsyncWithHttpInfo (JsonBodyRequestMarkReturn body = null);
        /// <summary>
        /// Generate a Time-Stamp Marking Request (TSR Format).
        /// </summary>
        /// <remarks>
        /// Generate a Time-Stamp Marking Request (TSR Format)
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object, it provides a Time-Stamp Marking Request (optional)</param>
        /// <returns>Task of JsonMarkReturn</returns>
        System.Threading.Tasks.Task<JsonMarkReturn> ResourceArubaSignServiceRestTsrPOSTAsync (JsonBodyRequestMarkReturn body = null);

        /// <summary>
        /// Generate a Time-Stamp Marking Request (TSR Format).
        /// </summary>
        /// <remarks>
        /// Generate a Time-Stamp Marking Request (TSR Format)
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object, it provides a Time-Stamp Marking Request (optional)</param>
        /// <returns>Task of ApiResponse (JsonMarkReturn)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonMarkReturn>> ResourceArubaSignServiceRestTsrPOSTAsyncWithHttpInfo (JsonBodyRequestMarkReturn body = null);
        /// <summary>
        /// Method to autenticate credential.
        /// </summary>
        /// <remarks>
        /// Method to autenticate credential
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing the User Identity for which you&#39;re requesting the verify (optional)</param>
        /// <returns>Task of JsonArssReturn</returns>
        System.Threading.Tasks.Task<JsonArssReturn> ResourceArubaSignServiceRestVerifyOtpPOSTAsync (JsonBodyRequestVerifyOtp body = null);

        /// <summary>
        /// Method to autenticate credential.
        /// </summary>
        /// <remarks>
        /// Method to autenticate credential
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing the User Identity for which you&#39;re requesting the verify (optional)</param>
        /// <returns>Task of ApiResponse (JsonArssReturn)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonArssReturn>> ResourceArubaSignServiceRestVerifyOtpPOSTAsyncWithHttpInfo (JsonBodyRequestVerifyOtp body = null);
        /// <summary>
        /// This method verify a document.
        /// </summary>
        /// <remarks>
        /// This method verify a document
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object that containing a verify request (optional)</param>
        /// <returns>Task of JsonVerifyReturn</returns>
        System.Threading.Tasks.Task<JsonVerifyReturn> ResourceArubaSignServiceRestVerifyPOSTAsync (JsonBodyRequestVerify body = null);

        /// <summary>
        /// This method verify a document.
        /// </summary>
        /// <remarks>
        /// This method verify a document
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object that containing a verify request (optional)</param>
        /// <returns>Task of ApiResponse (JsonVerifyReturn)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonVerifyReturn>> ResourceArubaSignServiceRestVerifyPOSTAsyncWithHttpInfo (JsonBodyRequestVerify body = null);
        /// <summary>
        /// This method performs multiple XML signatures.
        /// </summary>
        /// <remarks>
        /// This method performs multiple XML signatures
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing the User Identity, the list of Signature Request and other parameters (optional)</param>
        /// <returns>Task of JsonSignReturnV2Multiple</returns>
        System.Threading.Tasks.Task<JsonSignReturnV2Multiple> ResourceArubaSignServiceRestXmlsignatureMultiplePOSTAsync (JsonBodyRequestXmlSignatureMultiple body = null);

        /// <summary>
        /// This method performs multiple XML signatures.
        /// </summary>
        /// <remarks>
        /// This method performs multiple XML signatures
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing the User Identity, the list of Signature Request and other parameters (optional)</param>
        /// <returns>Task of ApiResponse (JsonSignReturnV2Multiple)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonSignReturnV2Multiple>> ResourceArubaSignServiceRestXmlsignatureMultiplePOSTAsyncWithHttpInfo (JsonBodyRequestXmlSignatureMultiple body = null);
        /// <summary>
        /// XML Signature (XAdES format)  This method is not complete and it should not be used.
        /// </summary>
        /// <remarks>
        /// XML Signature (XAdES format)  This method is not complete and it should not be used
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object, it provides a Signature Request (optional)</param>
        /// <returns>Task of JsonSignReturnV2</returns>
        System.Threading.Tasks.Task<JsonSignReturnV2> ResourceArubaSignServiceRestXmlsignaturePOSTAsync (JsonBodyRequestXmlSignature body = null);

        /// <summary>
        /// XML Signature (XAdES format)  This method is not complete and it should not be used.
        /// </summary>
        /// <remarks>
        /// XML Signature (XAdES format)  This method is not complete and it should not be used
        /// </remarks>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object, it provides a Signature Request (optional)</param>
        /// <returns>Task of ApiResponse (JsonSignReturnV2)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonSignReturnV2>> ResourceArubaSignServiceRestXmlsignaturePOSTAsyncWithHttpInfo (JsonBodyRequestXmlSignature body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ArubaSignServiceApi : IArubaSignServiceApi
    {
        private ArubaSignServiceRest.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ArubaSignServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ArubaSignServiceApi(String basePath)
        {
            this.Configuration = new ArubaSignServiceRest.Client.Configuration { BasePath = basePath };

            ExceptionFactory = ArubaSignServiceRest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ArubaSignServiceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ArubaSignServiceApi(ArubaSignServiceRest.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ArubaSignServiceRest.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ArubaSignServiceRest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ArubaSignServiceRest.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ArubaSignServiceRest.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This method add a joint signature to a document (a document already signed). This method add a joint signature to a document (a document already signed).&lt;br/&gt;  The parameter \&quot;detached\&quot; must not be valorized.
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object, it provides a Signature Request for a document already signed (optional)</param>
        /// <returns>JsonSignReturnV2</returns>
        public JsonSignReturnV2 ResourceArubaSignServiceRestAddpkcs7signPOST (JsonBodyRequestAddPkcs7Sign body = null)
        {
             ApiResponse<JsonSignReturnV2> localVarResponse = ResourceArubaSignServiceRestAddpkcs7signPOSTWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This method add a joint signature to a document (a document already signed). This method add a joint signature to a document (a document already signed).&lt;br/&gt;  The parameter \&quot;detached\&quot; must not be valorized.
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object, it provides a Signature Request for a document already signed (optional)</param>
        /// <returns>ApiResponse of JsonSignReturnV2</returns>
        public ApiResponse< JsonSignReturnV2 > ResourceArubaSignServiceRestAddpkcs7signPOSTWithHttpInfo (JsonBodyRequestAddPkcs7Sign body = null)
        {

            var localVarPath = "/ArubaSignService/addpkcs7sign";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResourceArubaSignServiceRestAddpkcs7signPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonSignReturnV2>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JsonSignReturnV2) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonSignReturnV2)));
        }

        /// <summary>
        /// This method add a joint signature to a document (a document already signed). This method add a joint signature to a document (a document already signed).&lt;br/&gt;  The parameter \&quot;detached\&quot; must not be valorized.
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object, it provides a Signature Request for a document already signed (optional)</param>
        /// <returns>Task of JsonSignReturnV2</returns>
        public async System.Threading.Tasks.Task<JsonSignReturnV2> ResourceArubaSignServiceRestAddpkcs7signPOSTAsync (JsonBodyRequestAddPkcs7Sign body = null)
        {
             ApiResponse<JsonSignReturnV2> localVarResponse = await ResourceArubaSignServiceRestAddpkcs7signPOSTAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This method add a joint signature to a document (a document already signed). This method add a joint signature to a document (a document already signed).&lt;br/&gt;  The parameter \&quot;detached\&quot; must not be valorized.
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object, it provides a Signature Request for a document already signed (optional)</param>
        /// <returns>Task of ApiResponse (JsonSignReturnV2)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JsonSignReturnV2>> ResourceArubaSignServiceRestAddpkcs7signPOSTAsyncWithHttpInfo (JsonBodyRequestAddPkcs7Sign body = null)
        {

            var localVarPath = "/ArubaSignService/addpkcs7sign";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResourceArubaSignServiceRestAddpkcs7signPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonSignReturnV2>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JsonSignReturnV2) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonSignReturnV2)));
        }

        /// <summary>
        /// This method returns the authentication methods of the user. This method returns the authentication methods of the user
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing the User Identity (optional)</param>
        /// <returns>JsonAuthMethodsReturn</returns>
        public JsonAuthMethodsReturn ResourceArubaSignServiceRestAuthMethodsPOST (JsonBodyRequestAuthMethod body = null)
        {
             ApiResponse<JsonAuthMethodsReturn> localVarResponse = ResourceArubaSignServiceRestAuthMethodsPOSTWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This method returns the authentication methods of the user. This method returns the authentication methods of the user
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing the User Identity (optional)</param>
        /// <returns>ApiResponse of JsonAuthMethodsReturn</returns>
        public ApiResponse< JsonAuthMethodsReturn > ResourceArubaSignServiceRestAuthMethodsPOSTWithHttpInfo (JsonBodyRequestAuthMethod body = null)
        {

            var localVarPath = "/ArubaSignService/authMethods";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResourceArubaSignServiceRestAuthMethodsPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonAuthMethodsReturn>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JsonAuthMethodsReturn) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonAuthMethodsReturn)));
        }

        /// <summary>
        /// This method returns the authentication methods of the user. This method returns the authentication methods of the user
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing the User Identity (optional)</param>
        /// <returns>Task of JsonAuthMethodsReturn</returns>
        public async System.Threading.Tasks.Task<JsonAuthMethodsReturn> ResourceArubaSignServiceRestAuthMethodsPOSTAsync (JsonBodyRequestAuthMethod body = null)
        {
             ApiResponse<JsonAuthMethodsReturn> localVarResponse = await ResourceArubaSignServiceRestAuthMethodsPOSTAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This method returns the authentication methods of the user. This method returns the authentication methods of the user
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing the User Identity (optional)</param>
        /// <returns>Task of ApiResponse (JsonAuthMethodsReturn)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JsonAuthMethodsReturn>> ResourceArubaSignServiceRestAuthMethodsPOSTAsyncWithHttpInfo (JsonBodyRequestAuthMethod body = null)
        {

            var localVarPath = "/ArubaSignService/authMethods";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResourceArubaSignServiceRestAuthMethodsPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonAuthMethodsReturn>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JsonAuthMethodsReturn) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonAuthMethodsReturn)));
        }

        /// <summary>
        /// This Method closes and invalidates a session. This Method closes and invalidates a session.  It&#39;s not possible generate signatures with a closed session.
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object that containing signature credentials (optional)</param>
        /// <returns>string</returns>
        public string ResourceArubaSignServiceRestClosesessionPOST (JsonBodyRequestCloseSession body = null)
        {
             ApiResponse<string> localVarResponse = ResourceArubaSignServiceRestClosesessionPOSTWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This Method closes and invalidates a session. This Method closes and invalidates a session.  It&#39;s not possible generate signatures with a closed session.
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object that containing signature credentials (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ResourceArubaSignServiceRestClosesessionPOSTWithHttpInfo (JsonBodyRequestCloseSession body = null)
        {

            var localVarPath = "/ArubaSignService/closesession";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResourceArubaSignServiceRestClosesessionPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// This Method closes and invalidates a session. This Method closes and invalidates a session.  It&#39;s not possible generate signatures with a closed session.
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object that containing signature credentials (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ResourceArubaSignServiceRestClosesessionPOSTAsync (JsonBodyRequestCloseSession body = null)
        {
             ApiResponse<string> localVarResponse = await ResourceArubaSignServiceRestClosesessionPOSTAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This Method closes and invalidates a session. This Method closes and invalidates a session.  It&#39;s not possible generate signatures with a closed session.
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object that containing signature credentials (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ResourceArubaSignServiceRestClosesessionPOSTAsyncWithHttpInfo (JsonBodyRequestCloseSession body = null)
        {

            var localVarPath = "/ArubaSignService/closesession";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResourceArubaSignServiceRestClosesessionPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// This method test one otp. This method test one otp
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing credential to test (optional)</param>
        /// <returns>JsonCredentialListReturn</returns>
        public JsonCredentialListReturn ResourceArubaSignServiceRestCredentialsQueryPOST (JsonBodyRequestCredentialsQuery body = null)
        {
             ApiResponse<JsonCredentialListReturn> localVarResponse = ResourceArubaSignServiceRestCredentialsQueryPOSTWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This method test one otp. This method test one otp
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing credential to test (optional)</param>
        /// <returns>ApiResponse of JsonCredentialListReturn</returns>
        public ApiResponse< JsonCredentialListReturn > ResourceArubaSignServiceRestCredentialsQueryPOSTWithHttpInfo (JsonBodyRequestCredentialsQuery body = null)
        {

            var localVarPath = "/ArubaSignService/credentials_query";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResourceArubaSignServiceRestCredentialsQueryPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonCredentialListReturn>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JsonCredentialListReturn) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonCredentialListReturn)));
        }

        /// <summary>
        /// This method test one otp. This method test one otp
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing credential to test (optional)</param>
        /// <returns>Task of JsonCredentialListReturn</returns>
        public async System.Threading.Tasks.Task<JsonCredentialListReturn> ResourceArubaSignServiceRestCredentialsQueryPOSTAsync (JsonBodyRequestCredentialsQuery body = null)
        {
             ApiResponse<JsonCredentialListReturn> localVarResponse = await ResourceArubaSignServiceRestCredentialsQueryPOSTAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This method test one otp. This method test one otp
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing credential to test (optional)</param>
        /// <returns>Task of ApiResponse (JsonCredentialListReturn)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JsonCredentialListReturn>> ResourceArubaSignServiceRestCredentialsQueryPOSTAsyncWithHttpInfo (JsonBodyRequestCredentialsQuery body = null)
        {

            var localVarPath = "/ArubaSignService/credentials_query";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResourceArubaSignServiceRestCredentialsQueryPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonCredentialListReturn>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JsonCredentialListReturn) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonCredentialListReturn)));
        }

        /// <summary>
        /// This method encrypts a file. This method encrypts a file
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing an Encryption Request (optional)</param>
        /// <returns>JsonEncryptedEnvelopReturn</returns>
        public JsonEncryptedEnvelopReturn ResourceArubaSignServiceRestEncryptedEnvelopePOST (JsonBodyRequestEncryptedEnvelope body = null)
        {
             ApiResponse<JsonEncryptedEnvelopReturn> localVarResponse = ResourceArubaSignServiceRestEncryptedEnvelopePOSTWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This method encrypts a file. This method encrypts a file
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing an Encryption Request (optional)</param>
        /// <returns>ApiResponse of JsonEncryptedEnvelopReturn</returns>
        public ApiResponse< JsonEncryptedEnvelopReturn > ResourceArubaSignServiceRestEncryptedEnvelopePOSTWithHttpInfo (JsonBodyRequestEncryptedEnvelope body = null)
        {

            var localVarPath = "/ArubaSignService/encryptedEnvelope";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResourceArubaSignServiceRestEncryptedEnvelopePOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonEncryptedEnvelopReturn>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JsonEncryptedEnvelopReturn) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonEncryptedEnvelopReturn)));
        }

        /// <summary>
        /// This method encrypts a file. This method encrypts a file
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing an Encryption Request (optional)</param>
        /// <returns>Task of JsonEncryptedEnvelopReturn</returns>
        public async System.Threading.Tasks.Task<JsonEncryptedEnvelopReturn> ResourceArubaSignServiceRestEncryptedEnvelopePOSTAsync (JsonBodyRequestEncryptedEnvelope body = null)
        {
             ApiResponse<JsonEncryptedEnvelopReturn> localVarResponse = await ResourceArubaSignServiceRestEncryptedEnvelopePOSTAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This method encrypts a file. This method encrypts a file
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing an Encryption Request (optional)</param>
        /// <returns>Task of ApiResponse (JsonEncryptedEnvelopReturn)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JsonEncryptedEnvelopReturn>> ResourceArubaSignServiceRestEncryptedEnvelopePOSTAsyncWithHttpInfo (JsonBodyRequestEncryptedEnvelope body = null)
        {

            var localVarPath = "/ArubaSignService/encryptedEnvelope";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResourceArubaSignServiceRestEncryptedEnvelopePOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonEncryptedEnvelopReturn>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JsonEncryptedEnvelopReturn) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonEncryptedEnvelopReturn)));
        }

        /// <summary>
        /// Return current Server Version. Return current Server Version
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>string</returns>
        public string ResourceArubaSignServiceRestGetVersionPOST ()
        {
             ApiResponse<string> localVarResponse = ResourceArubaSignServiceRestGetVersionPOSTWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Return current Server Version. Return current Server Version
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ResourceArubaSignServiceRestGetVersionPOSTWithHttpInfo ()
        {

            var localVarPath = "/ArubaSignService/getVersion";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResourceArubaSignServiceRestGetVersionPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Return current Server Version. Return current Server Version
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ResourceArubaSignServiceRestGetVersionPOSTAsync ()
        {
             ApiResponse<string> localVarResponse = await ResourceArubaSignServiceRestGetVersionPOSTAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Return current Server Version. Return current Server Version
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ResourceArubaSignServiceRestGetVersionPOSTAsyncWithHttpInfo ()
        {

            var localVarPath = "/ArubaSignService/getVersion";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResourceArubaSignServiceRestGetVersionPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// This method returns a list of certificates associated to user (by admin credential). This method returns a list of certificates associated to user (by admin credential)
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing the User Identity, the domain and the username for which you&#39;re requesting the list of certificates (optional)</param>
        /// <returns>JsonUserCertListAuth</returns>
        public JsonUserCertListAuth ResourceArubaSignServiceRestListCertAuthPOST (JsonBodyRequestListCertAuth body = null)
        {
             ApiResponse<JsonUserCertListAuth> localVarResponse = ResourceArubaSignServiceRestListCertAuthPOSTWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This method returns a list of certificates associated to user (by admin credential). This method returns a list of certificates associated to user (by admin credential)
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing the User Identity, the domain and the username for which you&#39;re requesting the list of certificates (optional)</param>
        /// <returns>ApiResponse of JsonUserCertListAuth</returns>
        public ApiResponse< JsonUserCertListAuth > ResourceArubaSignServiceRestListCertAuthPOSTWithHttpInfo (JsonBodyRequestListCertAuth body = null)
        {

            var localVarPath = "/ArubaSignService/listCertAuth";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResourceArubaSignServiceRestListCertAuthPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonUserCertListAuth>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JsonUserCertListAuth) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonUserCertListAuth)));
        }

        /// <summary>
        /// This method returns a list of certificates associated to user (by admin credential). This method returns a list of certificates associated to user (by admin credential)
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing the User Identity, the domain and the username for which you&#39;re requesting the list of certificates (optional)</param>
        /// <returns>Task of JsonUserCertListAuth</returns>
        public async System.Threading.Tasks.Task<JsonUserCertListAuth> ResourceArubaSignServiceRestListCertAuthPOSTAsync (JsonBodyRequestListCertAuth body = null)
        {
             ApiResponse<JsonUserCertListAuth> localVarResponse = await ResourceArubaSignServiceRestListCertAuthPOSTAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This method returns a list of certificates associated to user (by admin credential). This method returns a list of certificates associated to user (by admin credential)
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing the User Identity, the domain and the username for which you&#39;re requesting the list of certificates (optional)</param>
        /// <returns>Task of ApiResponse (JsonUserCertListAuth)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JsonUserCertListAuth>> ResourceArubaSignServiceRestListCertAuthPOSTAsyncWithHttpInfo (JsonBodyRequestListCertAuth body = null)
        {

            var localVarPath = "/ArubaSignService/listCertAuth";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResourceArubaSignServiceRestListCertAuthPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonUserCertListAuth>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JsonUserCertListAuth) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonUserCertListAuth)));
        }

        /// <summary>
        /// This method returns a list of certificates associated to user. This method returns a list of certificates associated to user
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing the User Identity for which you&#39;re requesting the list of certificates (optional)</param>
        /// <returns>JsonUserCertList</returns>
        public JsonUserCertList ResourceArubaSignServiceRestListCertPOST (JsonBodyRequestListCert body = null)
        {
             ApiResponse<JsonUserCertList> localVarResponse = ResourceArubaSignServiceRestListCertPOSTWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This method returns a list of certificates associated to user. This method returns a list of certificates associated to user
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing the User Identity for which you&#39;re requesting the list of certificates (optional)</param>
        /// <returns>ApiResponse of JsonUserCertList</returns>
        public ApiResponse< JsonUserCertList > ResourceArubaSignServiceRestListCertPOSTWithHttpInfo (JsonBodyRequestListCert body = null)
        {

            var localVarPath = "/ArubaSignService/listCert";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResourceArubaSignServiceRestListCertPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonUserCertList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JsonUserCertList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonUserCertList)));
        }

        /// <summary>
        /// This method returns a list of certificates associated to user. This method returns a list of certificates associated to user
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing the User Identity for which you&#39;re requesting the list of certificates (optional)</param>
        /// <returns>Task of JsonUserCertList</returns>
        public async System.Threading.Tasks.Task<JsonUserCertList> ResourceArubaSignServiceRestListCertPOSTAsync (JsonBodyRequestListCert body = null)
        {
             ApiResponse<JsonUserCertList> localVarResponse = await ResourceArubaSignServiceRestListCertPOSTAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This method returns a list of certificates associated to user. This method returns a list of certificates associated to user
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing the User Identity for which you&#39;re requesting the list of certificates (optional)</param>
        /// <returns>Task of ApiResponse (JsonUserCertList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JsonUserCertList>> ResourceArubaSignServiceRestListCertPOSTAsyncWithHttpInfo (JsonBodyRequestListCert body = null)
        {

            var localVarPath = "/ArubaSignService/listCert";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResourceArubaSignServiceRestListCertPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonUserCertList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JsonUserCertList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonUserCertList)));
        }

        /// <summary>
        /// This method returns the list of signature active processes. This method returns the list of signature active processes
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing the User Identity for which you&#39;re requesting the process list (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> ResourceArubaSignServiceRestListprocessPOST (JsonBodyRequestListProcess body = null)
        {
             ApiResponse<List<string>> localVarResponse = ResourceArubaSignServiceRestListprocessPOSTWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This method returns the list of signature active processes. This method returns the list of signature active processes
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing the User Identity for which you&#39;re requesting the process list (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ApiResponse< List<string> > ResourceArubaSignServiceRestListprocessPOSTWithHttpInfo (JsonBodyRequestListProcess body = null)
        {

            var localVarPath = "/ArubaSignService/listprocess";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResourceArubaSignServiceRestListprocessPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// This method returns the list of signature active processes. This method returns the list of signature active processes
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing the User Identity for which you&#39;re requesting the process list (optional)</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> ResourceArubaSignServiceRestListprocessPOSTAsync (JsonBodyRequestListProcess body = null)
        {
             ApiResponse<List<string>> localVarResponse = await ResourceArubaSignServiceRestListprocessPOSTAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This method returns the list of signature active processes. This method returns the list of signature active processes
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing the User Identity for which you&#39;re requesting the process list (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<string>>> ResourceArubaSignServiceRestListprocessPOSTAsyncWithHttpInfo (JsonBodyRequestListProcess body = null)
        {

            var localVarPath = "/ArubaSignService/listprocess";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResourceArubaSignServiceRestListprocessPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// Generate a Time-Stamp Marking Request (M7M Format). Generate a Time-Stamp Marking Request (M7M Format)
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object, it provides a Time-Stamp Marking Request (optional)</param>
        /// <returns>JsonMarkReturn</returns>
        public JsonMarkReturn ResourceArubaSignServiceRestM7mPOST (JsonBodyRequestMarkReturn body = null)
        {
             ApiResponse<JsonMarkReturn> localVarResponse = ResourceArubaSignServiceRestM7mPOSTWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Generate a Time-Stamp Marking Request (M7M Format). Generate a Time-Stamp Marking Request (M7M Format)
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object, it provides a Time-Stamp Marking Request (optional)</param>
        /// <returns>ApiResponse of JsonMarkReturn</returns>
        public ApiResponse< JsonMarkReturn > ResourceArubaSignServiceRestM7mPOSTWithHttpInfo (JsonBodyRequestMarkReturn body = null)
        {

            var localVarPath = "/ArubaSignService/m7m";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResourceArubaSignServiceRestM7mPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonMarkReturn>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JsonMarkReturn) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonMarkReturn)));
        }

        /// <summary>
        /// Generate a Time-Stamp Marking Request (M7M Format). Generate a Time-Stamp Marking Request (M7M Format)
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object, it provides a Time-Stamp Marking Request (optional)</param>
        /// <returns>Task of JsonMarkReturn</returns>
        public async System.Threading.Tasks.Task<JsonMarkReturn> ResourceArubaSignServiceRestM7mPOSTAsync (JsonBodyRequestMarkReturn body = null)
        {
             ApiResponse<JsonMarkReturn> localVarResponse = await ResourceArubaSignServiceRestM7mPOSTAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Generate a Time-Stamp Marking Request (M7M Format). Generate a Time-Stamp Marking Request (M7M Format)
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object, it provides a Time-Stamp Marking Request (optional)</param>
        /// <returns>Task of ApiResponse (JsonMarkReturn)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JsonMarkReturn>> ResourceArubaSignServiceRestM7mPOSTAsyncWithHttpInfo (JsonBodyRequestMarkReturn body = null)
        {

            var localVarPath = "/ArubaSignService/m7m";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResourceArubaSignServiceRestM7mPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonMarkReturn>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JsonMarkReturn) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonMarkReturn)));
        }

        /// <summary>
        /// Open a session of multiple signature. Open a session of multiple signature.  If a signature request contains a session it can generate signatures without pin
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object that containing signature credentials (optional)</param>
        /// <returns>string</returns>
        public string ResourceArubaSignServiceRestOpensessionPOST (JsonBodyRequestOpenSession body = null)
        {
             ApiResponse<string> localVarResponse = ResourceArubaSignServiceRestOpensessionPOSTWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Open a session of multiple signature. Open a session of multiple signature.  If a signature request contains a session it can generate signatures without pin
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object that containing signature credentials (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ResourceArubaSignServiceRestOpensessionPOSTWithHttpInfo (JsonBodyRequestOpenSession body = null)
        {

            var localVarPath = "/ArubaSignService/opensession";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResourceArubaSignServiceRestOpensessionPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Open a session of multiple signature. Open a session of multiple signature.  If a signature request contains a session it can generate signatures without pin
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object that containing signature credentials (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ResourceArubaSignServiceRestOpensessionPOSTAsync (JsonBodyRequestOpenSession body = null)
        {
             ApiResponse<string> localVarResponse = await ResourceArubaSignServiceRestOpensessionPOSTAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Open a session of multiple signature. Open a session of multiple signature.  If a signature request contains a session it can generate signatures without pin
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object that containing signature credentials (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ResourceArubaSignServiceRestOpensessionPOSTAsyncWithHttpInfo (JsonBodyRequestOpenSession body = null)
        {

            var localVarPath = "/ArubaSignService/opensession";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResourceArubaSignServiceRestOpensessionPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// This method perform a PDF Signature of a PDF file (PAdES standard). This method perform a PDF Signature of a PDF file (PAdES standard)
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object, it provides a Sign Request for a PDF document (optional)</param>
        /// <returns>JsonSignReturn</returns>
        public JsonSignReturn ResourceArubaSignServiceRestPdfsignaturePOST (JsonBodyRequestPdfSignature body = null)
        {
             ApiResponse<JsonSignReturn> localVarResponse = ResourceArubaSignServiceRestPdfsignaturePOSTWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This method perform a PDF Signature of a PDF file (PAdES standard). This method perform a PDF Signature of a PDF file (PAdES standard)
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object, it provides a Sign Request for a PDF document (optional)</param>
        /// <returns>ApiResponse of JsonSignReturn</returns>
        public ApiResponse< JsonSignReturn > ResourceArubaSignServiceRestPdfsignaturePOSTWithHttpInfo (JsonBodyRequestPdfSignature body = null)
        {

            var localVarPath = "/ArubaSignService/pdfsignature";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResourceArubaSignServiceRestPdfsignaturePOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonSignReturn>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JsonSignReturn) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonSignReturn)));
        }

        /// <summary>
        /// This method perform a PDF Signature of a PDF file (PAdES standard). This method perform a PDF Signature of a PDF file (PAdES standard)
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object, it provides a Sign Request for a PDF document (optional)</param>
        /// <returns>Task of JsonSignReturn</returns>
        public async System.Threading.Tasks.Task<JsonSignReturn> ResourceArubaSignServiceRestPdfsignaturePOSTAsync (JsonBodyRequestPdfSignature body = null)
        {
             ApiResponse<JsonSignReturn> localVarResponse = await ResourceArubaSignServiceRestPdfsignaturePOSTAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This method perform a PDF Signature of a PDF file (PAdES standard). This method perform a PDF Signature of a PDF file (PAdES standard)
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object, it provides a Sign Request for a PDF document (optional)</param>
        /// <returns>Task of ApiResponse (JsonSignReturn)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JsonSignReturn>> ResourceArubaSignServiceRestPdfsignaturePOSTAsyncWithHttpInfo (JsonBodyRequestPdfSignature body = null)
        {

            var localVarPath = "/ArubaSignService/pdfsignature";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResourceArubaSignServiceRestPdfsignaturePOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonSignReturn>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JsonSignReturn) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonSignReturn)));
        }

        /// <summary>
        /// This method performs multiple PDF signatures. This method performs multiple PDF signatures
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing the User Identity, the list of Signature Request and other parameters (optional)</param>
        /// <returns>JsonSignReturnV2Multiple</returns>
        public JsonSignReturnV2Multiple ResourceArubaSignServiceRestPdfsignatureV2MultiplePOST (JsonBodyRequestPdfSignatureV2Multiple body = null)
        {
             ApiResponse<JsonSignReturnV2Multiple> localVarResponse = ResourceArubaSignServiceRestPdfsignatureV2MultiplePOSTWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This method performs multiple PDF signatures. This method performs multiple PDF signatures
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing the User Identity, the list of Signature Request and other parameters (optional)</param>
        /// <returns>ApiResponse of JsonSignReturnV2Multiple</returns>
        public ApiResponse< JsonSignReturnV2Multiple > ResourceArubaSignServiceRestPdfsignatureV2MultiplePOSTWithHttpInfo (JsonBodyRequestPdfSignatureV2Multiple body = null)
        {

            var localVarPath = "/ArubaSignService/pdfsignatureV2_multiple";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResourceArubaSignServiceRestPdfsignatureV2MultiplePOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonSignReturnV2Multiple>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JsonSignReturnV2Multiple) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonSignReturnV2Multiple)));
        }

        /// <summary>
        /// This method performs multiple PDF signatures. This method performs multiple PDF signatures
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing the User Identity, the list of Signature Request and other parameters (optional)</param>
        /// <returns>Task of JsonSignReturnV2Multiple</returns>
        public async System.Threading.Tasks.Task<JsonSignReturnV2Multiple> ResourceArubaSignServiceRestPdfsignatureV2MultiplePOSTAsync (JsonBodyRequestPdfSignatureV2Multiple body = null)
        {
             ApiResponse<JsonSignReturnV2Multiple> localVarResponse = await ResourceArubaSignServiceRestPdfsignatureV2MultiplePOSTAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This method performs multiple PDF signatures. This method performs multiple PDF signatures
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing the User Identity, the list of Signature Request and other parameters (optional)</param>
        /// <returns>Task of ApiResponse (JsonSignReturnV2Multiple)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JsonSignReturnV2Multiple>> ResourceArubaSignServiceRestPdfsignatureV2MultiplePOSTAsyncWithHttpInfo (JsonBodyRequestPdfSignatureV2Multiple body = null)
        {

            var localVarPath = "/ArubaSignService/pdfsignatureV2_multiple";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResourceArubaSignServiceRestPdfsignatureV2MultiplePOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonSignReturnV2Multiple>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JsonSignReturnV2Multiple) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonSignReturnV2Multiple)));
        }

        /// <summary>
        /// This method perform a PDF Signature of a PDF file (PAdES standard)  In input accepts an entire document depending of type of trasport used. This method perform a PDF Signature of a PDF file (PAdES standard)  In input accepts an entire document depending of type of trasport used
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object, it provides a Sign Request for a PDF (PAdES standard) (optional)</param>
        /// <returns>JsonSignReturnV2</returns>
        public JsonSignReturnV2 ResourceArubaSignServiceRestPdfsignatureV2POST (JsonBodyRequestPdfSignatureV2 body = null)
        {
             ApiResponse<JsonSignReturnV2> localVarResponse = ResourceArubaSignServiceRestPdfsignatureV2POSTWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This method perform a PDF Signature of a PDF file (PAdES standard)  In input accepts an entire document depending of type of trasport used. This method perform a PDF Signature of a PDF file (PAdES standard)  In input accepts an entire document depending of type of trasport used
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object, it provides a Sign Request for a PDF (PAdES standard) (optional)</param>
        /// <returns>ApiResponse of JsonSignReturnV2</returns>
        public ApiResponse< JsonSignReturnV2 > ResourceArubaSignServiceRestPdfsignatureV2POSTWithHttpInfo (JsonBodyRequestPdfSignatureV2 body = null)
        {

            var localVarPath = "/ArubaSignService/pdfsignatureV2";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResourceArubaSignServiceRestPdfsignatureV2POST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonSignReturnV2>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JsonSignReturnV2) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonSignReturnV2)));
        }

        /// <summary>
        /// This method perform a PDF Signature of a PDF file (PAdES standard)  In input accepts an entire document depending of type of trasport used. This method perform a PDF Signature of a PDF file (PAdES standard)  In input accepts an entire document depending of type of trasport used
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object, it provides a Sign Request for a PDF (PAdES standard) (optional)</param>
        /// <returns>Task of JsonSignReturnV2</returns>
        public async System.Threading.Tasks.Task<JsonSignReturnV2> ResourceArubaSignServiceRestPdfsignatureV2POSTAsync (JsonBodyRequestPdfSignatureV2 body = null)
        {
             ApiResponse<JsonSignReturnV2> localVarResponse = await ResourceArubaSignServiceRestPdfsignatureV2POSTAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This method perform a PDF Signature of a PDF file (PAdES standard)  In input accepts an entire document depending of type of trasport used. This method perform a PDF Signature of a PDF file (PAdES standard)  In input accepts an entire document depending of type of trasport used
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object, it provides a Sign Request for a PDF (PAdES standard) (optional)</param>
        /// <returns>Task of ApiResponse (JsonSignReturnV2)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JsonSignReturnV2>> ResourceArubaSignServiceRestPdfsignatureV2POSTAsyncWithHttpInfo (JsonBodyRequestPdfSignatureV2 body = null)
        {

            var localVarPath = "/ArubaSignService/pdfsignatureV2";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResourceArubaSignServiceRestPdfsignatureV2POST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonSignReturnV2>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JsonSignReturnV2) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonSignReturnV2)));
        }

        /// <summary>
        /// Ping Server. Ping Server
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>string</returns>
        public string ResourceArubaSignServiceRestPingGET ()
        {
             ApiResponse<string> localVarResponse = ResourceArubaSignServiceRestPingGETWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Ping Server. Ping Server
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ResourceArubaSignServiceRestPingGETWithHttpInfo ()
        {

            var localVarPath = "/ArubaSignService/ping";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResourceArubaSignServiceRestPingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Ping Server. Ping Server
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ResourceArubaSignServiceRestPingGETAsync ()
        {
             ApiResponse<string> localVarResponse = await ResourceArubaSignServiceRestPingGETAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Ping Server. Ping Server
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ResourceArubaSignServiceRestPingGETAsyncWithHttpInfo ()
        {

            var localVarPath = "/ArubaSignService/ping";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResourceArubaSignServiceRestPingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Creates a signature from a file in the CADES standard. Creates a signature from a file in the CADES standard
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object, it provides a Signature Request (optional)</param>
        /// <returns>JsonSignReturn</returns>
        public JsonSignReturn ResourceArubaSignServiceRestPkcs7signPOST (JsonBodyRequestPkcs7Sign body = null)
        {
             ApiResponse<JsonSignReturn> localVarResponse = ResourceArubaSignServiceRestPkcs7signPOSTWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a signature from a file in the CADES standard. Creates a signature from a file in the CADES standard
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object, it provides a Signature Request (optional)</param>
        /// <returns>ApiResponse of JsonSignReturn</returns>
        public ApiResponse< JsonSignReturn > ResourceArubaSignServiceRestPkcs7signPOSTWithHttpInfo (JsonBodyRequestPkcs7Sign body = null)
        {

            var localVarPath = "/ArubaSignService/pkcs7sign";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResourceArubaSignServiceRestPkcs7signPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonSignReturn>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JsonSignReturn) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonSignReturn)));
        }

        /// <summary>
        /// Creates a signature from a file in the CADES standard. Creates a signature from a file in the CADES standard
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object, it provides a Signature Request (optional)</param>
        /// <returns>Task of JsonSignReturn</returns>
        public async System.Threading.Tasks.Task<JsonSignReturn> ResourceArubaSignServiceRestPkcs7signPOSTAsync (JsonBodyRequestPkcs7Sign body = null)
        {
             ApiResponse<JsonSignReturn> localVarResponse = await ResourceArubaSignServiceRestPkcs7signPOSTAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a signature from a file in the CADES standard. Creates a signature from a file in the CADES standard
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object, it provides a Signature Request (optional)</param>
        /// <returns>Task of ApiResponse (JsonSignReturn)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JsonSignReturn>> ResourceArubaSignServiceRestPkcs7signPOSTAsyncWithHttpInfo (JsonBodyRequestPkcs7Sign body = null)
        {

            var localVarPath = "/ArubaSignService/pkcs7sign";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResourceArubaSignServiceRestPkcs7signPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonSignReturn>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JsonSignReturn) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonSignReturn)));
        }

        /// <summary>
        /// This method performs multiple signature in the CAdES standard to a generic file. This method performs multiple signature in the CAdES standard to a generic file
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing the User Identity and the list of Signature Request (optional)</param>
        /// <returns>JsonSignReturnV2Multiple</returns>
        public JsonSignReturnV2Multiple ResourceArubaSignServiceRestPkcs7signV2MultiplePOST (JsonBodyRequestPkcs7sSignV2Multiple body = null)
        {
             ApiResponse<JsonSignReturnV2Multiple> localVarResponse = ResourceArubaSignServiceRestPkcs7signV2MultiplePOSTWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This method performs multiple signature in the CAdES standard to a generic file. This method performs multiple signature in the CAdES standard to a generic file
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing the User Identity and the list of Signature Request (optional)</param>
        /// <returns>ApiResponse of JsonSignReturnV2Multiple</returns>
        public ApiResponse< JsonSignReturnV2Multiple > ResourceArubaSignServiceRestPkcs7signV2MultiplePOSTWithHttpInfo (JsonBodyRequestPkcs7sSignV2Multiple body = null)
        {

            var localVarPath = "/ArubaSignService/pkcs7signV2_multiple";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResourceArubaSignServiceRestPkcs7signV2MultiplePOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonSignReturnV2Multiple>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JsonSignReturnV2Multiple) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonSignReturnV2Multiple)));
        }

        /// <summary>
        /// This method performs multiple signature in the CAdES standard to a generic file. This method performs multiple signature in the CAdES standard to a generic file
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing the User Identity and the list of Signature Request (optional)</param>
        /// <returns>Task of JsonSignReturnV2Multiple</returns>
        public async System.Threading.Tasks.Task<JsonSignReturnV2Multiple> ResourceArubaSignServiceRestPkcs7signV2MultiplePOSTAsync (JsonBodyRequestPkcs7sSignV2Multiple body = null)
        {
             ApiResponse<JsonSignReturnV2Multiple> localVarResponse = await ResourceArubaSignServiceRestPkcs7signV2MultiplePOSTAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This method performs multiple signature in the CAdES standard to a generic file. This method performs multiple signature in the CAdES standard to a generic file
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing the User Identity and the list of Signature Request (optional)</param>
        /// <returns>Task of ApiResponse (JsonSignReturnV2Multiple)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JsonSignReturnV2Multiple>> ResourceArubaSignServiceRestPkcs7signV2MultiplePOSTAsyncWithHttpInfo (JsonBodyRequestPkcs7sSignV2Multiple body = null)
        {

            var localVarPath = "/ArubaSignService/pkcs7signV2_multiple";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResourceArubaSignServiceRestPkcs7signV2MultiplePOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonSignReturnV2Multiple>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JsonSignReturnV2Multiple) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonSignReturnV2Multiple)));
        }

        /// <summary>
        /// Creates a signature to a file in the CAdES standard  In input accepts an entire document depending of type of trasport used. Creates a signature to a file in the CAdES standard  In input accepts an entire document depending of type of trasport used
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object, it provides a Signature Request for the document (optional)</param>
        /// <returns>JsonSignReturnV2</returns>
        public JsonSignReturnV2 ResourceArubaSignServiceRestPkcs7signV2POST (JsonBodyRequestPkcs7SignV2 body = null)
        {
             ApiResponse<JsonSignReturnV2> localVarResponse = ResourceArubaSignServiceRestPkcs7signV2POSTWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a signature to a file in the CAdES standard  In input accepts an entire document depending of type of trasport used. Creates a signature to a file in the CAdES standard  In input accepts an entire document depending of type of trasport used
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object, it provides a Signature Request for the document (optional)</param>
        /// <returns>ApiResponse of JsonSignReturnV2</returns>
        public ApiResponse< JsonSignReturnV2 > ResourceArubaSignServiceRestPkcs7signV2POSTWithHttpInfo (JsonBodyRequestPkcs7SignV2 body = null)
        {

            var localVarPath = "/ArubaSignService/pkcs7signV2";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResourceArubaSignServiceRestPkcs7signV2POST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonSignReturnV2>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JsonSignReturnV2) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonSignReturnV2)));
        }

        /// <summary>
        /// Creates a signature to a file in the CAdES standard  In input accepts an entire document depending of type of trasport used. Creates a signature to a file in the CAdES standard  In input accepts an entire document depending of type of trasport used
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object, it provides a Signature Request for the document (optional)</param>
        /// <returns>Task of JsonSignReturnV2</returns>
        public async System.Threading.Tasks.Task<JsonSignReturnV2> ResourceArubaSignServiceRestPkcs7signV2POSTAsync (JsonBodyRequestPkcs7SignV2 body = null)
        {
             ApiResponse<JsonSignReturnV2> localVarResponse = await ResourceArubaSignServiceRestPkcs7signV2POSTAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a signature to a file in the CAdES standard  In input accepts an entire document depending of type of trasport used. Creates a signature to a file in the CAdES standard  In input accepts an entire document depending of type of trasport used
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object, it provides a Signature Request for the document (optional)</param>
        /// <returns>Task of ApiResponse (JsonSignReturnV2)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JsonSignReturnV2>> ResourceArubaSignServiceRestPkcs7signV2POSTAsyncWithHttpInfo (JsonBodyRequestPkcs7SignV2 body = null)
        {

            var localVarPath = "/ArubaSignService/pkcs7signV2";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResourceArubaSignServiceRestPkcs7signV2POST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonSignReturnV2>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JsonSignReturnV2) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonSignReturnV2)));
        }

        /// <summary>
        /// This method performs multiple Hash signature. This method performs multiple Hash signature
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing the User Identity and the list of Signature Request (optional)</param>
        /// <returns>JsonSignReturnV2Multiple</returns>
        public JsonSignReturnV2Multiple ResourceArubaSignServiceRestPkcs7signhashMultiplePOST (JsonBodyRequestPkcs7SignHashMultiple body = null)
        {
             ApiResponse<JsonSignReturnV2Multiple> localVarResponse = ResourceArubaSignServiceRestPkcs7signhashMultiplePOSTWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This method performs multiple Hash signature. This method performs multiple Hash signature
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing the User Identity and the list of Signature Request (optional)</param>
        /// <returns>ApiResponse of JsonSignReturnV2Multiple</returns>
        public ApiResponse< JsonSignReturnV2Multiple > ResourceArubaSignServiceRestPkcs7signhashMultiplePOSTWithHttpInfo (JsonBodyRequestPkcs7SignHashMultiple body = null)
        {

            var localVarPath = "/ArubaSignService/pkcs7signhash_multiple";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResourceArubaSignServiceRestPkcs7signhashMultiplePOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonSignReturnV2Multiple>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JsonSignReturnV2Multiple) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonSignReturnV2Multiple)));
        }

        /// <summary>
        /// This method performs multiple Hash signature. This method performs multiple Hash signature
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing the User Identity and the list of Signature Request (optional)</param>
        /// <returns>Task of JsonSignReturnV2Multiple</returns>
        public async System.Threading.Tasks.Task<JsonSignReturnV2Multiple> ResourceArubaSignServiceRestPkcs7signhashMultiplePOSTAsync (JsonBodyRequestPkcs7SignHashMultiple body = null)
        {
             ApiResponse<JsonSignReturnV2Multiple> localVarResponse = await ResourceArubaSignServiceRestPkcs7signhashMultiplePOSTAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This method performs multiple Hash signature. This method performs multiple Hash signature
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing the User Identity and the list of Signature Request (optional)</param>
        /// <returns>Task of ApiResponse (JsonSignReturnV2Multiple)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JsonSignReturnV2Multiple>> ResourceArubaSignServiceRestPkcs7signhashMultiplePOSTAsyncWithHttpInfo (JsonBodyRequestPkcs7SignHashMultiple body = null)
        {

            var localVarPath = "/ArubaSignService/pkcs7signhash_multiple";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResourceArubaSignServiceRestPkcs7signhashMultiplePOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonSignReturnV2Multiple>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JsonSignReturnV2Multiple) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonSignReturnV2Multiple)));
        }

        /// <summary>
        /// Creates a PKCS7 Detached for Hash sended as document. Creates a PKCS7 Detached for Hash sended as document.  They are not supported the following transportation type  &lt;ul&gt;  &lt;li&gt;DIRECTORYNAME&lt;/li&gt;  &lt;li&gt;FILENAME&lt;/li&gt;  &lt;/ul&gt;
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object that containing a signature request (optional)</param>
        /// <returns>JsonSignReturnV2</returns>
        public JsonSignReturnV2 ResourceArubaSignServiceRestPkcs7signhashPOST (JsonBodyRequestPkcs7SignHash body = null)
        {
             ApiResponse<JsonSignReturnV2> localVarResponse = ResourceArubaSignServiceRestPkcs7signhashPOSTWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a PKCS7 Detached for Hash sended as document. Creates a PKCS7 Detached for Hash sended as document.  They are not supported the following transportation type  &lt;ul&gt;  &lt;li&gt;DIRECTORYNAME&lt;/li&gt;  &lt;li&gt;FILENAME&lt;/li&gt;  &lt;/ul&gt;
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object that containing a signature request (optional)</param>
        /// <returns>ApiResponse of JsonSignReturnV2</returns>
        public ApiResponse< JsonSignReturnV2 > ResourceArubaSignServiceRestPkcs7signhashPOSTWithHttpInfo (JsonBodyRequestPkcs7SignHash body = null)
        {

            var localVarPath = "/ArubaSignService/pkcs7signhash";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResourceArubaSignServiceRestPkcs7signhashPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonSignReturnV2>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JsonSignReturnV2) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonSignReturnV2)));
        }

        /// <summary>
        /// Creates a PKCS7 Detached for Hash sended as document. Creates a PKCS7 Detached for Hash sended as document.  They are not supported the following transportation type  &lt;ul&gt;  &lt;li&gt;DIRECTORYNAME&lt;/li&gt;  &lt;li&gt;FILENAME&lt;/li&gt;  &lt;/ul&gt;
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object that containing a signature request (optional)</param>
        /// <returns>Task of JsonSignReturnV2</returns>
        public async System.Threading.Tasks.Task<JsonSignReturnV2> ResourceArubaSignServiceRestPkcs7signhashPOSTAsync (JsonBodyRequestPkcs7SignHash body = null)
        {
             ApiResponse<JsonSignReturnV2> localVarResponse = await ResourceArubaSignServiceRestPkcs7signhashPOSTAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a PKCS7 Detached for Hash sended as document. Creates a PKCS7 Detached for Hash sended as document.  They are not supported the following transportation type  &lt;ul&gt;  &lt;li&gt;DIRECTORYNAME&lt;/li&gt;  &lt;li&gt;FILENAME&lt;/li&gt;  &lt;/ul&gt;
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object that containing a signature request (optional)</param>
        /// <returns>Task of ApiResponse (JsonSignReturnV2)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JsonSignReturnV2>> ResourceArubaSignServiceRestPkcs7signhashPOSTAsyncWithHttpInfo (JsonBodyRequestPkcs7SignHash body = null)
        {

            var localVarPath = "/ArubaSignService/pkcs7signhash";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResourceArubaSignServiceRestPkcs7signhashPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonSignReturnV2>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JsonSignReturnV2) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonSignReturnV2)));
        }

        /// <summary>
        /// Retrieve credential from user. Retrieve credential from user
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing the User Identity and the crendential type (optional)</param>
        /// <returns>JsonRetriveCredentialReturn</returns>
        public JsonRetriveCredentialReturn ResourceArubaSignServiceRestRetriveCredentialPOST (JsonBodyRequestRetriveCredential body = null)
        {
             ApiResponse<JsonRetriveCredentialReturn> localVarResponse = ResourceArubaSignServiceRestRetriveCredentialPOSTWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve credential from user. Retrieve credential from user
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing the User Identity and the crendential type (optional)</param>
        /// <returns>ApiResponse of JsonRetriveCredentialReturn</returns>
        public ApiResponse< JsonRetriveCredentialReturn > ResourceArubaSignServiceRestRetriveCredentialPOSTWithHttpInfo (JsonBodyRequestRetriveCredential body = null)
        {

            var localVarPath = "/ArubaSignService/retriveCredential";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResourceArubaSignServiceRestRetriveCredentialPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonRetriveCredentialReturn>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JsonRetriveCredentialReturn) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonRetriveCredentialReturn)));
        }

        /// <summary>
        /// Retrieve credential from user. Retrieve credential from user
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing the User Identity and the crendential type (optional)</param>
        /// <returns>Task of JsonRetriveCredentialReturn</returns>
        public async System.Threading.Tasks.Task<JsonRetriveCredentialReturn> ResourceArubaSignServiceRestRetriveCredentialPOSTAsync (JsonBodyRequestRetriveCredential body = null)
        {
             ApiResponse<JsonRetriveCredentialReturn> localVarResponse = await ResourceArubaSignServiceRestRetriveCredentialPOSTAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve credential from user. Retrieve credential from user
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing the User Identity and the crendential type (optional)</param>
        /// <returns>Task of ApiResponse (JsonRetriveCredentialReturn)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JsonRetriveCredentialReturn>> ResourceArubaSignServiceRestRetriveCredentialPOSTAsyncWithHttpInfo (JsonBodyRequestRetriveCredential body = null)
        {

            var localVarPath = "/ArubaSignService/retriveCredential";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResourceArubaSignServiceRestRetriveCredentialPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonRetriveCredentialReturn>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JsonRetriveCredentialReturn) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonRetriveCredentialReturn)));
        }

        /// <summary>
        /// Send OPT credentials to the users (SMS or ARUBACALL). Send OPT credentials to the users (SMS or ARUBACALL)
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing the User Identity and the crendential type for which you&#39;re requesting the sending (optional)</param>
        /// <returns>JsonArssReturn</returns>
        public JsonArssReturn ResourceArubaSignServiceRestSendCredentialPOST (JsonBodyRequestSendCredential body = null)
        {
             ApiResponse<JsonArssReturn> localVarResponse = ResourceArubaSignServiceRestSendCredentialPOSTWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send OPT credentials to the users (SMS or ARUBACALL). Send OPT credentials to the users (SMS or ARUBACALL)
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing the User Identity and the crendential type for which you&#39;re requesting the sending (optional)</param>
        /// <returns>ApiResponse of JsonArssReturn</returns>
        public ApiResponse< JsonArssReturn > ResourceArubaSignServiceRestSendCredentialPOSTWithHttpInfo (JsonBodyRequestSendCredential body = null)
        {

            var localVarPath = "/ArubaSignService/sendCredential";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResourceArubaSignServiceRestSendCredentialPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonArssReturn>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JsonArssReturn) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonArssReturn)));
        }

        /// <summary>
        /// Send OPT credentials to the users (SMS or ARUBACALL). Send OPT credentials to the users (SMS or ARUBACALL)
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing the User Identity and the crendential type for which you&#39;re requesting the sending (optional)</param>
        /// <returns>Task of JsonArssReturn</returns>
        public async System.Threading.Tasks.Task<JsonArssReturn> ResourceArubaSignServiceRestSendCredentialPOSTAsync (JsonBodyRequestSendCredential body = null)
        {
             ApiResponse<JsonArssReturn> localVarResponse = await ResourceArubaSignServiceRestSendCredentialPOSTAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send OPT credentials to the users (SMS or ARUBACALL). Send OPT credentials to the users (SMS or ARUBACALL)
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing the User Identity and the crendential type for which you&#39;re requesting the sending (optional)</param>
        /// <returns>Task of ApiResponse (JsonArssReturn)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JsonArssReturn>> ResourceArubaSignServiceRestSendCredentialPOSTAsyncWithHttpInfo (JsonBodyRequestSendCredential body = null)
        {

            var localVarPath = "/ArubaSignService/sendCredential";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResourceArubaSignServiceRestSendCredentialPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonArssReturn>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JsonArssReturn) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonArssReturn)));
        }

        /// <summary>
        /// This method perform a Hash Signature (pkcs1 standard). This method perform a Hash Signature (pkcs1 standard)
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object, it provides a Signature Request (optional)</param>
        /// <returns>JsonSignHashReturn</returns>
        public JsonSignHashReturn ResourceArubaSignServiceRestSignhashPOST (JsonBodyRequestSignHash body = null)
        {
             ApiResponse<JsonSignHashReturn> localVarResponse = ResourceArubaSignServiceRestSignhashPOSTWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This method perform a Hash Signature (pkcs1 standard). This method perform a Hash Signature (pkcs1 standard)
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object, it provides a Signature Request (optional)</param>
        /// <returns>ApiResponse of JsonSignHashReturn</returns>
        public ApiResponse< JsonSignHashReturn > ResourceArubaSignServiceRestSignhashPOSTWithHttpInfo (JsonBodyRequestSignHash body = null)
        {

            var localVarPath = "/ArubaSignService/signhash";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResourceArubaSignServiceRestSignhashPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonSignHashReturn>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JsonSignHashReturn) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonSignHashReturn)));
        }

        /// <summary>
        /// This method perform a Hash Signature (pkcs1 standard). This method perform a Hash Signature (pkcs1 standard)
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object, it provides a Signature Request (optional)</param>
        /// <returns>Task of JsonSignHashReturn</returns>
        public async System.Threading.Tasks.Task<JsonSignHashReturn> ResourceArubaSignServiceRestSignhashPOSTAsync (JsonBodyRequestSignHash body = null)
        {
             ApiResponse<JsonSignHashReturn> localVarResponse = await ResourceArubaSignServiceRestSignhashPOSTAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This method perform a Hash Signature (pkcs1 standard). This method perform a Hash Signature (pkcs1 standard)
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object, it provides a Signature Request (optional)</param>
        /// <returns>Task of ApiResponse (JsonSignHashReturn)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JsonSignHashReturn>> ResourceArubaSignServiceRestSignhashPOSTAsyncWithHttpInfo (JsonBodyRequestSignHash body = null)
        {

            var localVarPath = "/ArubaSignService/signhash";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResourceArubaSignServiceRestSignhashPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonSignHashReturn>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JsonSignHashReturn) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonSignHashReturn)));
        }

        /// <summary>
        /// This method test one otp. This method test one otp
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing credential to test (optional)</param>
        /// <returns>JsonGWReturn</returns>
        public JsonGWReturn ResourceArubaSignServiceRestTestOtpPOST (JsonBodyRequestTestOtp body = null)
        {
             ApiResponse<JsonGWReturn> localVarResponse = ResourceArubaSignServiceRestTestOtpPOSTWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This method test one otp. This method test one otp
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing credential to test (optional)</param>
        /// <returns>ApiResponse of JsonGWReturn</returns>
        public ApiResponse< JsonGWReturn > ResourceArubaSignServiceRestTestOtpPOSTWithHttpInfo (JsonBodyRequestTestOtp body = null)
        {

            var localVarPath = "/ArubaSignService/test_otp";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResourceArubaSignServiceRestTestOtpPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonGWReturn>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JsonGWReturn) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonGWReturn)));
        }

        /// <summary>
        /// This method test one otp. This method test one otp
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing credential to test (optional)</param>
        /// <returns>Task of JsonGWReturn</returns>
        public async System.Threading.Tasks.Task<JsonGWReturn> ResourceArubaSignServiceRestTestOtpPOSTAsync (JsonBodyRequestTestOtp body = null)
        {
             ApiResponse<JsonGWReturn> localVarResponse = await ResourceArubaSignServiceRestTestOtpPOSTAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This method test one otp. This method test one otp
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing credential to test (optional)</param>
        /// <returns>Task of ApiResponse (JsonGWReturn)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JsonGWReturn>> ResourceArubaSignServiceRestTestOtpPOSTAsyncWithHttpInfo (JsonBodyRequestTestOtp body = null)
        {

            var localVarPath = "/ArubaSignService/test_otp";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResourceArubaSignServiceRestTestOtpPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonGWReturn>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JsonGWReturn) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonGWReturn)));
        }

        /// <summary>
        /// Generate a Time-Stamp Marking Request (TSD Format). Generate a Time-Stamp Marking Request (TSD Format)
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object, it provides a Time-Stamp Marking Request (optional)</param>
        /// <returns>JsonMarkReturn</returns>
        public JsonMarkReturn ResourceArubaSignServiceRestTsdPOST (JsonBodyRequestMarkReturn body = null)
        {
             ApiResponse<JsonMarkReturn> localVarResponse = ResourceArubaSignServiceRestTsdPOSTWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Generate a Time-Stamp Marking Request (TSD Format). Generate a Time-Stamp Marking Request (TSD Format)
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object, it provides a Time-Stamp Marking Request (optional)</param>
        /// <returns>ApiResponse of JsonMarkReturn</returns>
        public ApiResponse< JsonMarkReturn > ResourceArubaSignServiceRestTsdPOSTWithHttpInfo (JsonBodyRequestMarkReturn body = null)
        {

            var localVarPath = "/ArubaSignService/tsd";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResourceArubaSignServiceRestTsdPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonMarkReturn>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JsonMarkReturn) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonMarkReturn)));
        }

        /// <summary>
        /// Generate a Time-Stamp Marking Request (TSD Format). Generate a Time-Stamp Marking Request (TSD Format)
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object, it provides a Time-Stamp Marking Request (optional)</param>
        /// <returns>Task of JsonMarkReturn</returns>
        public async System.Threading.Tasks.Task<JsonMarkReturn> ResourceArubaSignServiceRestTsdPOSTAsync (JsonBodyRequestMarkReturn body = null)
        {
             ApiResponse<JsonMarkReturn> localVarResponse = await ResourceArubaSignServiceRestTsdPOSTAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Generate a Time-Stamp Marking Request (TSD Format). Generate a Time-Stamp Marking Request (TSD Format)
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object, it provides a Time-Stamp Marking Request (optional)</param>
        /// <returns>Task of ApiResponse (JsonMarkReturn)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JsonMarkReturn>> ResourceArubaSignServiceRestTsdPOSTAsyncWithHttpInfo (JsonBodyRequestMarkReturn body = null)
        {

            var localVarPath = "/ArubaSignService/tsd";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResourceArubaSignServiceRestTsdPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonMarkReturn>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JsonMarkReturn) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonMarkReturn)));
        }

        /// <summary>
        /// Generate a Time-Stamp Marking Request (TSR Format). Generate a Time-Stamp Marking Request (TSR Format)
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object, it provides a Time-Stamp Marking Request (optional)</param>
        /// <returns>JsonMarkReturn</returns>
        public JsonMarkReturn ResourceArubaSignServiceRestTsrPOST (JsonBodyRequestMarkReturn body = null)
        {
             ApiResponse<JsonMarkReturn> localVarResponse = ResourceArubaSignServiceRestTsrPOSTWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Generate a Time-Stamp Marking Request (TSR Format). Generate a Time-Stamp Marking Request (TSR Format)
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object, it provides a Time-Stamp Marking Request (optional)</param>
        /// <returns>ApiResponse of JsonMarkReturn</returns>
        public ApiResponse< JsonMarkReturn > ResourceArubaSignServiceRestTsrPOSTWithHttpInfo (JsonBodyRequestMarkReturn body = null)
        {

            var localVarPath = "/ArubaSignService/tsr";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResourceArubaSignServiceRestTsrPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonMarkReturn>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JsonMarkReturn) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonMarkReturn)));
        }

        /// <summary>
        /// Generate a Time-Stamp Marking Request (TSR Format). Generate a Time-Stamp Marking Request (TSR Format)
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object, it provides a Time-Stamp Marking Request (optional)</param>
        /// <returns>Task of JsonMarkReturn</returns>
        public async System.Threading.Tasks.Task<JsonMarkReturn> ResourceArubaSignServiceRestTsrPOSTAsync (JsonBodyRequestMarkReturn body = null)
        {
             ApiResponse<JsonMarkReturn> localVarResponse = await ResourceArubaSignServiceRestTsrPOSTAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Generate a Time-Stamp Marking Request (TSR Format). Generate a Time-Stamp Marking Request (TSR Format)
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object, it provides a Time-Stamp Marking Request (optional)</param>
        /// <returns>Task of ApiResponse (JsonMarkReturn)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JsonMarkReturn>> ResourceArubaSignServiceRestTsrPOSTAsyncWithHttpInfo (JsonBodyRequestMarkReturn body = null)
        {

            var localVarPath = "/ArubaSignService/tsr";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResourceArubaSignServiceRestTsrPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonMarkReturn>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JsonMarkReturn) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonMarkReturn)));
        }

        /// <summary>
        /// Method to autenticate credential. Method to autenticate credential
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing the User Identity for which you&#39;re requesting the verify (optional)</param>
        /// <returns>JsonArssReturn</returns>
        public JsonArssReturn ResourceArubaSignServiceRestVerifyOtpPOST (JsonBodyRequestVerifyOtp body = null)
        {
             ApiResponse<JsonArssReturn> localVarResponse = ResourceArubaSignServiceRestVerifyOtpPOSTWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Method to autenticate credential. Method to autenticate credential
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing the User Identity for which you&#39;re requesting the verify (optional)</param>
        /// <returns>ApiResponse of JsonArssReturn</returns>
        public ApiResponse< JsonArssReturn > ResourceArubaSignServiceRestVerifyOtpPOSTWithHttpInfo (JsonBodyRequestVerifyOtp body = null)
        {

            var localVarPath = "/ArubaSignService/verifyOtp";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResourceArubaSignServiceRestVerifyOtpPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonArssReturn>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JsonArssReturn) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonArssReturn)));
        }

        /// <summary>
        /// Method to autenticate credential. Method to autenticate credential
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing the User Identity for which you&#39;re requesting the verify (optional)</param>
        /// <returns>Task of JsonArssReturn</returns>
        public async System.Threading.Tasks.Task<JsonArssReturn> ResourceArubaSignServiceRestVerifyOtpPOSTAsync (JsonBodyRequestVerifyOtp body = null)
        {
             ApiResponse<JsonArssReturn> localVarResponse = await ResourceArubaSignServiceRestVerifyOtpPOSTAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Method to autenticate credential. Method to autenticate credential
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing the User Identity for which you&#39;re requesting the verify (optional)</param>
        /// <returns>Task of ApiResponse (JsonArssReturn)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JsonArssReturn>> ResourceArubaSignServiceRestVerifyOtpPOSTAsyncWithHttpInfo (JsonBodyRequestVerifyOtp body = null)
        {

            var localVarPath = "/ArubaSignService/verifyOtp";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResourceArubaSignServiceRestVerifyOtpPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonArssReturn>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JsonArssReturn) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonArssReturn)));
        }

        /// <summary>
        /// This method verify a document. This method verify a document
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object that containing a verify request (optional)</param>
        /// <returns>JsonVerifyReturn</returns>
        public JsonVerifyReturn ResourceArubaSignServiceRestVerifyPOST (JsonBodyRequestVerify body = null)
        {
             ApiResponse<JsonVerifyReturn> localVarResponse = ResourceArubaSignServiceRestVerifyPOSTWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This method verify a document. This method verify a document
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object that containing a verify request (optional)</param>
        /// <returns>ApiResponse of JsonVerifyReturn</returns>
        public ApiResponse< JsonVerifyReturn > ResourceArubaSignServiceRestVerifyPOSTWithHttpInfo (JsonBodyRequestVerify body = null)
        {

            var localVarPath = "/ArubaSignService/verify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResourceArubaSignServiceRestVerifyPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonVerifyReturn>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JsonVerifyReturn) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonVerifyReturn)));
        }

        /// <summary>
        /// This method verify a document. This method verify a document
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object that containing a verify request (optional)</param>
        /// <returns>Task of JsonVerifyReturn</returns>
        public async System.Threading.Tasks.Task<JsonVerifyReturn> ResourceArubaSignServiceRestVerifyPOSTAsync (JsonBodyRequestVerify body = null)
        {
             ApiResponse<JsonVerifyReturn> localVarResponse = await ResourceArubaSignServiceRestVerifyPOSTAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This method verify a document. This method verify a document
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object that containing a verify request (optional)</param>
        /// <returns>Task of ApiResponse (JsonVerifyReturn)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JsonVerifyReturn>> ResourceArubaSignServiceRestVerifyPOSTAsyncWithHttpInfo (JsonBodyRequestVerify body = null)
        {

            var localVarPath = "/ArubaSignService/verify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResourceArubaSignServiceRestVerifyPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonVerifyReturn>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JsonVerifyReturn) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonVerifyReturn)));
        }

        /// <summary>
        /// This method performs multiple XML signatures. This method performs multiple XML signatures
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing the User Identity, the list of Signature Request and other parameters (optional)</param>
        /// <returns>JsonSignReturnV2Multiple</returns>
        public JsonSignReturnV2Multiple ResourceArubaSignServiceRestXmlsignatureMultiplePOST (JsonBodyRequestXmlSignatureMultiple body = null)
        {
             ApiResponse<JsonSignReturnV2Multiple> localVarResponse = ResourceArubaSignServiceRestXmlsignatureMultiplePOSTWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This method performs multiple XML signatures. This method performs multiple XML signatures
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing the User Identity, the list of Signature Request and other parameters (optional)</param>
        /// <returns>ApiResponse of JsonSignReturnV2Multiple</returns>
        public ApiResponse< JsonSignReturnV2Multiple > ResourceArubaSignServiceRestXmlsignatureMultiplePOSTWithHttpInfo (JsonBodyRequestXmlSignatureMultiple body = null)
        {

            var localVarPath = "/ArubaSignService/xmlsignature_multiple";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResourceArubaSignServiceRestXmlsignatureMultiplePOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonSignReturnV2Multiple>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JsonSignReturnV2Multiple) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonSignReturnV2Multiple)));
        }

        /// <summary>
        /// This method performs multiple XML signatures. This method performs multiple XML signatures
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing the User Identity, the list of Signature Request and other parameters (optional)</param>
        /// <returns>Task of JsonSignReturnV2Multiple</returns>
        public async System.Threading.Tasks.Task<JsonSignReturnV2Multiple> ResourceArubaSignServiceRestXmlsignatureMultiplePOSTAsync (JsonBodyRequestXmlSignatureMultiple body = null)
        {
             ApiResponse<JsonSignReturnV2Multiple> localVarResponse = await ResourceArubaSignServiceRestXmlsignatureMultiplePOSTAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This method performs multiple XML signatures. This method performs multiple XML signatures
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object containing the User Identity, the list of Signature Request and other parameters (optional)</param>
        /// <returns>Task of ApiResponse (JsonSignReturnV2Multiple)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JsonSignReturnV2Multiple>> ResourceArubaSignServiceRestXmlsignatureMultiplePOSTAsyncWithHttpInfo (JsonBodyRequestXmlSignatureMultiple body = null)
        {

            var localVarPath = "/ArubaSignService/xmlsignature_multiple";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResourceArubaSignServiceRestXmlsignatureMultiplePOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonSignReturnV2Multiple>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JsonSignReturnV2Multiple) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonSignReturnV2Multiple)));
        }

        /// <summary>
        /// XML Signature (XAdES format)  This method is not complete and it should not be used. XML Signature (XAdES format)  This method is not complete and it should not be used
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object, it provides a Signature Request (optional)</param>
        /// <returns>JsonSignReturnV2</returns>
        public JsonSignReturnV2 ResourceArubaSignServiceRestXmlsignaturePOST (JsonBodyRequestXmlSignature body = null)
        {
             ApiResponse<JsonSignReturnV2> localVarResponse = ResourceArubaSignServiceRestXmlsignaturePOSTWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// XML Signature (XAdES format)  This method is not complete and it should not be used. XML Signature (XAdES format)  This method is not complete and it should not be used
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object, it provides a Signature Request (optional)</param>
        /// <returns>ApiResponse of JsonSignReturnV2</returns>
        public ApiResponse< JsonSignReturnV2 > ResourceArubaSignServiceRestXmlsignaturePOSTWithHttpInfo (JsonBodyRequestXmlSignature body = null)
        {

            var localVarPath = "/ArubaSignService/xmlsignature";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResourceArubaSignServiceRestXmlsignaturePOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonSignReturnV2>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JsonSignReturnV2) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonSignReturnV2)));
        }

        /// <summary>
        /// XML Signature (XAdES format)  This method is not complete and it should not be used. XML Signature (XAdES format)  This method is not complete and it should not be used
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object, it provides a Signature Request (optional)</param>
        /// <returns>Task of JsonSignReturnV2</returns>
        public async System.Threading.Tasks.Task<JsonSignReturnV2> ResourceArubaSignServiceRestXmlsignaturePOSTAsync (JsonBodyRequestXmlSignature body = null)
        {
             ApiResponse<JsonSignReturnV2> localVarResponse = await ResourceArubaSignServiceRestXmlsignaturePOSTAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// XML Signature (XAdES format)  This method is not complete and it should not be used. XML Signature (XAdES format)  This method is not complete and it should not be used
        /// </summary>
        /// <exception cref="ArubaSignServiceRest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Complex object, it provides a Signature Request (optional)</param>
        /// <returns>Task of ApiResponse (JsonSignReturnV2)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JsonSignReturnV2>> ResourceArubaSignServiceRestXmlsignaturePOSTAsyncWithHttpInfo (JsonBodyRequestXmlSignature body = null)
        {

            var localVarPath = "/ArubaSignService/xmlsignature";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResourceArubaSignServiceRestXmlsignaturePOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonSignReturnV2>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JsonSignReturnV2) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonSignReturnV2)));
        }

    }
}
