/* 
 * ArubaSignService
 *
 * <h1>ArubaSignService</h1>
 *
 * OpenAPI spec version: 2.3.2-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ArubaSignServiceRest.Client.SwaggerDateConverter;

namespace ArubaSignServiceRest.Model
{
    /// <summary>
    /// Object containing the User Idendity and the crendential type for which you&#39;re requesting the sending
    /// </summary>
    [DataContract]
    public partial class JsonBodyRequestSendCredential :  IEquatable<JsonBodyRequestSendCredential>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JsonBodyRequestSendCredential" /> class.
        /// </summary>
        /// <param name="identity">User Idendity for which you&#39;re requesting the sending.</param>
        /// <param name="type">Enum that contains Credential Type.</param>
        public JsonBodyRequestSendCredential(JsonAuth identity = default(JsonAuth), JsonCredentialsType type = default(JsonCredentialsType))
        {
            this.Identity = identity;
            this.Type = type;
        }
        
        /// <summary>
        /// User Idendity for which you&#39;re requesting the sending
        /// </summary>
        /// <value>User Idendity for which you&#39;re requesting the sending</value>
        [DataMember(Name="identity", EmitDefaultValue=false)]
        public JsonAuth Identity { get; set; }

        /// <summary>
        /// Enum that contains Credential Type
        /// </summary>
        /// <value>Enum that contains Credential Type</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public JsonCredentialsType Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JsonBodyRequestSendCredential {\n");
            sb.Append("  Identity: ").Append(Identity).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as JsonBodyRequestSendCredential);
        }

        /// <summary>
        /// Returns true if JsonBodyRequestSendCredential instances are equal
        /// </summary>
        /// <param name="input">Instance of JsonBodyRequestSendCredential to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JsonBodyRequestSendCredential input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Identity == input.Identity ||
                    (this.Identity != null &&
                    this.Identity.Equals(input.Identity))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Identity != null)
                    hashCode = hashCode * 59 + this.Identity.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
