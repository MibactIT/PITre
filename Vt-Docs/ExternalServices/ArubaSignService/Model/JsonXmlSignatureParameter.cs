/* 
 * ArubaSignService
 *
 * <h1>ArubaSignService</h1>
 *
 * OpenAPI spec version: 2.3.2-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ArubaSignServiceRest.Client.SwaggerDateConverter;

namespace ArubaSignServiceRest.Model
{
    /// <summary>
    /// Object containing parameters of XML Signature
    /// </summary>
    [DataContract]
    public partial class JsonXmlSignatureParameter :  IEquatable<JsonXmlSignatureParameter>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JsonXmlSignatureParameter" /> class.
        /// </summary>
        /// <param name="canonicalizedType">Enum that indicates the canonicalize type.</param>
        /// <param name="type">Enum that contains XML Signature Types.</param>
        /// <param name="transforms">Array of Trasform Object that indicates a list of ordered trasformations to apply to document before hash.</param>
        public JsonXmlSignatureParameter(JsonCanonicalizedType canonicalizedType = default(JsonCanonicalizedType), JsonXMLSignatureType type = default(JsonXMLSignatureType), List<JsonTransform> transforms = default(List<JsonTransform>))
        {
            this.CanonicalizedType = canonicalizedType;
            this.Type = type;
            this.Transforms = transforms;
        }
        
        /// <summary>
        /// Enum that indicates the canonicalize type
        /// </summary>
        /// <value>Enum that indicates the canonicalize type</value>
        [DataMember(Name="canonicalizedType", EmitDefaultValue=false)]
        public JsonCanonicalizedType CanonicalizedType { get; set; }

        /// <summary>
        /// Enum that contains XML Signature Types
        /// </summary>
        /// <value>Enum that contains XML Signature Types</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public JsonXMLSignatureType Type { get; set; }

        /// <summary>
        /// Array of Trasform Object that indicates a list of ordered trasformations to apply to document before hash
        /// </summary>
        /// <value>Array of Trasform Object that indicates a list of ordered trasformations to apply to document before hash</value>
        [DataMember(Name="transforms", EmitDefaultValue=false)]
        public List<JsonTransform> Transforms { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JsonXmlSignatureParameter {\n");
            sb.Append("  CanonicalizedType: ").Append(CanonicalizedType).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Transforms: ").Append(Transforms).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as JsonXmlSignatureParameter);
        }

        /// <summary>
        /// Returns true if JsonXmlSignatureParameter instances are equal
        /// </summary>
        /// <param name="input">Instance of JsonXmlSignatureParameter to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JsonXmlSignatureParameter input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CanonicalizedType == input.CanonicalizedType ||
                    (this.CanonicalizedType != null &&
                    this.CanonicalizedType.Equals(input.CanonicalizedType))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Transforms == input.Transforms ||
                    this.Transforms != null &&
                    this.Transforms.SequenceEqual(input.Transforms)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CanonicalizedType != null)
                    hashCode = hashCode * 59 + this.CanonicalizedType.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Transforms != null)
                    hashCode = hashCode * 59 + this.Transforms.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
