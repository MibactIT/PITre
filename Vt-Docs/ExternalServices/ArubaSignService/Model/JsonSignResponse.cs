/* 
 * ArubaSignService
 *
 * <h1>ArubaSignService</h1>
 *
 * OpenAPI spec version: 2.3.2-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ArubaSignServiceRest.Client.SwaggerDateConverter;

namespace ArubaSignServiceRest.Model
{
    /// <summary>
    /// Object that contains the result of signature.
    /// </summary>
    [DataContract]
    public partial class JsonSignResponse : JsonEWSResult,  IEquatable<JsonSignResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JsonSignResponse" /> class.
        /// </summary>
        /// <param name="binaryOutput">Byte array of signed file..</param>
        /// <param name="dstPath">File path specified in request used by server.&lt;br&gt;  In case of collision, the server does not overwrite the files and appends digits to filename..</param>
        /// <param name="stream">Stream used to download large size file (only for TypeTransport#STREAM)..</param>
        public JsonSignResponse(string binaryOutput = default(string), string dstPath = default(string), string stream = default(string), string status = default(string), string code = default(string), string message = default(string)) : base()
        {
            this.BinaryOutput = binaryOutput;
            this.DstPath = dstPath;
            this.Stream = stream;
        }
        
        /// <summary>
        /// Byte array of signed file.
        /// </summary>
        /// <value>Byte array of signed file.</value>
        [DataMember(Name="binaryOutput", EmitDefaultValue=false)]
        public string BinaryOutput { get; set; }

        /// <summary>
        /// File path specified in request used by server.&lt;br&gt;  In case of collision, the server does not overwrite the files and appends digits to filename.
        /// </summary>
        /// <value>File path specified in request used by server.&lt;br&gt;  In case of collision, the server does not overwrite the files and appends digits to filename.</value>
        [DataMember(Name="dstPath", EmitDefaultValue=false)]
        public string DstPath { get; set; }

        /// <summary>
        /// Stream used to download large size file (only for TypeTransport#STREAM).
        /// </summary>
        /// <value>Stream used to download large size file (only for TypeTransport#STREAM).</value>
        [DataMember(Name="stream", EmitDefaultValue=false)]
        public string Stream { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JsonSignResponse {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  BinaryOutput: ").Append(BinaryOutput).Append("\n");
            sb.Append("  DstPath: ").Append(DstPath).Append("\n");
            sb.Append("  Stream: ").Append(Stream).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as JsonSignResponse);
        }

        /// <summary>
        /// Returns true if JsonSignResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of JsonSignResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JsonSignResponse input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.BinaryOutput == input.BinaryOutput ||
                    (this.BinaryOutput != null &&
                    this.BinaryOutput.Equals(input.BinaryOutput))
                ) && base.Equals(input) && 
                (
                    this.DstPath == input.DstPath ||
                    (this.DstPath != null &&
                    this.DstPath.Equals(input.DstPath))
                ) && base.Equals(input) && 
                (
                    this.Stream == input.Stream ||
                    (this.Stream != null &&
                    this.Stream.Equals(input.Stream))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.BinaryOutput != null)
                    hashCode = hashCode * 59 + this.BinaryOutput.GetHashCode();
                if (this.DstPath != null)
                    hashCode = hashCode * 59 + this.DstPath.GetHashCode();
                if (this.Stream != null)
                    hashCode = hashCode * 59 + this.Stream.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        //IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        //{
        //    foreach(var x in BaseValidate(validationContext)) yield return x;
        //    yield break;
        //}
    }

}
