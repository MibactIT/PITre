/* 
 * ArubaSignService
 *
 * <h1>ArubaSignService</h1>
 *
 * OpenAPI spec version: 2.3.2-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ArubaSignServiceRest.Client.SwaggerDateConverter;

namespace ArubaSignServiceRest.Model
{
    /// <summary>
    /// Object that contains the result of signatures. &lt;br/&gt;  The order of fields is important for WSDL
    /// </summary>
    [DataContract]
    public partial class JsonSignReturnV2Multiple :  IEquatable<JsonSignReturnV2Multiple>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JsonSignReturnV2Multiple" /> class.
        /// </summary>
        /// <param name="status">Global result of operations.</param>
        /// <param name="description">Global description of operations.</param>
        /// <param name="returnCode">Global result code.</param>
        /// <param name="returnSigns">Array of SignReturnV2 that contains the result of multiple signatures.</param>
        public JsonSignReturnV2Multiple(string status = default(string), string description = default(string), string returnCode = default(string), List<JsonSignReturnV2> returnSigns = default(List<JsonSignReturnV2>))
        {
            this.Status = status;
            this.Description = description;
            this.ReturnCode = returnCode;
            this.ReturnSigns = returnSigns;
        }
        
        /// <summary>
        /// Global result of operations
        /// </summary>
        /// <value>Global result of operations</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Global description of operations
        /// </summary>
        /// <value>Global description of operations</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Global result code
        /// </summary>
        /// <value>Global result code</value>
        [DataMember(Name="return_code", EmitDefaultValue=false)]
        public string ReturnCode { get; set; }

        /// <summary>
        /// Array of SignReturnV2 that contains the result of multiple signatures
        /// </summary>
        /// <value>Array of SignReturnV2 that contains the result of multiple signatures</value>
        [DataMember(Name="return_signs", EmitDefaultValue=false)]
        public List<JsonSignReturnV2> ReturnSigns { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JsonSignReturnV2Multiple {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ReturnCode: ").Append(ReturnCode).Append("\n");
            sb.Append("  ReturnSigns: ").Append(ReturnSigns).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as JsonSignReturnV2Multiple);
        }

        /// <summary>
        /// Returns true if JsonSignReturnV2Multiple instances are equal
        /// </summary>
        /// <param name="input">Instance of JsonSignReturnV2Multiple to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JsonSignReturnV2Multiple input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.ReturnCode == input.ReturnCode ||
                    (this.ReturnCode != null &&
                    this.ReturnCode.Equals(input.ReturnCode))
                ) && 
                (
                    this.ReturnSigns == input.ReturnSigns ||
                    this.ReturnSigns != null &&
                    this.ReturnSigns.SequenceEqual(input.ReturnSigns)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.ReturnCode != null)
                    hashCode = hashCode * 59 + this.ReturnCode.GetHashCode();
                if (this.ReturnSigns != null)
                    hashCode = hashCode * 59 + this.ReturnSigns.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
