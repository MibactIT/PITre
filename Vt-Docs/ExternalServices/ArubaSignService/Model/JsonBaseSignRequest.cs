/* 
 * ArubaSignService
 *
 * <h1>ArubaSignService</h1>
 *
 * OpenAPI spec version: 2.3.2-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ArubaSignServiceRest.Client.SwaggerDateConverter;

namespace ArubaSignServiceRest.Model
{
    /// <summary>
    /// Base class for signature requests.
    /// </summary>
    [DataContract]
    public partial class JsonBaseSignRequest :  IEquatable<JsonBaseSignRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JsonBaseSignRequest" /> class.
        /// </summary>
        /// <param name="binaryInput">Byte array that contains the document to sign &lt;b&gt;OR&lt;/b&gt; the hash for hash signature (only for #inputTransport  &#x3D; TypeTransport#BYNARYNET)..</param>
        /// <param name="dstName">Destination file path &lt;b&gt;OR&lt;/b&gt; destination directory path (only for #inputTransport &#x3D;  TypeTransport#FILENAME or TypeTransport#DIRECTORYNAME)..</param>
        /// <param name="notifyId">ID associated to the signatures session for notifications..</param>
        /// <param name="notifyMail">Email for notifications (withe relative ID)..</param>
        /// <param name="srcName">Path to file &lt;b&gt;OR&lt;/b&gt; directory path that contains the files to be signed (only for #inputTransport &#x3D;  TypeTransport#FILENAME or TypeTransport#DIRECTORYNAME)..</param>
        /// <param name="stream">Stream used to load large size file (only for #inputTransport &#x3D; TypeTransport#STREAM)..</param>
        /// <param name="inputTransport">Type of input (inputTransport). See TypeTransport..</param>
        /// <param name="outputTransport">Type of output (inputTransport). See TypeTransport..</param>
        /// <param name="baseSignatureToDo">The signatures to do, each with some specific parameters..</param>
        /// <param name="pdfSignatureToDo">The signatures to do, each with some specific parameters..</param>
        public JsonBaseSignRequest(string binaryInput = default(string), string dstName = default(string), string notifyId = default(string), string notifyMail = default(string), string srcName = default(string), string stream = default(string), JsonTypeTransport inputTransport = default(JsonTypeTransport), JsonTypeTransport outputTransport = default(JsonTypeTransport), JsonSignOptions baseSignatureToDo = default(JsonSignOptions), JsonPdfSignOptions pdfSignatureToDo = default(JsonPdfSignOptions))
        {
            this.BinaryInput = binaryInput;
            this.DstName = dstName;
            this.NotifyId = notifyId;
            this.NotifyMail = notifyMail;
            this.SrcName = srcName;
            this.Stream = stream;
            this.InputTransport = inputTransport;
            this.OutputTransport = outputTransport;
            this.BaseSignatureToDo = baseSignatureToDo;
            this.PdfSignatureToDo = pdfSignatureToDo;
        }
        
        /// <summary>
        /// Byte array that contains the document to sign &lt;b&gt;OR&lt;/b&gt; the hash for hash signature (only for #inputTransport  &#x3D; TypeTransport#BYNARYNET).
        /// </summary>
        /// <value>Byte array that contains the document to sign &lt;b&gt;OR&lt;/b&gt; the hash for hash signature (only for #inputTransport  &#x3D; TypeTransport#BYNARYNET).</value>
        [DataMember(Name="binaryInput", EmitDefaultValue=false)]
        public string BinaryInput { get; set; }

        /// <summary>
        /// Destination file path &lt;b&gt;OR&lt;/b&gt; destination directory path (only for #inputTransport &#x3D;  TypeTransport#FILENAME or TypeTransport#DIRECTORYNAME).
        /// </summary>
        /// <value>Destination file path &lt;b&gt;OR&lt;/b&gt; destination directory path (only for #inputTransport &#x3D;  TypeTransport#FILENAME or TypeTransport#DIRECTORYNAME).</value>
        [DataMember(Name="dstName", EmitDefaultValue=false)]
        public string DstName { get; set; }

        /// <summary>
        /// ID associated to the signatures session for notifications.
        /// </summary>
        /// <value>ID associated to the signatures session for notifications.</value>
        [DataMember(Name="notifyId", EmitDefaultValue=false)]
        public string NotifyId { get; set; }

        /// <summary>
        /// Email for notifications (withe relative ID).
        /// </summary>
        /// <value>Email for notifications (withe relative ID).</value>
        [DataMember(Name="notifyMail", EmitDefaultValue=false)]
        public string NotifyMail { get; set; }

        /// <summary>
        /// Path to file &lt;b&gt;OR&lt;/b&gt; directory path that contains the files to be signed (only for #inputTransport &#x3D;  TypeTransport#FILENAME or TypeTransport#DIRECTORYNAME).
        /// </summary>
        /// <value>Path to file &lt;b&gt;OR&lt;/b&gt; directory path that contains the files to be signed (only for #inputTransport &#x3D;  TypeTransport#FILENAME or TypeTransport#DIRECTORYNAME).</value>
        [DataMember(Name="srcName", EmitDefaultValue=false)]
        public string SrcName { get; set; }

        /// <summary>
        /// Stream used to load large size file (only for #inputTransport &#x3D; TypeTransport#STREAM).
        /// </summary>
        /// <value>Stream used to load large size file (only for #inputTransport &#x3D; TypeTransport#STREAM).</value>
        [DataMember(Name="stream", EmitDefaultValue=false)]
        public string Stream { get; set; }

        /// <summary>
        /// Type of input (inputTransport). See TypeTransport.
        /// </summary>
        /// <value>Type of input (inputTransport). See TypeTransport.</value>
        [DataMember(Name="inputTransport", EmitDefaultValue=false)]
        public JsonTypeTransport InputTransport { get; set; }

        /// <summary>
        /// Type of output (inputTransport). See TypeTransport.
        /// </summary>
        /// <value>Type of output (inputTransport). See TypeTransport.</value>
        [DataMember(Name="outputTransport", EmitDefaultValue=false)]
        public JsonTypeTransport OutputTransport { get; set; }

        /// <summary>
        /// The signatures to do, each with some specific parameters.
        /// </summary>
        /// <value>The signatures to do, each with some specific parameters.</value>
        [DataMember(Name="baseSignatureToDo", EmitDefaultValue=false)]
        public JsonSignOptions BaseSignatureToDo { get; set; }

        /// <summary>
        /// The signatures to do, each with some specific parameters.
        /// </summary>
        /// <value>The signatures to do, each with some specific parameters.</value>
        [DataMember(Name="pdfSignatureToDo", EmitDefaultValue=false)]
        public JsonPdfSignOptions PdfSignatureToDo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JsonBaseSignRequest {\n");
            sb.Append("  BinaryInput: ").Append(BinaryInput).Append("\n");
            sb.Append("  DstName: ").Append(DstName).Append("\n");
            sb.Append("  NotifyId: ").Append(NotifyId).Append("\n");
            sb.Append("  NotifyMail: ").Append(NotifyMail).Append("\n");
            sb.Append("  SrcName: ").Append(SrcName).Append("\n");
            sb.Append("  Stream: ").Append(Stream).Append("\n");
            sb.Append("  InputTransport: ").Append(InputTransport).Append("\n");
            sb.Append("  OutputTransport: ").Append(OutputTransport).Append("\n");
            sb.Append("  BaseSignatureToDo: ").Append(BaseSignatureToDo).Append("\n");
            sb.Append("  PdfSignatureToDo: ").Append(PdfSignatureToDo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as JsonBaseSignRequest);
        }

        /// <summary>
        /// Returns true if JsonBaseSignRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of JsonBaseSignRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JsonBaseSignRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BinaryInput == input.BinaryInput ||
                    (this.BinaryInput != null &&
                    this.BinaryInput.Equals(input.BinaryInput))
                ) && 
                (
                    this.DstName == input.DstName ||
                    (this.DstName != null &&
                    this.DstName.Equals(input.DstName))
                ) && 
                (
                    this.NotifyId == input.NotifyId ||
                    (this.NotifyId != null &&
                    this.NotifyId.Equals(input.NotifyId))
                ) && 
                (
                    this.NotifyMail == input.NotifyMail ||
                    (this.NotifyMail != null &&
                    this.NotifyMail.Equals(input.NotifyMail))
                ) && 
                (
                    this.SrcName == input.SrcName ||
                    (this.SrcName != null &&
                    this.SrcName.Equals(input.SrcName))
                ) && 
                (
                    this.Stream == input.Stream ||
                    (this.Stream != null &&
                    this.Stream.Equals(input.Stream))
                ) && 
                (
                    this.InputTransport == input.InputTransport ||
                    (this.InputTransport != null &&
                    this.InputTransport.Equals(input.InputTransport))
                ) && 
                (
                    this.OutputTransport == input.OutputTransport ||
                    (this.OutputTransport != null &&
                    this.OutputTransport.Equals(input.OutputTransport))
                ) && 
                (
                    this.BaseSignatureToDo == input.BaseSignatureToDo ||
                    (this.BaseSignatureToDo != null &&
                    this.BaseSignatureToDo.Equals(input.BaseSignatureToDo))
                ) && 
                (
                    this.PdfSignatureToDo == input.PdfSignatureToDo ||
                    (this.PdfSignatureToDo != null &&
                    this.PdfSignatureToDo.Equals(input.PdfSignatureToDo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BinaryInput != null)
                    hashCode = hashCode * 59 + this.BinaryInput.GetHashCode();
                if (this.DstName != null)
                    hashCode = hashCode * 59 + this.DstName.GetHashCode();
                if (this.NotifyId != null)
                    hashCode = hashCode * 59 + this.NotifyId.GetHashCode();
                if (this.NotifyMail != null)
                    hashCode = hashCode * 59 + this.NotifyMail.GetHashCode();
                if (this.SrcName != null)
                    hashCode = hashCode * 59 + this.SrcName.GetHashCode();
                if (this.Stream != null)
                    hashCode = hashCode * 59 + this.Stream.GetHashCode();
                if (this.InputTransport != null)
                    hashCode = hashCode * 59 + this.InputTransport.GetHashCode();
                if (this.OutputTransport != null)
                    hashCode = hashCode * 59 + this.OutputTransport.GetHashCode();
                if (this.BaseSignatureToDo != null)
                    hashCode = hashCode * 59 + this.BaseSignatureToDo.GetHashCode();
                if (this.PdfSignatureToDo != null)
                    hashCode = hashCode * 59 + this.PdfSignatureToDo.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
