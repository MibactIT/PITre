/* 
 * ArubaSignService
 *
 * <h1>ArubaSignService</h1>
 *
 * OpenAPI spec version: 2.3.2-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ArubaSignServiceRest.Client.SwaggerDateConverter;

namespace ArubaSignServiceRest.Model
{
    /// <summary>
    /// Object that contains the needed parameters for PAdES signature.&lt;br/&gt;  The order of fields is important for WSDL
    /// </summary>
    [DataContract]
    public partial class JsonPdfSignApparence :  IEquatable<JsonPdfSignApparence>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JsonPdfSignApparence" /> class.
        /// </summary>
        /// <param name="testo">Text Value to replace Standard Text visible on Signature (for example: \&quot;Firmato Da Mario Rossi\&quot;).</param>
        /// <param name="image">Image File Path of the image used as background of Signature Rectangle.</param>
        /// <param name="page">Page Number where the signature must be added.</param>
        /// <param name="leftx">The x-coordinate of the margin-bottom-left of Signature Rectangle.</param>
        /// <param name="lefty">The y-coordinate of the margin-bottom-left of Signature Rectangle.</param>
        /// <param name="location">Value of entry \&quot;/Location\&quot; of \&quot;Signature Dictionary\&quot; Object (for example: Arezzo).</param>
        /// <param name="reason">Value of entry \&quot;/Reason\&quot; of \&quot;Signature Dictionary\&quot; Object.</param>
        /// <param name="rightx">The x-coordinate of the margin-top-right of Signature Rectangle.</param>
        /// <param name="righty">The y-coordinate of the margin-top-right of Signature Rectangle.</param>
        /// <param name="imageOnly">If \&quot;true\&quot; inserts only the image.</param>
        /// <param name="imageBin">Byte Array of image used as background of Signature Rectangle (jpg png bmp).</param>
        /// <param name="resizeMode">resizeMode.</param>
        /// <param name="showDateTime">showDateTime.</param>
        /// <param name="scaleFont">scaleFont.</param>
        public JsonPdfSignApparence(string testo = default(string), string image = default(string), decimal? page = default(decimal?), decimal? leftx = default(decimal?), decimal? lefty = default(decimal?), string location = default(string), string reason = default(string), decimal? rightx = default(decimal?), decimal? righty = default(decimal?), bool? imageOnly = default(bool?), string imageBin = default(string), decimal? resizeMode = default(decimal?), bool? showDateTime = default(bool?), bool? scaleFont = default(bool?))
        {
            this.Testo = testo;
            this.Image = image;
            this.Page = page;
            this.Leftx = leftx;
            this.Lefty = lefty;
            this.Location = location;
            this.Reason = reason;
            this.Rightx = rightx;
            this.Righty = righty;
            this.ImageOnly = imageOnly;
            this.ImageBin = imageBin;
            this.ResizeMode = resizeMode;
            this.ShowDateTime = showDateTime;
            this.ScaleFont = scaleFont;
        }
        
        /// <summary>
        /// Text Value to replace Standard Text visible on Signature (for example: \&quot;Firmato Da Mario Rossi\&quot;)
        /// </summary>
        /// <value>Text Value to replace Standard Text visible on Signature (for example: \&quot;Firmato Da Mario Rossi\&quot;)</value>
        [DataMember(Name="testo", EmitDefaultValue=false)]
        public string Testo { get; set; }

        /// <summary>
        /// Image File Path of the image used as background of Signature Rectangle
        /// </summary>
        /// <value>Image File Path of the image used as background of Signature Rectangle</value>
        [DataMember(Name="image", EmitDefaultValue=false)]
        public string Image { get; set; }

        /// <summary>
        /// Page Number where the signature must be added
        /// </summary>
        /// <value>Page Number where the signature must be added</value>
        [DataMember(Name="page", EmitDefaultValue=false)]
        public decimal? Page { get; set; }

        /// <summary>
        /// The x-coordinate of the margin-bottom-left of Signature Rectangle
        /// </summary>
        /// <value>The x-coordinate of the margin-bottom-left of Signature Rectangle</value>
        [DataMember(Name="leftx", EmitDefaultValue=false)]
        public decimal? Leftx { get; set; }

        /// <summary>
        /// The y-coordinate of the margin-bottom-left of Signature Rectangle
        /// </summary>
        /// <value>The y-coordinate of the margin-bottom-left of Signature Rectangle</value>
        [DataMember(Name="lefty", EmitDefaultValue=false)]
        public decimal? Lefty { get; set; }

        /// <summary>
        /// Value of entry \&quot;/Location\&quot; of \&quot;Signature Dictionary\&quot; Object (for example: Arezzo)
        /// </summary>
        /// <value>Value of entry \&quot;/Location\&quot; of \&quot;Signature Dictionary\&quot; Object (for example: Arezzo)</value>
        [DataMember(Name="location", EmitDefaultValue=false)]
        public string Location { get; set; }

        /// <summary>
        /// Value of entry \&quot;/Reason\&quot; of \&quot;Signature Dictionary\&quot; Object
        /// </summary>
        /// <value>Value of entry \&quot;/Reason\&quot; of \&quot;Signature Dictionary\&quot; Object</value>
        [DataMember(Name="reason", EmitDefaultValue=false)]
        public string Reason { get; set; }

        /// <summary>
        /// The x-coordinate of the margin-top-right of Signature Rectangle
        /// </summary>
        /// <value>The x-coordinate of the margin-top-right of Signature Rectangle</value>
        [DataMember(Name="rightx", EmitDefaultValue=false)]
        public decimal? Rightx { get; set; }

        /// <summary>
        /// The y-coordinate of the margin-top-right of Signature Rectangle
        /// </summary>
        /// <value>The y-coordinate of the margin-top-right of Signature Rectangle</value>
        [DataMember(Name="righty", EmitDefaultValue=false)]
        public decimal? Righty { get; set; }

        /// <summary>
        /// If \&quot;true\&quot; inserts only the image
        /// </summary>
        /// <value>If \&quot;true\&quot; inserts only the image</value>
        [DataMember(Name="imageOnly", EmitDefaultValue=false)]
        public bool? ImageOnly { get; set; }

        /// <summary>
        /// Byte Array of image used as background of Signature Rectangle (jpg png bmp)
        /// </summary>
        /// <value>Byte Array of image used as background of Signature Rectangle (jpg png bmp)</value>
        [DataMember(Name="imageBin", EmitDefaultValue=false)]
        public string ImageBin { get; set; }

        /// <summary>
        /// Gets or Sets ResizeMode
        /// </summary>
        [DataMember(Name="resizeMode", EmitDefaultValue=false)]
        public decimal? ResizeMode { get; set; }

        /// <summary>
        /// Gets or Sets ShowDateTime
        /// </summary>
        [DataMember(Name= "bShowDateTime", EmitDefaultValue=false)]
        public bool? ShowDateTime { get; set; }

        /// <summary>
        /// Gets or Sets ScaleFont
        /// </summary>
        [DataMember(Name="bScaleFont", EmitDefaultValue=false)]
        public bool? ScaleFont { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JsonPdfSignApparence {\n");
            sb.Append("  Testo: ").Append(Testo).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  Page: ").Append(Page).Append("\n");
            sb.Append("  Leftx: ").Append(Leftx).Append("\n");
            sb.Append("  Lefty: ").Append(Lefty).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  Rightx: ").Append(Rightx).Append("\n");
            sb.Append("  Righty: ").Append(Righty).Append("\n");
            sb.Append("  ImageOnly: ").Append(ImageOnly).Append("\n");
            sb.Append("  ImageBin: ").Append(ImageBin).Append("\n");
            sb.Append("  ResizeMode: ").Append(ResizeMode).Append("\n");
            sb.Append("  ShowDateTime: ").Append(ShowDateTime).Append("\n");
            sb.Append("  ScaleFont: ").Append(ScaleFont).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as JsonPdfSignApparence);
        }

        /// <summary>
        /// Returns true if JsonPdfSignApparence instances are equal
        /// </summary>
        /// <param name="input">Instance of JsonPdfSignApparence to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JsonPdfSignApparence input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Testo == input.Testo ||
                    (this.Testo != null &&
                    this.Testo.Equals(input.Testo))
                ) && 
                (
                    this.Image == input.Image ||
                    (this.Image != null &&
                    this.Image.Equals(input.Image))
                ) && 
                (
                    this.Page == input.Page ||
                    (this.Page != null &&
                    this.Page.Equals(input.Page))
                ) && 
                (
                    this.Leftx == input.Leftx ||
                    (this.Leftx != null &&
                    this.Leftx.Equals(input.Leftx))
                ) && 
                (
                    this.Lefty == input.Lefty ||
                    (this.Lefty != null &&
                    this.Lefty.Equals(input.Lefty))
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.Reason == input.Reason ||
                    (this.Reason != null &&
                    this.Reason.Equals(input.Reason))
                ) && 
                (
                    this.Rightx == input.Rightx ||
                    (this.Rightx != null &&
                    this.Rightx.Equals(input.Rightx))
                ) && 
                (
                    this.Righty == input.Righty ||
                    (this.Righty != null &&
                    this.Righty.Equals(input.Righty))
                ) && 
                (
                    this.ImageOnly == input.ImageOnly ||
                    (this.ImageOnly != null &&
                    this.ImageOnly.Equals(input.ImageOnly))
                ) && 
                (
                    this.ImageBin == input.ImageBin ||
                    (this.ImageBin != null &&
                    this.ImageBin.Equals(input.ImageBin))
                ) && 
                (
                    this.ResizeMode == input.ResizeMode ||
                    (this.ResizeMode != null &&
                    this.ResizeMode.Equals(input.ResizeMode))
                ) && 
                (
                    this.ShowDateTime == input.ShowDateTime ||
                    (this.ShowDateTime != null &&
                    this.ShowDateTime.Equals(input.ShowDateTime))
                ) && 
                (
                    this.ScaleFont == input.ScaleFont ||
                    (this.ScaleFont != null &&
                    this.ScaleFont.Equals(input.ScaleFont))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Testo != null)
                    hashCode = hashCode * 59 + this.Testo.GetHashCode();
                if (this.Image != null)
                    hashCode = hashCode * 59 + this.Image.GetHashCode();
                if (this.Page != null)
                    hashCode = hashCode * 59 + this.Page.GetHashCode();
                if (this.Leftx != null)
                    hashCode = hashCode * 59 + this.Leftx.GetHashCode();
                if (this.Lefty != null)
                    hashCode = hashCode * 59 + this.Lefty.GetHashCode();
                if (this.Location != null)
                    hashCode = hashCode * 59 + this.Location.GetHashCode();
                if (this.Reason != null)
                    hashCode = hashCode * 59 + this.Reason.GetHashCode();
                if (this.Rightx != null)
                    hashCode = hashCode * 59 + this.Rightx.GetHashCode();
                if (this.Righty != null)
                    hashCode = hashCode * 59 + this.Righty.GetHashCode();
                if (this.ImageOnly != null)
                    hashCode = hashCode * 59 + this.ImageOnly.GetHashCode();
                if (this.ImageBin != null)
                    hashCode = hashCode * 59 + this.ImageBin.GetHashCode();
                if (this.ResizeMode != null)
                    hashCode = hashCode * 59 + this.ResizeMode.GetHashCode();
                if (this.ShowDateTime != null)
                    hashCode = hashCode * 59 + this.ShowDateTime.GetHashCode();
                if (this.ScaleFont != null)
                    hashCode = hashCode * 59 + this.ScaleFont.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
