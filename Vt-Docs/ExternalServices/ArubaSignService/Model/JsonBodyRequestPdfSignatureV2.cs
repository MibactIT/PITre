/* 
 * ArubaSignService
 *
 * <h1>ArubaSignService</h1>
 *
 * OpenAPI spec version: 2.3.2-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ArubaSignServiceRest.Client.SwaggerDateConverter;

namespace ArubaSignServiceRest.Model
{
    /// <summary>
    /// Complex object, it provides a Sign Request for a PDF (PAdES standard)
    /// </summary>
    [DataContract]
    public partial class JsonBodyRequestPdfSignatureV2 :  IEquatable<JsonBodyRequestPdfSignatureV2>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JsonBodyRequestPdfSignatureV2" /> class.
        /// </summary>
        /// <param name="request">Object that contains a Signature Request.</param>
        /// <param name="apparence">Object that contains the needed parameters for PAdES signature.</param>
        /// <param name="pdfprofile">Pdf Signature Profile desidered. &lt;br/&gt;  If empty the default value is a BASIC PADESBES PADESLTV with possibily image path.</param>
        /// <param name="password">Password used for open encrypted PDF.</param>
        /// <param name="dictSignedAttributes">Object that contains \&quot;Dictionary Signature Properties\&quot; that may be specified.</param>
        public JsonBodyRequestPdfSignatureV2(JsonSignRequestV2 request = default(JsonSignRequestV2), JsonPdfSignApparence apparence = default(JsonPdfSignApparence), JsonPDFProfile pdfprofile = default(JsonPDFProfile), string password = default(string), JsonDictionarySignedAttributes dictSignedAttributes = default(JsonDictionarySignedAttributes))
        {
            this.Request = request;
            this.Apparence = apparence;
            this.Pdfprofile = pdfprofile;
            this.Password = password;
            this.DictSignedAttributes = dictSignedAttributes;
        }
        
        /// <summary>
        /// Object that contains a Signature Request
        /// </summary>
        /// <value>Object that contains a Signature Request</value>
        [DataMember(Name="request", EmitDefaultValue=false)]
        public JsonSignRequestV2 Request { get; set; }

        /// <summary>
        /// Object that contains the needed parameters for PAdES signature
        /// </summary>
        /// <value>Object that contains the needed parameters for PAdES signature</value>
        [DataMember(Name="apparence", EmitDefaultValue=false)]
        public JsonPdfSignApparence Apparence { get; set; }

        /// <summary>
        /// Pdf Signature Profile desidered. &lt;br/&gt;  If empty the default value is a BASIC PADESBES PADESLTV with possibily image path
        /// </summary>
        /// <value>Pdf Signature Profile desidered. &lt;br/&gt;  If empty the default value is a BASIC PADESBES PADESLTV with possibily image path</value>
        [DataMember(Name="pdfprofile", EmitDefaultValue=false)]
        public JsonPDFProfile Pdfprofile { get; set; }

        /// <summary>
        /// Password used for open encrypted PDF
        /// </summary>
        /// <value>Password used for open encrypted PDF</value>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }

        /// <summary>
        /// Object that contains \&quot;Dictionary Signature Properties\&quot; that may be specified
        /// </summary>
        /// <value>Object that contains \&quot;Dictionary Signature Properties\&quot; that may be specified</value>
        [DataMember(Name="dict_signed_attributes", EmitDefaultValue=false)]
        public JsonDictionarySignedAttributes DictSignedAttributes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JsonBodyRequestPdfSignatureV2 {\n");
            sb.Append("  Request: ").Append(Request).Append("\n");
            sb.Append("  Apparence: ").Append(Apparence).Append("\n");
            sb.Append("  Pdfprofile: ").Append(Pdfprofile).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  DictSignedAttributes: ").Append(DictSignedAttributes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as JsonBodyRequestPdfSignatureV2);
        }

        /// <summary>
        /// Returns true if JsonBodyRequestPdfSignatureV2 instances are equal
        /// </summary>
        /// <param name="input">Instance of JsonBodyRequestPdfSignatureV2 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JsonBodyRequestPdfSignatureV2 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Request == input.Request ||
                    (this.Request != null &&
                    this.Request.Equals(input.Request))
                ) && 
                (
                    this.Apparence == input.Apparence ||
                    (this.Apparence != null &&
                    this.Apparence.Equals(input.Apparence))
                ) && 
                (
                    this.Pdfprofile == input.Pdfprofile ||
                    (this.Pdfprofile != null &&
                    this.Pdfprofile.Equals(input.Pdfprofile))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.DictSignedAttributes == input.DictSignedAttributes ||
                    (this.DictSignedAttributes != null &&
                    this.DictSignedAttributes.Equals(input.DictSignedAttributes))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Request != null)
                    hashCode = hashCode * 59 + this.Request.GetHashCode();
                if (this.Apparence != null)
                    hashCode = hashCode * 59 + this.Apparence.GetHashCode();
                if (this.Pdfprofile != null)
                    hashCode = hashCode * 59 + this.Pdfprofile.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                if (this.DictSignedAttributes != null)
                    hashCode = hashCode * 59 + this.DictSignedAttributes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
