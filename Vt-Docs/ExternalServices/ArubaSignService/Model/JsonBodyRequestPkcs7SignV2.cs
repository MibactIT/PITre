/* 
 * ArubaSignService
 *
 * <h1>ArubaSignService</h1>
 *
 * OpenAPI spec version: 2.3.2-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ArubaSignServiceRest.Client.SwaggerDateConverter;

namespace ArubaSignServiceRest.Model
{
    /// <summary>
    /// Complex object, it provides a Sign Request for the document
    /// </summary>
    [DataContract]
    public partial class JsonBodyRequestPkcs7SignV2 :  IEquatable<JsonBodyRequestPkcs7SignV2>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JsonBodyRequestPkcs7SignV2" /> class.
        /// </summary>
        /// <param name="request">Object that contains a Signature Request..</param>
        /// <param name="detached">\&quot;true\&quot; if the request is \&quot;Cades detached\&quot; that it mean without original document.</param>
        /// <param name="returnder">\&quot;true\&quot; if it&#39;s a DER Encoding instead a default BER Encoding.</param>
        public JsonBodyRequestPkcs7SignV2(JsonSignRequestV2 request = default(JsonSignRequestV2), bool? detached = default(bool?), bool? returnder = default(bool?))
        {
            this.Request = request;
            this.Detached = detached;
            this.Returnder = returnder;
        }
        
        /// <summary>
        /// Object that contains a Signature Request.
        /// </summary>
        /// <value>Object that contains a Signature Request.</value>
        [DataMember(Name="request", EmitDefaultValue=false)]
        public JsonSignRequestV2 Request { get; set; }

        /// <summary>
        /// \&quot;true\&quot; if the request is \&quot;Cades detached\&quot; that it mean without original document
        /// </summary>
        /// <value>\&quot;true\&quot; if the request is \&quot;Cades detached\&quot; that it mean without original document</value>
        [DataMember(Name="detached", EmitDefaultValue=false)]
        public bool? Detached { get; set; }

        /// <summary>
        /// \&quot;true\&quot; if it&#39;s a DER Encoding instead a default BER Encoding
        /// </summary>
        /// <value>\&quot;true\&quot; if it&#39;s a DER Encoding instead a default BER Encoding</value>
        [DataMember(Name="returnder", EmitDefaultValue=false)]
        public bool? Returnder { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JsonBodyRequestPkcs7SignV2 {\n");
            sb.Append("  Request: ").Append(Request).Append("\n");
            sb.Append("  Detached: ").Append(Detached).Append("\n");
            sb.Append("  Returnder: ").Append(Returnder).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as JsonBodyRequestPkcs7SignV2);
        }

        /// <summary>
        /// Returns true if JsonBodyRequestPkcs7SignV2 instances are equal
        /// </summary>
        /// <param name="input">Instance of JsonBodyRequestPkcs7SignV2 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JsonBodyRequestPkcs7SignV2 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Request == input.Request ||
                    (this.Request != null &&
                    this.Request.Equals(input.Request))
                ) && 
                (
                    this.Detached == input.Detached ||
                    (this.Detached != null &&
                    this.Detached.Equals(input.Detached))
                ) && 
                (
                    this.Returnder == input.Returnder ||
                    (this.Returnder != null &&
                    this.Returnder.Equals(input.Returnder))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Request != null)
                    hashCode = hashCode * 59 + this.Request.GetHashCode();
                if (this.Detached != null)
                    hashCode = hashCode * 59 + this.Detached.GetHashCode();
                if (this.Returnder != null)
                    hashCode = hashCode * 59 + this.Returnder.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
