/* 
 * ArubaSignService
 *
 * <h1>ArubaSignService</h1>
 *
 * OpenAPI spec version: 2.3.2-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ArubaSignServiceRest.Client.SwaggerDateConverter;

namespace ArubaSignServiceRest.Model
{
    /// <summary>
    /// Complex object, it provides a Signature Request
    /// </summary>
    [DataContract]
    public partial class JsonSignHashRequest :  IEquatable<JsonSignHashRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JsonSignHashRequest" /> class.
        /// </summary>
        /// <param name="requirecert">If \&quot;true\&quot; it&#39;s required the certificate in response.</param>
        /// <param name="sessionId">Session Id for multiple signatures (in other case this value must be null).</param>
        /// <param name="certID">ID of certificate used for signature.</param>
        /// <param name="hash">Byte Array that contains the document to pkcs1 sign.</param>
        /// <param name="hashtype">Name of hash alghorith used (only \&quot;SHA256\&quot; available).</param>
        /// <param name="identity">Object that cointains Signer Credentials for authentication.</param>
        public JsonSignHashRequest(bool? requirecert = default(bool?), string sessionId = default(string), string certID = default(string), string hash = default(string), string hashtype = default(string), JsonAuth identity = default(JsonAuth))
        {
            this.Requirecert = requirecert;
            this.SessionId = sessionId;
            this.CertID = certID;
            this.Hash = hash;
            this.Hashtype = hashtype;
            this.Identity = identity;
        }
        
        /// <summary>
        /// If \&quot;true\&quot; it&#39;s required the certificate in response
        /// </summary>
        /// <value>If \&quot;true\&quot; it&#39;s required the certificate in response</value>
        [DataMember(Name="requirecert", EmitDefaultValue=false)]
        public bool? Requirecert { get; set; }

        /// <summary>
        /// Session Id for multiple signatures (in other case this value must be null)
        /// </summary>
        /// <value>Session Id for multiple signatures (in other case this value must be null)</value>
        [DataMember(Name="session_id", EmitDefaultValue=false)]
        public string SessionId { get; set; }

        /// <summary>
        /// ID of certificate used for signature
        /// </summary>
        /// <value>ID of certificate used for signature</value>
        [DataMember(Name="certID", EmitDefaultValue=false)]
        public string CertID { get; set; }

        /// <summary>
        /// Byte Array that contains the document to pkcs1 sign
        /// </summary>
        /// <value>Byte Array that contains the document to pkcs1 sign</value>
        [DataMember(Name="hash", EmitDefaultValue=false)]
        public string Hash { get; set; }

        /// <summary>
        /// Name of hash alghorith used (only \&quot;SHA256\&quot; available)
        /// </summary>
        /// <value>Name of hash alghorith used (only \&quot;SHA256\&quot; available)</value>
        [DataMember(Name="hashtype", EmitDefaultValue=false)]
        public string Hashtype { get; set; }

        /// <summary>
        /// Object that cointains Signer Credentials for authentication
        /// </summary>
        /// <value>Object that cointains Signer Credentials for authentication</value>
        [DataMember(Name="identity", EmitDefaultValue=false)]
        public JsonAuth Identity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JsonSignHashRequest {\n");
            sb.Append("  Requirecert: ").Append(Requirecert).Append("\n");
            sb.Append("  SessionId: ").Append(SessionId).Append("\n");
            sb.Append("  CertID: ").Append(CertID).Append("\n");
            sb.Append("  Hash: ").Append(Hash).Append("\n");
            sb.Append("  Hashtype: ").Append(Hashtype).Append("\n");
            sb.Append("  Identity: ").Append(Identity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as JsonSignHashRequest);
        }

        /// <summary>
        /// Returns true if JsonSignHashRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of JsonSignHashRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JsonSignHashRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Requirecert == input.Requirecert ||
                    (this.Requirecert != null &&
                    this.Requirecert.Equals(input.Requirecert))
                ) && 
                (
                    this.SessionId == input.SessionId ||
                    (this.SessionId != null &&
                    this.SessionId.Equals(input.SessionId))
                ) && 
                (
                    this.CertID == input.CertID ||
                    (this.CertID != null &&
                    this.CertID.Equals(input.CertID))
                ) && 
                (
                    this.Hash == input.Hash ||
                    (this.Hash != null &&
                    this.Hash.Equals(input.Hash))
                ) && 
                (
                    this.Hashtype == input.Hashtype ||
                    (this.Hashtype != null &&
                    this.Hashtype.Equals(input.Hashtype))
                ) && 
                (
                    this.Identity == input.Identity ||
                    (this.Identity != null &&
                    this.Identity.Equals(input.Identity))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Requirecert != null)
                    hashCode = hashCode * 59 + this.Requirecert.GetHashCode();
                if (this.SessionId != null)
                    hashCode = hashCode * 59 + this.SessionId.GetHashCode();
                if (this.CertID != null)
                    hashCode = hashCode * 59 + this.CertID.GetHashCode();
                if (this.Hash != null)
                    hashCode = hashCode * 59 + this.Hash.GetHashCode();
                if (this.Hashtype != null)
                    hashCode = hashCode * 59 + this.Hashtype.GetHashCode();
                if (this.Identity != null)
                    hashCode = hashCode * 59 + this.Identity.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
