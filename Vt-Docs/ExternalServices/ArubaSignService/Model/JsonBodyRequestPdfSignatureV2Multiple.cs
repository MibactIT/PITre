/* 
 * ArubaSignService
 *
 * <h1>ArubaSignService</h1>
 *
 * OpenAPI spec version: 2.3.2-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ArubaSignServiceRest.Client.SwaggerDateConverter;

namespace ArubaSignServiceRest.Model
{
    /// <summary>
    /// Object containing the User Idendity, the list of Signature Request and other parameters
    /// </summary>
    [DataContract]
    public partial class JsonBodyRequestPdfSignatureV2Multiple :  IEquatable<JsonBodyRequestPdfSignatureV2Multiple>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JsonBodyRequestPdfSignatureV2Multiple" /> class.
        /// </summary>
        /// <param name="identity">User Idendity for which you&#39;re requesting the signatures.</param>
        /// <param name="requestList">A list of Signature Request.</param>
        /// <param name="apparence">Pdf Apparence, Signature coordinates.</param>
        /// <param name="pdfprofile">Pdf Signature Profile desidered ..</param>
        /// <param name="dictSignedAttributes">Object that contains \&quot;Dictionary Signature Properties\&quot; that may be specified.</param>
        public JsonBodyRequestPdfSignatureV2Multiple(JsonAuth identity = default(JsonAuth), List<JsonSignRequestV2> requestList = default(List<JsonSignRequestV2>), JsonPdfSignApparence apparence = default(JsonPdfSignApparence), JsonPDFProfile pdfprofile = default(JsonPDFProfile), JsonDictionarySignedAttributes dictSignedAttributes = default(JsonDictionarySignedAttributes))
        {
            this.Identity = identity;
            this.RequestList = requestList;
            this.Apparence = apparence;
            this.Pdfprofile = pdfprofile;
            this.DictSignedAttributes = dictSignedAttributes;
        }
        
        /// <summary>
        /// User Idendity for which you&#39;re requesting the signatures
        /// </summary>
        /// <value>User Idendity for which you&#39;re requesting the signatures</value>
        [DataMember(Name="identity", EmitDefaultValue=false)]
        public JsonAuth Identity { get; set; }

        /// <summary>
        /// A list of Signature Request
        /// </summary>
        /// <value>A list of Signature Request</value>
        [DataMember(Name="requestList", EmitDefaultValue=false)]
        public List<JsonSignRequestV2> RequestList { get; set; }

        /// <summary>
        /// Pdf Apparence, Signature coordinates
        /// </summary>
        /// <value>Pdf Apparence, Signature coordinates</value>
        [DataMember(Name="apparence", EmitDefaultValue=false)]
        public JsonPdfSignApparence Apparence { get; set; }

        /// <summary>
        /// Pdf Signature Profile desidered .
        /// </summary>
        /// <value>Pdf Signature Profile desidered .</value>
        [DataMember(Name="pdfprofile", EmitDefaultValue=false)]
        public JsonPDFProfile Pdfprofile { get; set; }

        /// <summary>
        /// Object that contains \&quot;Dictionary Signature Properties\&quot; that may be specified
        /// </summary>
        /// <value>Object that contains \&quot;Dictionary Signature Properties\&quot; that may be specified</value>
        [DataMember(Name="dict_signed_attributes", EmitDefaultValue=false)]
        public JsonDictionarySignedAttributes DictSignedAttributes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JsonBodyRequestPdfSignatureV2Multiple {\n");
            sb.Append("  Identity: ").Append(Identity).Append("\n");
            sb.Append("  RequestList: ").Append(RequestList).Append("\n");
            sb.Append("  Apparence: ").Append(Apparence).Append("\n");
            sb.Append("  Pdfprofile: ").Append(Pdfprofile).Append("\n");
            sb.Append("  DictSignedAttributes: ").Append(DictSignedAttributes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as JsonBodyRequestPdfSignatureV2Multiple);
        }

        /// <summary>
        /// Returns true if JsonBodyRequestPdfSignatureV2Multiple instances are equal
        /// </summary>
        /// <param name="input">Instance of JsonBodyRequestPdfSignatureV2Multiple to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JsonBodyRequestPdfSignatureV2Multiple input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Identity == input.Identity ||
                    (this.Identity != null &&
                    this.Identity.Equals(input.Identity))
                ) && 
                (
                    this.RequestList == input.RequestList ||
                    this.RequestList != null &&
                    this.RequestList.SequenceEqual(input.RequestList)
                ) && 
                (
                    this.Apparence == input.Apparence ||
                    (this.Apparence != null &&
                    this.Apparence.Equals(input.Apparence))
                ) && 
                (
                    this.Pdfprofile == input.Pdfprofile ||
                    (this.Pdfprofile != null &&
                    this.Pdfprofile.Equals(input.Pdfprofile))
                ) && 
                (
                    this.DictSignedAttributes == input.DictSignedAttributes ||
                    (this.DictSignedAttributes != null &&
                    this.DictSignedAttributes.Equals(input.DictSignedAttributes))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Identity != null)
                    hashCode = hashCode * 59 + this.Identity.GetHashCode();
                if (this.RequestList != null)
                    hashCode = hashCode * 59 + this.RequestList.GetHashCode();
                if (this.Apparence != null)
                    hashCode = hashCode * 59 + this.Apparence.GetHashCode();
                if (this.Pdfprofile != null)
                    hashCode = hashCode * 59 + this.Pdfprofile.GetHashCode();
                if (this.DictSignedAttributes != null)
                    hashCode = hashCode * 59 + this.DictSignedAttributes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
