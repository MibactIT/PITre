/* 
 * ArubaSignService
 *
 * <h1>ArubaSignService</h1>
 *
 * OpenAPI spec version: 2.3.2-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ArubaSignServiceRest.Client.SwaggerDateConverter;

namespace ArubaSignServiceRest.Model
{
    /// <summary>
    /// Object that contains a Signature Request. &lt;br/&gt;  If valorized the ID will be used as uniqe code of client to use with a eventual process notifier. &lt;br/&gt;  Usable in case of multiple signature of folders
    /// </summary>
    [DataContract]
    public partial class JsonSignRequestV2 :  IEquatable<JsonSignRequestV2>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JsonSignRequestV2" /> class.
        /// </summary>
        /// <param name="binaryinput">Byte Array that contains the document to signature OR the hash for hash signature (only for Transport &#x3D; BINARYNET).</param>
        /// <param name="certID">Cetificate Id (for future use). For now set to &#39;AS0&#39;.</param>
        /// <param name="dstName">Destination file path OR destination directory path (only for Transport &#x3D; FILENAME or DIRECTORYNAME).</param>
        /// <param name="identity">Object that cointains Signer Credentials for authentication..</param>
        /// <param name="notifyId">ID associated to the signatures session for notifications.</param>
        /// <param name="notifymail">Email for notifications (withe relative ID).</param>
        /// <param name="profile">Profile Object that contains signature structure.&lt;br/&gt;  It&#39;s used only for pkcs7 method and hash method.&lt;br/&gt;  If NULL then Default Profile is used (recommended)..</param>
        /// <param name="requiredmark">If \&quot;true\&quot; then it&#39;s required a mark for signature.</param>
        /// <param name="sessionId">Session Id for create multiple signatures without specify a pin for every signature (in other case this value must be null).&lt;br/&gt;  Use \&quot;opensession\&quot; for getting a session id and \&quot;closesession\&quot; to invalidate session..</param>
        /// <param name="signingTime">Signature Date (time string format [dd/MM/yyyy HH:mm:ss]) used in the attribute \&quot;signingtime\&quot; of signature.&lt;br/&gt;  If NULL then current date is used.</param>
        /// <param name="srcName">Path to file OR directory path that contains the files to be signed (only for Transport &#x3D; FILENAME or DIRECTORYNAME).</param>
        /// <param name="stream">Stream used to load large size file (only for Transport &#x3D; STREAM).</param>
        /// <param name="transport">Enum Class that indicates the type of input (trasport). &lt;br/&gt;  BYNARYNET, FILENAME, DIRECTORYNAME, STREAM.</param>
        /// <param name="tsaIdentity">Object that contains authentication data for TSS Server.&lt;br/&gt;  If not specified it&#39;s used a default account (if it&#39;s configurated).</param>
        public JsonSignRequestV2(string binaryinput = default(string), string certID = default(string), string dstName = default(string), JsonAuth identity = default(JsonAuth), string notifyId = default(string), string notifymail = default(string), string profile = default(string), bool? requiredmark = default(bool?), string sessionId = default(string), string signingTime = default(string), string srcName = default(string), string stream = default(string), JsonTypeTransport transport = default(JsonTypeTransport), JsonTSAAuth tsaIdentity = default(JsonTSAAuth))
        {
            this.Binaryinput = binaryinput;
            this.CertID = certID;
            this.DstName = dstName;
            this.Identity = identity;
            this.NotifyId = notifyId;
            this.Notifymail = notifymail;
            this.Profile = profile;
            this.Requiredmark = requiredmark;
            this.SessionId = sessionId;
            this.SigningTime = signingTime;
            this.SrcName = srcName;
            this.Stream = stream;
            this.Transport = transport;
            this.TsaIdentity = tsaIdentity;
        }
        
        /// <summary>
        /// Byte Array that contains the document to signature OR the hash for hash signature (only for Transport &#x3D; BINARYNET)
        /// </summary>
        /// <value>Byte Array that contains the document to signature OR the hash for hash signature (only for Transport &#x3D; BINARYNET)</value>
        [DataMember(Name="binaryinput", EmitDefaultValue=false)]
        public string Binaryinput { get; set; }

        /// <summary>
        /// Cetificate Id (for future use). For now set to &#39;AS0&#39;
        /// </summary>
        /// <value>Cetificate Id (for future use). For now set to &#39;AS0&#39;</value>
        [DataMember(Name="certID", EmitDefaultValue=false)]
        public string CertID { get; set; }

        /// <summary>
        /// Destination file path OR destination directory path (only for Transport &#x3D; FILENAME or DIRECTORYNAME)
        /// </summary>
        /// <value>Destination file path OR destination directory path (only for Transport &#x3D; FILENAME or DIRECTORYNAME)</value>
        [DataMember(Name="dstName", EmitDefaultValue=false)]
        public string DstName { get; set; }

        /// <summary>
        /// Object that cointains Signer Credentials for authentication.
        /// </summary>
        /// <value>Object that cointains Signer Credentials for authentication.</value>
        [DataMember(Name="identity", EmitDefaultValue=false)]
        public JsonAuth Identity { get; set; }

        /// <summary>
        /// ID associated to the signatures session for notifications
        /// </summary>
        /// <value>ID associated to the signatures session for notifications</value>
        [DataMember(Name="notify_id", EmitDefaultValue=false)]
        public string NotifyId { get; set; }

        /// <summary>
        /// Email for notifications (withe relative ID)
        /// </summary>
        /// <value>Email for notifications (withe relative ID)</value>
        [DataMember(Name="notifymail", EmitDefaultValue=false)]
        public string Notifymail { get; set; }

        /// <summary>
        /// Profile Object that contains signature structure.&lt;br/&gt;  It&#39;s used only for pkcs7 method and hash method.&lt;br/&gt;  If NULL then Default Profile is used (recommended).
        /// </summary>
        /// <value>Profile Object that contains signature structure.&lt;br/&gt;  It&#39;s used only for pkcs7 method and hash method.&lt;br/&gt;  If NULL then Default Profile is used (recommended).</value>
        [DataMember(Name="profile", EmitDefaultValue=false)]
        public string Profile { get; set; }

        /// <summary>
        /// If \&quot;true\&quot; then it&#39;s required a mark for signature
        /// </summary>
        /// <value>If \&quot;true\&quot; then it&#39;s required a mark for signature</value>
        [DataMember(Name="requiredmark", EmitDefaultValue=false)]
        public bool? Requiredmark { get; set; }

        /// <summary>
        /// Session Id for create multiple signatures without specify a pin for every signature (in other case this value must be null).&lt;br/&gt;  Use \&quot;opensession\&quot; for getting a session id and \&quot;closesession\&quot; to invalidate session.
        /// </summary>
        /// <value>Session Id for create multiple signatures without specify a pin for every signature (in other case this value must be null).&lt;br/&gt;  Use \&quot;opensession\&quot; for getting a session id and \&quot;closesession\&quot; to invalidate session.</value>
        [DataMember(Name="session_id", EmitDefaultValue=false)]
        public string SessionId { get; set; }

        /// <summary>
        /// Signature Date (time string format [dd/MM/yyyy HH:mm:ss]) used in the attribute \&quot;signingtime\&quot; of signature.&lt;br/&gt;  If NULL then current date is used
        /// </summary>
        /// <value>Signature Date (time string format [dd/MM/yyyy HH:mm:ss]) used in the attribute \&quot;signingtime\&quot; of signature.&lt;br/&gt;  If NULL then current date is used</value>
        [DataMember(Name="signingTime", EmitDefaultValue=false)]
        public string SigningTime { get; set; }

        /// <summary>
        /// Path to file OR directory path that contains the files to be signed (only for Transport &#x3D; FILENAME or DIRECTORYNAME)
        /// </summary>
        /// <value>Path to file OR directory path that contains the files to be signed (only for Transport &#x3D; FILENAME or DIRECTORYNAME)</value>
        [DataMember(Name="srcName", EmitDefaultValue=false)]
        public string SrcName { get; set; }

        /// <summary>
        /// Stream used to load large size file (only for Transport &#x3D; STREAM)
        /// </summary>
        /// <value>Stream used to load large size file (only for Transport &#x3D; STREAM)</value>
        [DataMember(Name="stream", EmitDefaultValue=false)]
        public string Stream { get; set; }

        /// <summary>
        /// Enum Class that indicates the type of input (trasport). &lt;br/&gt;  BYNARYNET, FILENAME, DIRECTORYNAME, STREAM
        /// </summary>
        /// <value>Enum Class that indicates the type of input (trasport). &lt;br/&gt;  BYNARYNET, FILENAME, DIRECTORYNAME, STREAM</value>
        [DataMember(Name="transport", EmitDefaultValue=false)]
        public JsonTypeTransport Transport { get; set; }

        /// <summary>
        /// Object that contains authentication data for TSS Server.&lt;br/&gt;  If not specified it&#39;s used a default account (if it&#39;s configurated)
        /// </summary>
        /// <value>Object that contains authentication data for TSS Server.&lt;br/&gt;  If not specified it&#39;s used a default account (if it&#39;s configurated)</value>
        [DataMember(Name="tsa_identity", EmitDefaultValue=false)]
        public JsonTSAAuth TsaIdentity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JsonSignRequestV2 {\n");
            sb.Append("  Binaryinput: ").Append(Binaryinput).Append("\n");
            sb.Append("  CertID: ").Append(CertID).Append("\n");
            sb.Append("  DstName: ").Append(DstName).Append("\n");
            sb.Append("  Identity: ").Append(Identity).Append("\n");
            sb.Append("  NotifyId: ").Append(NotifyId).Append("\n");
            sb.Append("  Notifymail: ").Append(Notifymail).Append("\n");
            sb.Append("  Profile: ").Append(Profile).Append("\n");
            sb.Append("  Requiredmark: ").Append(Requiredmark).Append("\n");
            sb.Append("  SessionId: ").Append(SessionId).Append("\n");
            sb.Append("  SigningTime: ").Append(SigningTime).Append("\n");
            sb.Append("  SrcName: ").Append(SrcName).Append("\n");
            sb.Append("  Stream: ").Append(Stream).Append("\n");
            sb.Append("  Transport: ").Append(Transport).Append("\n");
            sb.Append("  TsaIdentity: ").Append(TsaIdentity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as JsonSignRequestV2);
        }

        /// <summary>
        /// Returns true if JsonSignRequestV2 instances are equal
        /// </summary>
        /// <param name="input">Instance of JsonSignRequestV2 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JsonSignRequestV2 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Binaryinput == input.Binaryinput ||
                    (this.Binaryinput != null &&
                    this.Binaryinput.Equals(input.Binaryinput))
                ) && 
                (
                    this.CertID == input.CertID ||
                    (this.CertID != null &&
                    this.CertID.Equals(input.CertID))
                ) && 
                (
                    this.DstName == input.DstName ||
                    (this.DstName != null &&
                    this.DstName.Equals(input.DstName))
                ) && 
                (
                    this.Identity == input.Identity ||
                    (this.Identity != null &&
                    this.Identity.Equals(input.Identity))
                ) && 
                (
                    this.NotifyId == input.NotifyId ||
                    (this.NotifyId != null &&
                    this.NotifyId.Equals(input.NotifyId))
                ) && 
                (
                    this.Notifymail == input.Notifymail ||
                    (this.Notifymail != null &&
                    this.Notifymail.Equals(input.Notifymail))
                ) && 
                (
                    this.Profile == input.Profile ||
                    (this.Profile != null &&
                    this.Profile.Equals(input.Profile))
                ) && 
                (
                    this.Requiredmark == input.Requiredmark ||
                    (this.Requiredmark != null &&
                    this.Requiredmark.Equals(input.Requiredmark))
                ) && 
                (
                    this.SessionId == input.SessionId ||
                    (this.SessionId != null &&
                    this.SessionId.Equals(input.SessionId))
                ) && 
                (
                    this.SigningTime == input.SigningTime ||
                    (this.SigningTime != null &&
                    this.SigningTime.Equals(input.SigningTime))
                ) && 
                (
                    this.SrcName == input.SrcName ||
                    (this.SrcName != null &&
                    this.SrcName.Equals(input.SrcName))
                ) && 
                (
                    this.Stream == input.Stream ||
                    (this.Stream != null &&
                    this.Stream.Equals(input.Stream))
                ) && 
                (
                    this.Transport == input.Transport ||
                    (this.Transport != null &&
                    this.Transport.Equals(input.Transport))
                ) && 
                (
                    this.TsaIdentity == input.TsaIdentity ||
                    (this.TsaIdentity != null &&
                    this.TsaIdentity.Equals(input.TsaIdentity))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Binaryinput != null)
                    hashCode = hashCode * 59 + this.Binaryinput.GetHashCode();
                if (this.CertID != null)
                    hashCode = hashCode * 59 + this.CertID.GetHashCode();
                if (this.DstName != null)
                    hashCode = hashCode * 59 + this.DstName.GetHashCode();
                if (this.Identity != null)
                    hashCode = hashCode * 59 + this.Identity.GetHashCode();
                if (this.NotifyId != null)
                    hashCode = hashCode * 59 + this.NotifyId.GetHashCode();
                if (this.Notifymail != null)
                    hashCode = hashCode * 59 + this.Notifymail.GetHashCode();
                if (this.Profile != null)
                    hashCode = hashCode * 59 + this.Profile.GetHashCode();
                if (this.Requiredmark != null)
                    hashCode = hashCode * 59 + this.Requiredmark.GetHashCode();
                if (this.SessionId != null)
                    hashCode = hashCode * 59 + this.SessionId.GetHashCode();
                if (this.SigningTime != null)
                    hashCode = hashCode * 59 + this.SigningTime.GetHashCode();
                if (this.SrcName != null)
                    hashCode = hashCode * 59 + this.SrcName.GetHashCode();
                if (this.Stream != null)
                    hashCode = hashCode * 59 + this.Stream.GetHashCode();
                if (this.Transport != null)
                    hashCode = hashCode * 59 + this.Transport.GetHashCode();
                if (this.TsaIdentity != null)
                    hashCode = hashCode * 59 + this.TsaIdentity.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
