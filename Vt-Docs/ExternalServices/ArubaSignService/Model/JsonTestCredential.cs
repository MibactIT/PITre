/* 
 * ArubaSignService
 *
 * <h1>ArubaSignService</h1>
 *
 * OpenAPI spec version: 2.3.2-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ArubaSignServiceRest.Client.SwaggerDateConverter;

namespace ArubaSignServiceRest.Model
{
    /// <summary>
    /// JsonTestCredential
    /// </summary>
    [DataContract]
    public partial class JsonTestCredential :  IEquatable<JsonTestCredential>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JsonTestCredential" /> class.
        /// </summary>
        /// <param name="dummyOtp">dummyOtp.</param>
        /// <param name="appidentity">appidentity.</param>
        /// <param name="domain">domain.</param>
        /// <param name="user">user.</param>
        public JsonTestCredential(string dummyOtp = default(string), JsonApplicationAuth appidentity = default(JsonApplicationAuth), string domain = default(string), string user = default(string))
        {
            this.DummyOtp = dummyOtp;
            this.Appidentity = appidentity;
            this.Domain = domain;
            this.User = user;
        }
        
        /// <summary>
        /// Gets or Sets DummyOtp
        /// </summary>
        [DataMember(Name="dummy_otp", EmitDefaultValue=false)]
        public string DummyOtp { get; set; }

        /// <summary>
        /// Gets or Sets Appidentity
        /// </summary>
        [DataMember(Name="appidentity", EmitDefaultValue=false)]
        public JsonApplicationAuth Appidentity { get; set; }

        /// <summary>
        /// Gets or Sets Domain
        /// </summary>
        [DataMember(Name="domain", EmitDefaultValue=false)]
        public string Domain { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public string User { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JsonTestCredential {\n");
            sb.Append("  DummyOtp: ").Append(DummyOtp).Append("\n");
            sb.Append("  Appidentity: ").Append(Appidentity).Append("\n");
            sb.Append("  Domain: ").Append(Domain).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as JsonTestCredential);
        }

        /// <summary>
        /// Returns true if JsonTestCredential instances are equal
        /// </summary>
        /// <param name="input">Instance of JsonTestCredential to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JsonTestCredential input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DummyOtp == input.DummyOtp ||
                    (this.DummyOtp != null &&
                    this.DummyOtp.Equals(input.DummyOtp))
                ) && 
                (
                    this.Appidentity == input.Appidentity ||
                    (this.Appidentity != null &&
                    this.Appidentity.Equals(input.Appidentity))
                ) && 
                (
                    this.Domain == input.Domain ||
                    (this.Domain != null &&
                    this.Domain.Equals(input.Domain))
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DummyOtp != null)
                    hashCode = hashCode * 59 + this.DummyOtp.GetHashCode();
                if (this.Appidentity != null)
                    hashCode = hashCode * 59 + this.Appidentity.GetHashCode();
                if (this.Domain != null)
                    hashCode = hashCode * 59 + this.Domain.GetHashCode();
                if (this.User != null)
                    hashCode = hashCode * 59 + this.User.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
