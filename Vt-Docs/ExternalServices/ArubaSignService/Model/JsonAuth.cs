/* 
 * ArubaSignService
 *
 * <h1>ArubaSignService</h1>
 *
 * OpenAPI spec version: 2.3.2-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ArubaSignServiceRest.Client.SwaggerDateConverter;

namespace ArubaSignServiceRest.Model
{
    /// <summary>
    /// Object that cointains Signer Credentials for authentication. &lt;br/&gt;  The order of fields is important for WSDL
    /// </summary>
    [DataContract]
    public partial class JsonAuth :  IEquatable<JsonAuth>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JsonAuth" /> class.
        /// </summary>
        /// <param name="delegatedDomain">Domain of delegated user.</param>
        /// <param name="delegatedPassword">Password of delegated user.</param>
        /// <param name="delegatedUser">Username of delegated user.</param>
        /// <param name="extAuthBlobvalue">Authentication Credential for authentication methods with binary data.</param>
        /// <param name="extAuthValue">Authentication Credential for authentication method with plain-text data.</param>
        /// <param name="extAuthtype">Enum that indicates the extended auhtentication method.</param>
        /// <param name="otpPwd">OTP Code of User (this code changes depending on authentication domain).</param>
        /// <param name="typeHSM">HSM Type - Set to &#39;COSIGN&#39;.</param>
        /// <param name="typeOtpAuth">Authentication domain (authentication type).&lt;br/&gt;  For example: \&quot;firma\&quot; (our default domain for remote signature).</param>
        /// <param name="user">Signer user.</param>
        /// <param name="userPWD">Signer password.</param>
        public JsonAuth(string delegatedDomain = default(string), string delegatedPassword = default(string), string delegatedUser = default(string), string extAuthBlobvalue = default(string), string extAuthValue = default(string), JsonCredentialsType extAuthtype = default(JsonCredentialsType), string otpPwd = default(string), string typeHSM = default(string), string typeOtpAuth = default(string), string user = default(string), string userPWD = default(string))
        {
            this.DelegatedDomain = delegatedDomain;
            this.DelegatedPassword = delegatedPassword;
            this.DelegatedUser = delegatedUser;
            this.ExtAuthBlobvalue = extAuthBlobvalue;
            this.ExtAuthValue = extAuthValue;
            this.ExtAuthtype = extAuthtype;
            this.OtpPwd = otpPwd;
            this.TypeHSM = typeHSM;
            this.TypeOtpAuth = typeOtpAuth;
            this.User = user;
            this.UserPWD = userPWD;
        }
        
        /// <summary>
        /// Domain of delegated user
        /// </summary>
        /// <value>Domain of delegated user</value>
        [DataMember(Name="delegated_domain", EmitDefaultValue=false)]
        public string DelegatedDomain { get; set; }

        /// <summary>
        /// Password of delegated user
        /// </summary>
        /// <value>Password of delegated user</value>
        [DataMember(Name="delegated_password", EmitDefaultValue=false)]
        public string DelegatedPassword { get; set; }

        /// <summary>
        /// Username of delegated user
        /// </summary>
        /// <value>Username of delegated user</value>
        [DataMember(Name="delegated_user", EmitDefaultValue=false)]
        public string DelegatedUser { get; set; }

        /// <summary>
        /// Authentication Credential for authentication methods with binary data
        /// </summary>
        /// <value>Authentication Credential for authentication methods with binary data</value>
        [DataMember(Name="ext_auth_blobvalue", EmitDefaultValue=false)]
        public string ExtAuthBlobvalue { get; set; }

        /// <summary>
        /// Authentication Credential for authentication method with plain-text data
        /// </summary>
        /// <value>Authentication Credential for authentication method with plain-text data</value>
        [DataMember(Name="ext_auth_value", EmitDefaultValue=false)]
        public string ExtAuthValue { get; set; }

        /// <summary>
        /// Enum that indicates the extended auhtentication method
        /// </summary>
        /// <value>Enum that indicates the extended auhtentication method</value>
        [DataMember(Name="ext_authtype", EmitDefaultValue=false)]
        public JsonCredentialsType ExtAuthtype { get; set; }

        /// <summary>
        /// OTP Code of User (this code changes depending on authentication domain)
        /// </summary>
        /// <value>OTP Code of User (this code changes depending on authentication domain)</value>
        [DataMember(Name="otpPwd", EmitDefaultValue=false)]
        public string OtpPwd { get; set; }

        /// <summary>
        /// HSM Type - Set to &#39;COSIGN&#39;
        /// </summary>
        /// <value>HSM Type - Set to &#39;COSIGN&#39;</value>
        [DataMember(Name="typeHSM", EmitDefaultValue=false)]
        public string TypeHSM { get; set; }

        /// <summary>
        /// Authentication domain (authentication type).&lt;br/&gt;  For example: \&quot;firma\&quot; (our default domain for remote signature)
        /// </summary>
        /// <value>Authentication domain (authentication type).&lt;br/&gt;  For example: \&quot;firma\&quot; (our default domain for remote signature)</value>
        [DataMember(Name="typeOtpAuth", EmitDefaultValue=false)]
        public string TypeOtpAuth { get; set; }

        /// <summary>
        /// Signer user
        /// </summary>
        /// <value>Signer user</value>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public string User { get; set; }

        /// <summary>
        /// Signer password
        /// </summary>
        /// <value>Signer password</value>
        [DataMember(Name="userPWD", EmitDefaultValue=false)]
        public string UserPWD { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JsonAuth {\n");
            sb.Append("  DelegatedDomain: ").Append(DelegatedDomain).Append("\n");
            sb.Append("  DelegatedPassword: ").Append(DelegatedPassword).Append("\n");
            sb.Append("  DelegatedUser: ").Append(DelegatedUser).Append("\n");
            sb.Append("  ExtAuthBlobvalue: ").Append(ExtAuthBlobvalue).Append("\n");
            sb.Append("  ExtAuthValue: ").Append(ExtAuthValue).Append("\n");
            sb.Append("  ExtAuthtype: ").Append(ExtAuthtype).Append("\n");
            sb.Append("  OtpPwd: ").Append(OtpPwd).Append("\n");
            sb.Append("  TypeHSM: ").Append(TypeHSM).Append("\n");
            sb.Append("  TypeOtpAuth: ").Append(TypeOtpAuth).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  UserPWD: ").Append(UserPWD).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as JsonAuth);
        }

        /// <summary>
        /// Returns true if JsonAuth instances are equal
        /// </summary>
        /// <param name="input">Instance of JsonAuth to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JsonAuth input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DelegatedDomain == input.DelegatedDomain ||
                    (this.DelegatedDomain != null &&
                    this.DelegatedDomain.Equals(input.DelegatedDomain))
                ) && 
                (
                    this.DelegatedPassword == input.DelegatedPassword ||
                    (this.DelegatedPassword != null &&
                    this.DelegatedPassword.Equals(input.DelegatedPassword))
                ) && 
                (
                    this.DelegatedUser == input.DelegatedUser ||
                    (this.DelegatedUser != null &&
                    this.DelegatedUser.Equals(input.DelegatedUser))
                ) && 
                (
                    this.ExtAuthBlobvalue == input.ExtAuthBlobvalue ||
                    (this.ExtAuthBlobvalue != null &&
                    this.ExtAuthBlobvalue.Equals(input.ExtAuthBlobvalue))
                ) && 
                (
                    this.ExtAuthValue == input.ExtAuthValue ||
                    (this.ExtAuthValue != null &&
                    this.ExtAuthValue.Equals(input.ExtAuthValue))
                ) && 
                (
                    this.ExtAuthtype == input.ExtAuthtype ||
                    (this.ExtAuthtype != null &&
                    this.ExtAuthtype.Equals(input.ExtAuthtype))
                ) && 
                (
                    this.OtpPwd == input.OtpPwd ||
                    (this.OtpPwd != null &&
                    this.OtpPwd.Equals(input.OtpPwd))
                ) && 
                (
                    this.TypeHSM == input.TypeHSM ||
                    (this.TypeHSM != null &&
                    this.TypeHSM.Equals(input.TypeHSM))
                ) && 
                (
                    this.TypeOtpAuth == input.TypeOtpAuth ||
                    (this.TypeOtpAuth != null &&
                    this.TypeOtpAuth.Equals(input.TypeOtpAuth))
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                ) && 
                (
                    this.UserPWD == input.UserPWD ||
                    (this.UserPWD != null &&
                    this.UserPWD.Equals(input.UserPWD))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DelegatedDomain != null)
                    hashCode = hashCode * 59 + this.DelegatedDomain.GetHashCode();
                if (this.DelegatedPassword != null)
                    hashCode = hashCode * 59 + this.DelegatedPassword.GetHashCode();
                if (this.DelegatedUser != null)
                    hashCode = hashCode * 59 + this.DelegatedUser.GetHashCode();
                if (this.ExtAuthBlobvalue != null)
                    hashCode = hashCode * 59 + this.ExtAuthBlobvalue.GetHashCode();
                if (this.ExtAuthValue != null)
                    hashCode = hashCode * 59 + this.ExtAuthValue.GetHashCode();
                if (this.ExtAuthtype != null)
                    hashCode = hashCode * 59 + this.ExtAuthtype.GetHashCode();
                if (this.OtpPwd != null)
                    hashCode = hashCode * 59 + this.OtpPwd.GetHashCode();
                if (this.TypeHSM != null)
                    hashCode = hashCode * 59 + this.TypeHSM.GetHashCode();
                if (this.TypeOtpAuth != null)
                    hashCode = hashCode * 59 + this.TypeOtpAuth.GetHashCode();
                if (this.User != null)
                    hashCode = hashCode * 59 + this.User.GetHashCode();
                if (this.UserPWD != null)
                    hashCode = hashCode * 59 + this.UserPWD.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
