/* 
 * ArubaSignService
 *
 * <h1>ArubaSignService</h1>
 *
 * OpenAPI spec version: 2.3.2-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ArubaSignServiceRest.Client.SwaggerDateConverter;

namespace ArubaSignServiceRest.Model
{
    /// <summary>
    /// Sign request for PDF.
    /// </summary>
    [DataContract]
    public partial class XmlNs0PdfSignRequest : XmlNs0BaseSignRequest,  IEquatable<XmlNs0PdfSignRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="XmlNs0PdfSignRequest" /> class.
        /// </summary>
        /// <param name="isPdfA">Whether the PDF should be saved as PDF-A or not..</param>
        /// <param name="password">The PDF password..</param>
        public XmlNs0PdfSignRequest(bool? isPdfA = default(bool?), string password = default(string), XmlNs0SignOptions baseSignatureToDo = default(XmlNs0SignOptions), string binaryInput = default(string), string dstName = default(string), XmlNs0TypeTransport inputTransport = default(XmlNs0TypeTransport), string notifyId = default(string), string notifyMail = default(string), XmlNs0TypeTransport outputTransport = default(XmlNs0TypeTransport), XmlNs0PdfSignOptions pdfSignatureToDo = default(XmlNs0PdfSignOptions), string srcName = default(string), string stream = default(string)) : base()
        {
            this.IsPdfA = isPdfA;
            this.Password = password;
        }
        
        /// <summary>
        /// Whether the PDF should be saved as PDF-A or not.
        /// </summary>
        /// <value>Whether the PDF should be saved as PDF-A or not.</value>
        [DataMember(Name="isPdfA", EmitDefaultValue=false)]
        public bool? IsPdfA { get; set; }

        /// <summary>
        /// The PDF password.
        /// </summary>
        /// <value>The PDF password.</value>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class XmlNs0PdfSignRequest {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  IsPdfA: ").Append(IsPdfA).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as XmlNs0PdfSignRequest);
        }

        /// <summary>
        /// Returns true if XmlNs0PdfSignRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of XmlNs0PdfSignRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(XmlNs0PdfSignRequest input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.IsPdfA == input.IsPdfA ||
                    (this.IsPdfA != null &&
                    this.IsPdfA.Equals(input.IsPdfA))
                ) && base.Equals(input) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.IsPdfA != null)
                    hashCode = hashCode * 59 + this.IsPdfA.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        //IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        //{
        //    foreach(var x in BaseValidate(validationContext)) yield return x;
        //    yield break;
        //}
    }

}
