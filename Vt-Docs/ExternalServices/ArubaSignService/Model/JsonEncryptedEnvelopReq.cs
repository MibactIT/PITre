/* 
 * ArubaSignService
 *
 * <h1>ArubaSignService</h1>
 *
 * OpenAPI spec version: 2.3.2-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ArubaSignServiceRest.Client.SwaggerDateConverter;

namespace ArubaSignServiceRest.Model
{
    /// <summary>
    /// Encryption Request
    /// </summary>
    [DataContract]
    public partial class JsonEncryptedEnvelopReq :  IEquatable<JsonEncryptedEnvelopReq>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JsonEncryptedEnvelopReq" /> class.
        /// </summary>
        /// <param name="user">User of Encrypt Service.</param>
        /// <param name="password">Password of Encrypt Service.</param>
        /// <param name="transport">Enum Class that indicates the type of trasport.</param>
        /// <param name="binaryinput">Byte Array that contains the document (only for Transport &#x3D; BINARYNET).</param>
        /// <param name="srcName">Path to file OR directory path that contains the files to be signed (only for Transport &#x3D; FILENAME or DIRECTORYNAME).</param>
        /// <param name="dstName">Destination file path OR destination direcory path (only for Transport &#x3D; FILENAME or DIRECTORYNAME).</param>
        /// <param name="notifymail">Email for notifications.</param>
        /// <param name="notifyId">ID associated with the signatures session for notifications.</param>
        /// <param name="stream">Stream used to load large size file (only for Transport &#x3D; STREAM).</param>
        /// <param name="recipients">Byte Array List of certificates to use for encryption.</param>
        /// <param name="algorithm">Enum that contains the algorithm type to use for encryption.</param>
        public JsonEncryptedEnvelopReq(string user = default(string), string password = default(string), JsonTypeTransport transport = default(JsonTypeTransport), string binaryinput = default(string), string srcName = default(string), string dstName = default(string), string notifymail = default(string), string notifyId = default(string), string stream = default(string), string recipients = default(string), JsonEncryptionAlgorithm algorithm = default(JsonEncryptionAlgorithm))
        {
            this.User = user;
            this.Password = password;
            this.Transport = transport;
            this.Binaryinput = binaryinput;
            this.SrcName = srcName;
            this.DstName = dstName;
            this.Notifymail = notifymail;
            this.NotifyId = notifyId;
            this.Stream = stream;
            this.Recipients = recipients;
            this.Algorithm = algorithm;
        }
        
        /// <summary>
        /// User of Encrypt Service
        /// </summary>
        /// <value>User of Encrypt Service</value>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public string User { get; set; }

        /// <summary>
        /// Password of Encrypt Service
        /// </summary>
        /// <value>Password of Encrypt Service</value>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }

        /// <summary>
        /// Enum Class that indicates the type of trasport
        /// </summary>
        /// <value>Enum Class that indicates the type of trasport</value>
        [DataMember(Name="transport", EmitDefaultValue=false)]
        public JsonTypeTransport Transport { get; set; }

        /// <summary>
        /// Byte Array that contains the document (only for Transport &#x3D; BINARYNET)
        /// </summary>
        /// <value>Byte Array that contains the document (only for Transport &#x3D; BINARYNET)</value>
        [DataMember(Name="binaryinput", EmitDefaultValue=false)]
        public string Binaryinput { get; set; }

        /// <summary>
        /// Path to file OR directory path that contains the files to be signed (only for Transport &#x3D; FILENAME or DIRECTORYNAME)
        /// </summary>
        /// <value>Path to file OR directory path that contains the files to be signed (only for Transport &#x3D; FILENAME or DIRECTORYNAME)</value>
        [DataMember(Name="srcName", EmitDefaultValue=false)]
        public string SrcName { get; set; }

        /// <summary>
        /// Destination file path OR destination direcory path (only for Transport &#x3D; FILENAME or DIRECTORYNAME)
        /// </summary>
        /// <value>Destination file path OR destination direcory path (only for Transport &#x3D; FILENAME or DIRECTORYNAME)</value>
        [DataMember(Name="dstName", EmitDefaultValue=false)]
        public string DstName { get; set; }

        /// <summary>
        /// Email for notifications
        /// </summary>
        /// <value>Email for notifications</value>
        [DataMember(Name="notifymail", EmitDefaultValue=false)]
        public string Notifymail { get; set; }

        /// <summary>
        /// ID associated with the signatures session for notifications
        /// </summary>
        /// <value>ID associated with the signatures session for notifications</value>
        [DataMember(Name="notify_id", EmitDefaultValue=false)]
        public string NotifyId { get; set; }

        /// <summary>
        /// Stream used to load large size file (only for Transport &#x3D; STREAM)
        /// </summary>
        /// <value>Stream used to load large size file (only for Transport &#x3D; STREAM)</value>
        [DataMember(Name="stream", EmitDefaultValue=false)]
        public string Stream { get; set; }

        /// <summary>
        /// Byte Array List of certificates to use for encryption
        /// </summary>
        /// <value>Byte Array List of certificates to use for encryption</value>
        [DataMember(Name="recipients", EmitDefaultValue=false)]
        public string Recipients { get; set; }

        /// <summary>
        /// Enum that contains the algorithm type to use for encryption
        /// </summary>
        /// <value>Enum that contains the algorithm type to use for encryption</value>
        [DataMember(Name="algorithm", EmitDefaultValue=false)]
        public JsonEncryptionAlgorithm Algorithm { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JsonEncryptedEnvelopReq {\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Transport: ").Append(Transport).Append("\n");
            sb.Append("  Binaryinput: ").Append(Binaryinput).Append("\n");
            sb.Append("  SrcName: ").Append(SrcName).Append("\n");
            sb.Append("  DstName: ").Append(DstName).Append("\n");
            sb.Append("  Notifymail: ").Append(Notifymail).Append("\n");
            sb.Append("  NotifyId: ").Append(NotifyId).Append("\n");
            sb.Append("  Stream: ").Append(Stream).Append("\n");
            sb.Append("  Recipients: ").Append(Recipients).Append("\n");
            sb.Append("  Algorithm: ").Append(Algorithm).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as JsonEncryptedEnvelopReq);
        }

        /// <summary>
        /// Returns true if JsonEncryptedEnvelopReq instances are equal
        /// </summary>
        /// <param name="input">Instance of JsonEncryptedEnvelopReq to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JsonEncryptedEnvelopReq input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.Transport == input.Transport ||
                    (this.Transport != null &&
                    this.Transport.Equals(input.Transport))
                ) && 
                (
                    this.Binaryinput == input.Binaryinput ||
                    (this.Binaryinput != null &&
                    this.Binaryinput.Equals(input.Binaryinput))
                ) && 
                (
                    this.SrcName == input.SrcName ||
                    (this.SrcName != null &&
                    this.SrcName.Equals(input.SrcName))
                ) && 
                (
                    this.DstName == input.DstName ||
                    (this.DstName != null &&
                    this.DstName.Equals(input.DstName))
                ) && 
                (
                    this.Notifymail == input.Notifymail ||
                    (this.Notifymail != null &&
                    this.Notifymail.Equals(input.Notifymail))
                ) && 
                (
                    this.NotifyId == input.NotifyId ||
                    (this.NotifyId != null &&
                    this.NotifyId.Equals(input.NotifyId))
                ) && 
                (
                    this.Stream == input.Stream ||
                    (this.Stream != null &&
                    this.Stream.Equals(input.Stream))
                ) && 
                (
                    this.Recipients == input.Recipients ||
                    (this.Recipients != null &&
                    this.Recipients.Equals(input.Recipients))
                ) && 
                (
                    this.Algorithm == input.Algorithm ||
                    (this.Algorithm != null &&
                    this.Algorithm.Equals(input.Algorithm))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.User != null)
                    hashCode = hashCode * 59 + this.User.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                if (this.Transport != null)
                    hashCode = hashCode * 59 + this.Transport.GetHashCode();
                if (this.Binaryinput != null)
                    hashCode = hashCode * 59 + this.Binaryinput.GetHashCode();
                if (this.SrcName != null)
                    hashCode = hashCode * 59 + this.SrcName.GetHashCode();
                if (this.DstName != null)
                    hashCode = hashCode * 59 + this.DstName.GetHashCode();
                if (this.Notifymail != null)
                    hashCode = hashCode * 59 + this.Notifymail.GetHashCode();
                if (this.NotifyId != null)
                    hashCode = hashCode * 59 + this.NotifyId.GetHashCode();
                if (this.Stream != null)
                    hashCode = hashCode * 59 + this.Stream.GetHashCode();
                if (this.Recipients != null)
                    hashCode = hashCode * 59 + this.Recipients.GetHashCode();
                if (this.Algorithm != null)
                    hashCode = hashCode * 59 + this.Algorithm.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
