//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace externalSign {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="HSMServiceSoap", Namespace="http://nttdata.com/2013/HSMRsSvc")]
    public partial class HSMService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback RichiediOTPOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCertificatoHSMOperationCompleted;
        
        private System.Threading.SendOrPostCallback FirmaFilePADESOperationCompleted;
        
        private System.Threading.SendOrPostCallback FirmaFilePADES_FirmatarioOperationCompleted;
        
        private System.Threading.SendOrPostCallback FirmaFileCADESOperationCompleted;
        
        private System.Threading.SendOrPostCallback ControFirmaFileCADESOperationCompleted;
        
        private System.Threading.SendOrPostCallback Session_OpenMultiSignOperationCompleted;
        
        private System.Threading.SendOrPostCallback Session_CloseMultiSignOperationCompleted;
        
        private System.Threading.SendOrPostCallback Session_GetSessionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback Session_GetManifestOperationCompleted;
        
        private System.Threading.SendOrPostCallback Session_RemoteSignOperationCompleted;
        
        private System.Threading.SendOrPostCallback Session_RemoteSignDummyOperationCompleted;
        
        private System.Threading.SendOrPostCallback Session_PutFileToSignOperationCompleted;
        
        private System.Threading.SendOrPostCallback Session_GetSignedFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback ConnessioneServizioOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public HSMService() {
            this.Url = global::Properties.Settings.Default.DocsPaDigitalSignature_externalSign_HSMService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event RichiediOTPCompletedEventHandler RichiediOTPCompleted;
        
        /// <remarks/>
        public event GetCertificatoHSMCompletedEventHandler GetCertificatoHSMCompleted;
        
        /// <remarks/>
        public event FirmaFilePADESCompletedEventHandler FirmaFilePADESCompleted;
        
        /// <remarks/>
        public event FirmaFilePADES_FirmatarioCompletedEventHandler FirmaFilePADES_FirmatarioCompleted;
        
        /// <remarks/>
        public event FirmaFileCADESCompletedEventHandler FirmaFileCADESCompleted;
        
        /// <remarks/>
        public event ControFirmaFileCADESCompletedEventHandler ControFirmaFileCADESCompleted;
        
        /// <remarks/>
        public event Session_OpenMultiSignCompletedEventHandler Session_OpenMultiSignCompleted;
        
        /// <remarks/>
        public event Session_CloseMultiSignCompletedEventHandler Session_CloseMultiSignCompleted;
        
        /// <remarks/>
        public event Session_GetSessionsCompletedEventHandler Session_GetSessionsCompleted;
        
        /// <remarks/>
        public event Session_GetManifestCompletedEventHandler Session_GetManifestCompleted;
        
        /// <remarks/>
        public event Session_RemoteSignCompletedEventHandler Session_RemoteSignCompleted;
        
        /// <remarks/>
        public event Session_RemoteSignDummyCompletedEventHandler Session_RemoteSignDummyCompleted;
        
        /// <remarks/>
        public event Session_PutFileToSignCompletedEventHandler Session_PutFileToSignCompleted;
        
        /// <remarks/>
        public event Session_GetSignedFileCompletedEventHandler Session_GetSignedFileCompleted;
        
        /// <remarks/>
        public event ConnessioneServizioCompletedEventHandler ConnessioneServizioCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nttdata.com/2013/HSMRsSvc/RichiediOTP", RequestNamespace="http://nttdata.com/2013/HSMRsSvc", ResponseNamespace="http://nttdata.com/2013/HSMRsSvc", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RichiediOTP(string aliasCertificato, string dominioCertificato) {
            object[] results = this.Invoke("RichiediOTP", new object[] {
                        aliasCertificato,
                        dominioCertificato});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RichiediOTPAsync(string aliasCertificato, string dominioCertificato) {
            this.RichiediOTPAsync(aliasCertificato, dominioCertificato, null);
        }
        
        /// <remarks/>
        public void RichiediOTPAsync(string aliasCertificato, string dominioCertificato, object userState) {
            if ((this.RichiediOTPOperationCompleted == null)) {
                this.RichiediOTPOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRichiediOTPOperationCompleted);
            }
            this.InvokeAsync("RichiediOTP", new object[] {
                        aliasCertificato,
                        dominioCertificato}, this.RichiediOTPOperationCompleted, userState);
        }
        
        private void OnRichiediOTPOperationCompleted(object arg) {
            if ((this.RichiediOTPCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RichiediOTPCompleted(this, new RichiediOTPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nttdata.com/2013/HSMRsSvc/GetCertificatoHSM", RequestNamespace="http://nttdata.com/2013/HSMRsSvc", ResponseNamespace="http://nttdata.com/2013/HSMRsSvc", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCertificatoHSM(string aliasCertificato, string dominioCertificato) {
            object[] results = this.Invoke("GetCertificatoHSM", new object[] {
                        aliasCertificato,
                        dominioCertificato});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCertificatoHSMAsync(string aliasCertificato, string dominioCertificato) {
            this.GetCertificatoHSMAsync(aliasCertificato, dominioCertificato, null);
        }
        
        /// <remarks/>
        public void GetCertificatoHSMAsync(string aliasCertificato, string dominioCertificato, object userState) {
            if ((this.GetCertificatoHSMOperationCompleted == null)) {
                this.GetCertificatoHSMOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCertificatoHSMOperationCompleted);
            }
            this.InvokeAsync("GetCertificatoHSM", new object[] {
                        aliasCertificato,
                        dominioCertificato}, this.GetCertificatoHSMOperationCompleted, userState);
        }
        
        private void OnGetCertificatoHSMOperationCompleted(object arg) {
            if ((this.GetCertificatoHSMCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCertificatoHSMCompleted(this, new GetCertificatoHSMCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nttdata.com/2013/HSMRsSvc/FirmaFilePADES", RequestNamespace="http://nttdata.com/2013/HSMRsSvc", ResponseNamespace="http://nttdata.com/2013/HSMRsSvc", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] FirmaFilePADES([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] fileDafirmare, string aliasCertificato, string dominioCertificato, string pinCertificato, string otpFirma, bool marcaTemporale) {
            object[] results = this.Invoke("FirmaFilePADES", new object[] {
                        fileDafirmare,
                        aliasCertificato,
                        dominioCertificato,
                        pinCertificato,
                        otpFirma,
                        marcaTemporale});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void FirmaFilePADESAsync(byte[] fileDafirmare, string aliasCertificato, string dominioCertificato, string pinCertificato, string otpFirma, bool marcaTemporale) {
            this.FirmaFilePADESAsync(fileDafirmare, aliasCertificato, dominioCertificato, pinCertificato, otpFirma, marcaTemporale, null);
        }
        
        /// <remarks/>
        public void FirmaFilePADESAsync(byte[] fileDafirmare, string aliasCertificato, string dominioCertificato, string pinCertificato, string otpFirma, bool marcaTemporale, object userState) {
            if ((this.FirmaFilePADESOperationCompleted == null)) {
                this.FirmaFilePADESOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFirmaFilePADESOperationCompleted);
            }
            this.InvokeAsync("FirmaFilePADES", new object[] {
                        fileDafirmare,
                        aliasCertificato,
                        dominioCertificato,
                        pinCertificato,
                        otpFirma,
                        marcaTemporale}, this.FirmaFilePADESOperationCompleted, userState);
        }
        
        private void OnFirmaFilePADESOperationCompleted(object arg) {
            if ((this.FirmaFilePADESCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FirmaFilePADESCompleted(this, new FirmaFilePADESCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nttdata.com/2013/HSMRsSvc/FirmaFilePADES_Firmatario", RequestNamespace="http://nttdata.com/2013/HSMRsSvc", ResponseNamespace="http://nttdata.com/2013/HSMRsSvc", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] FirmaFilePADES_Firmatario([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] fileDafirmare, string aliasCertificato, string dominioCertificato, string pinCertificato, string otpFirma, bool marcaTemporale, string firmatario, string hsmPadesSignerCoords, string hsmPadesSignerText) {
            object[] results = this.Invoke("FirmaFilePADES_Firmatario", new object[] {
                        fileDafirmare,
                        aliasCertificato,
                        dominioCertificato,
                        pinCertificato,
                        otpFirma,
                        marcaTemporale,
                        firmatario,
                        hsmPadesSignerCoords,
                        hsmPadesSignerText});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void FirmaFilePADES_FirmatarioAsync(byte[] fileDafirmare, string aliasCertificato, string dominioCertificato, string pinCertificato, string otpFirma, bool marcaTemporale, string firmatario, string hsmPadesSignerCoords, string hsmPadesSignerText) {
            this.FirmaFilePADES_FirmatarioAsync(fileDafirmare, aliasCertificato, dominioCertificato, pinCertificato, otpFirma, marcaTemporale, firmatario, hsmPadesSignerCoords, hsmPadesSignerText, null);
        }
        
        /// <remarks/>
        public void FirmaFilePADES_FirmatarioAsync(byte[] fileDafirmare, string aliasCertificato, string dominioCertificato, string pinCertificato, string otpFirma, bool marcaTemporale, string firmatario, string hsmPadesSignerCoords, string hsmPadesSignerText, object userState) {
            if ((this.FirmaFilePADES_FirmatarioOperationCompleted == null)) {
                this.FirmaFilePADES_FirmatarioOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFirmaFilePADES_FirmatarioOperationCompleted);
            }
            this.InvokeAsync("FirmaFilePADES_Firmatario", new object[] {
                        fileDafirmare,
                        aliasCertificato,
                        dominioCertificato,
                        pinCertificato,
                        otpFirma,
                        marcaTemporale,
                        firmatario,
                        hsmPadesSignerCoords,
                        hsmPadesSignerText}, this.FirmaFilePADES_FirmatarioOperationCompleted, userState);
        }
        
        private void OnFirmaFilePADES_FirmatarioOperationCompleted(object arg) {
            if ((this.FirmaFilePADES_FirmatarioCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FirmaFilePADES_FirmatarioCompleted(this, new FirmaFilePADES_FirmatarioCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nttdata.com/2013/HSMRsSvc/FirmaFileCADES", RequestNamespace="http://nttdata.com/2013/HSMRsSvc", ResponseNamespace="http://nttdata.com/2013/HSMRsSvc", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] FirmaFileCADES([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] fileDafirmare, string aliasCertificato, string dominioCertificato, string pinCertificato, string otpFirma, bool marcaTemporale, bool cofirma) {
            object[] results = this.Invoke("FirmaFileCADES", new object[] {
                        fileDafirmare,
                        aliasCertificato,
                        dominioCertificato,
                        pinCertificato,
                        otpFirma,
                        marcaTemporale,
                        cofirma});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void FirmaFileCADESAsync(byte[] fileDafirmare, string aliasCertificato, string dominioCertificato, string pinCertificato, string otpFirma, bool marcaTemporale, bool cofirma) {
            this.FirmaFileCADESAsync(fileDafirmare, aliasCertificato, dominioCertificato, pinCertificato, otpFirma, marcaTemporale, cofirma, null);
        }
        
        /// <remarks/>
        public void FirmaFileCADESAsync(byte[] fileDafirmare, string aliasCertificato, string dominioCertificato, string pinCertificato, string otpFirma, bool marcaTemporale, bool cofirma, object userState) {
            if ((this.FirmaFileCADESOperationCompleted == null)) {
                this.FirmaFileCADESOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFirmaFileCADESOperationCompleted);
            }
            this.InvokeAsync("FirmaFileCADES", new object[] {
                        fileDafirmare,
                        aliasCertificato,
                        dominioCertificato,
                        pinCertificato,
                        otpFirma,
                        marcaTemporale,
                        cofirma}, this.FirmaFileCADESOperationCompleted, userState);
        }
        
        private void OnFirmaFileCADESOperationCompleted(object arg) {
            if ((this.FirmaFileCADESCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FirmaFileCADESCompleted(this, new FirmaFileCADESCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nttdata.com/2013/HSMRsSvc/ControFirmaFileCADES", RequestNamespace="http://nttdata.com/2013/HSMRsSvc", ResponseNamespace="http://nttdata.com/2013/HSMRsSvc", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] ControFirmaFileCADES([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] fileDafirmare, string aliasCertificatoDaControfirmare, string aliasCertificato, string dominioCertificato, string pinCertificato, string otpFirma, bool marcaTemporale) {
            object[] results = this.Invoke("ControFirmaFileCADES", new object[] {
                        fileDafirmare,
                        aliasCertificatoDaControfirmare,
                        aliasCertificato,
                        dominioCertificato,
                        pinCertificato,
                        otpFirma,
                        marcaTemporale});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void ControFirmaFileCADESAsync(byte[] fileDafirmare, string aliasCertificatoDaControfirmare, string aliasCertificato, string dominioCertificato, string pinCertificato, string otpFirma, bool marcaTemporale) {
            this.ControFirmaFileCADESAsync(fileDafirmare, aliasCertificatoDaControfirmare, aliasCertificato, dominioCertificato, pinCertificato, otpFirma, marcaTemporale, null);
        }
        
        /// <remarks/>
        public void ControFirmaFileCADESAsync(byte[] fileDafirmare, string aliasCertificatoDaControfirmare, string aliasCertificato, string dominioCertificato, string pinCertificato, string otpFirma, bool marcaTemporale, object userState) {
            if ((this.ControFirmaFileCADESOperationCompleted == null)) {
                this.ControFirmaFileCADESOperationCompleted = new System.Threading.SendOrPostCallback(this.OnControFirmaFileCADESOperationCompleted);
            }
            this.InvokeAsync("ControFirmaFileCADES", new object[] {
                        fileDafirmare,
                        aliasCertificatoDaControfirmare,
                        aliasCertificato,
                        dominioCertificato,
                        pinCertificato,
                        otpFirma,
                        marcaTemporale}, this.ControFirmaFileCADESOperationCompleted, userState);
        }
        
        private void OnControFirmaFileCADESOperationCompleted(object arg) {
            if ((this.ControFirmaFileCADESCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ControFirmaFileCADESCompleted(this, new ControFirmaFileCADESCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nttdata.com/2013/HSMRsSvc/Session_OpenMultiSign", RequestNamespace="http://nttdata.com/2013/HSMRsSvc", ResponseNamespace="http://nttdata.com/2013/HSMRsSvc", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Session_OpenMultiSign(bool cosign, bool timestamp, SignType Type) {
            object[] results = this.Invoke("Session_OpenMultiSign", new object[] {
                        cosign,
                        timestamp,
                        Type});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Session_OpenMultiSignAsync(bool cosign, bool timestamp, SignType Type) {
            this.Session_OpenMultiSignAsync(cosign, timestamp, Type, null);
        }
        
        /// <remarks/>
        public void Session_OpenMultiSignAsync(bool cosign, bool timestamp, SignType Type, object userState) {
            if ((this.Session_OpenMultiSignOperationCompleted == null)) {
                this.Session_OpenMultiSignOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSession_OpenMultiSignOperationCompleted);
            }
            this.InvokeAsync("Session_OpenMultiSign", new object[] {
                        cosign,
                        timestamp,
                        Type}, this.Session_OpenMultiSignOperationCompleted, userState);
        }
        
        private void OnSession_OpenMultiSignOperationCompleted(object arg) {
            if ((this.Session_OpenMultiSignCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Session_OpenMultiSignCompleted(this, new Session_OpenMultiSignCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nttdata.com/2013/HSMRsSvc/Session_CloseMultiSign", RequestNamespace="http://nttdata.com/2013/HSMRsSvc", ResponseNamespace="http://nttdata.com/2013/HSMRsSvc", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool Session_CloseMultiSign(string SessionToken) {
            object[] results = this.Invoke("Session_CloseMultiSign", new object[] {
                        SessionToken});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void Session_CloseMultiSignAsync(string SessionToken) {
            this.Session_CloseMultiSignAsync(SessionToken, null);
        }
        
        /// <remarks/>
        public void Session_CloseMultiSignAsync(string SessionToken, object userState) {
            if ((this.Session_CloseMultiSignOperationCompleted == null)) {
                this.Session_CloseMultiSignOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSession_CloseMultiSignOperationCompleted);
            }
            this.InvokeAsync("Session_CloseMultiSign", new object[] {
                        SessionToken}, this.Session_CloseMultiSignOperationCompleted, userState);
        }
        
        private void OnSession_CloseMultiSignOperationCompleted(object arg) {
            if ((this.Session_CloseMultiSignCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Session_CloseMultiSignCompleted(this, new Session_CloseMultiSignCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nttdata.com/2013/HSMRsSvc/Session_GetSessions", RequestNamespace="http://nttdata.com/2013/HSMRsSvc", ResponseNamespace="http://nttdata.com/2013/HSMRsSvc", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Session_GetSessions() {
            object[] results = this.Invoke("Session_GetSessions", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Session_GetSessionsAsync() {
            this.Session_GetSessionsAsync(null);
        }
        
        /// <remarks/>
        public void Session_GetSessionsAsync(object userState) {
            if ((this.Session_GetSessionsOperationCompleted == null)) {
                this.Session_GetSessionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSession_GetSessionsOperationCompleted);
            }
            this.InvokeAsync("Session_GetSessions", new object[0], this.Session_GetSessionsOperationCompleted, userState);
        }
        
        private void OnSession_GetSessionsOperationCompleted(object arg) {
            if ((this.Session_GetSessionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Session_GetSessionsCompleted(this, new Session_GetSessionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nttdata.com/2013/HSMRsSvc/Session_GetManifest", RequestNamespace="http://nttdata.com/2013/HSMRsSvc", ResponseNamespace="http://nttdata.com/2013/HSMRsSvc", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Session_GetManifest(string SessionToken) {
            object[] results = this.Invoke("Session_GetManifest", new object[] {
                        SessionToken});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Session_GetManifestAsync(string SessionToken) {
            this.Session_GetManifestAsync(SessionToken, null);
        }
        
        /// <remarks/>
        public void Session_GetManifestAsync(string SessionToken, object userState) {
            if ((this.Session_GetManifestOperationCompleted == null)) {
                this.Session_GetManifestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSession_GetManifestOperationCompleted);
            }
            this.InvokeAsync("Session_GetManifest", new object[] {
                        SessionToken}, this.Session_GetManifestOperationCompleted, userState);
        }
        
        private void OnSession_GetManifestOperationCompleted(object arg) {
            if ((this.Session_GetManifestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Session_GetManifestCompleted(this, new Session_GetManifestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nttdata.com/2013/HSMRsSvc/Session_RemoteSign", RequestNamespace="http://nttdata.com/2013/HSMRsSvc", ResponseNamespace="http://nttdata.com/2013/HSMRsSvc", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool Session_RemoteSign(string SessionToken, string aliasCertificato, string dominioCertificato, string pinCertificato, string otpFirma) {
            object[] results = this.Invoke("Session_RemoteSign", new object[] {
                        SessionToken,
                        aliasCertificato,
                        dominioCertificato,
                        pinCertificato,
                        otpFirma});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void Session_RemoteSignAsync(string SessionToken, string aliasCertificato, string dominioCertificato, string pinCertificato, string otpFirma) {
            this.Session_RemoteSignAsync(SessionToken, aliasCertificato, dominioCertificato, pinCertificato, otpFirma, null);
        }
        
        /// <remarks/>
        public void Session_RemoteSignAsync(string SessionToken, string aliasCertificato, string dominioCertificato, string pinCertificato, string otpFirma, object userState) {
            if ((this.Session_RemoteSignOperationCompleted == null)) {
                this.Session_RemoteSignOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSession_RemoteSignOperationCompleted);
            }
            this.InvokeAsync("Session_RemoteSign", new object[] {
                        SessionToken,
                        aliasCertificato,
                        dominioCertificato,
                        pinCertificato,
                        otpFirma}, this.Session_RemoteSignOperationCompleted, userState);
        }
        
        private void OnSession_RemoteSignOperationCompleted(object arg) {
            if ((this.Session_RemoteSignCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Session_RemoteSignCompleted(this, new Session_RemoteSignCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nttdata.com/2013/HSMRsSvc/Session_RemoteSignDummy", RequestNamespace="http://nttdata.com/2013/HSMRsSvc", ResponseNamespace="http://nttdata.com/2013/HSMRsSvc", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool Session_RemoteSignDummy(string SessionToken, string aliasCertificato, string dominioCertificato, string pinCertificato, string otpFirma) {
            object[] results = this.Invoke("Session_RemoteSignDummy", new object[] {
                        SessionToken,
                        aliasCertificato,
                        dominioCertificato,
                        pinCertificato,
                        otpFirma});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void Session_RemoteSignDummyAsync(string SessionToken, string aliasCertificato, string dominioCertificato, string pinCertificato, string otpFirma) {
            this.Session_RemoteSignDummyAsync(SessionToken, aliasCertificato, dominioCertificato, pinCertificato, otpFirma, null);
        }
        
        /// <remarks/>
        public void Session_RemoteSignDummyAsync(string SessionToken, string aliasCertificato, string dominioCertificato, string pinCertificato, string otpFirma, object userState) {
            if ((this.Session_RemoteSignDummyOperationCompleted == null)) {
                this.Session_RemoteSignDummyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSession_RemoteSignDummyOperationCompleted);
            }
            this.InvokeAsync("Session_RemoteSignDummy", new object[] {
                        SessionToken,
                        aliasCertificato,
                        dominioCertificato,
                        pinCertificato,
                        otpFirma}, this.Session_RemoteSignDummyOperationCompleted, userState);
        }
        
        private void OnSession_RemoteSignDummyOperationCompleted(object arg) {
            if ((this.Session_RemoteSignDummyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Session_RemoteSignDummyCompleted(this, new Session_RemoteSignDummyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nttdata.com/2013/HSMRsSvc/Session_PutFileToSign", RequestNamespace="http://nttdata.com/2013/HSMRsSvc", ResponseNamespace="http://nttdata.com/2013/HSMRsSvc", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Session_PutFileToSign(string SessionToken, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] FileDafirmare, string FileName) {
            object[] results = this.Invoke("Session_PutFileToSign", new object[] {
                        SessionToken,
                        FileDafirmare,
                        FileName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Session_PutFileToSignAsync(string SessionToken, byte[] FileDafirmare, string FileName) {
            this.Session_PutFileToSignAsync(SessionToken, FileDafirmare, FileName, null);
        }
        
        /// <remarks/>
        public void Session_PutFileToSignAsync(string SessionToken, byte[] FileDafirmare, string FileName, object userState) {
            if ((this.Session_PutFileToSignOperationCompleted == null)) {
                this.Session_PutFileToSignOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSession_PutFileToSignOperationCompleted);
            }
            this.InvokeAsync("Session_PutFileToSign", new object[] {
                        SessionToken,
                        FileDafirmare,
                        FileName}, this.Session_PutFileToSignOperationCompleted, userState);
        }
        
        private void OnSession_PutFileToSignOperationCompleted(object arg) {
            if ((this.Session_PutFileToSignCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Session_PutFileToSignCompleted(this, new Session_PutFileToSignCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nttdata.com/2013/HSMRsSvc/Session_GetSignedFile", RequestNamespace="http://nttdata.com/2013/HSMRsSvc", ResponseNamespace="http://nttdata.com/2013/HSMRsSvc", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] Session_GetSignedFile(string SessionToken, string hashFileDaFirmare) {
            object[] results = this.Invoke("Session_GetSignedFile", new object[] {
                        SessionToken,
                        hashFileDaFirmare});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void Session_GetSignedFileAsync(string SessionToken, string hashFileDaFirmare) {
            this.Session_GetSignedFileAsync(SessionToken, hashFileDaFirmare, null);
        }
        
        /// <remarks/>
        public void Session_GetSignedFileAsync(string SessionToken, string hashFileDaFirmare, object userState) {
            if ((this.Session_GetSignedFileOperationCompleted == null)) {
                this.Session_GetSignedFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSession_GetSignedFileOperationCompleted);
            }
            this.InvokeAsync("Session_GetSignedFile", new object[] {
                        SessionToken,
                        hashFileDaFirmare}, this.Session_GetSignedFileOperationCompleted, userState);
        }
        
        private void OnSession_GetSignedFileOperationCompleted(object arg) {
            if ((this.Session_GetSignedFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Session_GetSignedFileCompleted(this, new Session_GetSignedFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nttdata.com/2013/HSMRsSvc/ConnessioneServizio", RequestNamespace="http://nttdata.com/2013/HSMRsSvc", ResponseNamespace="http://nttdata.com/2013/HSMRsSvc", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ConnessioneServizio() {
            object[] results = this.Invoke("ConnessioneServizio", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ConnessioneServizioAsync() {
            this.ConnessioneServizioAsync(null);
        }
        
        /// <remarks/>
        public void ConnessioneServizioAsync(object userState) {
            if ((this.ConnessioneServizioOperationCompleted == null)) {
                this.ConnessioneServizioOperationCompleted = new System.Threading.SendOrPostCallback(this.OnConnessioneServizioOperationCompleted);
            }
            this.InvokeAsync("ConnessioneServizio", new object[0], this.ConnessioneServizioOperationCompleted, userState);
        }
        
        private void OnConnessioneServizioOperationCompleted(object arg) {
            if ((this.ConnessioneServizioCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ConnessioneServizioCompleted(this, new ConnessioneServizioCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nttdata.com/2013/HSMRsSvc")]
    public enum SignType {
        
        /// <remarks/>
        CADES,
        
        /// <remarks/>
        PADES,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void RichiediOTPCompletedEventHandler(object sender, RichiediOTPCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RichiediOTPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RichiediOTPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetCertificatoHSMCompletedEventHandler(object sender, GetCertificatoHSMCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCertificatoHSMCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCertificatoHSMCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void FirmaFilePADESCompletedEventHandler(object sender, FirmaFilePADESCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FirmaFilePADESCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FirmaFilePADESCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void FirmaFilePADES_FirmatarioCompletedEventHandler(object sender, FirmaFilePADES_FirmatarioCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FirmaFilePADES_FirmatarioCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FirmaFilePADES_FirmatarioCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void FirmaFileCADESCompletedEventHandler(object sender, FirmaFileCADESCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FirmaFileCADESCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FirmaFileCADESCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ControFirmaFileCADESCompletedEventHandler(object sender, ControFirmaFileCADESCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ControFirmaFileCADESCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ControFirmaFileCADESCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Session_OpenMultiSignCompletedEventHandler(object sender, Session_OpenMultiSignCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Session_OpenMultiSignCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Session_OpenMultiSignCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Session_CloseMultiSignCompletedEventHandler(object sender, Session_CloseMultiSignCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Session_CloseMultiSignCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Session_CloseMultiSignCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Session_GetSessionsCompletedEventHandler(object sender, Session_GetSessionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Session_GetSessionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Session_GetSessionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Session_GetManifestCompletedEventHandler(object sender, Session_GetManifestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Session_GetManifestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Session_GetManifestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Session_RemoteSignCompletedEventHandler(object sender, Session_RemoteSignCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Session_RemoteSignCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Session_RemoteSignCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Session_RemoteSignDummyCompletedEventHandler(object sender, Session_RemoteSignDummyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Session_RemoteSignDummyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Session_RemoteSignDummyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Session_PutFileToSignCompletedEventHandler(object sender, Session_PutFileToSignCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Session_PutFileToSignCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Session_PutFileToSignCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Session_GetSignedFileCompletedEventHandler(object sender, Session_GetSignedFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Session_GetSignedFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Session_GetSignedFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ConnessioneServizioCompletedEventHandler(object sender, ConnessioneServizioCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ConnessioneServizioCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ConnessioneServizioCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591