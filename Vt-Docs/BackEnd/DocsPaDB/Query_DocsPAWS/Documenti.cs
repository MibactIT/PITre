using System;
using System.Collections;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Globalization;
using System.Threading;
using System.Text.RegularExpressions;
using DocsPaDbManagement.Functions;
using DocsPaUtils.Interfaces.DbManagement;
using DocsPaVO.filtri;
using System.IO;
using System.Xml;
using System.Xml.Serialization;
using System.Linq;
using DocsPaVO.ricerche;
using DocsPaVO.ProfilazioneDinamica;
using log4net;
using DocsPaVO.Grid;
using DocsPaUtils;
using System.Text;
using DocsPaVO.documento;
using DocsPaVO.FormatiDocumento;
using DocsPaVO.fascicolazione;
using DocsPaUtils.Data;
using DocsPaVO.amministrazione;

namespace DocsPaDB.Query_DocsPAWS
{

    /// <summary>
    /// Summary description for Documenti.
    /// </summary>
    public class Documenti : DBProvider
    {
        private ILog logger = LogManager.GetLogger(typeof(Documenti));
        private static Hashtable registri = new Hashtable();
        private static Mutex semProtPronto;
      //  private static Mutex semProtNuovo;
        private bool Grigi = false;
        private bool Arrivo = false;
        private bool Partenza = false;
        private bool Interno = false;

        private string tipo_contatore = string.Empty;
        private DocsPaVO.ProfilazioneDinamica.OggettoCustom[] oggettoCUstom = null;
        private string nomeDocumento = string.Empty;
        private string idAmministrazione = string.Empty;
        private bool oggettoCustomVisibile = false;
        private string dtaCreazSucc = "'01/01/2009'";
        private string dtaCreazPreced = "'" + DateTime.Now.ToShortDateString() + "'";
        private string dtaProtoSucc = "'01/01/2009'";
        private string dtaProtoPreced = "'" + DateTime.Now.ToShortDateString() + "'";

        private string idCorrespondentTemplate = string.Empty;

        private string chaiTableDef = string.Empty;

        public DocsPaDB.DBProvider dbProviderDoc = new DBProvider();

        private bool extAppControlEnabled = (DocsPaUtils.Configuration.InitConfigurationKeys.GetValue("0", "ENABLE_GEST_EXT_APPS") == "1" ? true : false);

        static Documenti()
        {
            semProtPronto = new Mutex();
          //  semProtNuovo = new Mutex();
        }

        public Documenti()
        { }
        /// <summary>
        /// return, valore dal web.config dei WS, se gli indici Testuali sono abilitati o no.
        /// </summary>
        public static string Cfg_USE_TEXT_INDEX
        {
            get
            {
                //OLD  string eme = System.Configuration.ConfigurationManager.AppSettings["USE_TEXT_INDEX"];
                string eme = DocsPaUtils.Configuration.InitConfigurationKeys.GetValue("0", "USE_TEXT_INDEX");
                if (eme == null || eme == "")
                    eme = "0";

                return eme;

            }
        }

        #region AllegatiManager

        /// <summary>
        /// Verifica se è abilitata la gestione della profilazione allegati 
        /// </summary>
        /// <returns></returns>
        public static bool isEnabledProfilazioneAllegati
        {
            get
            {
                const string CONFIG_KEY = "IS_ENABLED_PROFILAZIONE_ALLEGATI";

                bool isEnabled;
                bool.TryParse(ConfigurationManager.AppSettings[CONFIG_KEY], out isEnabled);
                return isEnabled;
            }
        }

        /// <summary>
        /// Reperimento dei documenti allegati di un documento principale
        /// </summary>
        /// <remarks>
        /// A partire dalla V.3.9 di docspa, l'allegato verrà gestito come 
        /// fosse un documento vero e proprio (l'unica eccezione è che non 
        /// ha una propria security, ma fa riferimento a quella del documento
        /// cui appartiene).
        /// Per mantenere la compatibilità con le gestioni precedenti,
        /// per quei record in tabella "Versions" contrassegnati come 
        /// versioni anziché allegati, verrà comumque impostato il 
        /// progressivo standard per gli allegati (A01, A02, ecc.).
        /// </remarks>
        /// <param name="docNumber"></param>
        /// <returns></returns>
        public ArrayList GetAllegati(string docNumber, string filterAllegati, string simplifiedInteroperabilityId = "")
        {
            logger.Info("BEGIN");
            ArrayList list = new ArrayList();

            try
            {
                DocsPaUtils.Query queryDef = DocsPaUtils.InitQuery.getInstance().getQuery("S_J_PROFILE__COMPONENTS__VERSIONS");
                queryDef.setParam("param1", docNumber);

                string filterAllegatiPec = string.Empty;
                if (!string.IsNullOrEmpty(filterAllegati))
                {
                    filterAllegatiPec = FilterTipologiaAllegati(docNumber, filterAllegati, simplifiedInteroperabilityId);
                    queryDef.setParam("filterAllegatiPec", filterAllegatiPec);
                }
                else
                    queryDef.setParam("filterAllegatiPec", "");

                string commandText = queryDef.getSQL();
                logger.Debug("getallegati: " + commandText);
                using (DocsPaDB.DBProvider dbProvider = new DBProvider())
                {
                    using (IDataReader reader = dbProvider.ExecuteReader(commandText))
                    {
                        while (reader.Read())
                            list.Add(GetAllegato(reader, list.Count + 1));
                    }
                }
            }
            catch (Exception e)
            {
                logger.Error(e.Message);
            }
            logger.Info("END");
            return list;
        }

        /// <summary>
        /// Restituisce tutti gli allegati di un documento
        /// </summary>
        /// <param name="docNumber"></param>
        /// <returns></returns>
        public List<string> GetDocnumberAllegati(string docNumber)
        {
            logger.Info("BEGIN GetDocnumberAllegati");
            List<string> list = new List<string>();
            try
            {
                DocsPaUtils.Query queryDef = DocsPaUtils.InitQuery.getInstance().getQuery("S_PROFILE_ATTACHMENTS");
                queryDef.setParam("docnumber", docNumber);
                string commandText = queryDef.getSQL();
                logger.Debug("GetDocnumberAllegati: " + commandText);
                using (DocsPaDB.DBProvider dbProvider = new DBProvider())
                {
                    using (IDataReader reader = dbProvider.ExecuteReader(commandText))
                    {
                        while (reader.Read())
                            list.Add(DocsPaUtils.Data.DataReaderHelper.GetValue<object>(reader, "DOCNUMBER", false, string.Empty).ToString());
                    }
                }
            }
            catch (Exception e)
            {
                logger.Error(e.Message);
            }
            logger.Info("END GetDocnumberAllegati");
            return list;
        }

        /// <summary>
        /// Query di prelievo degli id documento degli allegati per il controllo del checkin-out
        /// </summary>
        /// <param name="idDocPrincipale"></param>
        /// <returns></returns>
        public ArrayList GetAllegatiSuperSimple(string idDocPrincipale)
        {
            logger.Info("START");
            ArrayList allegati = new ArrayList();
            try
            {
                DocsPaUtils.Query querydef = DocsPaUtils.InitQuery.getInstance().getQuery("S_ALLEGATI_SUPER_SIMPLE");
                querydef.setParam("param1", idDocPrincipale);
                string commandText = querydef.getSQL();
                logger.Debug("getAllegatiSuperSimple: " + commandText);
                using (DocsPaDB.DBProvider dbProvider = new DBProvider())
                {
                    using (IDataReader reader = dbProvider.ExecuteReader(commandText))
                    {
                        while (reader.Read())
                            allegati.Add(reader.GetString(reader.GetOrdinal("SYSTEM_ID")));
                    }
                }

            }
            catch (Exception e)
            {
                logger.Error(e.Message);
            }
            logger.Info("END");
            return allegati;
        }

        private string FilterTipologiaAllegati(string docNumber, string filterAllegatiPec, string simplifiedInteroperabilityId)
        {
            if (filterAllegatiPec.Equals("pec"))
            {
                return " WHERE exists (" +
                    "(SELECT 'x' FROM dpa_notifica dn WHERE dn.docnumber=" + docNumber + " and dn.version_id=C.VERSION_ID and C.OGGETTO LIKE 'Ricevuta di ritorno delle Mail%')" +
                    "UNION" +
                    "(SELECT 'x' FROM dpa_notifica dn WHERE dn.docnumber=" + docNumber + " and C.OGGETTO LIKE 'Ricevuta di ritorno delle Mail%')" +
                    ")";
            }
            else if (filterAllegatiPec.Equals("user"))
            {
                return "WHERE not exists (" +
                        "(SELECT 'x' FROM dpa_notifica dn WHERE dn.docnumber=" + docNumber + " and dn.version_id=C.VERSION_ID)" +
                        "UNION" +
                        "(SELECT 'x' FROM dpa_notifica dn WHERE dn.docnumber=" + docNumber + " and (C.OGGETTO LIKE 'Ricevuta di ritorno delle Mail%' Or C.OGGETTO LIKE 'Ricevuta di avvenuta%' Or C.OGGETTO LIKE 'Ricevuta di mancata consegna%')" +
                        "))" +
                        "and not exists (" +
                        "SELECT 'x' FROM VERSIONS v WHERE (v.CHA_ALLEGATI_ESTERNO = '1' OR v.CHA_ALLEGATI_ESTERNO = 'D') AND v.docnumber =c.docNumber" +
                        ")";
            }
            else if (filterAllegatiPec == simplifiedInteroperabilityId)
            {
                return " WHERE exists (" +
                    "(SELECT 'x' FROM dpa_notifica dn WHERE dn.docnumber=" + docNumber + " and dn.version_id=C.VERSION_ID and (C.OGGETTO LIKE 'Ricevuta di avvenuta%' OR C.OGGETTO LIKE 'Ricevuta di mancata consegna%'))" +
                    "UNION" +
                    "(SELECT 'x' FROM dpa_notifica dn WHERE dn.docnumber=" + docNumber + " and (C.OGGETTO LIKE 'Ricevuta di avvenuta%' OR C.OGGETTO LIKE 'Ricevuta di mancata consegna%'))" +
                    ")";
            }
            else if (filterAllegatiPec.Equals("esterni"))
            {
                return " WHERE exists (SELECT 'x' FROM VERSIONS v WHERE v.CHA_ALLEGATI_ESTERNO = '1'  AND v.docnumber =c.docNumber) ";
            }
            else if (filterAllegatiPec.Equals("derivati"))
            {
                return " WHERE exists (SELECT 'x' FROM VERSIONS v WHERE v.CHA_ALLEGATI_ESTERNO = 'D'  AND v.docnumber =c.docNumber) ";
            }
            else
            {
                return string.Empty;
            }
        }


        /// <summary>
        /// return 1 se l'allegato è di tipo pec
        /// </summary>
        /// <param name="version_id"></param>
        /// <returns></returns>
        public string GeIsAllegatoPEC(string version_id)
        {
            logger.Info("BEGIN");
            string retValue = string.Empty;
            try
            {
                DocsPaUtils.Query queryDef = DocsPaUtils.InitQuery.getInstance().getQuery("S_DPA_NOTIFICA_ISALLEGATOPEC");
                queryDef.setParam("version_id", version_id);
                string commandText = queryDef.getSQL();
                using (DBProvider dbProvider = new DBProvider())
                {
                    string field;
                    if (dbProvider.ExecuteScalar(out field, commandText))
                        retValue = field;
                }
            }
            catch (Exception e)
            {
                logger.Error(e.Message);
            }
            if (String.IsNullOrEmpty(retValue))
                retValue = "0";
            return retValue;
        }


        /// <summary>
        /// return 1 se l'allegato è di tipo IS
        /// </summary>
        /// <param name="version_id"></param>
        /// <returns></returns>
        public string GeIsAllegatoIS(string version_id)
        {
            logger.Info("BEGIN");
            string retValue = string.Empty;
            try
            {
                DocsPaUtils.Query queryDef = DocsPaUtils.InitQuery.getInstance().getQuery("S_DPA_NOTIFICA_ISALLEGATOIS");
                queryDef.setParam("version_id", version_id);
                string commandText = queryDef.getSQL();
                using (DBProvider dbProvider = new DBProvider())
                {
                    string field;
                    if (dbProvider.ExecuteScalar(out field, commandText))
                        retValue = field;
                }
            }
            catch (Exception e)
            {
                logger.Error(e.Message);
            }

            if (String.IsNullOrEmpty(retValue))
                retValue = "0";
            return retValue;
        }

        /// <summary>
        /// Reperimento dell'id del documento principale
        /// </summary>
        /// <param name="docNumberAllegato"></param>
        /// <returns></returns>
        public virtual string GetIdDocumentoPrincipale(string docNumberAllegato)
        {
            string retValue = string.Empty;

            DocsPaUtils.Query queryDef = DocsPaUtils.InitQuery.getInstance().getQuery("S_IS_ALLEGATO_PROFILATO");
            queryDef.setParam("docnumber", docNumberAllegato);

            string commandText = queryDef.getSQL();
            logger.Debug(commandText);

            using (DBProvider dbProvider = new DBProvider())
            {
                string field;
                if (dbProvider.ExecuteScalar(out field, commandText))
                    retValue = field;
            }

            return retValue;
        }

        /// <summary>
        /// Verifica se un allegato è profilato o meno
        /// </summary>
        /// <param name="docNumber"></param>
        /// <returns></returns>
        public virtual bool isAllegatoProfilato(string docNumber)
        {
            return (!string.IsNullOrEmpty(GetIdDocumentoPrincipale(docNumber)));
        }

        /// <summary>
        /// Creazione di un nuovo oggetto allegato
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="index"></param>
        /// <returns></returns>
        protected virtual DocsPaVO.documento.Allegato GetAllegato(IDataReader reader, int index)
        {
            DocsPaVO.documento.Allegato allegato = new DocsPaVO.documento.Allegato();
            Utenti utente = new Utenti();
            allegato.version = DocsPaUtils.Data.DataReaderHelper.GetValue<object>(reader, "VERSION", false, string.Empty).ToString();

            if (allegato.version == "0")
            {
                // Allegato standard
                allegato.versionLabel = DocsPaUtils.Data.DataReaderHelper.GetValue<string>(reader, "VERSION_LABEL", false);
                allegato.descrizione = DocsPaUtils.Data.DataReaderHelper.GetValue<string>(reader, "COMMENTS", true, string.Empty);
            }
            else
            {
                // Se si tratta di una versione (nuova gestione allegato) viene creato un codice progressivo
                allegato.versionLabel = FormatCodiceAllegato(index);
                allegato.descrizione = DocsPaUtils.Data.DataReaderHelper.GetValue<string>(reader, "OGGETTO", true, string.Empty);
            }
            allegato.autore = utente.GetUtenteNoFiltroDisabled(DocsPaUtils.Data.DataReaderHelper.GetValue<object>(reader, "AUTHOR", true, string.Empty).ToString()).descrizione;
            allegato.idPeopleDelegato = DocsPaUtils.Data.DataReaderHelper.GetValue<object>(reader, "ID_PEOPLE_DELEGATO", true, string.Empty).ToString();
            if (!string.IsNullOrEmpty(allegato.idPeopleDelegato) && allegato.idPeopleDelegato != "0")
            {
                allegato.autore = utente.GetUtenteNoFiltroDisabled(allegato.idPeopleDelegato).descrizione + "DELEGATO DA " + allegato.autore;
            }
            allegato.versionId = DocsPaUtils.Data.DataReaderHelper.GetValue<object>(reader, "VERSION_ID", false, string.Empty).ToString();
            allegato.docNumber = DocsPaUtils.Data.DataReaderHelper.GetValue<object>(reader, "DOCNUMBER", false, string.Empty).ToString();
            allegato.position = index;
            allegato.numeroPagine = Convert.ToInt32(DocsPaUtils.Data.DataReaderHelper.GetValue<object>(reader, "NUM_PAG_ALLEGATI", true, 0));
            allegato.dataInserimento = DocsPaUtils.Data.DataReaderHelper.GetValue<DateTime>(reader, "DTA_CREAZIONE", true).ToString();
            allegato.docServerLoc = DocsPaUtils.Data.DataReaderHelper.GetValue<string>(reader, "DOCSERVER_LOC", true, string.Empty);
            allegato.fileName = DocsPaUtils.Data.DataReaderHelper.GetValue<string>(reader, "FILENAME", true, string.Empty);
            allegato.fileSize = DocsPaUtils.Data.DataReaderHelper.GetValue<object>(reader, "FILE_SIZE", true, 0).ToString();
            allegato.idPeople = DocsPaUtils.Data.DataReaderHelper.GetValue<object>(reader, "AUTHOR", true).ToString();
            allegato.path = DocsPaUtils.Data.DataReaderHelper.GetValue<string>(reader, "PATH", true, string.Empty);
            allegato.subVersion = DocsPaUtils.Data.DataReaderHelper.GetValue<string>(reader, "SUBVERSION", true);

            //modifica per filenet
            allegato.fNversionId = string.Concat(DocsPaUtils.Data.DataReaderHelper.GetValue<string>(reader, "V_NAME_FN", true), getFNETename(allegato.docNumber));

            allegato.cartaceo = (Convert.ToInt32(DocsPaUtils.Data.DataReaderHelper.GetValue<object>(reader, "CARTACEO", true, 0)) > 0);

            //Era commentato non capisco perchè...
            allegato.firmato = DocsPaUtils.Data.DataReaderHelper.GetValue<string>(reader, "FIRMATO", true, string.Empty);

            allegato.tipoFirma = DocsPaUtils.Data.DataReaderHelper.GetValue<string>(reader, "TIPO_FIRMA", true, string.Empty);

            // Reperimento ed impostazione del system id del documento originale da cui è stato ricavato il documento
            // inoltrato
            allegato.ForwardingSource = DocsPaUtils.Data.DataReaderHelper.GetValue<object>(reader, "FORWARDING_SOURCE", true).ToString();

            string idAuthorFile = DocsPaUtils.Data.DataReaderHelper.GetValue<object>(reader, "ID_PEOPLE_PUTFILE", true, string.Empty).ToString();
            if (!string.IsNullOrEmpty(idAuthorFile))
                allegato.autoreFile = utente.GetUtenteNoFiltroDisabled(idAuthorFile).descrizione;
            string idAuthorDelagateFile = DocsPaUtils.Data.DataReaderHelper.GetValue<object>(reader, "ID_PEOPLE_DELEGATO_PUTFILE", true, string.Empty).ToString();
            if (!string.IsNullOrEmpty(idAuthorDelagateFile))
                allegato.autoreFile = utente.GetUtenteNoFiltroDisabled(idAuthorDelagateFile).descrizione + " DELEGATO DA " + allegato.autoreFile;

            allegato.dataAcquisizione = (DocsPaUtils.Data.DataReaderHelper.GetValue<DateTime>(reader, "DTA_FILE_ACQUIRED", true)).ToShortDateString();

            //Libro firma
            string strInLibroFirma = string.Empty;
            if (reader.GetSchemaTable().Select("ColumnName='IN_LIBROFIRMA'").Length > 0)
            {
                strInLibroFirma = DocsPaUtils.Data.DataReaderHelper.GetValue<string>(reader, "IN_LIBROFIRMA", true, string.Empty);
            }
            allegato.inLibroFirma = (!string.IsNullOrEmpty(strInLibroFirma) && strInLibroFirma.Trim() == "1") ? true : false;
            //Fine

            // Nuovo metodo di associazione tipologia allegato
            // Utilizzo CHA_ALLEGATI_ESTERNO in VERSIONS
            switch (GetTipologiaAllegato(allegato.versionId))
            {
                case "P":
                    allegato.TypeAttachment = 2;
                    break;
                case "I":
                    allegato.TypeAttachment = 3;
                    break;
                case "1":
                    allegato.TypeAttachment = 4;
                    break;
                case "D":
                    allegato.TypeAttachment = 5;
                    break;
                default:
                    allegato.TypeAttachment = 1;
                    break;
            }

            //get type attachment
            //if (GeIsAllegatoPEC(allegato.versionId).Equals("1"))
            //    allegato.TypeAttachment = 2;
            //else if (GeIsAllegatoIS(allegato.versionId).Equals("1"))
            //    allegato.TypeAttachment = 3;
            //else if (GetIsAllegatoEsterno(allegato.versionId).Equals("1"))
            //    allegato.TypeAttachment = 4;
            //else
            //    allegato.TypeAttachment = 1;

            return allegato;
        }

        //metodo utility filenet
        private static string getFNETename(string docnumber)
        {
            if (docnumber.Length >= 9) return docnumber;
            string s = new String(Convert.ToChar("0"), 9 - docnumber.Length);
            return s + docnumber;
        }

        public void GetApplication(out string oldApp, string docNumber, string systemId, string param)
        {
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_Profile0");
            q.setParam("param1", "APPLICATION");
            q.setParam("param2", "DOCNUMBER=" + docNumber);
            string queryString = q.getSQL();
            logger.Debug(queryString);

            using (DBProvider dbProvider = new DBProvider())
            {
                dbProvider.ExecuteScalar(out oldApp, queryString);
            }
            logger.Debug("oldApp=" + oldApp);

            q = DocsPaUtils.InitQuery.getInstance().getQuery("U_Profile");
            q.setParam("param1", "APPLICATION=" + systemId);
            q.setParam("param2", param);
            queryString = q.getSQL();
            logger.Debug(queryString);
            using (DBProvider dbProvider = new DBProvider())
            {
                dbProvider.ExecuteNonQuery(queryString);
            }
        }

        public void UpdateVersion(string versionId)
        {
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("U_Versions");
            q.setParam("param1", "VERSION_LABEL='ATD'");
            q.setParam("param2", "VERSION_ID=" + versionId);
            q.setParam("param3", "VERSION_ID DESC");
            string queryString = q.getSQL();
            ExecuteNonQuery(queryString);
        }
        public void RollBackUpdateVersion(string versionId, string oldVersionLabel)
        {
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("U_Versions");
            q.setParam("param1", "VERSION_LABEL='" + oldVersionLabel + "'");
            q.setParam("param2", "VERSION_ID=" + versionId);
            string queryString = q.getSQL();
            ExecuteNonQuery(queryString);
        }
        public void RollBackVersion(string versionId, string subversion)
        {
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("U_Versions");
            if (subversion == "null") //allegato
            {
                q.setParam("param1", "SUBVERSION=NULL,NUM_PAG_ALLEGATI=NULL");
            }
            else       //VERSIONE
                q.setParam("param1", "SUBVERSION='" + subversion + "'");
            q.setParam("param2", "VERSION_ID=" + versionId);
            string queryString = q.getSQL();
            ExecuteNonQuery(queryString);
        }

        public void GetPath(out System.Data.DataSet ds, string versionId, string docNumber)
        {
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_Components1");
            q.setParam("param1", versionId);
            q.setParam("param2", docNumber);
            string queryString = q.getSQL();

            using (DBProvider dbProvider = new DBProvider())
            {
                dbProvider.ExecuteQueryNewConn(out ds, "PATH", queryString);
            }
            
        }

        public void UpdateAppProfile(string oldApp, string docNumber)
        {
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("U_Profile");
            q.setParam("param1", "APPLICATION=" + oldApp);
            q.setParam("param2", "DOCNUMBER=" + docNumber);
            string queryString = q.getSQL();
            ExecuteNonQuery(queryString);
        }

        public bool UpdatePerScollegamentoDoc(string systemId)
        {
            //lo scollegamento di un documento prevede che il campo ID_PARENT sulla profile sia messo a NULL
            int affectedRows;
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("U_Profile");
            q.setParam("param1", "ID_PARENT = 0");
            q.setParam("param2", "SYSTEM_ID=" + systemId);
            string queryString = q.getSQL();
            ExecuteNonQuery(queryString, out affectedRows);
            return (affectedRows == 1);
        }

        public void UpdateNumPageDescription(int numeroPagine, string versionId, string descrizione)
        {
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("U_Versions");
            q.setParam("param1", "NUM_PAG_ALLEGATI=" + numeroPagine + ",COMMENTS='" + descrizione.Replace("'", "''") + "'");
            q.setParam("param2", "VERSION_ID=" + versionId);
            string queryString = q.getSQL();

            using (DBProvider dbProvider = new DBProvider())
            {
                dbProvider.ExecuteNonQuery(queryString);
            }
            
        }

        /// <summary>
        /// Formattazione codice allegato
        /// </summary>
        /// <param name="indexAllegato"></param>
        /// <returns></returns>
        public static string FormatCodiceAllegato(int indexAllegato)
        {
            return string.Format("A{0:0#}", indexAllegato);
        }

        /// <summary>
        /// Modifica dei dati dell'allegato
        /// </summary>
        /// <param name="allegato"></param>
        /// <param name="infoUtente"></param>
        /// <param name="allegatoEsteso">
        /// Se true, indica che è attiva la gestione dell'allegato come documento
        /// </param>
        public void ModificaAllegato(DocsPaVO.documento.Allegato allegato, DocsPaVO.utente.InfoUtente infoUtente, bool allegatoEsteso)
        {
            try
            {
                using (DBProvider dbProvider = new DBProvider())
                {
                    DocsPaUtils.Query queryDef = DocsPaUtils.InitQuery.getInstance().getQuery("U_Versions");

                    string param = string.Empty;

                    if (allegatoEsteso)
                    {
                        //param = "NUM_PAG_ALLEGATI = " + allegato.numeroPagine +
                        //        ", COMMENTS = '" + allegato.descrizione.Replace("'", "''") + "'";
                        param = "NUM_PAG_ALLEGATI = " + allegato.numeroPagine;
                    }
                    else
                    {
                        //param = "VERSION_LABEL = '" + allegato.versionLabel +
                        //        "', NUM_PAG_ALLEGATI = " + allegato.numeroPagine +
                        //        ", COMMENTS = '" + allegato.descrizione.Replace("'", "''") + "'";
                        param = "VERSION_LABEL = '" + allegato.versionLabel +
                                "', NUM_PAG_ALLEGATI = " + allegato.numeroPagine;
                    }

                    queryDef.setParam("param1", param);
                    queryDef.setParam("param2", "VERSION_ID=" + allegato.versionId);

                    string queryString = queryDef.getSQL();

                    int rowsAffected;

                    if (dbProvider.ExecuteNonQuery(queryString, out rowsAffected))
                    {
                        if (allegatoEsteso && rowsAffected > 0)
                        {
                            // Se è attiva la gestione dell'allegato come documento,
                            // viene inserito il nuovo oggetto del documento (se è stato modificato)

                            // Reperimento della scheda documento relativa all'allegato
                            DocsPaVO.documento.SchedaDocumento schedaDocumento = GetDettaglio(infoUtente, allegato.docNumber, allegato.docNumber, false);

                            if (schedaDocumento.oggetto != null && schedaDocumento.oggetto.descrizione != allegato.descrizione)
                            {
                                // L'allegato è stato modificato, viene inserito un nuovo record nell'oggettario e legato al documento
                                schedaDocumento.oggetto = new DocsPaVO.documento.Oggetto();
                                schedaDocumento.oggetto.descrizione = allegato.descrizione;
                                if (schedaDocumento.registro != null)
                                {
                                    schedaDocumento.oggetto.idRegistro = schedaDocumento.registro.systemId;
                                    schedaDocumento.oggetto.codRegistro = schedaDocumento.registro.codRegistro;
                                }
                                schedaDocumento.oggetto.daAggiornare = true;

                                SalvaOggetto(infoUtente.idAmministrazione, infoUtente.idPeople, infoUtente.idCorrGlobali, ref schedaDocumento);
                            }
                        }
                    }
                }
            }
            catch (Exception e)
            {
                logger.Error(e.Message);

                throw e;
            }
        }

        /// <summary>
        /// Reperimento della VersionLabel per l'allegato
        /// </summary>
        /// <param name="docNumber"></param>
        /// <param name="allegatoEsteso">
        /// Se true, indica che è attiva la gestione dell'allegato come documento
        /// </param>
        /// <returns></returns>
        public string GetVersionLabelAllegato(string docNumber, bool allegatoEsteso)
        {
            string retValue = FormatCodiceAllegato(1);

            try
            {
                string queryName = string.Empty;
                if (allegatoEsteso)
                    queryName = "GET_LAST_VERSION_ALLEGATO_ESTESO";
                else
                    queryName = "GET_LAST_VERSION_ALLEGATO";

                DocsPaUtils.Query queryDef = DocsPaUtils.InitQuery.getInstance().getQuery(queryName);
                queryDef.setParam("docNumber", docNumber);

                string commandText = queryDef.getSQL();
                logger.Debug(commandText);

                string field;
                ExecuteScalar(out field, commandText);

                if (!string.IsNullOrEmpty(field))
                {
                    int newVersionIndex = 1;

                    try
                    {
                        newVersionIndex = (Convert.ToInt32(field) + 1);
                    }
                    catch
                    {
                    }

                    retValue = FormatCodiceAllegato(newVersionIndex);
                }
            }
            catch (Exception e)
            {
                logger.Error(e.Message);
                //CloseConnection();
                logger.Error("Errore nella gestione dei documenti (Query - GetVersioniLabel)", e);
                throw new Exception("F_System");
            }

            return retValue;
        }


        public string GetVersionId(string docNumber, string versionLabel)
        {
            DataSet dataSet;
            string res = "";
            try
            {
                DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_Versions");
                q.setParam("param1", "VERSION_ID");
                q.setParam("param2", "DOCNUMBER=" + docNumber + " AND VERSION=0 AND VERSION_LABEL='" + versionLabel + "'");
                string queryString = q.getSQL();
                ExecuteQuery(out dataSet, "VERSIONI", queryString);

                if (dataSet.Tables["VERSIONI"].Rows.Count == 0)
                {
                    res = null;
                }
                else
                {
                    res = dataSet.Tables["VERSIONI"].Rows[0]["VERSION_ID"].ToString();
                }
                return res;
            }
            catch (Exception e)
            {
                logger.Error(e.Message);
                //CloseConnection();
                logger.Error("Errore nella gestione dei documenti (Query - GetVersionId)", e);
                throw new Exception("F_System");
            }
        }

        #endregion


        #region areaLavoroManager
        public bool ExeAddLavoro(string idProfile, string tipoProto, string idRegistro, DocsPaVO.utente.InfoUtente infoUtente, DocsPaVO.fascicolazione.Fascicolo fasc)
        {
            DataSet dataSet = new DataSet();
            DocsPaUtils.Query q;
            string queryString = "";
            bool result = true;
            try
            {
                //OpenConnection();
                //costruzione della query
                string idPeople = infoUtente.idPeople;
                string idRuoloInUo = infoUtente.idCorrGlobali;
                System.DateTime now = System.DateTime.Now;
                // CultureInfo ci = new CultureInfo("en-US"); //io non ne voglio sape.MDG
                CultureInfo ci = new CultureInfo("it-IT");
                string dateString = DocsPaDbManagement.Functions.Functions.ToDate(now.ToString("dd/MM/yyyy hh:mm:ss tt", ci));
                if (idProfile != null && tipoProto != null)
                {
                    q = DocsPaUtils.InitQuery.getInstance().getQuery("S_DPAAreaLavoro");
                    q.setParam("param1", "SYSTEM_ID, CHA_TIPO_DOC");
                    q.setParam("param2", "ID_PEOPLE=" + idPeople + " AND ID_RUOLO_IN_UO=" + idRuoloInUo + " AND ID_PROFILE=" + idProfile);
                    queryString = q.getSQL();
                    logger.Debug(queryString);
                    ExecuteQuery(dataSet, "DOC", queryString);
                    if (dataSet.Tables["DOC"].Rows.Count == 0)
                    {
                        //si esegue l'inserimento
                        q = DocsPaUtils.InitQuery.getInstance().getQuery("I_DPAAreaLavoro");
                        q.setParam("param1", Functions.GetSystemIdColName() + " ID_PEOPLE,ID_RUOLO_IN_UO,ID_PROFILE,CHA_TIPO_DOC,DTA_INS, ID_REGISTRO ");
                        if (idRegistro != null && idRegistro != String.Empty)
                        {
                            q.setParam("param2", Functions.GetSystemIdNextVal(null) + " '" + idPeople + "','" + idRuoloInUo + "','" + idProfile + "','" + tipoProto + "'," + dateString + "," + "'" + idRegistro + "'");
                        }
                        else
                        {
                            q.setParam("param2", Functions.GetSystemIdNextVal(null) + " '" + idPeople + "','" + idRuoloInUo + "','" + idProfile + "','" + tipoProto + "'," + dateString + "," + "NULL");
                        }
                        queryString = q.getSQL();
                        logger.Debug(queryString);
                        ExecuteNonQuery(queryString);
                    }
                    else
                    {
                        //si fa l'update solo se il tipo documento vecchio è grigio e quello nuovo è diverso da grigio
                        if (dataSet.Tables["DOC"].Rows[0]["CHA_TIPO_DOC"].ToString().Equals("G") && !tipoProto.Equals("G"))
                        {
                            q = DocsPaUtils.InitQuery.getInstance().getQuery("U_DPAAreaLavoro");
                            q.setParam("param1", "CHA_TIPO_DOC='" + tipoProto + "'" + ", ID_REGISTRO = '" + idRegistro + "'");
                            q.setParam("param2", "ID_PEOPLE=" + idPeople + " AND ID_RUOLO_IN_UO=" + idRuoloInUo + " AND ID_PROFILE=" + idProfile);
                            queryString = q.getSQL();
                            logger.Debug(queryString);
                            ExecuteNonQuery(queryString);
                        }
                    }
                }
                if (fasc != null)
                {
                    string idProject = fasc.systemID;
                    string tipoFasc = fasc.tipo;
                    q = DocsPaUtils.InitQuery.getInstance().getQuery("S_DPAAreaLavoro");
                    q.setParam("param1", "SYSTEM_ID");
                    q.setParam("param2", "ID_PEOPLE=" + idPeople + " AND ID_RUOLO_IN_UO=" + idRuoloInUo + " AND ID_PROJECT=" + idProject);
                    queryString = q.getSQL();
                    logger.Debug(queryString);
                    ExecuteQuery(dataSet, "FASC", queryString);
                    if (dataSet.Tables["FASC"].Rows.Count == 0)
                    {
                        //si inserisce il nuovo dato
                        q = DocsPaUtils.InitQuery.getInstance().getQuery("I_DPAAreaLavoro");
                        q.setParam("param1", Functions.GetSystemIdColName() + " ID_PEOPLE, ID_RUOLO_IN_UO, ID_PROJECT, CHA_TIPO_FASC, DTA_INS, ID_REGISTRO ");
                        q.setParam("param2", Functions.GetSystemIdNextVal(null) + " '" + idPeople + "','" + idRuoloInUo + "','" + idProject + "','" + tipoFasc + "'," + dateString + "," + (idRegistro.Equals(String.Empty) ? "NULL" : "'" + idRegistro + "'"));
                        queryString = q.getSQL();
                        logger.Debug(queryString);
                        ExecuteNonQuery(queryString);
                    }
                }
                //CloseConnection();
            }
            catch (Exception)
            {
                //CloseConnection();
                //throw e;
                result = false;
            }
            return result;
        }


        public void GetAreaLavoro(out DataSet dataSet, string idPeople, string idRuoloInUo, DocsPaVO.areaLavoro.TipoOggetto tipoObj, DocsPaVO.areaLavoro.TipoDocumento tipoDoc, DocsPaVO.areaLavoro.TipoFascicolo tipoFasc, string idRegistro)
        {
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_DPAAreaLavoro");
            q.setParam("param1", "*");
            string queryTemp = null;
            queryTemp = "ID_PEOPLE='" + idPeople + "' AND ID_RUOLO_IN_UO='" + idRuoloInUo + "'";
            //
            //	old 21marzo06		
            //if (!idRegistro.Equals(string.Empty))
            //				queryTemp = queryTemp + " AND ID_REGISTRO = '"+ idRegistro +"' ";

            if (!idRegistro.Equals(string.Empty))
                queryTemp = queryTemp + " AND (ID_REGISTRO IS NULL OR ID_REGISTRO = '" + idRegistro + "') ";

            string userDb = string.Empty;
            string dbType = System.Configuration.ConfigurationManager.AppSettings["DBType"];
            if (dbType.ToUpper() == "SQL")
                userDb = DocsPaDbManagement.Functions.Functions.GetDbUserSession() + ".";

            if (tipoObj == DocsPaVO.areaLavoro.TipoOggetto.DOCUMENTO)
            {
                queryTemp = queryTemp + " AND ID_PROFILE IS NOT NULL";
                if (tipoDoc != DocsPaVO.areaLavoro.TipoDocumento.TUTTI)
                {
                    queryTemp = queryTemp + " AND CHA_TIPO_DOC='" + DocsPaVO.areaLavoro.QueryAreaLavoro.tipoDocString[tipoDoc] + "'";
                }
                queryTemp = queryTemp + " and (" + userDb + "checkVisibilitaArchivio('D', ID_PROFILE, " + idRuoloInUo + ") > 0)";

            }
            else
            {
                queryTemp = queryTemp + " AND ID_PROJECT IS NOT NULL";
                if (tipoFasc != DocsPaVO.areaLavoro.TipoFascicolo.TUTTI)
                {
                    queryTemp = queryTemp + " AND CHA_TIPO_FASC='" + DocsPaVO.areaLavoro.QueryAreaLavoro.tipoFascString[tipoFasc] + "'";
                }
                queryTemp = queryTemp + " and (" + userDb + "checkVisibilitaArchivio('F', ID_PROJECT, " + idRuoloInUo + ") > 0)";

            }
            q.setParam("param2", queryTemp);
            string queryString = q.getSQL();
            logger.Debug(queryString);
            ExecuteQuery(out dataSet, "OGGETTI", queryString);
        }

        #region

        public void GetAreaLavoroPaging(out DataSet dataSet, string idPeople, string idRuoloInUo, DocsPaVO.areaLavoro.TipoOggetto tipoObj, DocsPaVO.areaLavoro.TipoDocumento tipoDoc, DocsPaVO.areaLavoro.TipoFascicolo tipoFasc, string idRegistro, string chaDaProto, int numPage, out int numTotPage, out int nRec, DocsPaVO.filtri.FiltroRicerca[][] query = null)
        {
            string dbType = System.Configuration.ConfigurationManager.AppSettings["DBType"];
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_DPAAreaLavoroProfile");
            q.setParam("param1", "*");
            string queryTemp = null;
            queryTemp = "A.ID_PEOPLE='" + idPeople + "' AND A.ID_RUOLO_IN_UO='" + idRuoloInUo + "'";

            if (idRegistro != null && !idRegistro.Equals(string.Empty))
                queryTemp = queryTemp + " AND (A.ID_REGISTRO = '" + idRegistro + "' OR A.ID_REGISTRO IS NULL)";

            string userDb = string.Empty;
            if (dbType.ToUpper() == "SQL")
                userDb = DocsPaDbManagement.Functions.Functions.GetDbUserSession() + ".";

            if (tipoObj == DocsPaVO.areaLavoro.TipoOggetto.DOCUMENTO)
            {
                queryTemp = queryTemp + " AND A.ID_PROFILE IS NOT NULL";
                if (tipoDoc != DocsPaVO.areaLavoro.TipoDocumento.TUTTI)
                {
                    DocsPaVO.areaLavoro.QueryAreaLavoro queryAreaLavoro = new DocsPaVO.areaLavoro.QueryAreaLavoro();
                    queryTemp = queryTemp + " AND A.CHA_TIPO_DOC='" + DocsPaVO.areaLavoro.QueryAreaLavoro.tipoDocString[tipoDoc] + "'";
                }
                queryTemp = queryTemp + " and (" + userDb + "checkVisibilitaArchivio('D', p.SYSTEM_ID, " + idRuoloInUo + ") > 0)";
                if (query != null)
                {
                    for (int i = 0; i < query.Length; i++)
                    {
                        for (int j = 0; j < query[i].Length; j++)
                        {
                            DocsPaVO.filtri.FiltroRicerca f = query[i][j];
                            if (f.valore != null && !f.valore.Equals(""))
                            {
                                switch (f.argomento)
                                {
                                    case "OGGETTO":
                                        queryTemp += " AND ";

                                        // La stringa di testo contenuta nel campo oggetto è messa in
                                        // AND utilizzando come separatore la stringa fissa '&&'

                                        if (Cfg_USE_TEXT_INDEX == "0")
                                        {
                                            Regex regex = new Regex("&&");
                                            string[] lista = regex.Split(f.valore);
                                            if (lista[0].ToUpper().Contains("'"))
                                                queryTemp += "UPPER(P.VAR_PROF_OGGETTO) LIKE '%" + lista[0].ToUpper().Replace("'", "''") + "%'";
                                            else
                                                queryTemp += "UPPER(P.VAR_PROF_OGGETTO) LIKE '%" + lista[0].ToUpper() + "%'";
                                            for (int z = 1; z < lista.Length; z++)
                                            {
                                                if (lista[z].ToUpper().Contains("'"))
                                                    queryTemp += " AND UPPER(P.VAR_PROF_OGGETTO) LIKE '%" + lista[z].ToUpper().Replace("'", "''") + "%'";
                                                else
                                                    queryTemp += " AND UPPER(P.VAR_PROF_OGGETTO) LIKE '%" + lista[z].ToUpper() + "%'";
                                            }
                                        }
                                        else if (Cfg_USE_TEXT_INDEX == "1")
                                        {
                                            f.valore.Replace("&&", " ");
                                            queryTemp += "P.SYSTEM_id in ( \n " +
                                                                    " select system_id from table(fulltext_onvar_prof_oggetto ( \n " +
                                                                    "'" + f.valore.ToUpper().Replace("'", "''") + "', \n" +
                                                                    dtaCreazSucc + ", \n" +
                                                                    dtaCreazPreced + ", \n" +
                                                                    dtaProtoSucc + ", \n" +
                                                                    dtaProtoPreced + " \n" + "))) \n";
                                        }
                                        else if (Cfg_USE_TEXT_INDEX == "2")
                                        {
                                            List<DocsPaVO.filtri.SearchTextItem> items = new List<DocsPaVO.filtri.SearchTextItem>();
                                            string value = DocsPaUtils.Functions.Functions.ReplaceApexes(f.valore).ToUpper();
                                            string valueA = value;
                                            if (valueA.Contains("&&"))
                                                valueA = valueA.Replace("&&", "");
                                            bool casoA = false;
                                            if (value.Substring(0, value.Length - 1).Contains("%") && !value.Substring(0, value.Length - 1).Contains("%&&"))
                                                casoA = true;
                                            if (value.Contains("&&"))
                                            {
                                                string result = string.Empty;
                                                foreach (string filter in new Regex("&&").Split(value))
                                                    if (!string.IsNullOrEmpty(filter))
                                                        result += filter + " AND ";
                                                value = result.Substring(0, result.Length - 5);
                                            }
                                            if (value.Contains("%") && value.IndexOf("%") != value.Length - 1)
                                            {
                                                bool finale = value.EndsWith("%");
                                                string result = string.Empty;
                                                foreach (string filter in new Regex("%").Split(value))
                                                    if (!string.IsNullOrEmpty(filter))
                                                        result += filter + "% AND ";
                                                value = result.Substring(0, result.Length - 6);
                                                if (finale)
                                                    value = value + "%";
                                            }
                                            if (value.ToUpper().Contains(" AND  AND "))
                                                value = value.ToUpper().Replace(" AND  AND ", " AND ");
                                            queryTemp += DocsPaDbManagement.Functions.Functions.GetContainsTextQuery("P.VAR_PROF_OGGETTO", value);
                                            if (casoA)
                                                queryTemp += " and upper(P.VAR_PROF_OGGETTO) like upper('%" + valueA + "%')";
                                        }
                                        break;
                                    case "TIPO_ATTO":
                                        queryTemp += " AND P.ID_TIPO_ATTO=" + f.valore;
                                        break;
                                    case "PROFILAZIONE_DINAMICA":
                                        DocsPaDB.Query_DocsPAWS.Model model = new Model();
                                        queryTemp += model.getSeriePerRicercaProfilazione(f.template, "");
                                        break;
                                }
                            }
                        }
                    }
                }

            }
            else
            {
                queryTemp = queryTemp + " AND A.ID_PROJECT IS NOT NULL";
                if (tipoFasc != DocsPaVO.areaLavoro.TipoFascicolo.TUTTI)
                {
                    queryTemp = queryTemp + " AND A.CHA_TIPO_FASC='" + DocsPaVO.areaLavoro.QueryAreaLavoro.tipoFascString[tipoFasc] + "'";
                }
                queryTemp = queryTemp + " and (" + userDb + "checkVisibilitaArchivio('F', A.ID_PROJECT, " + idRuoloInUo + ") > 0)";

            }

            if (chaDaProto != null && chaDaProto.Equals("0")) //voglio solo i protocollati, non i predisposti..caso di ricerca doc a cui rispondere
            {
                //q.setParam("param3", " , PROFILE B");
                //queryTemp = queryTemp + "AND A.ID_PROFILE = B.SYSTEM_ID AND B.CHA_DA_PROTO = '0'";
                queryTemp = queryTemp + " AND P.CHA_DA_PROTO = '0'";
            }
            /*else
            {
                q.setParam("param3", "");
            }*/
            queryTemp += " AND A.ID_PROFILE = P.SYSTEM_ID AND ";
            if (dbType.ToUpper() == "ORACLE")
                queryTemp += "   nvl(P.CHA_IN_CESTINO,'0')='0'";
            else queryTemp += "  ISNULL(P.CHA_IN_CESTINO,'0')='0'";


            q.setParam("param2", queryTemp);


            string queryString = q.getSQL();
            logger.Debug(queryString);
            //ExecuteQuery(out dataSet, "OGGETTI", queryString);
            //int nRec; 
            ExecutePaging(out dataSet, out numTotPage, out nRec, numPage, 10, queryString, "DPA_AREA_LAVORO");    // (out dataSet,startRecord,numRecord,queryString);

        }



        #endregion paging


        public bool DeleteAreaLavoro(string idPeople, string idRuoloInUo, string systemID, string idProfile)
        {
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("D_DPAAreaLavoro");
            //bool dbOpen=false;
            bool result = true;
            try
            {
                //OpenConnection();
                //dbOpen=true;
                //costruzione della query
                string queryTemp = "ID_PEOPLE=" + idPeople + " AND ID_RUOLO_IN_UO=" + idRuoloInUo;
                if (idProfile != null)
                {
                    queryTemp = queryTemp + " AND ID_PROFILE=" + idProfile;
                }
                else
                {
                    queryTemp = queryTemp + " AND ID_PROJECT=" + systemID;
                }
                q.setParam("param1", queryTemp);
                string queryString = q.getSQL();
                ExecuteNonQuery(queryString);
                //CloseConnection();
            }
            catch (Exception)
            {
                /*if(dbOpen)
                {
                    CloseConnection();
                }
                throw e;*/
                logger.Error("Errore nella gestione dei documenti (Query - DeleteAreaLavoro)");
                result = false;
            }
            return result;
        }


        //add massimo digregorio:
        private bool aggiornaADL(ref DocsPaVO.documento.SchedaDocumento schedaDoc)
        {

            string tipoProto = string.Empty;
            if (schedaDoc.protocollo.GetType() == typeof(DocsPaVO.documento.ProtocolloEntrata))
            {
                tipoProto = "A";
            }
            else if (schedaDoc.protocollo.GetType() == typeof(DocsPaVO.documento.ProtocolloUscita))
            {
                tipoProto = "P";
            }
            else if (schedaDoc.protocollo.GetType() == typeof(DocsPaVO.documento.ProtocolloInterno))
            {
                tipoProto = "I";
            }
            else
                return false;



            DocsPaUtils.Query q = null;
            string queryString = "";
            bool result = false;
            try
            {
                q = DocsPaUtils.InitQuery.getInstance().getQuery("U_DPAAreaLavoro");
                q.setParam("param1", "CHA_TIPO_DOC =" + "'" + tipoProto + "'" + ", ID_REGISTRO = '" + schedaDoc.registro.systemId + "'");
                q.setParam("param2", " ID_PROFILE = " + schedaDoc.systemId);
                queryString = q.getSQL();
                logger.Debug(queryString);
                ExecuteNonQuery(queryString);
                result = true;

            }
            catch (System.Exception ex)
            {
                System.Diagnostics.Debug.Write(ex.Message);
                result = false;

            }
            return result;

        }

        #endregion

        #region CateneDocManager
        public void GetCatenaDoc(out DataSet dataSet, string idRoot)
        {
            //si carica in una tabella l'albero relativo a tale root
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_DPADocCollegamenti");
            q.setParam("param1", "ID_DOCUMENTO,ID_DOC_COLLEGATO");
            q.setParam("param2", "ID_ROOT=" + idRoot);
            string queryString = q.getSQL();
            ExecuteQuery(out dataSet, "ALBERO", queryString);
        }

        public void GetIdRoot(out string idRoot, string docNumber)
        {
            string result;
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_DPADocCollegamenti");
            q.setParam("param1", "ID_ROOT");
            q.setParam("param2", "ID_DOCUMENTO=" + docNumber);
            string queryString = q.getSQL();
            ExecuteScalar(out result, queryString);
            if ((result != null) && (!result.Equals("")))
            {
                ExecuteScalar(out idRoot, queryString);
            }
            else
            {
                idRoot = docNumber;
            }
        }

        #endregion

        #region DocManager

        public string getAccessRightDocBySystemID(string idPfofile, DocsPaVO.utente.InfoUtente infoUtente)
        {
            string result = string.Empty;
            using (DocsPaDB.DBProvider dbProvider = new DBProvider())
            {
                try
                {
                    DocsPaUtils.Query queryDef = DocsPaUtils.InitQuery.getInstance().getQuery("S_ACCESS_RIGHTS_DOC");
                    queryDef.setParam("param1", infoUtente.idGruppo);
                    queryDef.setParam("param2", infoUtente.idPeople);
                    queryDef.setParam("param3", idPfofile);

                    string idRuoloPubblico = DocsPaUtils.Configuration.InitConfigurationKeys.GetValue(infoUtente.idAmministrazione, "ENABLE_FASCICOLO_PUBBLICO");
                    if (string.IsNullOrEmpty(idRuoloPubblico))
                        idRuoloPubblico = "0";
                    queryDef.setParam("idRuoloPubblico", idRuoloPubblico);

                    string commandText = queryDef.getSQL();
                    logger.Debug(commandText);
                    DataSet ds = new DataSet();
                    dbProvider.ExecuteQuery(ds, commandText);
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        result = ds.Tables[0].Rows[0]["ACCESSRIGHTS"].ToString();
                    }
                    ds.Dispose();
                }
                catch (Exception ex)
                {
                    logger.Error(ex.Message);
                }
            }
            return result;
        }

        public string getTipoProto(string docNumber)
        {
            string result;
            logger.Debug("Start > getTipoProto");
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_CHA_TIPO_PROTO");
            q.setParam("param1", docNumber);
            string queryString = q.getSQL();
            logger.Debug(queryString);
            ExecuteScalar(out result, queryString);
            logger.Debug("End > getTipoProto");
            return result;
        }
        private string getColonneGetDettaglio()
        {

            string queryTemp = "A.SYSTEM_ID,A.DOCNUMBER, A.DOCNAME, A.STATUS, A.DOCSERVER_LOC, A.PATH, " +
                   DocsPaDbManagement.Functions.Functions.ToChar("A.CREATION_DATE", false) + " AS CREATION_DATE, " +
                   DocsPaDbManagement.Functions.Functions.ToChar("A.CREATION_TIME", true) + " AS CREATION_TIME, " +
                   "A.ID_REGISTRO, A.CHA_TIPO_PROTO, A.ID_OGGETTO, A.NUM_PROTO, " +
                   "A.NUM_ANNO_PROTO, A.VAR_PROTO_EME, " +
                   DocsPaDbManagement.Functions.Functions.ToChar("A.DTA_PROTO_EME", false) + " AS DTA_PROTO_EME, A.CHA_ASSEGNATO," +
                   "A.VAR_COGNOME_EME, A.VAR_NOME_EME, A.ID_PARENT, " +
                   DocsPaDbManagement.Functions.Functions.ToChar("A.DTA_PROTO", true) + " AS DTA_PROTO, " +
                   "A.CHA_MOD_OGGETTO, A.CHA_MOD_MITT_DEST, A.CHA_MOD_MITT_INT, " +
                   "A.VAR_PROTO_IN, A.ID_ANNULLATORE, A.VAR_AUT_ANNULLA, A.CHA_INVIO_CONFERMA, " +
                   DocsPaDbManagement.Functions.Functions.ToChar("A.DTA_PROTO_IN", false) + " AS DTA_PROTO_IN, " +
                   DocsPaDbManagement.Functions.Functions.ToChar("A.DTA_ANNULLA", false) + " AS DTA_ANNULLA, " +
                   "A.VAR_SEGNATURA, A.CHA_DA_PROTO, A.CHA_FASCICOLATO, " +
                   "A.ID_TIPO_ATTO, A.CHA_PRIVATO, A.CHA_PERSONALE, A.CHA_EVIDENZA, B.ACCESSRIGHTS, A.VAR_PROF_OGGETTO AS VAR_DESC_OGGETTO, " +
                   "D.TYPE_ID, D.DESCRIPTION " +
                   ", A.ID_PEOPLE_PROT, A.ID_RUOLO_PROT, A.ID_UO_PROT, A.ID_RUOLO_CREATORE, A.ID_UO_CREATORE, A.AUTHOR, A.CHA_INTEROP, A.DTA_SCADENZA, A.CHA_IN_CESTINO ";

            return queryTemp;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="infoUtente"></param>
        /// <param name="idProfile"></param>
        /// <param name="docNumber"></param>
        /// <returns></returns>
        public DocsPaVO.documento.SchedaDocumento GetDettaglioNoSecurity(DocsPaVO.utente.InfoUtente infoUtente, string idProfile, string docNumber, bool securityVersion = true)
        {
            logger.Debug("getDettaglio");
            DocsPaVO.documento.SchedaDocumento schedaDoc = new DocsPaVO.documento.SchedaDocumento();
            try
            {
                DocsPaUtils.Query queryDef = DocsPaUtils.InitQuery.getInstance().getQuery("S_GET_DETTAGLIO_DOCUMENTO_NO_SECURITY");

                queryDef.setParam("creationDate", Functions.ToChar("a.creation_date", false));
                queryDef.setParam("creationTime", Functions.ToChar("a.creation_time", true));
                queryDef.setParam("dta_proto_eme", Functions.ToChar("a.dta_proto_eme", false));
                //queryDef.setParam("dta_proto", Functions.ToChar("a.dta_proto", false));
                queryDef.setParam("dta_proto", Functions.ToChar("a.dta_proto", true));
                queryDef.setParam("dta_proto_in", Functions.ToChar("a.dta_proto_in", false));
                queryDef.setParam("dta_annulla", Functions.ToChar("a.dta_annulla", false));
                if (!string.IsNullOrEmpty(docNumber))
                    queryDef.setParam("docNumber", "a.docnumber = " + docNumber);
                else
                    queryDef.setParam("docNumber", "a.system_id = " + idProfile);


                string commandText = queryDef.getSQL();
                logger.Debug(commandText);

                DataSet dataSet;

                using (DBProvider dbProvider = new DBProvider())
                {
                    if (dbProvider.ExecuteQuery(out dataSet, "PROFILE", commandText))
                    {
                        schedaDoc = new DocsPaVO.documento.SchedaDocumento();

                        DataRow dataRow = dataSet.Tables["PROFILE"].Rows[0];
                        schedaDoc = GetSchedaDocumento(infoUtente, dataRow, securityVersion);

                        //if (Cfg_SET_DATA_VISTA_GRD)
                        //    SetDataVistaSP(infoUtente, schedaDoc.systemId, "D");
                    }
                }

                if (schedaDoc == null)
                    return null;

                dataSet.Dispose();
                idProfile = schedaDoc.systemId;

                //Profilazione dinamica 
                if (schedaDoc.tipologiaAtto != null && schedaDoc.tipologiaAtto.systemId != null && schedaDoc.tipologiaAtto.systemId != "")
                {
                    Model model = new Model();
                    DocsPaVO.ProfilazioneDinamica.Templates template = model.getTemplateDettagli(schedaDoc.docNumber);
                    schedaDoc.template = template;
                }
            }
            catch (Exception e)
            {
                logger.Debug(e.Message);
                logger.Debug("Errore nella gestione dei documenti (Query - GetDettaglio)", e);
                throw new Exception("F_System");
            }

            return schedaDoc;
        }

        /// <summary>
        /// DA VERIFICARE - SELECT DEL DOCUMENTO A PARTIRE DAL VECCHIO ID DEL DOCUMENTO
        /// Ad idProfile e a docNumber è associato sempre id_vecchio_documento
        /// </summary>
        /// <param name="infoUtente"></param>
        /// <param name="idProfile"></param>
        /// <param name="docNumber"></param>
        /// <returns></returns>
        public DocsPaVO.documento.SchedaDocumento GetDettaglioNoSecurityByIDVecchioDoc(DocsPaVO.utente.InfoUtente infoUtente, string idProfile, string docNumber)
        {
            logger.Debug("getDettaglio");
            DocsPaVO.documento.SchedaDocumento schedaDoc = new DocsPaVO.documento.SchedaDocumento();
            try
            {
                DocsPaUtils.Query queryDef = DocsPaUtils.InitQuery.getInstance().getQuery("S_GET_DETTAGLIO_DOCUMENTO_NO_SECURITY");

                queryDef.setParam("creationDate", Functions.ToChar("a.creation_date", false));
                queryDef.setParam("creationTime", Functions.ToChar("a.creation_time", true));
                queryDef.setParam("dta_proto_eme", Functions.ToChar("a.dta_proto_eme", false));
                queryDef.setParam("dta_proto", Functions.ToChar("a.dta_proto", false));
                queryDef.setParam("dta_proto_in", Functions.ToChar("a.dta_proto_in", false));
                queryDef.setParam("dta_annulla", Functions.ToChar("a.dta_annulla", false));
                if (!string.IsNullOrEmpty(docNumber))
                    queryDef.setParam("docNumber", "a.id_vecchio_documento = " + docNumber);
                else
                    queryDef.setParam("docNumber", "a.id_vecchio_documento = " + idProfile);


                string commandText = queryDef.getSQL();
                logger.Debug(commandText);

                DataSet dataSet;
                if (ExecuteQuery(out dataSet, "PROFILE", commandText))
                {
                    //Faillace, fix per evitare excp in caso di risultati con 0 rows
                    if (dataSet.Tables["PROFILE"].Rows.Count > 0)
                    {
                        schedaDoc = new DocsPaVO.documento.SchedaDocumento();
                        DataRow dataRow = dataSet.Tables["PROFILE"].Rows[0];
                        schedaDoc = GetSchedaDocumento(infoUtente, dataRow);

                        //if (Cfg_SET_DATA_VISTA_GRD)
                        //    SetDataVistaSP(infoUtente, schedaDoc.systemId, "D");
                    }
                }

                if (schedaDoc == null)
                    return null;

                dataSet.Dispose();
                idProfile = schedaDoc.systemId;

                //Profilazione dinamica 
                if (schedaDoc.tipologiaAtto != null && schedaDoc.tipologiaAtto.systemId != null && schedaDoc.tipologiaAtto.systemId != "")
                {
                    Model model = new Model();
                    DocsPaVO.ProfilazioneDinamica.Templates template = model.getTemplateDettagli(schedaDoc.docNumber);
                    schedaDoc.template = template;
                }
            }
            catch (Exception e)
            {
                logger.Error(e.Message);
                logger.Error("Errore nella gestione dei documenti (Query - GetDettaglio)", e);
                throw new Exception("F_System");
            }

            return schedaDoc;
        }

        public static string Cfg_SET_DATA_VISTA_GRD
        {
            get
            {
                string eme = ConfigurationManager.AppSettings["SET_DATA_VISTA_GRD"];
                return (eme != null) ? eme : "0";
            }
        }

        public DocsPaVO.documento.SchedaDocumento GetSchedaDocumentoByID(DocsPaVO.utente.InfoUtente infoUtente, string docNumber)
        {
            logger.Debug("getDettaglio");
            DocsPaVO.documento.SchedaDocumento schedaDoc = new DocsPaVO.documento.SchedaDocumento();
            try
            {
                DocsPaUtils.Query queryDef = DocsPaUtils.InitQuery.getInstance().getQuery("S_GET_DETTAGLIO_DOCUMENTO_NO_SECURITY");

                queryDef.setParam("creationDate", Functions.ToChar("a.creation_date", false));
                queryDef.setParam("creationTime", Functions.ToChar("a.creation_time", true));
                queryDef.setParam("dta_proto_eme", Functions.ToChar("a.dta_proto_eme", false));
                queryDef.setParam("dta_proto", Functions.ToChar("a.dta_proto", false));
                queryDef.setParam("dta_proto_in", Functions.ToChar("a.dta_proto_in", false));
                queryDef.setParam("dta_annulla", Functions.ToChar("a.dta_annulla", false));
                queryDef.setParam("docNumber", "a.docnumber = " + docNumber);

                string commandText = queryDef.getSQL();
                logger.Debug(commandText);

                DataSet dataSet;
                ExecuteQuery(out dataSet, "PROFILE", commandText);

                schedaDoc = new DocsPaVO.documento.SchedaDocumento();

                DataRow dataRow = dataSet.Tables["PROFILE"].Rows[0];
                schedaDoc = GetSchedaDocumento(infoUtente, dataRow);

                if (schedaDoc == null)
                    return null;

                DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_DPA_COLL_MSPEDIZ_DOC");
                q.setParam("param1", docNumber);
                string comText = q.getSQL();
                logger.Debug(comText);
                DataSet ds;
                ExecuteQuery(out ds, "MS", comText);
                if (ds != null)
                {
                    foreach (DataRow row in ds.Tables[0].Rows)
                    {
                        schedaDoc.mezzoSpedizione = row[0].ToString();
                        schedaDoc.descMezzoSpedizione = row[1].ToString();
                    }
                }

                dataSet.Dispose();

            }
            catch (Exception e)
            {
                logger.Error(e.Message);
                logger.Error("Errore nella gestione dei documenti (Query - GetDettaglio)", e);
                throw new Exception("F_System");
            }

            return schedaDoc;
        }

        /// <summary>
        /// Reperimento scheda documento
        /// </summary>
        /// <param name="infoUtente"></param>
        /// <param name="idProfile"></param>
        /// <param name="docNumber"></param>
        /// <param name="impostaDataVista">
        /// Se true, indica di impostare la data vista del documento.
        /// NB: Il parametro, quando è false, sostituisce il metodo "GetDettaglioPerNotificaAllegati"
        /// usato per l'interoperabilità
        /// </param>
        /// <returns></returns>
        public DocsPaVO.documento.SchedaDocumento GetDettaglio(DocsPaVO.utente.InfoUtente infoUtente, string idProfile, string docNumber, bool impostaDataVista)
        {
            logger.Info("BEGIN");
            DocsPaVO.documento.SchedaDocumento schedaDocumento = null;

            try
            {
                DocsPaUtils.Query queryDef = DocsPaUtils.InitQuery.getInstance().getQuery("S_GET_SCHEDA_DOCUMENTO");

                queryDef.setParam("creationDate", Functions.ToChar("A.CREATION_DATE", false));
                queryDef.setParam("creationTime", Functions.ToChar("A.CREATION_TIME", true));
                queryDef.setParam("dtaProtoEme", Functions.ToChar("A.DTA_PROTO_EME", true));
                queryDef.setParam("dtaProto", Functions.ToChar("A.DTA_PROTO", true));
                queryDef.setParam("dtaProtoIn", Functions.ToChar("A.DTA_PROTO_IN", false));
                queryDef.setParam("dtaAnnulla", Functions.ToChar("A.DTA_ANNULLA", false));
                queryDef.setParam("idGroup", infoUtente.idGruppo);
                queryDef.setParam("idPeople", infoUtente.idPeople);

                string documentoPubblico = string.Empty;
                string idRuoloPubblico = DocsPaUtils.Configuration.InitConfigurationKeys.GetValue(infoUtente.idAmministrazione, "ENABLE_FASCICOLO_PUBBLICO");
                if (string.IsNullOrEmpty(idRuoloPubblico))
                {
                    idRuoloPubblico = "0";
                }
                else
                {
                    if (dbType.Equals("SQL"))
                        documentoPubblico = getUserDB() + ".checkDocumentoPubblico(A.DOCNUMBER, " + idRuoloPubblico + ") AS CHA_PUBBLICO, ";
                    else
                        documentoPubblico = "checkDocumentoPubblico(A.DOCNUMBER, " + idRuoloPubblico + ") AS CHA_PUBBLICO, ";
                }
                queryDef.setParam("documentoPubblico", documentoPubblico);
                queryDef.setParam("idRuoloPubblico", idRuoloPubblico);

                string keyParams = string.Empty;

                if (!string.IsNullOrEmpty(idProfile))
                    queryDef.setParam("pk", String.Format("A.SYSTEM_ID = {0}", idProfile));
                else if (!string.IsNullOrEmpty(docNumber))
                    queryDef.setParam("pk", String.Format("A.DOCNUMBER = {0}", docNumber));
                else
                    queryDef.setParam("pk", "");

                queryDef.setParam("dbUser", getUserDB());

                string commandText = queryDef.getSQL();
                logger.Debug(commandText);

                DataSet dataSet;

                using (DBProvider dbProvider = new DBProvider())
                {

                    if (dbProvider.ExecuteQuery(out dataSet, "PROFILE", commandText))
                    {
                        if (dataSet.Tables["PROFILE"].Rows.Count > 0)
                        {
                            DataRow dataRow = dataSet.Tables["PROFILE"].Rows[0];

                            schedaDocumento = GetSchedaDocumento(infoUtente, dataRow);

                            dataSet.Dispose();
                            dataSet = null;

                            if (impostaDataVista)
                                SetDataVistaSP(infoUtente, schedaDocumento.systemId, "D");
                        }
                    }
                }

                //Profilazione dinamica 
                if (schedaDocumento != null && schedaDocumento.tipologiaAtto != null && schedaDocumento.tipologiaAtto.systemId != null && schedaDocumento.tipologiaAtto.systemId != "")
                {
                    Model model = new Model();
                    DocsPaVO.ProfilazioneDinamica.Templates template = model.getTemplateDettagli(schedaDocumento.docNumber);
                    schedaDocumento.template = template;
                }
            }
            catch (Exception e)
            {
                string errorMessage = string.Format("Errore nel reperimento del documento con idProfile {0} e con docNumber {1}: {2}", idProfile, docNumber, e.Message);
                logger.Error(errorMessage);

                throw new ApplicationException(errorMessage, e);
            }
            logger.Info("END");
            return schedaDocumento;
        }




        public bool DeleteADT(string docnumber)
        {
            bool rtn = false;
            int rows = 0;
            DocsPaUtils.Query q = new DocsPaUtils.Query("DELETE FROM VERSIONS WHERE UPPER(VERSION_LABEL)='ADT' AND DOCNUMBER=" + docnumber);
            string query = q.getSQL();
            ExecuteNonQuery(query, out rows);
            if (rows != 0)
                rtn = true;

            return rtn;


        }

        private DocsPaVO.documento.SchedaDocumento GetSchedaDocumento(DocsPaVO.utente.InfoUtente infoUtente, DataRow dataRow, bool securityVersion = true)
        {
            logger.Info("BEGIN");
            DocsPaVO.documento.SchedaDocumento schedaDoc = new DocsPaVO.documento.SchedaDocumento();

            if (!GetProfilo(infoUtente, dataRow, ref schedaDoc, securityVersion))
            {
                schedaDoc = null;
            }

            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_DPA_COLL_MSPEDIZ_DOC");
            q.setParam("param1", schedaDoc.systemId);
            string comText = q.getSQL();
            logger.Debug(comText);
            DataSet ds;
            ExecuteQuery(out ds, "MS", comText);
            if (ds.Tables[0].Rows.Count != 0)
            {
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    schedaDoc.mezzoSpedizione = row[0].ToString();
                    schedaDoc.descMezzoSpedizione = row[1].ToString();
                }
            }
            else
            {
                schedaDoc.mezzoSpedizione = "0";
                schedaDoc.descMezzoSpedizione = "";
            }
            logger.Info("END");
            return schedaDoc;
        }

        public bool GetProfilo(DocsPaVO.utente.InfoUtente infoUtente, DataRow dataRow, ref DocsPaVO.documento.SchedaDocumento schedaDoc, bool securityVersion = true)
        {
            logger.Info("BEGIN");
            bool result = true;
            schedaDoc.autore = dataRow["AUTHOR"].ToString();
            schedaDoc.systemId = dataRow["SYSTEM_ID"].ToString();
            schedaDoc.dataCreazione = dataRow["CREATION_TIME"].ToString();
            schedaDoc.docNumber = dataRow["DOCNUMBER"].ToString();
            schedaDoc.accessRights = dataRow["ACCESSRIGHTS"].ToString();
            //Aggiunto per gestione documenti personali
            /*if (schedaDoc.accessRights == "0")
                schedaDoc.accessRights = "255";*/
            schedaDoc.tipoProto = dataRow["CHA_TIPO_PROTO"].ToString();
            schedaDoc.modOggetto = dataRow["CHA_MOD_OGGETTO"].ToString();
            schedaDoc.assegnato = dataRow["CHA_ASSEGNATO"].ToString();
            schedaDoc.fascicolato = dataRow["CHA_FASCICOLATO"].ToString();
            schedaDoc.privato = dataRow["CHA_PRIVATO"].ToString();
            schedaDoc.personale = dataRow["CHA_PERSONALE"].ToString();
            schedaDoc.evidenza = dataRow["CHA_EVIDENZA"].ToString();
            schedaDoc.interop = dataRow["CHA_INTEROP"].ToString();
            schedaDoc.dataScadenza = dataRow["DTA_SCADENZA"].ToString();
            // Registro
            schedaDoc.registro = GetRegistro(dataRow["ID_REGISTRO"].ToString());
            // Oggetto
            schedaDoc.oggetto = GetOggetto(dataRow);
            // Protocollo

            //Documento pubblico
            if (dataRow.Table.Columns.Contains("CHA_PUBBLICO") && dataRow["CHA_PUBBLICO"] != DBNull.Value)
            {
                if (dataRow["CHA_PUBBLICO"].ToString() == "1")
                {
                    schedaDoc.pubblico = true;
                }
            }
            string tipoDoc = dataRow["CHA_TIPO_PROTO"].ToString();
            if (tipoDoc.Equals("A") || tipoDoc.Equals("P") || tipoDoc.Equals("I"))
            {
                if (tipoDoc.Equals("A"))
                {
                    schedaDoc.protocollo = GetProtocolloArrivo(dataRow);
                    if (schedaDoc.protocollo == null)
                    {
                        result = false;
                    }
                }
                else if (tipoDoc.Equals("P"))
                {
                    schedaDoc.protocollo = GetProtocolloUscita(dataRow);
                    if (schedaDoc.protocollo == null)
                    {
                        result = false;
                    }
                }
                else if (tipoDoc.Equals("I"))
                {
                    schedaDoc.protocollo = GetProtocolloInterno(dataRow);
                    if (schedaDoc.protocollo == null)
                    {
                        result = false;
                    }
                }

                GetDatiProtocollo(dataRow, ref schedaDoc);
                schedaDoc.rispostaDocumento = GetRispostaAlProtocollo(dataRow);

            }
            else
            {
                //doc grigi
                schedaDoc.rispostaDocumento = GetRispostaDocGrigio(dataRow);

            }
            // Documenti
            schedaDoc.documenti = GetDocumenti(infoUtente, dataRow, securityVersion);

            // Impostazione del flag sulla visibilità delle versioni
            schedaDoc.previousVersionsHidden = (!HasDocumentVersionsFullVisibility(schedaDoc.systemId, infoUtente.idPeople, infoUtente.idGruppo));

            // Reperimento allegati documento
            schedaDoc.allegati = GetAllegati(dataRow["DOCNUMBER"].ToString(), string.Empty);

            // TipologiaAtto
            schedaDoc.tipologiaAtto = GetTipologiaAtto(dataRow);

            // ParoleChiave
            schedaDoc.paroleChiave = GetParolaChiave(dataRow);

            if (dataRow["DTA_PROTO"].ToString().Length > 10)
                schedaDoc.oraCreazione = dataRow["DTA_PROTO"].ToString().Substring(11);

            //riempie l'oggetto creatore documento
            schedaDoc.creatoreDocumento = GetCreatoreDocumento(dataRow);

            schedaDoc.inCestino = dataRow["CHA_IN_CESTINO"].ToString();

            if (schedaDoc.inCestino == "")
                schedaDoc.inCestino = "0";

            // Nuova gestione allegato
            if (dataRow["ID_DOCUMENTO_PRINCIPALE"] != DBNull.Value)
                // Reperimento informazioni sul documento principale
                schedaDoc.documentoPrincipale = GetInfoDocumento(infoUtente.idGruppo, infoUtente.idPeople, dataRow["ID_DOCUMENTO_PRINCIPALE"].ToString(), true);

            // Caricamento note documento
            FetchNoteDocumento(infoUtente, schedaDoc);

            //Protocollo titolario
            schedaDoc.protocolloTitolario = dataRow["PROT_TIT"].ToString();

            //Num in fasc
            schedaDoc.numInFasc = dataRow["NUM_IN_FASC"].ToString();

            //ID fasc protocollo titolario
            schedaDoc.idFascProtoTit = dataRow["ID_FASC_PROT_TIT"].ToString();

            //Numero protocollo nodo titolario
            schedaDoc.numProtTit = dataRow["NUM_PROT_TIT"].ToString();

            //Id Titolario
            schedaDoc.idTitolario = dataRow["ID_TITOLARIO"].ToString();

            //Riferimento Mittente
            schedaDoc.riferimentoMittente = dataRow["CHA_RIFF_MITT"].ToString();

            //typeId:
            schedaDoc.typeId = dataRow["TYPE_ID"].ToString();

            //CHA_DOCUMENTO_DA_PEC
            schedaDoc.documento_da_pec = dataRow["CHA_DOCUMENTO_DA_PEC"].ToString();

            // Reperimento stato di consolidamento del documento
            DocsPaDB.Query_DocsPAWS.DocumentConsolidation consolidationDb = new DocumentConsolidation(infoUtente);
            schedaDoc.ConsolidationState = consolidationDb.GetState(schedaDoc.systemId);
            //if (IsConfigEnabled())
            //{
            //    DocsPaDB.Query_DocsPAWS.DocumentConsolidation consolidationDb = new DocumentConsolidation(infoUtente);
            //    schedaDoc.ConsolidationState = consolidationDb.GetState(schedaDoc.systemId);
            //}
            //else
            //{
            //    DocsPaVO.documento.DocumentConsolidationStateInfo retValueCons = null;
            //    schedaDoc.ConsolidationState = retValueCons;
            //}

            // Reperimento del valore del campo LastForward utilizzato per indicare il system id dell'ultimo
            // documento generato tramite inoltro del documento di cui si sta richiedendo il dettaglio
            schedaDoc.LastForward = dataRow["LAST_FORWARD"].ToString();

            //***************************************************************
            //GIORDANO IACOZZILLI
            //17/07/2013
            //Gestione dell'icona della copia del docuemnto/fascicolo in deposito.
            //***************************************************************
            if (dataRow.Table.Columns.Contains("CHA_IN_ARCHIVIO"))
            {
                schedaDoc.inArchivio = dataRow["CHA_IN_ARCHIVIO"] != null ? dataRow["CHA_IN_ARCHIVIO"].ToString() : "0";
            }
            //***************************************************************
            //FINE
            //***************************************************************

            //Reperimento atipicità del documento
            schedaDoc.InfoAtipicita = DocsPaDB.Query_DocsPAWS.Documentale.GetInfoAtipicita(dataRow, DocsPaVO.Security.InfoAtipicita.TipoOggettoAtipico.DOCUMENTO);

            if (dataRow.Table.Columns.Contains("inConservazione") && dataRow["inConservazione"] != DBNull.Value)
            {

                if (dataRow["inConservazione"].ToString() == "1")
                {
                    schedaDoc.inConservazione = "1";
                }

            }

            // ABBATANGELI GIANLUIGI - gestione applicazioni esterne
            schedaDoc.codiceApplicazione = dataRow["COD_EXT_APP"].ToString();
            if (extAppControlEnabled && (!string.IsNullOrEmpty(schedaDoc.codiceApplicazione)))
            {
                schedaDoc.accessRights = (string.Compare(schedaDoc.codiceApplicazione, infoUtente.codWorkingApplication) == 0 ? schedaDoc.accessRights : "45");
                //schedaDoc.accessRights = (sameApplication(schedaDoc.codiceApplicazione,infoUtente.extApplications)?schedaDoc.accessRights:"45");
            }

            #region Convert for INVALID CHARACTER
            DocsPaVO.documento.Oggetto ogg = (DocsPaVO.documento.Oggetto)DocsPaUtils.Functions.Functions.XML_Serialization_Deserialization_By_Encode(
                schedaDoc.oggetto, typeof(DocsPaVO.documento.Oggetto), null, System.Text.Encoding.UTF8);

            schedaDoc.oggetto = ogg;
            #endregion

            logger.Info("END");
            return result;
        }
        //Abbatangeli Gianluigi - funzione che confronta le applicazioni tra oggetto ed utente)
        private bool sameApplication(string codAppScheda, ArrayList applicationList)
        {
            bool esito = false;

            foreach (DocsPaVO.utente.ExtApplication extapp in applicationList)
            {
                if (extapp.codice == codAppScheda)
                {
                    esito = true;
                    break;
                }
            }

            return esito;
        }

        protected bool GetProfiloMobile(DocsPaVO.utente.InfoUtente infoUtente, DataRow dataRow, ref DocsPaVO.documento.SchedaDocumento schedaDoc)
        {
            bool result = true;
            schedaDoc.autore = dataRow["AUTHOR"].ToString();
            schedaDoc.systemId = dataRow["SYSTEM_ID"].ToString();
            schedaDoc.dataCreazione = dataRow["CREATION_TIME"].ToString();
            schedaDoc.docNumber = dataRow["DOCNUMBER"].ToString();
            schedaDoc.accessRights = dataRow["ACCESSRIGHTS"].ToString();
            //Aggiunto per gestione documenti personali
            /*if (schedaDoc.accessRights == "0")
                schedaDoc.accessRights = "255";*/
            schedaDoc.tipoProto = dataRow["CHA_TIPO_PROTO"].ToString();
            schedaDoc.modOggetto = dataRow["CHA_MOD_OGGETTO"].ToString();
            schedaDoc.assegnato = dataRow["CHA_ASSEGNATO"].ToString();
            schedaDoc.fascicolato = dataRow["CHA_FASCICOLATO"].ToString();
            schedaDoc.privato = dataRow["CHA_PRIVATO"].ToString();
            schedaDoc.personale = dataRow["CHA_PERSONALE"].ToString();
            schedaDoc.evidenza = dataRow["CHA_EVIDENZA"].ToString();
            schedaDoc.interop = dataRow["CHA_INTEROP"].ToString();
            schedaDoc.dataScadenza = dataRow["DTA_SCADENZA"].ToString();
            // Registro
            schedaDoc.registro = GetRegistro(dataRow["ID_REGISTRO"].ToString());
            // Oggetto
            schedaDoc.oggetto = GetOggetto(dataRow);

            if (dataRow["DTA_PROTO"].ToString().Length > 10)
                schedaDoc.oraCreazione = dataRow["DTA_PROTO"].ToString().Substring(11);

            //riempie l'oggetto creatore documento
            schedaDoc.creatoreDocumento = GetCreatoreDocumento(dataRow);

            schedaDoc.inCestino = dataRow["CHA_IN_CESTINO"].ToString();

            // Caricamento note documento
            FetchNoteDocumento(infoUtente, schedaDoc);

            //Protocollo titolario
            schedaDoc.protocolloTitolario = dataRow["PROT_TIT"].ToString();

            //Num in fasc
            schedaDoc.numInFasc = dataRow["NUM_IN_FASC"].ToString();

            //ID fasc protocollo titolario
            schedaDoc.idFascProtoTit = dataRow["ID_FASC_PROT_TIT"].ToString();

            //Numero protocollo nodo titolario
            schedaDoc.numProtTit = dataRow["NUM_PROT_TIT"].ToString();

            //Id Titolario
            schedaDoc.idTitolario = dataRow["ID_TITOLARIO"].ToString();

            //Riferimento Mittente
            schedaDoc.riferimentoMittente = dataRow["CHA_RIFF_MITT"].ToString();

            //typeId:
            schedaDoc.typeId = dataRow["TYPE_ID"].ToString();

            //CHA_DOCUMENTO_DA_PEC
            schedaDoc.documento_da_pec = dataRow["CHA_DOCUMENTO_DA_PEC"].ToString();

            //PROTOCOLLO
            string tipoDoc = dataRow["CHA_TIPO_PROTO"].ToString();
            if (tipoDoc.Equals("A") || tipoDoc.Equals("P") || tipoDoc.Equals("I"))
            {
                if (tipoDoc.Equals("A"))
                {
                    schedaDoc.protocollo = GetProtocolloArrivo(dataRow);
                    if (schedaDoc.protocollo == null)
                    {
                        result = false;
                    }
                }
                else if (tipoDoc.Equals("P"))
                {
                    schedaDoc.protocollo = GetProtocolloUscita(dataRow);
                    if (schedaDoc.protocollo == null)
                    {
                        result = false;
                    }
                }
                else if (tipoDoc.Equals("I"))
                {
                    schedaDoc.protocollo = GetProtocolloInterno(dataRow);
                    if (schedaDoc.protocollo == null)
                    {
                        result = false;
                    }
                }

                GetDatiProtocollo(dataRow, ref schedaDoc);
                schedaDoc.rispostaDocumento = GetRispostaAlProtocollo(dataRow);
            }
            else
            {
                //doc grigi
                schedaDoc.rispostaDocumento = GetRispostaDocGrigio(dataRow);

            }
            return result;
        }

        private DocsPaVO.utente.Registro GetRegistro(string idRegistro)
        {
            DocsPaVO.utente.Registro reg = null;
            logger.Debug("getRegistro");
            if (!(idRegistro != null && !idRegistro.Equals("")))
            {
                return null;
            }

            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_DPAElRegistri");
            string firstParam = "SYSTEM_ID, VAR_CODICE, CHA_STATO, ID_AMM, VAR_DESC_REGISTRO, " +
                " VAR_EMAIL_REGISTRO, " + DocsPaDbManagement.Functions.Functions.ToChar("DTA_OPEN", false) +
                " AS DTA_OPEN, " + DocsPaDbManagement.Functions.Functions.ToChar("DTA_CLOSE", false) +
                " AS DTA_CLOSE, " + DocsPaDbManagement.Functions.Functions.ToChar("DTA_ULTIMO_PROTO", false) +
                " AS DTA_ULTIMO_PROTO, CHA_AUTO_INTEROP, CHA_RF, INVIO_RICEVUTA_MANUALE, FLAG_WSPIA, ID_RUOLO_AOO , ID_PEOPLE_AOO, ID_RUOLO_RESP, DIRITTO_RUOLO_AOO  ";
            q.setParam("param1", firstParam);
            q.setParam("param2", "SYSTEM_ID=" + idRegistro);
            string queryString = q.getSQL();
            logger.Debug(queryString);

            DataSet dataSet;
            ExecuteQuery(out dataSet, queryString);

            if (dataSet.Tables[0].Rows.Count > 0)
            {
                DataRow row = dataSet.Tables[0].Rows[0];

                reg = new DocsPaVO.utente.Registro();

                reg.systemId = row[0].ToString();
                reg.codRegistro = row[1].ToString();
                reg.stato = row[2].ToString();
                reg.idAmministrazione = row[3].ToString();
                reg.descrizione = row[4].ToString();
                reg.email = row[5].ToString();
                reg.dataApertura = row[6].ToString().Trim();
                reg.dataChiusura = row[7].ToString().Trim();
                reg.dataUltimoProtocollo = row[8].ToString();
                reg.autoInterop = row[9].ToString();
                reg.chaRF = row[10].ToString();
                if (!row["INVIO_RICEVUTA_MANUALE"].Equals(System.DBNull.Value))
                    reg.invioRicevutaManuale = (row["INVIO_RICEVUTA_MANUALE"].ToString().Equals("0")) ? "0" : "1";
                else
                    reg.invioRicevutaManuale = "1";

                reg.FlagWspia = row[11].ToString();
                reg.idRuoloAOO = row["ID_RUOLO_AOO"].ToString();
                reg.idUtenteAOO = row["ID_PEOPLE_AOO"].ToString();
                reg.idRuoloResp = row["ID_RUOLO_RESP"].ToString();
                reg.Diritto_Ruolo_AOO = row["DIRITTO_RUOLO_AOO"].ToString();



            }
            dataSet.Dispose();

            if (reg != null)
            {
                // Reperimento dati relativi all'amministrazione legata al registro
                string commandText = "SELECT A.SYSTEM_ID,A.VAR_CODICE_AMM FROM DPA_AMMINISTRA A,DPA_EL_REGISTRI R WHERE R.SYSTEM_ID=@idRegistro@ AND R.ID_AMM=A.SYSTEM_ID";

                q = new DocsPaUtils.Query(commandText);
                q.setParam("idRegistro", idRegistro);
                commandText = q.getSQL();

                try
                {
                    using (IDataReader reader = ExecuteReader(commandText))
                    {
                        if (reader == null)
                        {
                            throw new Exception("Errore in GetRegistro");
                        }
                        if (reader.Read())
                        {
                            reg.codice = reader.GetInt32(reader.GetOrdinal("SYSTEM_ID")).ToString();
                            reg.codAmministrazione = reader.GetString(reader.GetOrdinal("VAR_CODICE_AMM"));
                        }
                    }
                }
                catch (Exception ex)
                {
                    logger.Error(ex.Message);
                    reg = null;
                }
                finally
                {
                    CloseConnection();
                }
            }

            return reg;
        }
        private DocsPaVO.documento.Oggetto GetOggetto(DataRow dataRow)
        {
            logger.Debug("getOggetto");
            DocsPaVO.documento.Oggetto oggetto = new DocsPaVO.documento.Oggetto();
            oggetto.systemId = dataRow["ID_OGGETTO"].ToString();
            oggetto.descrizione = dataRow["VAR_DESC_OGGETTO"].ToString();
            return oggetto;
        }

        private DocsPaVO.documento.TipologiaAtto GetTipologiaAtto(DataRow dataRow)
        {
            logger.Info("BEGIN");
            DocsPaVO.documento.TipologiaAtto tipoAtto = null;
            string idTipoAtto = dataRow["ID_TIPO_ATTO"].ToString();
            if (!(idTipoAtto != null && !idTipoAtto.Equals("")))
            {
                logger.Info("END");
                return null;
            }
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_DPATipoAtto");
            q.setParam("param1", idTipoAtto);
            string queryString = q.getSQL();
            logger.Debug(queryString);

            DataSet dataSet;
            ExecuteQuery(out dataSet, queryString);
            foreach (DataRow row in dataSet.Tables[0].Rows)
            {
                tipoAtto = new DocsPaVO.documento.TipologiaAtto();
                tipoAtto.systemId = row[0].ToString();
                tipoAtto.descrizione = row[1].ToString();
            }
            dataSet.Dispose();
            logger.Info("END");
            return tipoAtto;
        }

        /// <summary>
        /// Verifica se un utente dispone dei diritti completi di visibilità su tutte le versioni di un documento
        /// </summary>
        /// <param name="idProfile"></param>
        /// <param name="idPeople"></param>
        /// <param name="idGroup"></param>
        /// <returns></returns>
        public bool HasDocumentVersionsFullVisibility(string idProfile, string idPeople, string idGroup)
        {
            bool retValue = false;

            using (DocsPaDB.DBProvider provider = new DocsPaDB.DBProvider())
            {
                DocsPaUtils.Query queryDef = DocsPaUtils.InitQuery.getInstance().getQuery("S_HAS_DOCUMENT_VERSIONS_FULL_VISIBILITY");

                queryDef.setParam("userdb", DocsPaDbManagement.Functions.Functions.GetDbUserSession());
                queryDef.setParam("idProfile", idProfile);
                queryDef.setParam("idPeople", idPeople);
                queryDef.setParam("idGroup", idGroup);

                string commandText = queryDef.getSQL();
                logger.Debug(commandText);

                string field;
                if (provider.ExecuteScalar(out field, commandText))
                {
                    int hasVisibility;
                    if (Int32.TryParse(field, out hasVisibility))
                        retValue = (hasVisibility > 0);
                }
            }

            return retValue;
        }

        private ArrayList GetDocumenti(DocsPaVO.utente.InfoUtente infoUtente, DataRow dataRow, bool securityVersion = true)
        {
            logger.Info("BEGIN");
            logger.Debug("getDocumenti");
            ArrayList listaDocumenti = new ArrayList();
            
            //Verifico se il documento principale è in libroFirma
            string strInLibroFirma = (dataRow.Table.Columns.Contains("IN_LIBROFIRMA") && dataRow["IN_LIBROFIRMA"] != null ? dataRow["IN_LIBROFIRMA"].ToString().Trim() : "0");
            bool inLibroFirma = ((!string.IsNullOrEmpty(strInLibroFirma) ? strInLibroFirma.Trim() : "0") == "0" ? false : true);
            
            string queryString = GetFileVersionsQuery(infoUtente, "D", dataRow["DOCNUMBER"].ToString(), securityVersion);
            DataSet dataSet;
            ExecuteQuery(out dataSet, "VERSIONI", queryString);
            //db.fillTable(queryString, dataSet, "VERSIONI");
            foreach (DataRow versionRow in dataSet.Tables["VERSIONI"].Rows)
            {
                DocsPaVO.documento.Documento documento = new DocsPaVO.documento.Documento();
                documento = (DocsPaVO.documento.Documento)GetFileVersionDetails((DocsPaVO.documento.FileRequest)documento, versionRow);
                documento.docServerLoc = dataRow["DOCSERVER_LOC"].ToString();
                documento.path = dataRow["PATH"].ToString();
                documento.dataInserimento = versionRow["DTA_CREAZIONE"].ToString();
                documento.dataArrivo = versionRow["DTA_ARRIVO"].ToString();
                if (versionRow["CHA_DA_INVIARE"] != null)
                {
                    documento.daInviare = versionRow["CHA_DA_INVIARE"].ToString();
                }
                documento.firmatari = GetFirm(documento.versionId);
                //NUOVA GESTIONE DOC FIRMATI
                documento.firmato = versionRow["CHA_FIRMATO"].ToString();
                documento.tipoFirma = versionRow["CHA_TIPO_FIRMA"].ToString();

                documento.tipologia = GetTipologiaDocumento(dataRow);

                if (versionRow["CARTACEO"] != DBNull.Value)
                {
                    int cartaceo;
                    if (Int32.TryParse(versionRow["CARTACEO"].ToString(), out cartaceo))
                        documento.cartaceo = (cartaceo > 0);
                }
                documento.inLibroFirma = inLibroFirma;
                listaDocumenti.Add(documento);
            }
            dataSet.Dispose();
            logger.Info("END");
            return listaDocumenti;
        }

        public List<Documento> GetVersionsMainDoc(DocsPaVO.utente.InfoUtente infoUtente, string docNumber)
        {
            logger.Info("BEGIN");
            logger.Debug("GetVersionsMainDoc");

            DataSet dataSet;
            string queryString = string.Empty;
            string docServerLoc = string.Empty;
            string path = string.Empty;
            List<Documento> listVersionsMainDoc = new List<Documento>();
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_J_PROFILE__DOCUMENTTYPES");
            q.setParam("param1", "A.DOCNUMBER = " + docNumber);
            queryString = q.getSQL();
            logger.Debug(queryString);
            ExecuteQuery(out dataSet, "PROFILE", queryString);
            //dovrebbe tornare una e una sola riga
            if (dataSet.Tables["PROFILE"].Rows.Count > 0)
            {
                DataRow dataRow = dataSet.Tables["PROFILE"].Rows[0];
                docServerLoc = dataRow["DOCSERVER_LOC"].ToString();
                path = dataRow["PATH"].ToString();

                queryString = GetFileVersionsQuery(infoUtente, "D", dataRow["DOCNUMBER"].ToString());
                dataSet.Dispose();
                ExecuteQuery(out dataSet, "VERSIONI", queryString);

                foreach (DataRow versionRow in dataSet.Tables["VERSIONI"].Rows)
                {
                    DocsPaVO.documento.Documento documento = new DocsPaVO.documento.Documento();
                    documento = (DocsPaVO.documento.Documento)GetFileVersionDetails((DocsPaVO.documento.FileRequest)documento, versionRow);
                    documento.docServerLoc = docServerLoc;
                    documento.path = path;
                    documento.dataInserimento = versionRow["DTA_CREAZIONE"].ToString();
                    documento.dataArrivo = versionRow["DTA_ARRIVO"].ToString();
                    if (versionRow["CHA_DA_INVIARE"] != null)
                    {
                        documento.daInviare = versionRow["CHA_DA_INVIARE"].ToString();
                    }
                    documento.firmatari = GetFirm(documento.versionId);
                    //NUOVA GESTIONE DOC FIRMATI
                    documento.firmato = versionRow["CHA_FIRMATO"].ToString();
                    documento.tipoFirma = versionRow["CHA_TIPO_FIRMA"].ToString();
                    documento.tipologia = GetTipologiaDocumento(dataRow);
                    if (versionRow["CARTACEO"] != DBNull.Value)
                    {
                        int cartaceo;
                        if (Int32.TryParse(versionRow["CARTACEO"].ToString(), out cartaceo))
                            documento.cartaceo = (cartaceo > 0);
                    }
                    //Libro firma
                    string strInLibroFirma = (dataRow.Table.Columns.Contains("IN_LIBROFIRMA") && dataRow["IN_LIBROFIRMA"] != null ? dataRow["IN_LIBROFIRMA"].ToString().Trim() : "0");
                    documento.inLibroFirma = ((!string.IsNullOrEmpty(strInLibroFirma)?strInLibroFirma.Trim():"0") == "0" ? false : true);
                    //Fine
                
                    listVersionsMainDoc.Add(documento);
                }
            }
            dataSet.Dispose();
            logger.Info("END");
            return listVersionsMainDoc;
        }

        // tipo = D:documento, A:allegato
        private string GetFileVersionsQuery(DocsPaVO.utente.InfoUtente infoUtente, string tipo, string docNumber, bool securityVersion = true)
        {
            logger.Debug("getFileVersionsQuery");
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_J_COMPONENTS__VERSIONS2");
            /*string firstParam = "B.VERSION_ID, A.DOCNUMBER, B.VERSION, " +
                "B.SUBVERSION, B.VERSION_LABEL, B.AUTHOR, B.COMMENTS, " +
                "A.PATH, A.FILE_SIZE, B.NUM_PAG_ALLEGATI, B.CHA_DA_INVIARE, "+ DocsPaDbManagement.Functions.Functions.ToChar("B.DTA_ARRIVO",false)+ " AS DTA_ARRIVO ";*/
            string dbType = System.Configuration.ConfigurationManager.AppSettings["DBType"];
            string firmato = " A.CHA_FIRMATO";
            string userDb;
            string tipoFirma = ", A.CHA_TIPO_FIRMA";
            //if (dbType.ToUpper() == "SQL")
            //{
            //    userDb = DocsPaDbManagement.Functions.Functions.GetDbUserSession();
            //    firmato = userDb + ".getchafirmato(A.DOCNUMBER) as CHA_FIRMATO";
            //}
            //else
            //    firmato = "getchafirmato(A.DOCNUMBER) as CHA_FIRMATO";

            string firstParam = "B.VERSION_ID, A.DOCNUMBER, B.VERSION, " +
                "B.SUBVERSION, B.VERSION_LABEL, B.AUTHOR, B.COMMENTS,p.full_name, a.ID_PEOPLE_PUTFILE, a.DTA_FILE_ACQUIRED, a.ID_PEOPLE_DELEGATO_PUTFILE, " +
                "A.PATH, A.FILE_SIZE, B.NUM_PAG_ALLEGATI, B.CHA_DA_INVIARE, " + DocsPaDbManagement.Functions.Functions.ToChar("B.DTA_CREAZIONE", true) + " AS DTA_CREAZIONE ," + DocsPaDbManagement.Functions.Functions.ToChar("B.DTA_ARRIVO", true) + " AS DTA_ARRIVO, B.CARTACEO,B.V_NAME_FN AS V_NAME_FN, B.ID_PEOPLE_DELEGATO, " + firmato + tipoFirma;
            q.setParam("param1", firstParam);
            string secondParam = "WHERE A.VERSION_ID = B.VERSION_ID " +
                "AND A.DOCNUMBER = B.DOCNUMBER " +
                "AND A.DOCNUMBER=" + docNumber + " and b.author = p.system_id ";
            if (tipo.Equals("D"))
            {
                secondParam += " AND B.VERSION > 0";

                // Function per la visibilità delle versioni
                string dbUser = DocsPaDbManagement.Functions.Functions.GetDbUserSession();
                if (!string.IsNullOrEmpty(dbUser))
                    dbUser += ".";
                if (infoUtente.idGruppo != null)
                {
                    if (securityVersion)
                    secondParam += string.Format(" AND {0}ISVERSIONVISIBLE(B.VERSION_ID, {1}, {2}) > 0", dbUser, infoUtente.idPeople, infoUtente.idGruppo);
                    else
                        secondParam += string.Format(" AND {0}ISVERSIONVISIBLENOSECURITY(B.VERSION_ID) > 0", dbUser);
                }
                secondParam += " ORDER BY B.VERSION_ID DESC";
            }
            else
            {
                secondParam += " AND B.VERSION = 0";
                //elisa
                //filtro per il previw del webtop di HM
                secondParam += " AND B.VERSION_LABEL NOT LIKE '%PR%'";
                //
                secondParam += " ORDER BY B.VERSION_ID";
            }
            q.setParam("param2", secondParam);
            string queryString = q.getSQL();
            logger.Debug("TEST: " + queryString);
            return queryString;
        }

        public ArrayList GetFirm(string versionId)
        {
            logger.Debug("getFirmatari");
            ArrayList listaFirmatari = new ArrayList();
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_J_DPA_FIRMATARI__FIRMA_VERS");
            q.setParam("param1", " B.ID_FIRMATARIO, A.VAR_NOME, A.VAR_COGNOME, B.ID_VERSIONE ");
            q.setParam("param2", versionId);
            string queryString = q.getSQL();
            logger.Debug(queryString);
            DataSet dataSet;
            ExecuteQuery(out dataSet, queryString);
            foreach (DataRow row in dataSet.Tables[0].Rows)
            {
                DocsPaVO.documento.Firmatario firmatario = new DocsPaVO.documento.Firmatario();
                firmatario.systemId = row[0].ToString();
                firmatario.nome = row[1].ToString();
                firmatario.cognome = row[2].ToString();
                listaFirmatari.Add(firmatario);
            }
            dataSet.Dispose();
            return listaFirmatari;
        }

        public ArrayList GetParolaChiave(DataRow dataRow)
        {
            logger.Info("BEGIN");
            logger.Debug("getParoleChiave");
            ArrayList listaParoleChiave = new ArrayList();
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_J_DPA_PROF_PAROLE__PAROLE");
            q.setParam("param1", "DPA_PROF_PAROLE.ID_PROFILE=" + dataRow["SYSTEM_ID"].ToString());
            string queryString = q.getSQL();
            logger.Debug(queryString);
            DataSet dataSet;
            ExecuteQuery(out dataSet, queryString);
            foreach (DataRow row in dataSet.Tables[0].Rows)
            {
                DocsPaVO.documento.ParolaChiave pc = new DocsPaVO.documento.ParolaChiave();
                pc.systemId = row[0].ToString();
                pc.descrizione = row[1].ToString();
                pc.idAmministrazione = row[2].ToString();
                listaParoleChiave.Add(pc);
            }
            dataSet.Dispose();
            logger.Info("END");
            return listaParoleChiave;
        }

        private DocsPaVO.documento.TipologiaCanale GetTipologiaDocumento(DataRow dataRow)
        {
            DocsPaVO.documento.TipologiaCanale tipoDoc = new DocsPaVO.documento.TipologiaCanale();
            tipoDoc.codice = dataRow["TYPE_ID"].ToString();
            tipoDoc.codice = dataRow["DESCRIPTION"].ToString();
            return tipoDoc;
        }

        public string GetQueryCorrispondente(string idProfile)
        {
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_J_DPA_CORR_GLOBALI__DOC_ARRIVO_PAR");
            q.setParam("param1", "A.SYSTEM_ID, A.VAR_COD_RUBRICA, A.ID_AMM, A.CHA_TIPO_IE, A.CHA_TIPO_CORR," +
                "B.CHA_TIPO_MITT_DEST, A.VAR_DESC_CORR, P.CHA_TIPO_PROTO, A.DTA_FINE, A.COD_DESC_INTEROP");
            q.setParam("param2", "B.ID_PROFILE=" + idProfile);
            string queryString = q.getSQL();
            return queryString;
        }

        public string GetQueryCorrispondente_NEW(string idProfile, string tipoProto)
        {
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_J_DPA_CORR_GLOBALI__DOC_ARRIVO_PAR_NEW");
            string dbType = System.Configuration.ConfigurationManager.AppSettings["DBType"];
            if (dbType.ToUpper() == "SQL")
            {
                q.setParam("dbuser", DocsPaDbManagement.Functions.Functions.GetDbUserSession());
                q.setParam("system_id", idProfile);
            }
            else
            {
                q.setParam("system_id", idProfile);
                //q.setParam("tipoProto", tipoProto);
            }
            string queryString = q.getSQL();
            return queryString;
        }

        public string GetQueryUfficioReferente(string idProfile)
        {
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_J_DPA_CORR_GLOBALI__UFFICIO_REFERENTE");
            q.setParam("param1", idProfile);
            string queryString = q.getSQL();
            return queryString;
        }

        public ArrayList GetTipoAtto()
        {
            logger.Debug("getTiplogiaAtto");
            ArrayList lista = new ArrayList();
            /*string sqlString = "SELECT SYSTEM_ID, VAR_DESC_ATTO FROM DPA_TIPO_ATTO ORDER BY VAR_DESC_ATTO";*/
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_DPATipoAtto2");
            q.setParam("param1", "VAR_DESC_ATTO");
            string queryString = q.getSQL();
            try
            {
                //CloseConnection();
                logger.Debug(queryString);

                DataSet dataSet;
                ExecuteQuery(out dataSet, queryString);
                foreach (DataRow row in dataSet.Tables[0].Rows)
                {
                    DocsPaVO.documento.TipologiaAtto tipologiaAtto = new DocsPaVO.documento.TipologiaAtto();
                    tipologiaAtto.systemId = row[0].ToString();
                    tipologiaAtto.descrizione = row[1].ToString();
                    lista.Add(tipologiaAtto);
                }
                //CloseConnection();
            }
            catch (Exception e)
            {
                logger.Error(e.Message);
                //CloseConnection();
                logger.Error("Errore nella gestione dei documenti (Query - GetTipoAtto)", e);
                throw new Exception("F_System");
            }
            return lista;
        }

        public ArrayList ARCHIVE_GetTipoAtto(string idAmministrazione)
        {
            logger.Debug("getTiplogiaAtto_Archivio");
            ArrayList lista = new ArrayList();
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("ARCHIVE_S_DPATipoAtto");
            q.setParam("param1", "VAR_DESC_ATTO");
            q.setParam("param2", idAmministrazione);
            string queryString = q.getSQL();
            try
            {
                //CloseConnection();
                logger.Debug(queryString);

                DataSet dataSet;
                ExecuteQuery(out dataSet, queryString);
                foreach (DataRow row in dataSet.Tables[0].Rows)
                {
                    DocsPaVO.documento.TipologiaAtto tipologiaAtto = new DocsPaVO.documento.TipologiaAtto();
                    tipologiaAtto.systemId = row[0].ToString();
                    tipologiaAtto.descrizione = row[1].ToString();
                    lista.Add(tipologiaAtto);
                }
            }
            catch (Exception e)
            {
                logger.Error(e.Message);
                logger.Error("Errore nella gestione dei documenti nell'archivio(Query - GetTipoAtto_Archivio)", e);
                //throw new Exception("F_System");
            }
            return lista;
        }

        public ArrayList getTipoAttoPDInsRic(string idAmministrazione, string idGruppo, string diritti)
        {
            logger.Debug("getTiplogiaAtto");
            ArrayList lista = new ArrayList();
            /*string sqlString = "SELECT SYSTEM_ID, VAR_DESC_ATTO FROM DPA_TIPO_ATTO ORDER BY VAR_DESC_ATTO";*/
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("PD_GET_TIPOATTO_INS_RIC");
            q.setParam("param1", "VAR_DESC_ATTO");
            q.setParam("param2", idAmministrazione);
            q.setParam("param3", idGruppo);

            //Ricerca
            if (diritti == "1")
            {
                q.setParam("paramInEsercizio", "");
                q.setParam("param4", " IN (1,2) ");
                q.setParam("iperdocumento_and", "");
                q.setParam("iperdocumento_or", "UNION SELECT DISTINCT DPA_TIPO_ATTO.SYSTEM_ID, VAR_DESC_ATTO FROM DPA_TIPO_ATTO, DPA_VIS_TIPO_DOC WHERE IPERDOCUMENTO = 1 AND (ID_AMM = " + idAmministrazione + " OR ID_AMM IS NULL) ");
                //q.setParam("iperdocumento", " OR ( IPERDOCUMENTO = 1 AND (ID_AMM = " + idAmministrazione + " OR ID_AMM IS NULL)) ");
            }

            //Inserimento
            if (diritti == "2")
            {
                q.setParam("paramInEsercizio", " (In_Esercizio <> 'NO' OR In_Esercizio IS NULL) AND (Abilitato_SI_NO <> 0 OR Abilitato_SI_NO IS NULL) AND ");
                q.setParam("param4", " IN (2) ");
                q.setParam("iperdocumento_and", "");
                q.setParam("iperdocumento_or", "");
                //q.setParam("iperdocumento", "");
            }

            //Procedimenti
            if(diritti == "P")
            {
                q.setParam("paramInEsercizio", " (In_Esercizio <> 'NO' OR In_Esercizio IS NULL) AND (Abilitato_SI_NO <> 0 OR Abilitato_SI_NO IS NULL) AND ");
                q.setParam("param4", " IN (2) ");
                q.setParam("iperdocumento_and", " AND CHA_PROCEDIMENTALE='1' ");
                q.setParam("iperdocumento_or", "");
                //q.setParam("iperdocumento", " AND CHA_PROCEDIMENTALE='1' ");
            }

            string queryString = q.getSQL();
            try
            {
                //CloseConnection();
                logger.Debug(queryString);

                DataSet dataSet;
                ExecuteQuery(out dataSet, queryString);
                foreach (DataRow row in dataSet.Tables[0].Rows)
                {
                    DocsPaVO.documento.TipologiaAtto tipologiaAtto = new DocsPaVO.documento.TipologiaAtto();
                    tipologiaAtto.systemId = row[0].ToString();
                    tipologiaAtto.descrizione = row[1].ToString();
                    lista.Add(tipologiaAtto);
                }
                //CloseConnection();
            }
            catch (Exception e)
            {
                logger.Error(e.Message);
                //CloseConnection();
                logger.Error("Errore nella gestione dei documenti (Query - GetTipoAtto)", e);
                throw new Exception("F_System");
            }
            return lista;
        }

        public ArrayList GetTipoAtto(string idAmministrazione)
        {
            logger.Debug("getTiplogiaAtto");
            ArrayList lista = new ArrayList();
            /*string sqlString = "SELECT SYSTEM_ID, VAR_DESC_ATTO FROM DPA_TIPO_ATTO ORDER BY VAR_DESC_ATTO";*/
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_DPATipoAtto4");
            q.setParam("param1", "VAR_DESC_ATTO");
            q.setParam("param2", idAmministrazione);
            string queryString = q.getSQL();
            try
            {
                //CloseConnection();
                logger.Debug(queryString);

                DataSet dataSet;
                ExecuteQuery(out dataSet, queryString);
                foreach (DataRow row in dataSet.Tables[0].Rows)
                {
                    DocsPaVO.documento.TipologiaAtto tipologiaAtto = new DocsPaVO.documento.TipologiaAtto();
                    tipologiaAtto.systemId = row[0].ToString();
                    tipologiaAtto.descrizione = row[1].ToString();
                    lista.Add(tipologiaAtto);
                }
                //CloseConnection();
            }
            catch (Exception e)
            {
                logger.Error(e.Message);
                //CloseConnection();
                logger.Error("Errore nella gestione dei documenti (Query - GetTipoAtto)", e);
                throw new Exception("F_System");
            }
            return lista;
        }

        #region Metodo Commentato
        //		public ArrayList GetTipoCanale()
        //		{
        //			logger.Debug("getTiplogiaCanale");
        //			ArrayList lista = new ArrayList();
        //			/*string sqlString = "SELECT SYSTEM_ID, DESCRIPTION, TYPE_ID FROM DOCUMENTTYPES ORDER BY DESCRIPTION";*/
        //			DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_Documenttypes_ord");
        //			q.setParam("param1", "DESCRIPTION");
        //			string queryString = q.getSQL();
        //			try 
        //			{
        //				//OpenConnection();
        //				DataSet dataSet;
        //				ExecuteQuery(out dataSet, queryString);
        //				foreach(DataRow row in dataSet.Tables[0].Rows)
        //				{
        //					DocsPaVO.documento.TipologiaCanale tipologiaCanale = new DocsPaVO.documento.TipologiaCanale();
        //					tipologiaCanale.systemId = row[0].ToString();
        //					tipologiaCanale.descrizione = row[1].ToString();
        //					tipologiaCanale.codice = row[2].ToString();
        //					lista.Add(tipologiaCanale);
        //				}
        //				//CloseConnection();
        //			} 
        //			catch (Exception e) 
        //			{
        //				logger.Debug (e.Message);				
        //				//CloseConnection();
        //				throw new Exception("F_System");
        //			}
        //			return lista;
        //		}
        #endregion

        private string GetEmailAddressDocument(string idProfile)
        {
            logger.Debug("GetEmailAddressDocument");
            string retValue = string.Empty;

            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_DPA_MAIL_ELABORATE");
            q.setParam("idProfile", idProfile);

            string queryString = q.getSQL();
            try
            {
                logger.Debug(queryString);
                DataSet ds;
                if (ExecuteQuery(out ds, "emailAddressTask", queryString))
                {
                    if (ds.Tables["emailAddressTask"] != null && ds.Tables["emailAddressTask"].Rows.Count > 0)
                    {
                        retValue = ds.Tables["emailAddressTask"].Rows[0]["VAR_EMAIL"].ToString();
                    }
                }
            }
            catch (Exception e)
            {
                logger.Error(e.Message);
                logger.Error("Errore nella gestione dei documenti (Query - GetEmailAddressDocument)", e);
            }
            return retValue;
        }

        private DocsPaVO.documento.Protocollo GetProtocolloArrivo(DataRow dataRow)
        {
            logger.Info("BEGIN");
            logger.Debug("getProtocolloArrivo");
            DocsPaVO.documento.ProtocolloEntrata protocollo = new DocsPaVO.documento.ProtocolloEntrata();
            if (dataRow["DTA_PROTO_IN"] != null)
            {
                protocollo.dataProtocolloMittente = dataRow["DTA_PROTO_IN"].ToString().Trim();
            }
            if (dataRow["VAR_PROTO_IN"] != null)
            {
                protocollo.descrizioneProtocolloMittente = dataRow["VAR_PROTO_IN"].ToString();
            }
            if (!GetCorrispondentiEntrata(ref protocollo, dataRow["SYSTEM_ID"].ToString()))
            {
                protocollo = null;
            }
            logger.Info("END");
            return protocollo;
        }

        private DocsPaVO.documento.Protocollo GetProtocolloUscita(DataRow dataRow)
        {
            logger.Info("BEGIN");
            logger.Debug("getProtocolloUscita");
            DocsPaVO.documento.ProtocolloUscita protocollo = new DocsPaVO.documento.ProtocolloUscita();
            if (!GetCorrispondentiUscita(ref protocollo, dataRow["SYSTEM_ID"].ToString()))
            {
                protocollo = null;
            }
            logger.Info("END");
            return protocollo;
        }

        private DocsPaVO.documento.Protocollo GetProtocolloInterno(DataRow dataRow)
        {
            logger.Info("BEGIN");
            logger.Debug("getProtocolloInterno");
            DocsPaVO.documento.ProtocolloInterno protocollo = new DocsPaVO.documento.ProtocolloInterno();
            if (!GetCorrispondentiInterni(ref protocollo, dataRow["SYSTEM_ID"].ToString()))
            {
                protocollo = null;
            }
            logger.Info("END");
            return protocollo;
        }

        private void GetDatiProtocollo(DataRow dataRow, ref DocsPaVO.documento.SchedaDocumento sch)
        {
            logger.Debug("getDatiProtocollo");
            DocsPaVO.documento.Protocollo protocollo = sch.protocollo;
            protocollo.numero = dataRow["NUM_PROTO"].ToString();
            protocollo.segnatura = dataRow["VAR_SEGNATURA"].ToString();
            //	old: protocollo.dataProtocollazione = dataRow["DTA_PROTO"].ToString().Trim();
            if (dataRow["DTA_PROTO"].ToString().Trim().Length > 10)
            {
                protocollo.dataProtocollazione = dataRow["DTA_PROTO"].ToString().Substring(0, 10);
            }
            else
            {
                protocollo.dataProtocollazione = dataRow["DTA_PROTO"].ToString().Trim();
            }
            protocollo.anno = dataRow["NUM_ANNO_PROTO"].ToString();
            protocollo.daProtocollare = dataRow["CHA_DA_PROTO"].ToString();
            protocollo.invioConferma = dataRow["CHA_INVIO_CONFERMA"].ToString();
            protocollo.modMittDest = dataRow["CHA_MOD_MITT_DEST"].ToString();
            protocollo.modMittInt = dataRow["CHA_MOD_MITT_INT"].ToString();
            protocollo.stampeEffettuate = dataRow["PRINTS_NUM"].ToString();

            //protocollo.rispostaProtocollo = GetRispostaAlProtocollo(dataRow);
            sch.datiEmergenza = GetDatiEmergenza(dataRow);
            protocollo.protocolloAnnullato = GetDatiAnnullamento(dataRow);
            //gestione protocollatore add by massimo digregorio
            sch.protocollatore = GetProtocollatore(dataRow);
            sch.creatoreDocumento = GetCreatoreDocumento(dataRow);
        }

        private DocsPaVO.documento.FileRequest GetFileVersionDetails(DocsPaVO.documento.FileRequest fileRequest, DataRow dataRow)
        {
            //DocsPaVO.documento.FileRequest fileRequest = new DocsPaVO.documento.FileRequest();
            fileRequest.docNumber = dataRow["DOCNUMBER"].ToString();
            fileRequest.versionId = dataRow["VERSION_ID"].ToString();
            fileRequest.version = dataRow["VERSION"].ToString();
            fileRequest.subVersion = dataRow["SUBVERSION"].ToString();
            fileRequest.versionLabel = dataRow["VERSION_LABEL"].ToString();
            fileRequest.idPeople = dataRow["AUTHOR"].ToString();
            fileRequest.descrizione = dataRow["COMMENTS"].ToString();
            fileRequest.fileName = dataRow["PATH"].ToString();
            fileRequest.fileSize = dataRow["FILE_SIZE"].ToString();
            fileRequest.autore = dataRow["full_name"].ToString();

            fileRequest.idPeopleDelegato = "0";
            Utenti utente = new Utenti();
            if (dataRow.Table.Columns.Contains("ID_PEOPLE_DELEGATO") && dataRow["ID_PEOPLE_DELEGATO"] != DBNull.Value)
            {

                if (dataRow["ID_PEOPLE_DELEGATO"].ToString() != "0")
                {
                    //26-09-2014: Sostituito GetUtente con GetUtenteNoFiltroDisabled nel caso di delegato disabilitato, andava in eccezione
                    //fileRequest.idPeopleDelegato = utente.GetUtente(dataRow["ID_PEOPLE_DELEGATO"].ToString()).descrizione;
                    fileRequest.idPeopleDelegato = dataRow["ID_PEOPLE_DELEGATO"].ToString();
                    fileRequest.autore = utente.GetUtenteNoFiltroDisabled(dataRow["ID_PEOPLE_DELEGATO"].ToString()).descrizione + " DELEGATO DA " + fileRequest.autore;
                }

            }

            if (dataRow.Table.Columns.Contains("ID_PEOPLE_PUTFILE") && dataRow["ID_PEOPLE_PUTFILE"] != DBNull.Value)
            {
                fileRequest.autoreFile = utente.GetUtenteNoFiltroDisabled(dataRow["ID_PEOPLE_PUTFILE"].ToString()).descrizione;
            }

            if (dataRow.Table.Columns.Contains("ID_PEOPLE_DELEGATO_PUTFILE") && dataRow["ID_PEOPLE_DELEGATO_PUTFILE"] != DBNull.Value)
            {
                fileRequest.autoreFile = utente.GetUtenteNoFiltroDisabled(dataRow["ID_PEOPLE_DELEGATO_PUTFILE"].ToString()).descrizione + " DELEGATO DA " + fileRequest.autoreFile;
            }

            if (dataRow.Table.Columns.Contains("DTA_FILE_ACQUIRED") && dataRow["DTA_FILE_ACQUIRED"] != DBNull.Value)
            {
                fileRequest.dataAcquisizione = dataRow["DTA_FILE_ACQUIRED"].ToString();
            }

            fileRequest.fNversionId = dataRow["V_NAME_FN"].ToString() + getFNETename(dataRow["DOCNUMBER"].ToString());
            return fileRequest;
        }

        private bool GetCorrispondentiEntrata(ref DocsPaVO.documento.ProtocolloEntrata protocolloEntrata, string idProfile)
        {
            bool result = true;
            logger.Debug("getCorrispondentiEntrata");
            string queryString = GetQueryCorrispondente(idProfile);
            logger.Debug(queryString);
            // TODO: DocsPaWS.Utils.Logger.log("Dopo query DocManager.getCorrispondentiEntrata", logLevelTime);
            DataSet dataSet;
            DataSet dataSetR;
            ExecuteQuery(out dataSet, queryString);

            //Ufficio Referente per il protocollo in Arrivo
            string queryStringRef = GetQueryUfficioReferente(idProfile);
            ExecuteQuery(out dataSetR, queryStringRef);
            if (dataSetR != null && dataSetR.Tables[0].Rows.Count == 1)
            {
                protocolloEntrata.ufficioReferente = GetCorrispondenteUfficioReferente(dataSetR);
            }

            foreach (DataRow row in dataSet.Tables[0].Rows)
            {
                // Verifico il tipo di mittente
                switch (row[5].ToString())
                {
                    case "M":
                        protocolloEntrata.mittente = GetCorrispondenteSemplice(row);
                        if (protocolloEntrata.mittente == null)
                        {
                            result = false;
                        }
                        break;

                    case "I":
                        protocolloEntrata.mittenteIntermedio = GetCorrispondenteSemplice(row);
                        if (protocolloEntrata.mittenteIntermedio == null)
                        {
                            result = false;
                        }
                        break;

                    case "MD":
                        if (isEnableMittentiMultipli)
                        {
                            if (protocolloEntrata.mittenti == null)
                                protocolloEntrata.mittenti = new ArrayList();
                            protocolloEntrata.mittenti.Add(GetCorrispondenteSemplice(row));
                        }
                        break;
                }
                /*
                // Verifico se si tratta di un mittente o di un mittente intermedio
                if (row[5].ToString().Equals("M"))
                {
                    protocolloEntrata.mittente = GetCorrispondenteSemplice(row);
                    if (protocolloEntrata.mittente == null)
                    {
                        result = false;
                    }
                }
                else if (row[5].ToString().Equals("I"))
                {
                    protocolloEntrata.mittenteIntermedio = GetCorrispondenteSemplice(row);
                    if (protocolloEntrata.mittenteIntermedio == null)
                    {
                        result = false;
                    }
                }
                */
            }
            dataSet.Dispose();
            dataSetR.Dispose();
            return result;
        }

        private bool GetCorrispondentiUscita(ref DocsPaVO.documento.ProtocolloUscita protocolloUscita, string idProfile)
        {
            bool result = true;
            ArrayList destinatari = new ArrayList();
            ArrayList destinatariConoscenza = new ArrayList();
            string queryString = GetQueryCorrispondente_NEW(idProfile, "P");
            logger.Debug(queryString);
            // TODO: DocsPaWS.Utils.Logger.log("Dopo query DocManager.getCorrispondentiUscita", logLevelTime);
            DataSet dataSet;
            DataSet dataSetR;
            ExecuteQuery(out dataSet, queryString);

            //corrispondente Ufficio Referente
            string queryStringRef = GetQueryUfficioReferente(idProfile);
            ExecuteQuery(out dataSetR, queryStringRef);
            if (dataSetR != null && dataSetR.Tables[0].Rows.Count == 1)
            {
                protocolloUscita.ufficioReferente = GetCorrispondenteUfficioReferente(dataSetR);
            }

            // TODO: DocsPaWS.Utils.Logger.log("Dopo query DocManager.getCorrispondentiUscita", logLevelTime);
            foreach (DataRow row in dataSet.Tables[0].Rows)
            {
                // Verifico se si tratta di un destinatario o di un destinatario per conoscenza
                DocsPaVO.utente.Corrispondente corr = new DocsPaVO.utente.Corrispondente();

                if (row["CHA_TIPO_MITT_DEST"].ToString().Equals("M"))
                    corr = GetCorrispondente_NEW(row);
                else
                    //corr = GetCorrispondente_Prot_NEW(idProfile, row, dataSet);
                    corr = GetCorrispondente_Prot_Experimental(idProfile, row, dataSet);

                //Nuovi dati dpa_stato_invio


                DocsPaVO.documento.ProtocolloDestinatario pd = new DocsPaVO.documento.ProtocolloDestinatario();
                pd.systemId = row["SYSTEM_ID_INVIO"].ToString();
                pd.codiceAOO = row["VAR_CODICE_AOO_INVIO"].ToString();
                pd.codiceAmm = row["VAR_CODICE_AMM_INVIO"].ToString();
                pd.dta_spedizione = row["DTA_SPEDIZIONE"].ToString();
                pd.protocolloDestinatario = row["VAR_PROTO_DEST"].ToString();
                pd.dataProtocolloDestinatario = row["DTA_PROTO_DEST"].ToString();
                if (!string.IsNullOrEmpty(row["ID_CORR_GLOBALE"].ToString()))
                {
                    if (row["ID_CORR_GLOBALE"].ToString().Equals(corr.systemId))
                        pd.descrizioneCorr = corr.descrizione;
                    else
                    {
                        Utenti ut = new Utenti();
                        pd.descrizioneCorr = ut.GetCorrispondente((row["ID_CORR_GLOBALE"].ToString()), false).descrizione;
                    }
                }
                else
                    pd.descrizioneCorr = string.Empty;

                string idDocumentType;
                if (!string.IsNullOrEmpty(row["ID_DOCUMENTTYPE"].ToString()))
                {
                    idDocumentType = row["ID_DOCUMENTTYPE"].ToString();
                    pd.documentType = row["description"].ToString();
                }
                else
                    pd.documentType = string.Empty;

                pd.annullato = row["CHA_ANNULLATO"].ToString();
                pd.motivo = row["VAR_MOTIVO_ANNULLA"].ToString();
                pd.provvedimento = row["VAR_PROVVEDIMENTO"].ToString();

                corr.protocolloDestinatario = pd;


                if (row["CHA_TIPO_MITT_DEST"].ToString().Equals("M"))
                {
                    if (corr == null)
                    {
                        result = false;
                    }
                    else
                    {
                        protocolloUscita.mittente = corr;
                    }
                }

                else if (row["CHA_TIPO_MITT_DEST"].ToString().Equals("D") || row["CHA_TIPO_MITT_DEST"].ToString().Equals("F"))
                {
                    if (corr == null)
                    {
                        result = false;
                    }
                    else
                    {
                        destinatari.Add(corr);
                    }
                }
                else if (row["CHA_TIPO_MITT_DEST"].ToString().Equals("C"))
                {

                    if (corr == null)
                    {
                        result = false;
                    }
                    else
                    {
                        destinatariConoscenza.Add(corr);
                    }
                }



            }
            dataSet.Dispose();
            dataSetR.Dispose();
            if (destinatari.Count > 0)
            {
                protocolloUscita.destinatari = destinatari;
            }
            if (destinatariConoscenza.Count > 0)
            {
                protocolloUscita.destinatariConoscenza = destinatariConoscenza;
            }
            return result;
        }

        private bool GetCorrispondentiInterni(ref DocsPaVO.documento.ProtocolloInterno protocolloInterno, string idProfile)
        {
            bool result = true;
            ArrayList destinatari = new ArrayList();
            ArrayList destinatariConoscenza = new ArrayList();
            string queryString = GetQueryCorrispondente_NEW(idProfile, "I");
            logger.Debug(queryString);
            DataSet dataSet;
            DataSet dataSetR;
            ExecuteQuery(out dataSet, queryString);


            //Ufficio Referente per il protocollo in Arrivo
            string queryStringRef = GetQueryUfficioReferente(idProfile);
            ExecuteQuery(out dataSetR, queryStringRef);
            if (dataSetR != null && dataSetR.Tables[0].Rows.Count == 1)
            {
                protocolloInterno.ufficioReferente = GetCorrispondenteUfficioReferente(dataSetR);
            }

            foreach (DataRow row in dataSet.Tables[0].Rows)
            {
                // Verifico se si tratta di un destinatario o di un destinatario per conoscenza
                DocsPaVO.utente.Corrispondente corr = new DocsPaVO.utente.Corrispondente();
                if (row["CHA_TIPO_MITT_DEST"].ToString().Equals("M"))
                    corr = GetCorrispondente_NEW(row);
                else
                    corr = GetCorrispondente_Prot_NEW(idProfile, row, dataSet);

                if (row["CHA_TIPO_MITT_DEST"].ToString().Equals("M"))
                {
                    if (corr == null)
                    {
                        result = false;
                    }
                    else
                    {
                        protocolloInterno.mittente = corr;
                    }
                }
                if (row["CHA_TIPO_MITT_DEST"].ToString().Equals("D"))
                {
                    if (corr == null)
                    {
                        result = false;
                    }
                    else
                    {
                        destinatari.Add(corr);
                    }
                }
                else if (row["CHA_TIPO_MITT_DEST"].ToString().Equals("C"))
                {

                    if (corr == null)
                    {
                        result = false;
                    }
                    else
                    {
                        destinatariConoscenza.Add(corr);
                    }
                }
            }
            dataSet.Dispose();
            dataSetR.Dispose();
            if (destinatari.Count > 0)
            {
                protocolloInterno.destinatari = destinatari;
            }
            if (destinatariConoscenza.Count > 0)
            {
                protocolloInterno.destinatariConoscenza = destinatariConoscenza;
            }
            return result;
        }

        private DocsPaVO.documento.InfoDocumento GetRispostaAlProtocollo(DataRow dataRow)
        {
            logger.Info("BEGIN");
            logger.Debug("getRispostaAlProtocollo");
            DocsPaVO.documento.InfoDocumento infoDoc = new DocsPaVO.documento.InfoDocumento();
            string idParent = "0";
            if (dataRow["ID_PARENT"] != DBNull.Value)
            {
                idParent = dataRow["ID_PARENT"].ToString();
            }
            if (!idParent.Equals("0"))
            {
                try
                {
                    DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_Profile0");
                    q.setParam("param1", "SYSTEM_ID, VAR_SEGNATURA, CHA_TIPO_PROTO, DOCNUMBER");
                    q.setParam("param2", "SYSTEM_ID=" + idParent);
                    string queryString = q.getSQL();
                    logger.Debug(queryString);
                    //string res;
                    //ExecuteScalar(out res, queryString);
                    DataSet dataSet;
                    ExecuteQuery(out dataSet, queryString);
                    foreach (DataRow row in dataSet.Tables[0].Rows)
                    {
                        //riempio l'oggetto solo parzialmente
                        infoDoc.idProfile = row["SYSTEM_ID"].ToString();
                        infoDoc.segnatura = row["VAR_SEGNATURA"].ToString();
                        infoDoc.tipoProto = row["CHA_TIPO_PROTO"].ToString();
                        infoDoc.docNumber = row["DOCNUMBER"].ToString();
                    }
                }
                catch (Exception) { }
            }
            logger.Info("END");
            return infoDoc;
        }

        private DocsPaVO.documento.InfoDocumento GetRispostaDocGrigio(DataRow dataRow)
        {
            logger.Info("BEGIN");
            logger.Debug("GetRispostaDocGrigio");
            DocsPaVO.documento.InfoDocumento infoDoc = new DocsPaVO.documento.InfoDocumento();
            string idParent = "0";
            if (dataRow["ID_PARENT"] != DBNull.Value)
            {
                idParent = dataRow["ID_PARENT"].ToString();
            }
            if (!idParent.Equals("0"))
            {
                try
                {
                    DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_Profile0");
                    q.setParam("param1", "SYSTEM_ID, CHA_TIPO_PROTO, DOCNUMBER, VAR_SEGNATURA");
                    q.setParam("param2", "SYSTEM_ID=" + idParent);
                    string queryString = q.getSQL();
                    logger.Debug(queryString);
                    //string res;
                    //ExecuteScalar(out res, queryString);
                    DataSet dataSet;
                    ExecuteQuery(out dataSet, queryString);
                    foreach (DataRow row in dataSet.Tables[0].Rows)
                    {
                        //riempio l'oggetto solo parzialmente
                        infoDoc.idProfile = row["SYSTEM_ID"].ToString();
                        infoDoc.segnatura = row["VAR_SEGNATURA"].ToString();
                        infoDoc.tipoProto = row["CHA_TIPO_PROTO"].ToString();
                        infoDoc.docNumber = row["DOCNUMBER"].ToString();
                    }
                }
                catch (Exception) { }
            }
            logger.Info("END");
            return infoDoc;
        }

        private DocsPaVO.documento.DatiEmergenza GetDatiEmergenza(DataRow dataRow)
        {
            logger.Debug("getDatiEmergenza");
            DocsPaVO.documento.DatiEmergenza datiEmergenza = null;
            string protoEmergenza = null;
            string dataProtoEmergenza = null;
            string cognomeProtocollatoreEmergenza = null;
            string nomeProtocollatoreEmergenza = null;
            if (dataRow["VAR_PROTO_EME"] != null && !dataRow["VAR_PROTO_EME"].ToString().Equals(""))
            {
                protoEmergenza = dataRow["VAR_PROTO_EME"].ToString();
            }
            if (dataRow["DTA_PROTO_EME"] != null && !dataRow["DTA_PROTO_EME"].ToString().Equals(""))
            {
                dataProtoEmergenza = dataRow["DTA_PROTO_EME"].ToString();
            }
            if (dataRow["VAR_COGNOME_EME"] != null && !dataRow["VAR_COGNOME_EME"].ToString().Equals(""))
            {
                cognomeProtocollatoreEmergenza = dataRow["VAR_COGNOME_EME"].ToString();
            }
            if (dataRow["VAR_NOME_EME"] != null && !dataRow["VAR_NOME_EME"].ToString().Equals(""))
            {
                nomeProtocollatoreEmergenza += dataRow["VAR_NOME_EME"].ToString();
            }
            if (protoEmergenza != null || dataProtoEmergenza != null || cognomeProtocollatoreEmergenza != null || nomeProtocollatoreEmergenza != null)
            {
                datiEmergenza = new DocsPaVO.documento.DatiEmergenza();
                datiEmergenza.protocolloEmergenza = protoEmergenza;
                datiEmergenza.dataProtocollazioneEmergenza = dataProtoEmergenza;
                datiEmergenza.cognomeProtocollatoreEmergenza = cognomeProtocollatoreEmergenza;
                datiEmergenza.nomeProtocollatoreEmergenza = nomeProtocollatoreEmergenza;
            }
            return datiEmergenza;
        }

        private DocsPaVO.documento.ProtocolloAnnullato GetDatiAnnullamento(DataRow dataRow)
        {
            logger.Debug("getDatiAnnullamento");
            DocsPaVO.documento.ProtocolloAnnullato datiAnnullamento = null;
            string autorizzazione = null;
            string dataAnnullamento = null;
            if (dataRow["VAR_AUT_ANNULLA"] != null && !dataRow["VAR_AUT_ANNULLA"].ToString().Equals(""))
            {
                autorizzazione = dataRow["VAR_AUT_ANNULLA"].ToString();
            }
            if (dataRow["DTA_ANNULLA"] != null && !dataRow["DTA_ANNULLA"].ToString().Equals(""))
            {
                dataAnnullamento = dataRow["DTA_ANNULLA"].ToString();
            }
            if (autorizzazione != null || dataAnnullamento != null)
            {
                datiAnnullamento = new DocsPaVO.documento.ProtocolloAnnullato();
                datiAnnullamento.autorizzazione = autorizzazione;
                datiAnnullamento.dataAnnullamento = dataAnnullamento;
            }
            return datiAnnullamento;
        }


        public DocsPaVO.utente.Corrispondente GetCorrispondente_NEW(DataRow dr)
        {
            logger.Debug("getCorrispondente");
            DocsPaVO.utente.Corrispondente corrispondente = null;
            if (dr["CHA_TIPO_IE"] != null)
            {
                DocsPaVO.addressbook.QueryCorrispondente qco = new DocsPaVO.addressbook.QueryCorrispondente();
                qco.systemId = dr["SYSTEM_ID"].ToString();

                qco.idAmministrazione = dr["ID_AMM"].ToString();
                qco.getChildren = false;
                qco.fineValidita = false;
                logger.Debug("getCorrispondente");
                Utenti ut = new Utenti();
                if (dr["CHA_TIPO_IE"].ToString().Equals("I"))
                {
                    corrispondente = (DocsPaVO.utente.Corrispondente)ut.GetCorrispondenteInt(qco, false); //è un getDettaglio doc. quindi devono ritornare anche utenti disabilitati inseriti precedentemente come mitt/dest.
                    if (corrispondente == null)
                    {
                        return corrispondente;
                    }
                }
                else if (dr["CHA_TIPO_IE"].ToString().Equals("E"))
                {
                    corrispondente = (DocsPaVO.utente.Corrispondente)ut.GetCorrispondenteEst(qco);
                    if (corrispondente == null)
                    {
                        return corrispondente;
                    }
                }
            }
            if (corrispondente == null)
            {
                corrispondente = new DocsPaVO.utente.Corrispondente();
                corrispondente.systemId = dr["SYSTEM_ID"].ToString();
                corrispondente.codiceRubrica = dr["VAR_COD_RUBRICA"].ToString();
                corrispondente.idAmministrazione = dr["ID_AMM"].ToString();
                corrispondente.descrizione = dr["VAR_DESC_CORR"].ToString();
                // modifica per l'email dell corrispondente occasionale
                if (!string.IsNullOrEmpty(dr["VAR_EMAIL"].ToString())) corrispondente.email = dr["VAR_EMAIL"].ToString();
            }


            corrispondente.tipoCorrispondente = dr["CHA_TIPO_CORR"].ToString();
            logger.Debug("fine getCorrispondente");
            return corrispondente;
        }

        public DocsPaVO.utente.Corrispondente GetCorrispondente(DataRow dr)
        {
            logger.Debug("getCorrispondente");
            DocsPaVO.utente.Corrispondente corrispondente = null;
            if (dr[3] != null)
            {
                DocsPaVO.addressbook.QueryCorrispondente qco = new DocsPaVO.addressbook.QueryCorrispondente();
                //VECCHIO	qco.codiceRubrica = dr[1].ToString();;
                qco.systemId = dr[0].ToString();

                qco.idAmministrazione = dr[2].ToString();
                qco.getChildren = false;
                qco.fineValidita = false;
                logger.Debug("getCorrispondente");
                Utenti ut = new Utenti();
                if (dr[3].ToString().Equals("I"))
                {
                    //corrispondente = (DocsPaVO.utente.Corrispondente)addressBookManager.listaCorrispondentiIntMethod(qco)[0];
                    //gestione throw a risalire
                    //VECCHIO corrispondente = (DocsPaVO.utente.Corrispondente)ut.ListaCorrispondentiInt(qco)[0];
                    corrispondente = (DocsPaVO.utente.Corrispondente)ut.GetCorrispondenteInt(qco, false); //è un getDettaglio doc. quindi devono ritornare anche utenti disabilitati inseriti precedentemente come mitt/dest.
                    if (corrispondente == null)
                    {
                        return corrispondente;
                    }
                }
                else if (dr[3].ToString().Equals("E"))
                {
                    //corrispondente = (DocsPaVO.utente.Corrispondente)addressBookManager.listaCorrEstSciolti(qco)[0];
                    //VECCHIO corrispondente = (DocsPaVO.utente.Corrispondente)ut.ListaCorrEstSciolti(qco)[0];
                    corrispondente = (DocsPaVO.utente.Corrispondente)ut.GetCorrispondenteEst(qco);

                    if (corrispondente == null)
                    {
                        return corrispondente;
                    }
                }
            }
            if (corrispondente == null)
            {
                corrispondente = new DocsPaVO.utente.Corrispondente();
                corrispondente.systemId = dr[0].ToString();
                corrispondente.codiceRubrica = dr[1].ToString();
                corrispondente.idAmministrazione = dr[2].ToString();
                corrispondente.descrizione = dr[6].ToString();
            }
            corrispondente.tipoCorrispondente = dr[4].ToString();
            logger.Debug("fine getCorrispondente");
            return corrispondente;
        }

        public DocsPaVO.utente.Corrispondente GetCorrispondente_NEW(DataRow dr, DataSet dataSet)
        {
            logger.Debug("getCorrispondente");
            DocsPaVO.utente.Corrispondente corrispondente = null;

            if (dr["CHA_TIPO_IE"] != null)
            {
                DocsPaVO.addressbook.QueryCorrispondente qco = new DocsPaVO.addressbook.QueryCorrispondente();
                //VECCHIO	qco.codiceRubrica = dr[1].ToString();;
                qco.systemId = dr["SYSTEM_ID"].ToString();

                qco.idAmministrazione = dr["ID_AMM"].ToString();
                qco.getChildren = false;
                qco.fineValidita = false;
                logger.Debug("getCorrispondente");
                Utenti ut = new Utenti();
                if (dr["CHA_TIPO_IE"].ToString().Equals("I"))
                {
                    //corrispondente = (DocsPaVO.utente.Corrispondente)addressBookManager.listaCorrispondentiIntMethod(qco)[0];
                    //gestione throw a risalire
                    //VECCHIO corrispondente = (DocsPaVO.utente.Corrispondente)ut.ListaCorrispondentiInt(qco)[0];
                    corrispondente = (DocsPaVO.utente.Corrispondente)ut.GetCorrispondenteInt_NEW(dr, qco, false, dataSet); //è un getDettaglio doc. quindi devono ritornare anche utenti disabilitati inseriti precedentemente come mitt/dest.
                    if (corrispondente == null)
                    {
                        return corrispondente;
                    }
                }
                else if (dr["CHA_TIPO_IE"].ToString().Equals("E"))
                {
                    //corrispondente = (DocsPaVO.utente.Corrispondente)addressBookManager.listaCorrEstSciolti(qco)[0];
                    //VECCHIO corrispondente = (DocsPaVO.utente.Corrispondente)ut.ListaCorrEstSciolti(qco)[0];
                    corrispondente = (DocsPaVO.utente.Corrispondente)ut.GetCorrispondenteEst_NEW(dr, qco, dataSet);

                    if (corrispondente == null)
                    {
                        return corrispondente;
                    }
                }
            }
            if (corrispondente == null)
            {
                corrispondente = new DocsPaVO.utente.Corrispondente();
                corrispondente.systemId = dr["SYSTEM_ID"].ToString();
                corrispondente.codiceRubrica = dr["VAR_COD_RUBRICA"].ToString();
                corrispondente.idAmministrazione = dr["ID_AMM"].ToString();
                corrispondente.descrizione = dr["VAR_DESC_CORR"].ToString();
                // modifica per l'email dell corrispondente occasionale
                if (!string.IsNullOrEmpty(dr["VAR_EMAIL"].ToString())) corrispondente.email = dr["VAR_EMAIL"].ToString();
            }


            corrispondente.tipoCorrispondente = dr["CHA_TIPO_CORR"].ToString();
            logger.Debug("fine getCorrispondente");
            return corrispondente;
        }


        public DocsPaVO.utente.UnitaOrganizzativa GetCorrispondenteUfficioReferente(DataSet dataSetR)
        {
            logger.Debug("inizio GetCorrispondenteUfficioReferente");
            DocsPaVO.utente.UnitaOrganizzativa corrUr = new DocsPaVO.utente.UnitaOrganizzativa();
            corrUr.systemId = dataSetR.Tables[0].Rows[0]["SYSTEM_ID"].ToString();
            corrUr.codiceRubrica = dataSetR.Tables[0].Rows[0]["VAR_COD_RUBRICA"].ToString();
            corrUr.descrizione = dataSetR.Tables[0].Rows[0]["VAR_DESC_CORR"].ToString();
            corrUr.idAmministrazione = dataSetR.Tables[0].Rows[0]["ID_AMM"].ToString();
            corrUr.tipoIE = "I";
            corrUr.tipoCorrispondente = dataSetR.Tables[0].Rows[0]["CHA_TIPO_CORR"].ToString();
            logger.Debug("fine GetCorrispondenteUfficioReferente");
            return corrUr;
        }

        public DocsPaVO.utente.Corrispondente GetCorrispondenteSemplice(DataRow dr)
        {
            DocsPaVO.utente.Corrispondente corrispondente = null;

            if (dr[3] != null)
            {
                DocsPaVO.addressbook.QueryCorrispondente qco = new DocsPaVO.addressbook.QueryCorrispondente();
                qco.systemId = dr[0].ToString(); //system_id
                qco.idAmministrazione = dr[2].ToString();
                qco.getChildren = false;
                qco.fineValidita = false;
                logger.Debug("getCorrispondentesemplice");
                Utenti ut = new Utenti();
                if (dr[3].ToString().Equals("I"))
                {
                    //corrispondente = (DocsPaVO.utente.Corrispondente)ut.ListaCorrispondentiInt(qco)[0];

                    // Nuova Gestione: 
                    corrispondente = (DocsPaVO.utente.Corrispondente)ut.GetCorrispondenteInt(qco, false);
                    //
                    if (corrispondente == null)
                    {
                        return corrispondente;
                    }
                }
                else if (dr[3].ToString().Equals("E"))
                {
                    //VECCHIO	corrispondente = (DocsPaVO.utente.Corrispondente)ut.ListaCorrEstSciolti(qco)[0];
                    corrispondente = (DocsPaVO.utente.Corrispondente)ut.GetCorrispondenteEst(qco);
                    if (corrispondente == null)
                    {
                        return corrispondente;
                    }
                }
            }
            if (corrispondente == null)
            {
                corrispondente = new DocsPaVO.utente.Corrispondente();
                corrispondente.systemId = dr[0].ToString();
                corrispondente.codiceRubrica = dr[1].ToString();
                corrispondente.idAmministrazione = dr[2].ToString();
                corrispondente.descrizione = dr[6].ToString();
            }
            corrispondente.tipoCorrispondente = dr[4].ToString();
            //modifica
            if (!string.IsNullOrEmpty(dr["COD_DESC_INTEROP"].ToString()))
            {
                corrispondente.codDescAmministrizazione = dr["COD_DESC_INTEROP"].ToString().Replace("'", "''");
            }
            //fine modfica
            return corrispondente;
        }

        private DocsPaVO.utente.Corrispondente GetCorrispondente_Prot(string idProfile, DataRow dr)
        {
            DocsPaVO.utente.Corrispondente cor = GetCorrispondente(dr);
            if (cor != null)
            {
                GetDatiSpedizione(ref cor, idProfile);
            }
            return cor;
        }

        private DocsPaVO.utente.Corrispondente GetCorrispondente_Prot_NEW(string idProfile, DataRow dr, DataSet dataSet)
        {
            string idDocumentType = string.Empty;
            DocsPaVO.utente.Corrispondente cor = GetCorrispondente_NEW(dr, dataSet);
            if (cor != null)
            {
                idDocumentType = dr["id_documenttypes"].ToString();
                if (idDocumentType != null && !idDocumentType.Equals(""))
                {
                    cor.canalePref = new DocsPaVO.utente.Canale();
                    cor.canalePref.systemId = idDocumentType;
                    cor.canalePref.descrizione = dr["DESCRIPTION"].ToString(); ;
                    cor.canalePref.tipoCanale = dr["TYPE_ID"].ToString();
                    cor.canalePref.typeId = dr["CHA_TIPO_CANALE"].ToString();
                }
            }
            return cor;
        }

        private DocsPaVO.utente.Corrispondente GetCorrispondente_Prot_Experimental(string idProfile, DataRow dr, DataSet dataSet)
        {
            DocsPaVO.utente.Corrispondente cor = null;
            if (dr["CHA_TIPO_IE"] != null && !dr["CHA_TIPO_IE"].ToString().Equals(string.Empty))
            {
                string idDocumentType = string.Empty;
                //DocsPaVO.utente.Corrispondente cor = GetCorrispondente_NEW(dr, dataSet);
                DocsPaDB.Query_DocsPAWS.Utenti dbut= new Utenti();

                DocsPaVO.addressbook.QueryCorrispondente qco = new DocsPaVO.addressbook.QueryCorrispondente();
                qco.systemId = dr["SYSTEM_ID"].ToString();

                qco.idAmministrazione = dr["ID_AMM"].ToString();
                qco.getChildren = false;
                qco.fineValidita = false;
                cor = dbut.GetCorrispondente_Experimental(dr, qco, dataSet);
                //cor.systemId = dr["SYSTEM_ID"].ToString();
                //cor.codiceRubrica = dr["VAR_COD_RUBRICA"].ToString();
                //cor.idAmministrazione = dr["ID_AMM"].ToString();
                //cor.descrizione = dr["VAR_DESC_CORR"].ToString();
                //cor.tipoCorrispondente = dr["CHA_TIPO_CORR"].ToString();
                //cor.tipoIE = dr["CHA_TIPO_IE"].ToString();
                // modifica per l'email dell corrispondente occasionale
                if (!string.IsNullOrEmpty(dr["VAR_EMAIL"].ToString())) cor.email = dr["VAR_EMAIL"].ToString();
                if (cor != null)
                {
                    idDocumentType = dr["id_documenttypes"].ToString();
                    if (idDocumentType != null && !idDocumentType.Equals(""))
                    {
                        cor.canalePref = new DocsPaVO.utente.Canale();
                        cor.canalePref.systemId = idDocumentType;
                        cor.canalePref.descrizione = dr["DESCRIPTION"].ToString(); ;
                        cor.canalePref.tipoCanale = dr["TYPE_ID"].ToString();
                        //cor.canalePref.typeId = dr["CHA_TIPO_CANALE"].ToString();
                        cor.canalePref.typeId = dr["TYPE_ID"].ToString();
                    }
                }
            }
            else
            {
                cor = new DocsPaVO.utente.Corrispondente();
                cor.systemId = dr["SYSTEM_ID"].ToString();
                cor.codiceRubrica = dr["VAR_COD_RUBRICA"].ToString();
                cor.idAmministrazione = dr["ID_AMM"].ToString();
                cor.descrizione = dr["VAR_DESC_CORR"].ToString();
                cor.tipoCorrispondente = "O";
                // modifica per l'email dell corrispondente occasionale
                if (!string.IsNullOrEmpty(dr["VAR_EMAIL"].ToString())) cor.email = dr["VAR_EMAIL"].ToString();
            
            }
            return cor;
        }

        //public void SetDataVista(string idPeople, string idProfile)
        //{
        //    string querySet = "CHA_VISTA = '1', DTA_VISTA=" + DocsPaDbManagement.Functions.Functions.GetDate()+ ", CHA_IN_TODOLIST = '0'";
        //    string queryWhere = "CHA_VISTA='0' AND ID_PEOPLE=" + idPeople + " AND ID_TRASM_SINGOLA IN (SELECT A.SYSTEM_ID FROM DPA_TRASM_SINGOLA A, DPA_TRASMISSIONE B WHERE A.ID_TRASMISSIONE=B.SYSTEM_ID AND ID_PROFILE=" + 
        //        idProfile + ")";

        //    DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("U_DPATrasmUtente");

        //    q.setParam("param1", querySet);
        //    q.setParam("param2", queryWhere);
        //    string queryString = q.getSQL();
        //    logger.Debug(queryString);

        //    ExecuteNonQuery(queryString);
        //}

        public void SetDataVista(string idPeople, string idProfile)
        {
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("U_DPATrasmUtente_setDataVista");

            q.setParam("dataOdierna", DocsPaDbManagement.Functions.Functions.GetDate());
            q.setParam("tipoObj", "ID_PROFILE");
            q.setParam("idObj", idProfile);
            q.setParam("idPeople", idPeople);

            string queryString = q.getSQL();
            logger.Debug(queryString);

            ExecuteNonQuery(queryString);
        }
        /// <summary>
        /// setta la dta_vista nella dpa_trasm_utente utilizzando una storeProcedure
        /// </summary>
        /// <param name="idPeople">IdPeople dell'utente che vede il documento</param>
        /// <param name="idGruppo">idGruppo delle Dpa_corr_globali del ruolo corrente che vede il doc</param>
        /// <param name="idProfile">documento corrente</param>
        /// <returns>Booleano che indica l'esito dell'operazione</returns>
        public bool SetDataVistaSP(DocsPaVO.utente.InfoUtente infoUtente, string idOggetto, string tipoOggetto)
        {
            bool retValue = false;
            int delegato = 0;
            try
            {
                //BeginTransaction();

                logger.Debug("INIZIO SetDataVistaSP");

                // Creazione parametri per la Store Procedure
                ArrayList parameters = new ArrayList();
                DocsPaUtils.Data.ParameterSP outParam;
                outParam = new DocsPaUtils.Data.ParameterSP("resultValue", new Int32(), 10, DocsPaUtils.Data.DirectionParameter.ParamOutput, System.Data.DbType.Int32);

                parameters.Add(CreateParameter("idPeople", infoUtente.idPeople));
                parameters.Add(CreateParameter("idOggetto", idOggetto));
                parameters.Add(CreateParameter("tipoOggetto", tipoOggetto));
                parameters.Add(CreateParameter("idGruppo", infoUtente.idGruppo));
                if (infoUtente.delegato != null)
                    delegato = Convert.ToInt32(infoUtente.delegato.idPeople);
                parameters.Add(CreateParameter("idDelegato", delegato));
                parameters.Add(outParam);


                using (DBProvider dbProvider = new DBProvider())
                {
                    if (Cfg_SET_DATA_VISTA_GRD == "2")
                        dbProvider.ExecuteStoredProcedure("SPsetDataVista_V2", parameters, null);
                    else
                        dbProvider.ExecuteStoredProcedure("SPsetDataVista", parameters, null);


                }

                if (outParam.Valore != null && outParam.Valore.ToString() != "" && outParam.Valore.ToString() != "1")
                {
                    retValue = true;
                    logger.Debug("STORE PROCEDURE SetDataVistaSP: esito positivo");
                }


                //logger.Debug("INIZIO SP_DELETE_TODOLIST");
                //// Creazione parametri per la Store Procedure
                //parameters = new ArrayList();
                //outParam = new DocsPaUtils.Data.ParameterSP("resultValue", new Int32(), 10, DocsPaUtils.Data.DirectionParameter.ParamOutput, System.Data.DbType.Int32);

                //parameters.Add(CreateParameter("idPeople", idPeople));
                //parameters.Add(CreateParameter("idOggetto", idOggetto));
                //parameters.Add(CreateParameter("tipoOggetto", tipoOggetto));
                //parameters.Add(CreateParameter("sysTrasmSingola", ));
                //parameters.Add(outParam);

                //ExecuteStoredProcedure("SP_DELETE_TODOLIST", parameters, null);

                //if (outParam.Valore != null && outParam.Valore.ToString() != "" && outParam.Valore.ToString() != "1")
                //{
                //    retValue = true;
                //    logger.Debug("STORE PROCEDURE SP_DELETE_TODOLIST: esito positivo");
                //}


                //if (retValue)
                //    CommitTransaction();
                //else
                //    RollbackTransaction();
            }
            catch (Exception e)
            {
                logger.Error("STORE PROCEDURE SetDataVistaSP: esito negativo" + e.Message);
                //RollbackTransaction();
                retValue = false;
            }
            finally
            {
                //CloseConnection();
                logger.Debug("FINE SetDataVistaSP");
            }

            return retValue;
        }

        public bool SetDataVistaSP_TASTOVISTO(DocsPaVO.utente.InfoUtente infoUtente, string idOggetto, string tipoOggetto)
        {
            bool retValue = false;
            int delegato = 0;
            try
            {
                BeginTransaction();

                logger.Debug("INIZIO SetDataVistaSP_TV");

                // Creazione parametri per la Store Procedure
                ArrayList parameters = new ArrayList();
                DocsPaUtils.Data.ParameterSP outParam;
                outParam = new DocsPaUtils.Data.ParameterSP("resultValue", new Int32(), 10, DocsPaUtils.Data.DirectionParameter.ParamOutput, System.Data.DbType.Int32);

                parameters.Add(CreateParameter("idPeople", infoUtente.idPeople));
                parameters.Add(CreateParameter("idOggetto", idOggetto));
                parameters.Add(CreateParameter("tipoOggetto", tipoOggetto));
                parameters.Add(CreateParameter("idGruppo", infoUtente.idGruppo));
                if (infoUtente.delegato != null)
                    delegato = Convert.ToInt32(infoUtente.delegato.idPeople);
                parameters.Add(CreateParameter("idDelegato", delegato));


                parameters.Add(outParam);

                ExecuteStoredProcedure("SPsetDataVista_TV", parameters, null);

                if (outParam.Valore != null && outParam.Valore.ToString() != "" && outParam.Valore.ToString() != "1")
                {
                    retValue = true;
                    logger.Debug("STORE PROCEDURE SetDataVistaSP_TV: esito positivo");
                }


                //logger.Debug("INIZIO SP_DELETE_TODOLIST");
                //// Creazione parametri per la Store Procedure
                //parameters = new ArrayList();
                //outParam = new DocsPaUtils.Data.ParameterSP("resultValue", new Int32(), 10, DocsPaUtils.Data.DirectionParameter.ParamOutput, System.Data.DbType.Int32);

                //parameters.Add(CreateParameter("idPeople", idPeople));
                //parameters.Add(CreateParameter("idOggetto", idOggetto));
                //parameters.Add(CreateParameter("tipoOggetto", tipoOggetto));
                //parameters.Add(CreateParameter("sysTrasmSingola", ));
                //parameters.Add(outParam);

                //ExecuteStoredProcedure("SP_DELETE_TODOLIST", parameters, null);

                //if (outParam.Valore != null && outParam.Valore.ToString() != "" && outParam.Valore.ToString() != "1")
                //{
                //    retValue = true;
                //    logger.Debug("STORE PROCEDURE SP_DELETE_TODOLIST: esito positivo");
                //}


                if (retValue)
                    CommitTransaction();
                else
                    RollbackTransaction();
            }
            catch (Exception e)
            {
                logger.Error("STORE PROCEDURE SetDataVistaSP: esito negativo" + e.Message);
                RollbackTransaction();
                retValue = false;
            }
            finally
            {
                CloseConnection();
                logger.Debug("FINE SetDataVistaSP");
            }

            return retValue;
        }

        /// <summary>
        /// Reperimento del numero delle trasmissioni effettuate dal documento
        /// </summary>
        /// <param name="idProfile"></param>
        /// <returns></returns>
        public int GetCountTrasmissioniDocumento(int idProfile)
        {
            // Il valore da restituire
            int toReturn = 0;

            // Il valore in cui verrà salvato il risultato della query
            string retValue = String.Empty;
            try
            {
                DocsPaUtils.Query queryDef = DocsPaUtils.InitQuery.getInstance().getQuery("S_GET_SYSTEMID_TRASMISSIONI_DOCUMENTO");

                // Impostazione del parametro
                queryDef.setParam("idProfile", idProfile.ToString());

                // Reperimento della query SQL da eseguire
                string commandText = queryDef.getSQL();
                logger.Debug(commandText);

                // Esecuzione della query
                ExecuteScalar(out retValue, commandText);
            }
            catch (Exception ex)
            {
                logger.Error(ex.Message);
                throw new Exception("Errore in GetCountTrasmissioniDocumento");
            }
            finally
            {
                CloseConnection();
            }

            // Se la query ha restituito un valore valido viene convertito ad intero
            if (!String.IsNullOrEmpty(retValue))
                toReturn = Int32.Parse(retValue);

            // Restituzione del numero di trasmissioni che coinvolgono il documento segnalato
            return toReturn;
        }

        public void cambiaDirittiDocumenti_old(int accessRight, string idDocumento)
        {
            string query = "";
            try
            {
                query = "UPDATE SECURITY SET ACCESSRIGHTS = " + accessRight + " WHERE THING = " + idDocumento + " AND ACCESSRIGHTS NOT IN (0)";
                System.Diagnostics.Debug.WriteLine("cambiaDirittiDocumenti - Query_DocsPAWS/Documenti - QUERY : " + query);
                ExecuteNonQuery(query);
            }
            catch
            {
                System.Diagnostics.Debug.WriteLine("cambiaDirittiDocumenti - Query_DocsPAWS/Documenti - QUERY : " + query);
            }
        }

        //24-09-2014: sostituita cambiaDirittiDocumenti_old con quella di seguito, per violazione vincolo chiave primaria; andava in eccezione quando
        //già presente una tupla con l'accessrights in input
        public void cambiaDirittiDocumenti(int accessRight, string idDocumento)
        {
            string query = "";
            try
            {
                //Aggiorno tutti i recod percui non esiste un dublicato avente già l'accessrights in input
                if (dbType.ToUpper() == "SQL")
                {
                    query = "UPDATE s SET s.ACCESSRIGHTS = " + accessRight + " FROM SECURITY s WHERE s.THING = " + idDocumento + " AND s.ACCESSRIGHTS NOT IN (0) " +
                        "AND NOT EXISTS(SELECT 'X' FROM SECURITY WHERE THING = s.THING AND PERSONORGROUP = s.PERSONORGROUP AND ACCESSRIGHTS = " + accessRight + ")";
                }
                else
                {
                    query = "UPDATE SECURITY s SET s.ACCESSRIGHTS = " + accessRight + " WHERE s.THING = " + idDocumento + " AND s.ACCESSRIGHTS NOT IN (0) " +
                        "AND NOT EXISTS(SELECT 'X' FROM SECURITY WHERE THING = s.THING AND PERSONORGROUP = s.PERSONORGROUP AND ACCESSRIGHTS = " + accessRight + ")";
                }
                System.Diagnostics.Debug.WriteLine("cambiaDirittiDocumenti - Query_DocsPAWS/Documenti - QUERY : " + query);
                if (ExecuteNonQuery(query))
                {
                    //rimuovo la tupla che non ho potuto aggiornare tramite la query precedente, poichè esisteva già un record con accessrights in input
                    query = "DELETE FROM SECURITY WHERE THING = " + idDocumento + " AND ACCESSRIGHTS NOT IN (0, " + accessRight + ")";
                    ExecuteNonQuery(query);
                }
            }
            catch
            {
                System.Diagnostics.Debug.WriteLine("cambiaDirittiDocumenti - Query_DocsPAWS/Documenti - QUERY : " + query);
            }
        }

        /// <summary>
        /// Restituisce l'eventuale segnatura di repertorio associata al documento con id = docnumber
        /// </summary>
        /// <param name="docnumber"></param>
        /// <param name="codiceAmm"></param>
        /// <param name="getInHtmlVersion"></param>
        /// <returns></returns>
        public string GetDataCreazioneRepertorio(string docnumber)
        {
            try
            {
                DocsPaUtils.Query queryDef = DocsPaUtils.InitQuery.getInstance().getQuery("S_GET_SEGNATURA_REPERTORIO");
                queryDef.setParam("docnumber", docnumber.ToString());
                string commandText = queryDef.getSQL();
                logger.Debug(commandText);

                using (IDataReader reader = ExecuteReader(commandText))
                {
                    if (reader == null)
                    {
                        throw new Exception("Errore in GetSegnaturaRepertorio");
                    }
                    while (reader.Read())
                    {
                        return DocsPaUtils.Data.DataReaderHelper.GetValue<string>(reader, "data_inserimento", true, string.Empty);
                    }
                }
            }
            catch (Exception e)
            {
                logger.Error(e.Message);
                throw new Exception("Errore in GetSegnaturaRepertorio");
            }
            return null;
        }

        /// <summary>
        /// Restituisce l'eventuale segnatura di repertorio associata al documento con id = docnumber
        /// </summary>
        /// <param name="docnumber"></param>
        /// <param name="codiceAmm"></param>
        /// <param name="getInHtmlVersion"></param>
        /// <returns></returns>
        public string GetSegnaturaRepertorio(string docnumber, string codiceAmm, bool getInHtmlVersion, out String dataAnnullamento)
        {
            try
            {
                dataAnnullamento = String.Empty;
                string segnaturaRepertorio = string.Empty;
                DocsPaUtils.Query queryDef = DocsPaUtils.InitQuery.getInstance().getQuery("S_GET_SEGNATURA_REPERTORIO");
                queryDef.setParam("docnumber", docnumber.ToString());
                string commandText = queryDef.getSQL();
                logger.Debug(commandText);

                using (IDataReader reader = ExecuteReader(commandText))
                {
                    if (reader == null)
                    {
                        throw new Exception("Errore in GetSegnaturaRepertorio");
                    }
                    while (reader.Read())
                    {
                        string formato_contatore = DocsPaUtils.Data.DataReaderHelper.GetValue<string>(reader, "formato_contatore", true, string.Empty);
                        string valore_database = DocsPaUtils.Data.DataReaderHelper.GetValue<string>(reader, "valore_database", true, string.Empty);
                        string anno = DocsPaUtils.Data.DataReaderHelper.GetValue<string>(reader, "anno", true, string.Empty);
                        string codice_db = DocsPaUtils.Data.DataReaderHelper.GetValue<string>(reader, "codice_db", true, string.Empty);
                        string data_inserimento = DocsPaUtils.Data.DataReaderHelper.GetValue<string>(reader, "data_inserimento", true, string.Empty);
                        string id_aoo_rf = DocsPaUtils.Data.DataReaderHelper.GetValue<string>(reader, "id_aoo_rf", true, string.Empty);
                        string data_annullamento = DocsPaUtils.Data.DataReaderHelper.GetValue<string>(reader, "data_annullamento", true, string.Empty);
                        if (!string.IsNullOrEmpty(valore_database))
                        {
                            formato_contatore = formato_contatore.ToUpper().Replace("ANNO", anno);
                            formato_contatore = formato_contatore.Replace("YY", anno.Substring(anno.Length - 2, 2));
                            formato_contatore = formato_contatore.ToUpper().Replace("CONTATORE", valore_database);
                            formato_contatore = formato_contatore.ToUpper().Replace("COD_AMM", codiceAmm);
                            formato_contatore = formato_contatore.ToUpper().Replace("COD_UO", codice_db);
                            if (!string.IsNullOrEmpty(data_inserimento))
                            {
                                formato_contatore = formato_contatore.ToUpper().Replace("GG/MM/AAAA HH:MM", data_inserimento);
                                formato_contatore = formato_contatore.ToUpper().Replace("GG/MM/AAAA", data_inserimento.Substring(0, 10));
                            }

                            if (formato_contatore.Contains("VERSIONE"))
                            {
                                Documentale docDB = new Documentale();
                                string version_id = docDB.GetLatestVersionId(docnumber);
                                if (!string.IsNullOrEmpty(version_id) && version_id != "0")
                                {
                                    string versione = docDB.GetVersionFromVersionId(version_id);
                                    try
                                    {
                                        if (Int32.Parse(versione) < 10) versione = "0" + versione;
                                    }
                                    catch (Exception e) { }
                                    formato_contatore = formato_contatore.ToUpper().Replace("VERSIONE", versione);
                                }
                                else
                                {
                                    formato_contatore = formato_contatore.ToUpper().Replace("VERSIONE", "");
                                }
                            }

                            if (!string.IsNullOrEmpty(id_aoo_rf) && id_aoo_rf != "0")
                            {
                                DocsPaVO.utente.Registro reg = null;
                                if (!string.IsNullOrEmpty(id_aoo_rf))
                                {
                                    DocsPaDB.Query_DocsPAWS.Utenti utenti = new DocsPaDB.Query_DocsPAWS.Utenti();
                                    utenti.GetRegistro(id_aoo_rf, ref reg);
                                }

                                if (reg != null)
                                {
                                    formato_contatore = formato_contatore.Replace("RF", reg.codRegistro);
                                    formato_contatore = formato_contatore.Replace("AOO", reg.codRegistro);
                                }
                            }

                            dataAnnullamento = data_annullamento;

                            if (getInHtmlVersion)
                                if (!string.IsNullOrEmpty(data_annullamento))
                                {
                                    segnaturaRepertorio = "<p style=\"color:red;text-decoration:line-through;\">" + formato_contatore + "<br/>--<br/>" + data_annullamento + "</p>";
                                }
                                else
                                {
                                    segnaturaRepertorio = "<p style=\"color:red;\">" + formato_contatore + "</p>";
                                }
                            else
                                segnaturaRepertorio = formato_contatore;
                        }
                        break;
                    }

                    return segnaturaRepertorio;
                }
            }
            catch (Exception e)
            {
                logger.Error(e.Message);
                throw new Exception("Errore in GetSegnaturaRepertorio");
            }
        }

        #endregion

        #region ACL
        public bool EditingACL(DocsPaVO.documento.DirittoOggetto dirittoOggetto, string pOrG, DocsPaVO.utente.InfoUtente infoUtente)
        {
            bool result = true;
            dirittoOggetto.description = "";
            string note;
            DocsPaUtils.Query q;
            string queryString = "";
            string personOrGroup = "";
            string tipoDiritto;

            try
            {
                using (DocsPaDB.DBProvider dbProvider = new DBProvider())
                {
                    dbProvider.BeginTransaction();
                    if (dirittoOggetto.note != null && dirittoOggetto.note != "")
                        note = dirittoOggetto.note;
                    else
                        note = "Diritto rimosso da: " + infoUtente.userId;

                    if (pOrG == "R")
                        personOrGroup = ((DocsPaVO.utente.Ruolo)dirittoOggetto.soggetto).idGruppo;
                    else
                        personOrGroup = ((DocsPaVO.utente.Utente)dirittoOggetto.soggetto).idPeople;
                    dirittoOggetto.description = "Revoca diritto ";
                    tipoDiritto = getTipoDiritto(dirittoOggetto.tipoDiritto.ToString());

                    //ricerca di id_gruppo_trasm in security
                    string idGruppoTrasm = "";
                    q = DocsPaUtils.InitQuery.getInstance().getQuery("S_SECURITY_GENERIC");
                    q.setParam("param1", "ID_GRUPPO_TRASM");
                    q.setParam("param2", "WHERE THING=" + dirittoOggetto.idObj + " AND ACCESSRIGHTS=" + dirittoOggetto.accessRights + " AND PERSONORGROUP=" + personOrGroup);
                    queryString = q.getSQL();
                    logger.Debug(queryString);
                    dbProvider.ExecuteScalar(out idGruppoTrasm, queryString);
                    if (idGruppoTrasm.Equals(null))
                        idGruppoTrasm = "";



                    //se si revocano i diritti all'utente proprietario => si revocano anche al ruolo proprietario
                    //e viceversa. Il proprietario del documento diventa l'utente e il ruolo del revocante
                    if (tipoDiritto == "P")
                    {
                        string personOrGroupRU = "";
                        string accessRight = "";
                        string idGruppoTrasmRU = "";
                        string cod_rubrica = "";
                        string id_people = "";
                        string gruppo = "0";
                        IDataReader dr = null;

                        //ex-proprietario
                        //ricerca del ruolo e utente proprietario se ruolo, 
                        //eliminazione dalla security e inserimento nella deleted_security
                        q = DocsPaUtils.InitQuery.getInstance().getQuery("S_SECURITY__DPA_CORR_GLOBALI__PROPRIETARIO");

                        q.setParam("param1", dirittoOggetto.idObj);
                        q.setParam("param2", "'P'");
                        queryString = q.getSQL();
                        logger.Debug(queryString);
                        using (dr = dbProvider.ExecuteReader(queryString))
                        {
                            if (dr == null)
                            {
                                throw new Exception("Errore in EditingACL");
                            }
                            if (dr != null && dr.FieldCount > 0)
                            {
                                while (dr.Read())
                                {
                                    personOrGroupRU = dr.GetValue(0).ToString();
                                    accessRight = dr.GetValue(1).ToString();
                                    idGruppoTrasmRU = dr.GetValue(2).ToString();
                                    cod_rubrica = dr.GetValue(3).ToString();
                                    id_people = dr.GetValue(4).ToString();

                                    if (accessRight == "255")
                                        gruppo = personOrGroupRU;
                                    if (infoUtente.idGruppo != personOrGroupRU)
                                    {
                                        if (string.IsNullOrEmpty(id_people))
                                            dirittoOggetto.description += "a utente ";
                                        else
                                            dirittoOggetto.description += "a ruolo ";
                                        dirittoOggetto.description += cod_rubrica + " e ";

                                        //rimozione dalla security 
                                        q = DocsPaUtils.InitQuery.getInstance().getQuery("D_SECURITY");
                                        q.setParam("param1", "THING=" + dirittoOggetto.idObj + " AND PERSONORGROUP=" + personOrGroupRU + " AND ACCESSRIGHTS=" + accessRight);
                                        queryString = q.getSQL();
                                        logger.Debug(queryString);
                                        if (!dbProvider.ExecuteNonQuery(queryString))
                                        {
                                            result = false;
                                            dbProvider.RollbackTransaction();
                                            throw new Exception();
                                        }

                                        //inserimento nella deleted_security
                                        q = DocsPaUtils.InitQuery.getInstance().getQuery("I_DELETED_SECURITY");
                                        if (idGruppoTrasmRU.Equals("") || idGruppoTrasmRU.Equals(null))
                                            //q.setParam("param1", dirittoOggetto.idObj + "," + personOrGroupRU + "," + accessRight + ",'','P','" + note + "'," + DocsPaDbManagement.Functions.Functions.ToDate(DateTime.Now.ToString("dd/MM/yyyy hh:mm:ss")) + ",'" + infoUtente.idPeople + "','" + infoUtente.idGruppo + "', " + (dirittoOggetto.hideDocVersions ? "'1'" : "NULL"));
                                            // Inserisce il valore della data del DB
                                            q.setParam("param1", dirittoOggetto.idObj + "," + personOrGroupRU + "," + accessRight + ",'','P','" + note + "'," + DocsPaDbManagement.Functions.Functions.GetDate() + ",'" + infoUtente.idPeople + "','" + infoUtente.idGruppo + "', " + (dirittoOggetto.hideDocVersions ? "'1'" : "NULL"));
                                        else
                                            //q.setParam("param1", dirittoOggetto.idObj + "," + personOrGroupRU + "," + accessRight + "," + idGruppoTrasmRU + ",'P','" + note + "'," + DocsPaDbManagement.Functions.Functions.ToDate(DateTime.Now.ToString("dd/MM/yyyy hh:mm:ss")) + ",'" + infoUtente.idPeople + "','" + infoUtente.idGruppo + "', " + (dirittoOggetto.hideDocVersions ? "'1'" : "NULL"));
                                            // Inserisce il valore della data del DB
                                            q.setParam("param1", dirittoOggetto.idObj + "," + personOrGroupRU + "," + accessRight + "," + idGruppoTrasmRU + ",'P','" + note + "'," + DocsPaDbManagement.Functions.Functions.GetDate() + ",'" + infoUtente.idPeople + "','" + infoUtente.idGruppo + "', " + (dirittoOggetto.hideDocVersions ? "'1'" : "NULL"));
                                        queryString = q.getSQL();
                                        logger.Debug(queryString);
                                        if (!dbProvider.ExecuteNonQuery(queryString))
                                        {
                                            result = false;
                                            dbProvider.RollbackTransaction();
                                            throw new Exception();
                                        }
                                    }
                                }
                            }
                        }
                        if (dr != null && (!dr.IsClosed))
                            dr.Close();
                        if ((personOrGroupRU != null && personOrGroupRU == "") && (accessRight != null && accessRight != ""))
                            result = false;


                        //nuovo proprietario
                        //UTENTE REVOCANTE E SUO RUOLO VENGONO INSERITI COME PROPRIETARI NELLA SECURITY
                        //UTENTE
                        int accessR = 0;
                        q = DocsPaUtils.InitQuery.getInstance().getQuery("I_Security");
                        q.setParam("param1", dirittoOggetto.idObj + "," + infoUtente.idPeople + "," + accessR + ",'','P', NULL");
                        queryString = q.getSQL();
                        logger.Debug(queryString);
                        if (!dbProvider.ExecuteNonQuery(queryString))
                        {
                            result = false;
                            dbProvider.RollbackTransaction();
                            throw new Exception();
                        }

                        if (infoUtente.idGruppo != gruppo)
                        {
                            //RUOLO
                            accessR = 255;
                            q = DocsPaUtils.InitQuery.getInstance().getQuery("I_Security");
                            q.setParam("param1", dirittoOggetto.idObj + "," + infoUtente.idGruppo + "," + accessR + ",'','P', NULL");
                            queryString = q.getSQL();
                            logger.Debug(queryString);
                            if (!dbProvider.ExecuteNonQuery(queryString))
                            {
                                result = false;
                                dbProvider.RollbackTransaction();
                                throw new Exception();
                            }
                        }

                    }
                    else
                    {
                        //caso diritto non proprietario
                        //rimozione dalla security dell'utente a cui si è scelto di togliere i diritti
                        q = DocsPaUtils.InitQuery.getInstance().getQuery("D_SECURITY");
                        q.setParam("param1", "THING=" + dirittoOggetto.idObj + " AND PERSONORGROUP=" + personOrGroup + " AND ACCESSRIGHTS=" + dirittoOggetto.accessRights);
                        queryString = q.getSQL();
                        logger.Debug(queryString);
                        if (!dbProvider.ExecuteNonQuery(queryString))
                        {
                            result = false;
                            dbProvider.RollbackTransaction();
                            throw new Exception();
                        }

                        // Andrea 11/06/2013 - Per ripristino commentare il codice racchiuso dal blocco Andrea 11/06/2013
                        // Controllo che la tripla Thing-PersonOrGroup-Accessright non sia già inserita in DELETED_SECURITY
                        // se già presente provvedo ad aggiornare tale tripla con il diritto più alto:

                        bool inserisci_deleted_security = true;

                        // Prelevo il CHA_TIPO_DIRITTO
                        string cha_tipo_diritto = string.Empty;
                        q = DocsPaUtils.InitQuery.getInstance().getQuery("S_DELETED_SECURITY");
                        q.setParam("param1", "CHA_TIPO_DIRITTO");
                        q.setParam("param2", "WHERE THING=" + dirittoOggetto.idObj + " AND ACCESSRIGHTS=" + dirittoOggetto.accessRights + " AND PERSONORGROUP=" + personOrGroup);
                        queryString = q.getSQL();
                        logger.Debug("Cerco se la tripla <thing,personorgroup, accessright> è già in deleted_security");
                        logger.Debug(queryString);
                        dbProvider.ExecuteScalar(out cha_tipo_diritto, queryString);

                        if (!string.IsNullOrEmpty(cha_tipo_diritto))
                        {
                            // è gia inserita una tupla con stesso thing, personorgroup, accessright;
                            // se serve va aggiornata
                            // Priorità del diritto già inserito
                            int priority_cha_tipo_diritto = 0;
                            // Priorità del diritto da inserire
                            int nuova_priority_cha_tipo_diritto = 0;

                            priority_cha_tipo_diritto = calcolaPrioritaChaTipoDiritto(cha_tipo_diritto, priority_cha_tipo_diritto);
                            nuova_priority_cha_tipo_diritto = calcolaPrioritaChaTipoDiritto(tipoDiritto, nuova_priority_cha_tipo_diritto);

                            if (priority_cha_tipo_diritto > nuova_priority_cha_tipo_diritto)
                            {
                                //Non Aggiornare e non inserire in deleted_security
                                inserisci_deleted_security = false;
                                logger.Debug("la tupla <thing,personorgroup, accessright> è già inserita in DELETED_SECURITY e non va aggiornata");
                            }
                            else
                            {
                                //Aggiorna e non inserire in deleted security
                                logger.Debug("la tupla <thing,personorgroup, accessright> è già inserita in DELETED_SECURITY e deve essere aggiornata");

                                //Rimuovo dalla DELETED_SECURITY
                                q = DocsPaUtils.InitQuery.getInstance().getQuery("D_DELETED_SECURITY");
                                q.setParam("param1", "THING=" + dirittoOggetto.idObj + " AND PERSONORGROUP=" + personOrGroup + " AND ACCESSRIGHTS=" + dirittoOggetto.accessRights);
                                queryString = q.getSQL();
                                logger.Debug(queryString);
                                if (!dbProvider.ExecuteNonQuery(queryString))
                                {
                                    inserisci_deleted_security = false;
                                    result = false;
                                    dbProvider.RollbackTransaction();
                                    throw new Exception();
                                }
                                inserisci_deleted_security = true;
                            }
                        }
                        // End Andrea

                        //Andrea 11/06/2013 - controllo per aggiornamento in DELETED_SECURITY
                        //Per ripristino commentare il codice racchiuso dal blocco Andrea 11/06/2013
                        if (inserisci_deleted_security)
                        {
                            //End Andrea

                            //inserimento nella deleted_security dell'utente a cui sono stati rimossi i diritti
                            q = DocsPaUtils.InitQuery.getInstance().getQuery("I_DELETED_SECURITY_2");
                            if (idGruppoTrasm.Equals(""))
                                q.setParam("param1",
                                        dirittoOggetto.idObj + "," +
                                        personOrGroup + "," +
                                        dirittoOggetto.accessRights +
                                        ",'','" +
                                        tipoDiritto +
                                        "','" +
                                        note +
                                        "'," +
                                    //DocsPaDbManagement.Functions.Functions.ToDate(DateTime.Now.ToString("dd/MM/yyyy hh:mm:ss")) +
                                    // Inserisce il valore della data del DB
                                        DocsPaDbManagement.Functions.Functions.GetDate() +
                                        ",'" +
                                        infoUtente.idPeople + "','" +
                                        infoUtente.idGruppo + "'," +
                                        (dirittoOggetto.hideDocVersions ? "'1'" : "NULL") + ",'" +
                                        (string.IsNullOrEmpty(dirittoOggetto.CopiaVisibilita) ? "0" : dirittoOggetto.CopiaVisibilita.ToString()) + "'");
                            else
                                q.setParam("param1",
                                        dirittoOggetto.idObj + "," +
                                        personOrGroup + "," +
                                        dirittoOggetto.accessRights + "," +
                                        idGruppoTrasm + ",'" +
                                        tipoDiritto + "','" +
                                        note + "'," +
                                    //DocsPaDbManagement.Functions.Functions.ToDate(DateTime.Now.ToString("dd/MM/yyyy hh:mm:ss")) +
                                    // Inserisce il valore della data del DB
                                        DocsPaDbManagement.Functions.Functions.GetDate() +
                                        ",'" +
                                        infoUtente.idPeople +
                                        "','" +
                                        infoUtente.idGruppo +
                                        "'," +
                                        (dirittoOggetto.hideDocVersions ? "'1'" : "NULL") + ",'" +
                                        (string.IsNullOrEmpty(dirittoOggetto.CopiaVisibilita) ? "0" : dirittoOggetto.CopiaVisibilita.ToString()) + "'");

                            queryString = q.getSQL();
                            logger.Debug(queryString);
                            if (!dbProvider.ExecuteNonQuery(queryString))
                            {
                                result = false;
                                dbProvider.RollbackTransaction();
                                throw new Exception();
                            }

                            //Andrea 11/06/2013 - End controllo per aggiornamento in DELETED_SECURITY
                            //Per ripristino commentare il codice racchiuso dal blocco Andrea 11/06/2013
                        }
                        //End Andrea - End controllo per aggiornamento in DELETED_SECURITY

                        if (pOrG == "R")
                            dirittoOggetto.description += "a ruolo ";
                        else
                            dirittoOggetto.description += "a utente ";

                        dirittoOggetto.description += dirittoOggetto.soggetto.codiceRubrica;
                    }
                    if (dirittoOggetto.description.EndsWith(" e "))
                        dirittoOggetto.description = dirittoOggetto.description.Substring(0, dirittoOggetto.description.Length - 3);
                    dirittoOggetto.description += ". Tipo diritto: " + setTipoDiritto(dirittoOggetto);

                    //Calcolo l'eventuale atipicià del documento
                    Documentale documentale = new Documentale();
                    documentale.CalcolaAtipicita(infoUtente, dirittoOggetto.idObj, DocsPaVO.Security.InfoAtipicita.TipoOggettoAtipico.DOCUMENTO);

                    dbProvider.CommitTransaction();
                }
            }
            catch
            {
                logger.Debug("F_System");
                result = false;
            }

            return result;
        }

        /// <summary>
        /// Calcola la priorità del CHA_TIPO_DIRITTO a parità di accessright
        /// </summary>
        /// <param name="cha_tipo_diritto"></param>
        /// <param name="priority_cha_tipo_diritto"></param>
        /// <returns></returns>
        private static int calcolaPrioritaChaTipoDiritto(string cha_tipo_diritto, int priority_cha_tipo_diritto)
        {
            switch (cha_tipo_diritto)
            {
                case "P":
                    priority_cha_tipo_diritto = 255;
                    break;
                case "A":
                    priority_cha_tipo_diritto = 100;
                    break;
                case "T":
                    priority_cha_tipo_diritto = 50;
                    break;
                case "F":
                    priority_cha_tipo_diritto = 25;
                    break;
            }
            return priority_cha_tipo_diritto;
        }

        public bool RipristinaACL(DocsPaVO.documento.DirittoOggetto dirittoOggetto, string pOrG, DocsPaVO.utente.InfoUtente infoUtente)
        {
            bool result = true;
            dirittoOggetto.description = "";

            logger.Debug("AVVIO procedura di ripristino ACL");

            try
            {
                using (DocsPaDB.DBProvider dbProvider = new DBProvider())
                {
                    dbProvider.BeginTransaction();
                    IDataReader dr = null;
                    string queryString = "";
                    string personOrGroup = "";
                    string numProprietari = "0";

                    dirittoOggetto.description = "Ripristino diritto ";
                    if (pOrG == "R")
                        personOrGroup = ((DocsPaVO.utente.Ruolo)dirittoOggetto.soggetto).idGruppo;
                    else
                        personOrGroup = ((DocsPaVO.utente.Utente)dirittoOggetto.soggetto).idPeople;
                    string tipoDiritto = getTipoDiritto(dirittoOggetto.tipoDiritto.ToString());

                    DocsPaUtils.Query q;
                    if (tipoDiritto == "P")
                    {
                        //caso in cui si vuole ripristinare diritto di proprietà
                        //Verifica se ruolo proprietario del revocato è diverso dal revocante
                        q = DocsPaUtils.InitQuery.getInstance().getQuery("S_GET_COUNT_DELETED_SECURITY");
                        q.setParam("param1", "THING=" + dirittoOggetto.idObj + " AND CHA_TIPO_DIRITTO = '" + tipoDiritto + "'");
                        queryString = q.getSQL();
                        logger.Debug(queryString);
                        dbProvider.ExecuteScalar(out numProprietari, queryString);

                        //1.rimozione dei vecchi proprietari dalla security
                        string personOrGroupP = "";
                        q = DocsPaUtils.InitQuery.getInstance().getQuery("S_SECURITY_PROPRIETARIO");
                        q.setParam("param1", dirittoOggetto.idObj);
                        q.setParam("param2", "'P'");
                        queryString = q.getSQL();
                        logger.Debug(queryString);
                        using (dr = dbProvider.ExecuteReader(queryString))
                        {
                            if (dr == null)
                            {
                                throw new Exception("Errore in EditingACL");
                            }
                            if (dr != null && dr.FieldCount > 0)
                            {
                                while (dr.Read())
                                {
                                    personOrGroupP = dr.GetValue(0).ToString();
                                    if (infoUtente.idGruppo != personOrGroupP)
                                    {
                                        q = DocsPaUtils.InitQuery.getInstance().getQuery("D_SECURITY");
                                        q.setParam("param1", "THING=" + dirittoOggetto.idObj + " AND PERSONORGROUP=" + personOrGroupP + " AND CHA_TIPO_DIRITTO= 'P'");
                                        queryString = q.getSQL();
                                        logger.Debug(queryString);
                                        if (!dbProvider.ExecuteNonQuery(queryString))
                                        {
                                            result = false;
                                            dbProvider.RollbackTransaction();
                                            throw new Exception();
                                        }
                                    }
                                    else
                                        if (numProprietari.Equals("2"))
                                        {
                                            q = DocsPaUtils.InitQuery.getInstance().getQuery("D_SECURITY");
                                            q.setParam("param1", "THING=" + dirittoOggetto.idObj + " AND PERSONORGROUP=" + personOrGroupP + " AND CHA_TIPO_DIRITTO= 'P'");
                                            queryString = q.getSQL();
                                            logger.Debug(queryString);
                                            if (!dbProvider.ExecuteNonQuery(queryString))
                                            {
                                                result = false;
                                                dbProvider.RollbackTransaction();
                                                throw new Exception();
                                            }
                                        }
                                }
                            }
                        }
                        if (dr != null && (!dr.IsClosed))
                            dr.Close();
                        if (personOrGroupP != null && personOrGroupP == "")
                            result = false;

                        //2.rimozione dalla deleted_security del nuovo proprietario 
                        //e inserimento nella security
                        string personOrGroupRU = "";
                        string accessRight = "";
                        string idGruppoTrasmRU = "";
                        string cod_rubrica = "";
                        string idPeople;

                        q = DocsPaUtils.InitQuery.getInstance().getQuery("S_DELETED_SECURITY_PROPRIETARIO");
                        q.setParam("param1", dirittoOggetto.idObj);
                        queryString = q.getSQL();
                        logger.Debug(queryString);
                        using (dr = dbProvider.ExecuteReader(queryString))
                        {
                            if (dr == null)
                            {
                                throw new Exception("Errore in EditingACL");
                            }
                            if (dr != null && dr.FieldCount > 0)
                            {
                                while (dr.Read())
                                {
                                    personOrGroupRU = dr.GetValue(0).ToString();
                                    accessRight = dr.GetValue(1).ToString();
                                    idGruppoTrasmRU = dr.GetValue(2).ToString();
                                    cod_rubrica = dr.GetValue(3).ToString();
                                    idPeople = dr.GetValue(4).ToString();

                                    if (string.IsNullOrEmpty(idPeople))
                                        dirittoOggetto.description += "a utente ";
                                    else
                                        dirittoOggetto.description += "a ruolo ";
                                    dirittoOggetto.description += cod_rubrica + " e ";

                                    //rimozione dalla deleted_security
                                    q = DocsPaUtils.InitQuery.getInstance().getQuery("D_DELETED_SECURITY");
                                    q.setParam("param1", "THING=" + dirittoOggetto.idObj + " AND PERSONORGROUP=" + personOrGroupRU + " AND ACCESSRIGHTS=" + accessRight);
                                    queryString = q.getSQL();
                                    logger.Debug(queryString);
                                    if (!dbProvider.ExecuteNonQuery(queryString))
                                    {
                                        result = false;
                                        dbProvider.RollbackTransaction();
                                        throw new Exception();
                                    }
                                    //inserimento nella security
                                    q = DocsPaUtils.InitQuery.getInstance().getQuery("I_SECURITY");
                                    if (idGruppoTrasmRU.Equals("") || idGruppoTrasmRU.Equals(null))
                                        q.setParam("param1", dirittoOggetto.idObj + "," + personOrGroupRU + "," + accessRight + ",'','P'," + (dirittoOggetto.hideDocVersions ? "'1'" : "NULL"));
                                    else
                                        q.setParam("param1", dirittoOggetto.idObj + "," + personOrGroupRU + "," + accessRight + "," + idGruppoTrasmRU + ",'P'," + (dirittoOggetto.hideDocVersions ? "'1'" : "NULL"));
                                    queryString = q.getSQL();
                                    logger.Debug(queryString);
                                    if (!dbProvider.ExecuteNonQuery(queryString))
                                    {
                                        result = false;
                                        dbProvider.RollbackTransaction();
                                        throw new Exception();
                                    }

                                }
                            }
                        }
                        if (dr != null && (!dr.IsClosed))
                            dr.Close();
                        if ((personOrGroupRU != null && personOrGroupRU == "") && (accessRight != null && accessRight != ""))
                            result = false;
                    }
                    else
                    {
                        //Diritto rimosso non è quello di proprietario
                        //ricerca di id_gruppo_trasm in deleted_security
                        string idGruppoTrasm = "";
                        q = DocsPaUtils.InitQuery.getInstance().getQuery("S_DELETED_SECURITY");
                        q.setParam("param1", "ID_GRUPPO_TRASM");
                        q.setParam("param2", "WHERE THING=" + dirittoOggetto.idObj + " AND ACCESSRIGHTS=" + dirittoOggetto.accessRights + " AND PERSONORGROUP=" + personOrGroup);
                        queryString = q.getSQL();
                        logger.Debug(queryString);
                        dbProvider.ExecuteScalar(out idGruppoTrasm, queryString);
                        if (String.IsNullOrEmpty(idGruppoTrasm))
                            idGruppoTrasm = "";

                        //rimozione dalla deleted_security dell'utente a cui ripristinare i diritti
                        q = DocsPaUtils.InitQuery.getInstance().getQuery("D_DELETED_SECURITY");
                        q.setParam("param1", "THING=" + dirittoOggetto.idObj + " AND PERSONORGROUP=" + personOrGroup + " AND ACCESSRIGHTS=" + dirittoOggetto.accessRights);
                        queryString = q.getSQL();
                        logger.Debug(queryString);
                        if (!dbProvider.ExecuteNonQuery(queryString))
                        {
                            result = false;
                            dbProvider.RollbackTransaction();
                            throw new Exception();
                        }

                        //verifica se esistono già diritti in security 
                        //  (questo può accadere quando l'ACL era stata rimossa ma successivamente è stata riacquisita 
                        //  con la propagazione della visibilità a seguito di trasmissioni effettuate da ruoli inferiori)
                        q = DocsPaUtils.InitQuery.getInstance().getQuery("S_GET_COUNT_ACL");
                        q.setParam("param1", "THING=" + dirittoOggetto.idObj + " AND PERSONORGROUP=" + personOrGroup + " AND ACCESSRIGHTS=" + dirittoOggetto.accessRights + " AND CHA_TIPO_DIRITTO='" + tipoDiritto + "'");
                        queryString = q.getSQL();
                        logger.Debug(queryString);
                        string contaRec = string.Empty;
                        dbProvider.ExecuteScalar(out contaRec, queryString);
                        if (contaRec.Equals("0"))
                        {

                            // Andrea 11/06/2013
                            // Controllo che la tripla Thing-PersonOrGroup-Accessright non sia già inserita in SECURITY
                            // se già presente provvedo ad aggiornare tale tripla con il diritto più alto:
                            //Per ripristino commentare il codice racchiuso dal blocco Andrea 11/06/2013

                            bool inserisci_security = true;

                            // Prelevo il CHA_TIPO_DIRITTO
                            string cha_tipo_diritto = string.Empty;
                            q = DocsPaUtils.InitQuery.getInstance().getQuery("S_SECURITY_GENERIC");
                            q.setParam("param1", "CHA_TIPO_DIRITTO");
                            q.setParam("param2", "WHERE THING=" + dirittoOggetto.idObj + " AND ACCESSRIGHTS=" + dirittoOggetto.accessRights + " AND PERSONORGROUP=" + personOrGroup);
                            queryString = q.getSQL();
                            logger.Debug("Cerco se la tripla <thing,personorgroup, accessright> è già in security");
                            logger.Debug(queryString);
                            dbProvider.ExecuteScalar(out cha_tipo_diritto, queryString);

                            if (!string.IsNullOrEmpty(cha_tipo_diritto))
                            {
                                // è gia inserita una tupla con stesso thing, personorgroup, accessright;
                                // se serve va aggiornata
                                // Priorità del diritto già inserito
                                int priority_cha_tipo_diritto = 0;
                                // Priorità del diritto da inserire
                                int nuova_priority_cha_tipo_diritto = 0;

                                priority_cha_tipo_diritto = calcolaPrioritaChaTipoDiritto(cha_tipo_diritto, priority_cha_tipo_diritto);
                                nuova_priority_cha_tipo_diritto = calcolaPrioritaChaTipoDiritto(tipoDiritto, nuova_priority_cha_tipo_diritto);

                                if (priority_cha_tipo_diritto > nuova_priority_cha_tipo_diritto)
                                {
                                    //Non Aggiornare e non inserire in deleted_security
                                    inserisci_security = false;
                                    logger.Debug("la tupla <thing,personorgroup, accessright> è già inserita in SECURITY e non va aggiornata");
                                }
                                else
                                {
                                    //Aggiorna e non inserire in security
                                    logger.Debug("la tupla <thing,personorgroup, accessright> è già inserita in SECURITY e deve essere aggiornata");

                                    //Rimuovo dalla SECURITY
                                    q = DocsPaUtils.InitQuery.getInstance().getQuery("D_SECURITY");
                                    q.setParam("param1", "THING=" + dirittoOggetto.idObj + " AND PERSONORGROUP=" + personOrGroup + " AND ACCESSRIGHTS=" + dirittoOggetto.accessRights);
                                    queryString = q.getSQL();
                                    logger.Debug(queryString);
                                    if (!dbProvider.ExecuteNonQuery(queryString))
                                    {
                                        inserisci_security = false;
                                        result = false;
                                        dbProvider.RollbackTransaction();
                                        throw new Exception();
                                    }

                                    inserisci_security = true;
                                }
                            }
                            else
                            {
                                // Prelevo l'accessrights
                                DataSet ds = new DataSet();
                                q = DocsPaUtils.InitQuery.getInstance().getQuery("S_SECURITY_GENERIC");
                                q.setParam("param1", "ACCESSRIGHTS");
                                q.setParam("param2", "WHERE THING=" + dirittoOggetto.idObj + " AND PERSONORGROUP=" + personOrGroup);
                                queryString = q.getSQL();
                                logger.Debug("Cerco se la tupla <thing,personorgroup> è già in security");
                                logger.Debug(queryString);
                                ExecuteQuery(out ds, "S_SECURITY_GENERIC", queryString);
                                if (ds.Tables["S_SECURITY_GENERIC"] != null && ds.Tables["S_SECURITY_GENERIC"].Rows.Count > 0)
                                {
                                    foreach (DataRow row in ds.Tables["S_SECURITY_GENERIC"].Rows)
                                    //Se esiste già la coppia thing, personorgroup aggiorno con l'accessrights maggiore
                                    {
                                        if (!row["ACCESSRIGHTS"].ToString().Equals("20") && dirittoOggetto.accessRights != 20 && dirittoOggetto.accessRights > (Convert.ToInt32(row["ACCESSRIGHTS"])))
                                        {
                                            logger.Debug("la tupla <thing,personorgroup, accessright> è già inserita in SECURITY e deve essere aggiornata");

                                            //Rimuovo dalla SECURITY
                                            q = DocsPaUtils.InitQuery.getInstance().getQuery("D_SECURITY");
                                            q.setParam("param1", "THING=" + dirittoOggetto.idObj + " AND PERSONORGROUP=" + personOrGroup + " AND ACCESSRIGHTS=" + row["ACCESSRIGHTS"].ToString());
                                            queryString = q.getSQL();
                                            logger.Debug(queryString);
                                            if (!dbProvider.ExecuteNonQuery(queryString))
                                            {
                                                inserisci_security = false;
                                                result = false;
                                                dbProvider.RollbackTransaction();
                                                throw new Exception();
                                            }
                                            inserisci_security = true;
                                        }
                                    }
                                }
                            }
                            // End Andrea

                            //Andrea 11/06/2013 - controllo per aggiornamento in SECURITY
                            //Per ripristino commentare il codice racchiuso dal blocco Andrea 11/06/2013
                            if (inserisci_security)
                            {
                                //End Andrea

                                //inserimento nella security dell'utente a cui devono essere ripristinati i diritti
                                q = DocsPaUtils.InitQuery.getInstance().getQuery("I_Security_2");
                                if (idGruppoTrasm.Equals(""))
                                    q.setParam("param1", dirittoOggetto.idObj + "," + personOrGroup + "," + dirittoOggetto.accessRights + ",'','" + tipoDiritto + "'," + (dirittoOggetto.hideDocVersions ? "'1'" : "NULL") + ",'" + (string.IsNullOrEmpty(dirittoOggetto.CopiaVisibilita) ? "0" : dirittoOggetto.CopiaVisibilita) + "'");
                                else
                                    q.setParam("param1", dirittoOggetto.idObj + "," + personOrGroup + "," + dirittoOggetto.accessRights + "," + idGruppoTrasm + ",'" + tipoDiritto + "'," + (dirittoOggetto.hideDocVersions ? "'1'" : "NULL") + ",'" + (string.IsNullOrEmpty(dirittoOggetto.CopiaVisibilita) ? "0" : dirittoOggetto.CopiaVisibilita) + "'");
                                queryString = q.getSQL();
                                logger.Debug(queryString);
                                if (!dbProvider.ExecuteNonQuery(queryString))
                                {
                                    result = false;
                                    dbProvider.RollbackTransaction();
                                    throw new Exception();
                                }
                                //Andrea - End controllo per aggiornamento in SECURITY
                            }
                            //End Andrea - End controllo per aggiornamento in SECURITY
                        }

                        if (pOrG == "R")
                            dirittoOggetto.description += "a ruolo ";
                        else
                            dirittoOggetto.description += "a utente ";

                        dirittoOggetto.description += dirittoOggetto.soggetto.codiceRubrica;
                    }
                    if (dirittoOggetto.description.EndsWith(" e "))
                        dirittoOggetto.description = dirittoOggetto.description.Substring(0, dirittoOggetto.description.Length - 3);

                    dirittoOggetto.description += ". Tipo diritto: " + setTipoDiritto(dirittoOggetto);

                    //Calcolo l'eventuale atipicià del documento
                    Documentale documentale = new Documentale();
                    documentale.CalcolaAtipicita(infoUtente, dirittoOggetto.idObj, DocsPaVO.Security.InfoAtipicita.TipoOggettoAtipico.DOCUMENTO);

                    dbProvider.CommitTransaction();
                }
            }
            catch
            {
                logger.Debug("ERRORE in procedura ripristino ACL");
                result = false;
            }

            logger.Debug("FINE procedura di ripristino ACL");

            return result;
        }

        private string setTipoDiritto(DocsPaVO.documento.DirittoOggetto docDir)
        {
            if (docDir.tipoDiritto.Equals(DocsPaVO.documento.TipoDiritto.TIPO_ACQUISITO))
                return (string.IsNullOrEmpty(docDir.CopiaVisibilita) || docDir.CopiaVisibilita.Equals("0") ? "ACQUISITO" : "ACQUISITO PER COPIA VISIBILITA");
            else
                if (docDir.tipoDiritto.Equals(DocsPaVO.documento.TipoDiritto.TIPO_PROPRIETARIO))
                    return "PROPRIETARIO";
                else
                    if (docDir.tipoDiritto.Equals(DocsPaVO.documento.TipoDiritto.TIPO_TRASMISSIONE))
                        return "TRASMISSIONE";
                    else
                        if (docDir.tipoDiritto.Equals(DocsPaVO.documento.TipoDiritto.TIPO_TRASMISSIONE_IN_FASCICOLO))
                            return "INSERIMENTO IN FASC.";
                        else
                            if (docDir.tipoDiritto.Equals(DocsPaVO.documento.TipoDiritto.TIPO_SOSPESO))
                                return "SOSPESO";
                            else
                                if (docDir.tipoDiritto.Equals(DocsPaVO.documento.TipoDiritto.TIPO_DELEGATO))
                                    return "DELEGATO";
            return "";
        }

        private string getTipoDiritto(string tipoDiritto)
        {
            string diritto = "";
            if (tipoDiritto.Equals(DocsPaVO.documento.TipoDiritto.TIPO_PROPRIETARIO.ToString()))
            {
                diritto = "P";
            }
            if (tipoDiritto.Equals(DocsPaVO.documento.TipoDiritto.TIPO_TRASMISSIONE.ToString()))
            {
                diritto = "T";
            }
            if (tipoDiritto.Equals(DocsPaVO.documento.TipoDiritto.TIPO_TRASMISSIONE_IN_FASCICOLO.ToString()))
            {
                diritto = "F";
            }
            if (tipoDiritto.Equals(DocsPaVO.documento.TipoDiritto.TIPO_SOSPESO.ToString()))
            {
                diritto = "S";
            }
            if (tipoDiritto.Equals(DocsPaVO.documento.TipoDiritto.TIPO_ACQUISITO.ToString()))
            {
                diritto = "A";
            }
            if (tipoDiritto.Equals(DocsPaVO.documento.TipoDiritto.TIPO_DELEGATO.ToString()))
            {
                diritto = "D";
            }
            return diritto;
        }

        public bool ControllaDirittiUtente(string idProfile, string idPeople, string idGruppo)
        {
            bool result = true;
            try
            {
                using (DocsPaDB.DBProvider dbProvider = new DBProvider())
                {
                    string queryString = "";
                    DocsPaUtils.Query q;
                    q = DocsPaUtils.InitQuery.getInstance().getQuery("S_GET_COUNT_PERSON_DELETED_SECURITY");
                    q.setParam("param1", "THING=" + idProfile + "AND (PERSONORGROUP=" + idGruppo + "OR PERSONORGROUP=" + idPeople + ")");
                    queryString = q.getSQL();
                    logger.Debug(queryString);
                    string res;
                    dbProvider.ExecuteScalar(out res, queryString);

                    if (res.Equals("0"))
                    {
                        result = false;
                    }
                }
            }
            catch
            {
                logger.Debug("F_System");
                result = false;
            }

            return result;
        }

        public int VerificaDeletedACL(string idObj)
        {
            int result = -1;
            try
            {
                using (DocsPaDB.DBProvider dbProvider = new DBProvider())
                {
                    string queryString = "";
                    DocsPaUtils.Query q;
                    q = DocsPaUtils.InitQuery.getInstance().getQuery("S_GET_COUNT_DELETED_SECURITY");
                    q.setParam("param1", "THING=" + idObj);
                    queryString = q.getSQL();
                    logger.Debug(queryString);
                    string deleted;
                    dbProvider.ExecuteScalar(out deleted, queryString);

                    /*q = DocsPaUtils.InitQuery.getInstance().getQuery("S_GET_COUNT_DPA_LOG");
                    q.setParam("param1", "ID_OGGETTO=" + idObj + " AND VAR_COD_AZIONE='EDITING_ACL'");
                    queryString = q.getSQL();
                    logger.Debug(queryString);
                    string log;
                    dbProvider.ExecuteScalar(out log, queryString);*/

                    //VECCHIO
                    //0-->nessun diritto rimosso: icona visibilità normale, no icona storia
                    //1-->diritti rimossi: icona visibilità rossa, si icona storia
                    //2-->diritti rimossi ma ripristinati: icona visibilità normale, si icona storia
                    /*if (!deleted.Equals("0"))
                        result = 1;
                    else
                        if (log.Equals("0"))
                            result = 0;
                        else result = 2;*/
                    //FINE VECCHIO

                    if (deleted.Equals("0"))
                        result = 0;
                    else result = 1;
                }
            }
            catch
            {
                logger.Debug("F_System");
                result = -1;
            }

            return result;

        }


        public int VerificaACL(string tipoObj, string idObj, string idPeople, string idGruppo, out string errorMessage)
        {
            int result = -1;
            errorMessage = "";
            /************************************
             *  CASI:
             *  result > 0 --> ACL rimossa
             *  result = 1 --> documento rimosso
             *  result = 2 --> documento "normale"
             *  errorMessage
             ************************************** */
            /*  SAB  16/05/2013  -- inserire la modifica per la gestione dell'archivio */

            DocsPaDB.Query_DocsPAWS.Utenti ut = new Utenti();

            if (ut.isUtArchivistaDeposito(idPeople, idGruppo))
                return 2;



            /* ------------------------------------------------------------------------*/


            string rows = string.Empty; //se il numero di righe rows =0 vuol dire che non ho diritti sul doc/fasc
            try
            {
                using (DocsPaDB.DBProvider dbProvider = new DBProvider())
                {
                    //documento
                    string idAmm = "0";
                    if (!string.IsNullOrEmpty(idPeople))
                    {
                        DocsPaDB.Query_DocsPAWS.Utenti u = new Utenti();
                        idAmm = u.GetIdAmm(idPeople);
                    }
                    if (tipoObj != null && tipoObj == "D")
                    {
                        //Controllo se diritto rimosso su documento
                        string queryString = "";
                        DocsPaUtils.Query q;
                        q = DocsPaUtils.InitQuery.getInstance().getQuery("S_GET_COUNT_SECURITY");
                        q.setParam("idProfile", idObj);
                        q.setParam("idPeople", idPeople);
                        q.setParam("idGroup", idGruppo);
                        q.setParam("dbuser", DocsPaDbManagement.Functions.Functions.GetDbUserSession());
                        string idRuoloPubblico = DocsPaUtils.Configuration.InitConfigurationKeys.GetValue(idAmm, "ENABLE_FASCICOLO_PUBBLICO");
                        q.setParam("idRuoloPubblico", !string.IsNullOrEmpty(idRuoloPubblico) ? idRuoloPubblico : "0");
                        queryString = q.getSQL();
                        logger.Debug(queryString);
                        dbProvider.ExecuteScalar(out rows, queryString);
                        result = Convert.ToInt32(rows);
                    }
                    else  //_ fascicolo 
                    {
                        string queryString = "";
                        DocsPaUtils.Query q;
                        q = DocsPaUtils.InitQuery.getInstance().getQuery("S_GET_COUNT_SECURITY_2");
                        q.setParam("idObj", idObj);
                        q.setParam("idPeople", idPeople);
                        q.setParam("idGroup", idGruppo);
                        q.setParam("dbuser", DocsPaDbManagement.Functions.Functions.GetDbUserSession());
                        string idRuoloPubblico = DocsPaUtils.Configuration.InitConfigurationKeys.GetValue(idAmm, "ENABLE_FASCICOLO_PUBBLICO");
                        q.setParam("idRuoloPubblico", !string.IsNullOrEmpty(idRuoloPubblico) ? idRuoloPubblico : "0");
                        queryString = q.getSQL();
                        logger.Debug(queryString);
                        dbProvider.ExecuteScalar(out rows, queryString);
                        result = Convert.ToInt32(rows);

                    }




                    //Controllo se documento rimosso
                    //ATTENZIONE--> METODO CHIAMATO ANCHE PER I FASCICOLI
                    if (result > 0 && tipoObj == "D")
                    {
                        result = VerificaDocInCestino(Convert.ToInt32(idObj));
                        if (result == 1)
                            errorMessage = "Il documento è stato rimosso.\\nNon è più possibile visualizzarlo.";
                        else
                        //doc normale non rimosse ACL , non rimosso
                        {
                            result = 2;
                        }


                    }
                    else
                        if (result > 0 && tipoObj == "F") result = 2;  //fascicolo normale non rimosse ACL.
                        else
                            if (result == 0) //rimosse ACL
                            {
                                result = 0;
                                if (tipoObj == "D")
                                    errorMessage = "Non si possiedono i diritti per visualizzare il documento.";
                                else
                                    errorMessage = "Non si possiedono i diritti per visualizzare il fascicolo.";
                            }
                }
            }
            catch
            {
                logger.Debug("F_System");
                result = -1;
            }

            return result;

        }

        #endregion

        #region DocSave

        public void SalvaPrivato(ref DocsPaVO.documento.SchedaDocumento schedaDoc)
        {
            if (schedaDoc.daAggiornarePrivato)
            {
                DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("U_Profile");
                q.setParam("param1", "CHA_PRIVATO = " + schedaDoc.privato);
                q.setParam("param2", "SYSTEM_ID=" + schedaDoc.systemId);
                string queryString = q.getSQL();
                logger.Debug(queryString);

                using (DBProvider dbProvider = new DBProvider())
                {
                    dbProvider.ExecuteNonQuery(queryString);
                }
                
                //AggiornaVisibilita(schedaDoc, objRuolo);
                schedaDoc.daAggiornarePrivato = false;
            }
        }

        public void SalvaDtaArrivo(string idAmministrazione, string idPeople, ref DocsPaVO.documento.SchedaDocumento schedaDoc)
        {
            if (schedaDoc.dtaArrivoDaStoricizzare == "1")
            {
                string data = ((DocsPaVO.documento.Documento)schedaDoc.documenti[0]).dataArrivo;
                //storico dataArrivo
                DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("I_DPADtaArrivo");
                q.setParam("param1", " DOCNUMBER, ID_GROUP, ID_PEOPLE,DTA_MODIFICA, DTA_ARRIVO ");
                q.setParam("param2", schedaDoc.docNumber + "," + idAmministrazione + "," + idPeople + "," + DocsPaDbManagement.Functions.Functions.GetDate());
                q.setParam("param3", schedaDoc.docNumber);
                string queryString = q.getSQL();
                logger.Debug(queryString);

                using (DBProvider dbProvider = new DBProvider())
                {
                    dbProvider.ExecuteNonQuery(queryString);
                } 
               
                schedaDoc.dtaArrivoDaStoricizzare = "0";
            }


        }

        public void SalvaOggetto(string idAmministrazione, string idPeople, string idCorrGlobali, ref DocsPaVO.documento.SchedaDocumento schedaDoc)
        {
            if (schedaDoc.oggetto.daAggiornare)
            {
                schedaDoc.modOggetto = "1";
                // storico oggetto
                DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("I_DPAOggetti");
                q.setParam("param1", DocsPaDbManagement.Functions.Functions.GetSystemIdColName() +
                    " ID_PROFILE, ID_OGGETTO, DTA_MODIFICA, ID_PEOPLE, ID_RUOLO_IN_UO");
                q.setParam("param2", DocsPaDbManagement.Functions.Functions.GetSystemIdNextVal("DPA_CORR_STO") +
                    "SYSTEM_ID, ID_OGGETTO, " + DocsPaDbManagement.Functions.Functions.GetDate() +
                    ", " + idPeople + "," + idCorrGlobali);
                q.setParam("param3", "SYSTEM_ID=" + schedaDoc.systemId);
                string queryString = q.getSQL();

                using (DBProvider dbProvider = new DBProvider())
                {
                    dbProvider.ExecuteNonQuery(queryString);
                }
                
                logger.Debug(queryString);
                InsertOgg(idAmministrazione, ref schedaDoc);
                queryString = SalvaOggetto2(schedaDoc.oggetto.systemId, schedaDoc.oggetto.descrizione, schedaDoc.systemId);

                using (DBProvider dbProvider = new DBProvider())
                {
                    dbProvider.ExecuteNonQuery(queryString);
                }
                
                logger.Debug(queryString);
                schedaDoc.oggetto.daAggiornare = false;
            }
        }

        public string SalvaOggetto2(string idOggetto, string descrizione, string systemId)
        {
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("U_Profile");
            q.setParam("param1", "ID_OGGETTO = " + idOggetto + ", VAR_PROF_OGGETTO ='" + descrizione.Replace("'", "''").Replace("°", Functions.convertDegre()) + "', CHA_MOD_OGGETTO = '1'");
            q.setParam("param2", "SYSTEM_ID=" + systemId);
            string queryString = q.getSQL();
            return queryString;
        }

        public void UpdateModProfile(string columnName, string idProfile)
        {
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("U_Profile");
            q.setParam("param1", columnName + " = '1' ");
            q.setParam("param2", "SYSTEM_ID=" + idProfile);
            string queryString = q.getSQL();
            logger.Debug(queryString);

            using (DBProvider dbProvider = new DBProvider())
            {
                dbProvider.ExecuteNonQuery(queryString);
            }
            
        }

        public void DeleteDocArrivoPar(string idPeople, string idCorrGlobali, string idProfile, string tipoCorr)
        {
            string queryString;
            DocsPaUtils.Query q;

            //			// Cancellazione da DPA_STATO_INVIO 
            //			q = DocsPaUtils.InitQuery.getInstance().getQuery("D_DPAStatoInvio");
            //			q.setParam("param1", "CHA_TIPO_MITT_DEST='" + tipoCorr + "' AND ID_PROFILE =" + idProfile);
            //			queryString = q.getSQL();
            //			logger.Debug(queryString);
            //			ExecuteNonQuery(queryString);

            q = DocsPaUtils.InitQuery.getInstance().getQuery("I_DPACorrSto");
            q.setParam("param1", DocsPaDbManagement.Functions.Functions.GetSystemIdColName() + " ID_PROFILE, ID_MITT_DEST, CHA_TIPO_MITT_DES, DTA_MODIFICA, ID_PEOPLE, ID_RUOLO_IN_UO");
            q.setParam("param2", DocsPaDbManagement.Functions.Functions.GetSystemIdNextVal("DPA_CORR_STO") + "ID_PROFILE, ID_MITT_DEST, CHA_TIPO_MITT_DEST, " + DocsPaDbManagement.Functions.Functions.GetDate() + ", " + idPeople + "," + idCorrGlobali);
            q.setParam("param3", "CHA_TIPO_MITT_DEST='" + tipoCorr + "' AND ID_PROFILE =" + idProfile);
            queryString = q.getSQL();
            logger.Debug(queryString);
            ExecuteNonQuery(queryString);
            q = DocsPaUtils.InitQuery.getInstance().getQuery("D_DPADocArrivo");
            q.setParam("param1", "CHA_TIPO_MITT_DEST='" + tipoCorr + "' AND ID_PROFILE =" + idProfile);
            queryString = q.getSQL();
            logger.Debug(queryString);

            using (DBProvider dbProvider = new DBProvider())
            {
                dbProvider.ExecuteNonQuery(queryString);
            }
            
        }

        public void DeleteParoleChiave(string idProfile)
        {
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("D_DPAProfParole");
            q.setParam("param1", "ID_PROFILE =" + idProfile);
            string queryString = q.getSQL();
            logger.Debug(queryString);

            using (DBProvider dbProvider = new DBProvider())
            {
                dbProvider.ExecuteNonQuery(queryString);
            }
            
        }

        public void SalvaParoleChiave(ref DocsPaVO.documento.SchedaDocumento schedaDoc)
        {
            if (schedaDoc.daAggiornareParoleChiave)
            {
                DeleteParoleChiave(schedaDoc.systemId);
                AddParolaChiave(schedaDoc.systemId, schedaDoc.paroleChiave);
                schedaDoc.daAggiornareParoleChiave = false;
            }
        }

        // SALVA ANCHE CHA_EVIDENZA
        public void SalvaTipoAtto(ref DocsPaVO.documento.SchedaDocumento schedaDoc)
        {
            if (schedaDoc.tipologiaAtto.systemId == null || schedaDoc.tipologiaAtto.systemId == "")
            {
                schedaDoc.tipologiaAtto.systemId = "NULL";
            }

            if (schedaDoc.evidenza == null || schedaDoc.evidenza == "")
            {
                schedaDoc.evidenza = "0";
            }

            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("U_Profile");
            if (schedaDoc.daAggiornareTipoAtto)
            {
                q.setParam("param1", "ID_TIPO_ATTO = " + schedaDoc.tipologiaAtto.systemId +
                    ", CHA_EVIDENZA='" + schedaDoc.evidenza + "'");
            }
            else
            {
                q.setParam("param1", "CHA_EVIDENZA='" + schedaDoc.evidenza + "'");
            }
            q.setParam("param2", "SYSTEM_ID=" + schedaDoc.systemId);
            string queryString = q.getSQL();
            logger.Debug(queryString);

            using (DBProvider dbProvider = new DBProvider())
            {
                dbProvider.ExecuteNonQuery(queryString);
            }
            
            schedaDoc.daAggiornareTipoAtto = false;

        }

        public bool PredisponiAllaProtocollazione(DocsPaVO.utente.InfoUtente infoUtente, ref DocsPaVO.documento.SchedaDocumento schedaDoc, string sede)
        {
            bool result = true;
            logger.Debug("predisponiAllaProtocollazione");

            try
            {
                //BeginTransaction();

                // oggetto
                SalvaOggetto(infoUtente.idAmministrazione, infoUtente.idPeople, infoUtente.idCorrGlobali, ref schedaDoc);

                // corrispondenti
                if (!AddCorrispondenti(schedaDoc, infoUtente))
                {
                    result = false;
                }
                schedaDoc.protocollo.daProtocollare = "1";
                bool ESITOsetdiritto = false;
                // aggiorno la tabella PROFILE
                if (UpdateProfile(schedaDoc, sede, String.Empty))
                {
                    //TODO: insert visibilità al ruolo propritario se il documento è passato da personale a privato
                    if (!string.IsNullOrEmpty(schedaDoc.privato) && schedaDoc.privato == "1")
                    {
                        ESITOsetdiritto = setDirittoRuoloProp(schedaDoc, schedaDoc.creatoreDocumento.idCorrGlob_Ruolo);
                        if (ESITOsetdiritto)
                            updateSecurityPeople(schedaDoc.systemId, schedaDoc.creatoreDocumento.idPeople);
                    }
                    else
                        // in caso il documento non è privato, deve essere possibile salvarlo ugualmente
                        ESITOsetdiritto = true;

                    // Aggiornamento note documento
                    UpdateNoteDocumento(infoUtente, schedaDoc);

                    //Emanuela 26-05-2014 : tolgo il controllo schedaDoc.predisponiProtocollazione  perchè nel caso di protocollo
                    //non consente di svuotare la data di arrivo
                    //if (schedaDoc.predisponiProtocollazione && schedaDoc.documenti != null && schedaDoc.documenti.Count > 0)
                    if (schedaDoc.documenti != null && schedaDoc.documenti.Count > 0)
                    {
                        DocsPaVO.documento.Documento doc = (DocsPaVO.documento.Documento)schedaDoc.documenti[0];

                        UpdateVersions("dta_arrivo=" + DocsPaDbManagement.Functions.Functions.ToDate(doc.dataArrivo), doc.docNumber);
                    }

                    if (ESITOsetdiritto)
                    {
                        //TODO: update id_registro che era 0 sulle eventuali trasmissioni del documento sulla dpa_todolist 
                        bool updateTodolist = true;
                        if (schedaDoc.registro != null)
                            updateTodolist = updateDpaTodolist(schedaDoc);
                        if (updateTodolist)
                        {
                            //CommitTransaction();
                        }
                        else
                        {
                            //RollbackTransaction();
                            result = false;
                        }
                    }
                    else
                    {
                        //RollbackTransaction();
                        result = false;
                    }
                }
                else
                {
                    //RollbackTransaction();
                    result = false;
                }

                //CloseConnection();
                schedaDoc.predisponiProtocollazione = false;
            }
            catch (Exception e)
            {
                //RollbackTransaction();
                //CloseConnection();
                logger.Error("Errore nella gestione dei documenti (Query - PredisponiAllaProtocollazione)", e);
                throw new Exception();
            }
            return result;
        }
        /// <summary>
        /// update dpa_todolist
        /// </summary>
        /// <param name="sch"></param>
        /// <returns></returns>
        private bool updateDpaTodolist(DocsPaVO.documento.SchedaDocumento sch)
        {
            string upd = "UPDATE DPA_TODOLIST SET ID_REGISTRO=" + sch.registro.systemId + " WHERE ID_PROFILE=" + sch.systemId + " AND ID_REGISTRO=0";
            logger.Debug(upd);

            using (DBProvider dbProvider = new DBProvider())
            {
                return dbProvider.ExecuteNonQuery(upd);
            }
            

        }

        /// <summary>
        /// setta i diritti del ruolo proprietario per un documento che è passato da personale a privato
        /// se i diritti ci sono già, va in update altrimenti insert
        /// </summary>
        /// <param name="sch"></param>
        /// <returns></returns>
        private bool setDirittoRuoloProp(DocsPaVO.documento.SchedaDocumento sch, string idcorrGlobruolo)
        {
            ArrayList sp_params = new ArrayList();
            DocsPaUtils.Data.ParameterSP res;
            bool result = false;
            res = new DocsPaUtils.Data.ParameterSP("returnvalue", new Int32(), 10, DocsPaUtils.Data.DirectionParameter.ParamOutput, System.Data.DbType.Int32);

            sp_params.Add(new DocsPaUtils.Data.ParameterSP("idProfile", Int32.Parse(sch.systemId)));
            sp_params.Add(new DocsPaUtils.Data.ParameterSP("idcorrGlobRuolo", Int32.Parse(idcorrGlobruolo)));

            sp_params.Add(res);
            //BeginTransaction();

            int retValue = 0;

            using (DBProvider dbProvider = new DBProvider())
            {
                retValue = dbProvider.ExecuteStoredProcedure("DPA_setDirittoRuoloProp", sp_params, null);
            }

            if (retValue > 0)
            {
                result = true;
            }
            else
            {

                result = false;
            }

            return result;
        }

        public bool SalvaModifiche(DocsPaVO.utente.InfoUtente infoUtente, bool enableUffRef, out bool daAggiornareUffRef, ref DocsPaVO.documento.SchedaDocumento schedaDoc)
        {
            bool result = true;
            try
            {

                if (schedaDoc != null && schedaDoc.inCestino != null
                    && schedaDoc.inCestino == "1")
                    throw new Exception("Attenzione, il documento con Id:" + schedaDoc.docNumber + " risulta rimosso, non è possibile modificarlo.");

                daAggiornareUffRef = false;
                //OpenConnection();
                // Inizio transazione sul db
                //BeginTransaction();
                // oggetto

                SalvaOggetto(infoUtente.idAmministrazione, infoUtente.idPeople, infoUtente.idCorrGlobali, ref schedaDoc);
                SalvaDtaArrivo(infoUtente.idGruppo, infoUtente.idPeople, ref schedaDoc);
                SalvaParoleChiave(ref schedaDoc);
                SalvaPrivato(ref schedaDoc);
                DocsPaVO.documento.Documento doc = (DocsPaVO.documento.Documento)schedaDoc.documenti[0];

                UpdateVersions("dta_arrivo=" + DocsPaDbManagement.Functions.Functions.ToDate(doc.dataArrivo), doc.docNumber);
                //				if (schedaDoc.protocollo != null) //Add Celeste 29/03/05
                //				{
                //					if (schedaDoc.protocollo.rispostaProtocollo!=null && schedaDoc.protocollo.rispostaProtocollo.idProfile != null)
                //					{
                //						UpdateRispostaProtocollo (schedaDoc.protocollo.rispostaProtocollo.idProfile,doc.docNumber); 
                //					}
                //				}								//Fine Celeste 29/03/05
                //EMosca 07/12/2004
                if (schedaDoc.tipologiaAtto != null)
                {
                    SalvaTipoAtto(ref schedaDoc);
                }

                if (schedaDoc.protocollo != null)
                {
                    if (schedaDoc.protocollo.GetType().Equals(typeof(DocsPaVO.documento.ProtocolloEntrata)))
                    {
                        if (!SalvaProtocolloEntrata(infoUtente, enableUffRef, out daAggiornareUffRef, ref schedaDoc))
                        {
                            result = false;
                        }
                    }
                    else if (schedaDoc.protocollo.GetType().Equals(typeof(DocsPaVO.documento.ProtocolloUscita)))
                    {
                        if (!SalvaProtocolloUscita(infoUtente.idPeople, infoUtente.idCorrGlobali, ref schedaDoc))
                        {
                            result = false;
                        }
                    }
                    else if (schedaDoc.protocollo.GetType().Equals(typeof(DocsPaVO.documento.ProtocolloInterno)))
                    {
                        if (!SalvaProtocolloInterno(infoUtente.idPeople, infoUtente.idCorrGlobali, ref schedaDoc))
                        {
                            result = false;
                        }
                    }
                }
                else
                {
                    logger.Debug("Documento grigio");
                    schedaDoc.tipoProto = "G";
                    if (schedaDoc.rispostaDocumento != null)
                    {
                        if ((schedaDoc.rispostaDocumento.idProfile != null && schedaDoc.rispostaDocumento.idProfile != String.Empty) || (schedaDoc.rispostaDocumento.isCatenaTrasversale != null && schedaDoc.rispostaDocumento.isCatenaTrasversale.Equals("1")))
                        {
                            UpdateRispostaProtocollo(schedaDoc.rispostaDocumento.idProfile, schedaDoc.systemId);
                            schedaDoc.modificaRispostaDocumento = false;
                        }
                    }
                }

                // Aggiornamento note documento
                UpdateNoteDocumento(infoUtente, schedaDoc);

                //Profilazione dinamica
                //In presenza di campi profilati, prima di salvare le informazioni devo verificare che si possiedano anche i diritti di scrittura
                if (schedaDoc.template != null && !string.IsNullOrEmpty(schedaDoc.accessRights) && Convert.ToInt32(schedaDoc.accessRights) > 45)
                {
                    Model model = new Model();
                    model.salvaInserimentoUtenteProfDim(schedaDoc.template, schedaDoc.docNumber);

                    // Se la tipologia ha un contatore di repertorio, viene assegnata la visibilità del documento repertoriato
                    // all'eventuale responsabile di repertorio
                    OggettoCustom oggCustom = ((OggettoCustom[])schedaDoc.template.ELENCO_OGGETTI.ToArray(typeof(OggettoCustom))).Where(oc => oc.TIPO.DESCRIZIONE_TIPO.ToLower() == "contatore" && oc.REPERTORIO == "1").FirstOrDefault();

                    logger.DebugFormat("Registri di repertorio - Ricerca repertorio per la tipologia {0} - {1}. Repertorio trovato: {2}", schedaDoc.template.ID_TIPO_ATTO, schedaDoc.template.DESCRIZIONE, oggCustom != null);

                    if (oggCustom != null)
                    {
                        logger.DebugFormat("Registri di repertorio - Assegnazione visibilità al responsabile");
                        RegistriRepertorioPrintManager printer = new RegistriRepertorioPrintManager();
                        bool ass = printer.AssignRepertorioVisibilityToResponsableRole(oggCustom.TIPO_CONTATORE, null, schedaDoc.docNumber, oggCustom.SYSTEM_ID.ToString(), oggCustom.ID_AOO_RF);
                        logger.DebugFormat("Registri di repertorio - Risultato assegnazione visibilità: {0}", ass.ToString());
                    }
                }

                //CommitTransaction();
                //CloseConnection();

            }
            catch (Exception e)
            {
                logger.Debug(e.Message);
               //RollbackTransaction();
                //CloseConnection();		
                logger.Error("Errore nella gestione dei documenti (Query - SalvaModifiche)", e);
                throw new Exception("F_System", e);
            }
            return result;
        }

        private bool SalvaProtocolloEntrata(DocsPaVO.utente.InfoUtente infoUtente, bool enableUffRef, out bool daAggiornareUffRef, ref DocsPaVO.documento.SchedaDocumento schedaDoc)
        {
            bool result = true;
            daAggiornareUffRef = false;
            DocsPaVO.documento.ProtocolloEntrata protocollo = (DocsPaVO.documento.ProtocolloEntrata)schedaDoc.protocollo;
            string idDocArrivoPar = "";
            DocsPaVO.utente.Corrispondente corrispondente;
            //Mittente
            if (protocollo.daAggiornareMittente)
            {
                schedaDoc.protocollo.modMittDest = "1";
                DeleteDocArrivoPar(infoUtente.idPeople, infoUtente.idCorrGlobali, schedaDoc.systemId, "M");

                corrispondente = protocollo.mittente;
                if (!AddCorrispondente(schedaDoc, ref corrispondente, infoUtente.idAmministrazione))
                {
                    result = false;
                }
                idDocArrivoPar = AddDocArrivoPar(schedaDoc, corrispondente, "M");
                ((DocsPaVO.documento.ProtocolloEntrata)schedaDoc.protocollo).mittente = corrispondente;

                UpdateModProfile("CHA_MOD_MITT_DEST", schedaDoc.systemId);
                ((DocsPaVO.documento.ProtocolloEntrata)schedaDoc.protocollo).daAggiornareMittente = false;
            }
            //Mittente intermedio
            if (protocollo.daAggiornareMittenteIntermedio)
            {
                schedaDoc.protocollo.modMittInt = "1";
                DeleteDocArrivoPar(infoUtente.idPeople, infoUtente.idCorrGlobali, schedaDoc.systemId, "I");
                if (protocollo.mittenteIntermedio != null)
                {
                    corrispondente = ((DocsPaVO.documento.ProtocolloEntrata)schedaDoc.protocollo).mittenteIntermedio;
                    if (!AddCorrispondente(schedaDoc, ref corrispondente, infoUtente.idAmministrazione))
                    {
                        result = false;
                    }
                    idDocArrivoPar = AddDocArrivoPar(schedaDoc, corrispondente, "I");
                    ((DocsPaVO.documento.ProtocolloEntrata)schedaDoc.protocollo).mittenteIntermedio = corrispondente;
                }
                UpdateModProfile("CHA_MOD_MITT_INT", schedaDoc.systemId);
                ((DocsPaVO.documento.ProtocolloEntrata)schedaDoc.protocollo).daAggiornareMittenteIntermedio = false;
            }
            //Mittenti Multipli
            if (protocollo.daAggiornareMittentiMultipli)
            {
                DeleteDocArrivoPar(infoUtente.idPeople, infoUtente.idCorrGlobali, schedaDoc.systemId, "MD");
                for (int i = 0; i < protocollo.mittenti.Count; i++)
                {
                    DocsPaVO.utente.Corrispondente corr = (DocsPaVO.utente.Corrispondente)protocollo.mittenti[i];
                    if (!AddCorrispondente(schedaDoc, ref corr, infoUtente.idAmministrazione))
                        result = false;
                    AddDocArrivoPar(schedaDoc, corr, "MD");
                    addDettagliCorrOcc(corr);
                }

                UpdateModProfile("CHA_MOD_MITT_DEST", schedaDoc.systemId);
                ((DocsPaVO.documento.ProtocolloEntrata)schedaDoc.protocollo).daAggiornareMittentiMultipli = false;
            }

            // protocollo mittente
            UpdateProtocolloMittente(((DocsPaVO.documento.ProtocolloEntrata)schedaDoc.protocollo).dataProtocolloMittente,
                ((DocsPaVO.documento.ProtocolloEntrata)schedaDoc.protocollo).descrizioneProtocolloMittente, schedaDoc.systemId);

            //SALVATAGGIO DELLA RISPOSTA AL PROTOCOLLO
            //if (schedaDoc.protocollo.rispostaProtocollo != null)
            //{
            //    if (schedaDoc.protocollo.rispostaProtocollo.segnatura != null && schedaDoc.protocollo.rispostaProtocollo.segnatura != String.Empty)
            //    {
            //        UpdateRispostaProtocollo(schedaDoc.protocollo.rispostaProtocollo.idProfile, schedaDoc.systemId);
            //        schedaDoc.protocollo.modificaRispostaProtocollo = false;
            //    }
            //}
            if (schedaDoc.rispostaDocumento != null)
            {
                if ((schedaDoc.rispostaDocumento.segnatura != null && schedaDoc.rispostaDocumento.segnatura != String.Empty) || (schedaDoc.rispostaDocumento.isCatenaTrasversale != null && schedaDoc.rispostaDocumento.isCatenaTrasversale.Equals("1")))
                {
                    UpdateRispostaProtocollo(schedaDoc.rispostaDocumento.idProfile, schedaDoc.systemId);
                    schedaDoc.modificaRispostaDocumento = false;
                }
            }

            //metodo per aggiornare il campo ufficio referente in protocollo in ingresso
            if (enableUffRef)
            {
                daAggiornareUffRef = aggiornaUfficioReferente(protocollo.ufficioReferente.systemId, schedaDoc.systemId);
            }

            if (System.Configuration.ConfigurationManager.AppSettings["ENABLE_RIFERIMENTI_MITTENTE"] != null &&
                          System.Configuration.ConfigurationManager.AppSettings["ENABLE_RIFERIMENTI_MITTENTE"].ToString() == "1")
            {
                UpdateRiferimentoMittente(schedaDoc.riferimentoMittente, schedaDoc.systemId);
            }

            return result;
        }


        private bool aggiornaUfficioReferente(string idUoRef, string systemId)
        {
            //			DataSet dataSet;
            bool retvalue = false;
            string idUo = "";
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_PROFILE_ID_UO_REF");
            q.setParam("param1", systemId);
            string queryString = q.getSQL();
            logger.Debug(queryString);

            using (DBProvider dbProvider = new DBProvider())
            {
                dbProvider.ExecuteScalar(out idUo, queryString);
            }
            
            if (idUo != null && idUo != "")
            {
                if (!idUoRef.Equals(idUo))
                {
                    q = DocsPaUtils.InitQuery.getInstance().getQuery("U_PROFILE_ID_UO_REF");
                    q.setParam("param1", idUoRef);
                    q.setParam("param2", systemId);
                    queryString = q.getSQL();
                    logger.Debug(queryString);

                    using (DBProvider dbProvider = new DBProvider())
                    {
                        dbProvider.ExecuteNonQuery(queryString);
                    }
                    
                    retvalue = true;
                }
            }

            return retvalue;
        }

        private bool SalvaProtocolloUscita(string idPeople, string idCorrGlobali, ref DocsPaVO.documento.SchedaDocumento schedaDoc)
        {
            bool result = true;
            DocsPaVO.documento.ProtocolloUscita protocollo = (DocsPaVO.documento.ProtocolloUscita)schedaDoc.protocollo;
            string idDocArrivoPar = "";
            ArrayList listaCorripondenti;
            DocsPaVO.utente.Corrispondente corrispondente;

            //Mittente
            if (((DocsPaVO.documento.ProtocolloUscita)schedaDoc.protocollo).daAggiornareMittente)
            {
                schedaDoc.protocollo.modMittDest = "1";
                DeleteDocArrivoPar(idPeople, idCorrGlobali, schedaDoc.systemId, "M");

                corrispondente = protocollo.mittente;
                if (!AddCorrispondente(schedaDoc, ref corrispondente, ""))
                {
                    result = false;
                }
                idDocArrivoPar = AddDocArrivoPar(schedaDoc, corrispondente, "M");
                ((DocsPaVO.documento.ProtocolloUscita)schedaDoc.protocollo).mittente = corrispondente;

                UpdateModProfile("CHA_MOD_MITT_DEST", schedaDoc.systemId);
                ((DocsPaVO.documento.ProtocolloUscita)schedaDoc.protocollo).daAggiornareMittente = false;
            }

            // Destinatari
            if (protocollo.daAggiornareDestinatari)
            {
                schedaDoc.protocollo.modMittDest = "1";
                DeleteDocArrivoPar(idPeople, idCorrGlobali, schedaDoc.systemId, "D");
                DeleteDocArrivoPar(idPeople, idCorrGlobali, schedaDoc.systemId, "F");

                listaCorripondenti = protocollo.destinatari;
                for (int i = 0; listaCorripondenti != null && i < listaCorripondenti.Count; i++)
                {
                    corrispondente = (DocsPaVO.utente.Corrispondente)listaCorripondenti[i];
                    if (!AddCorrispondente(schedaDoc, ref corrispondente, ""))
                    {
                        result = false;
                    }
                    if (!string.IsNullOrEmpty(corrispondente.tipoCorrispondente) && corrispondente.tipoCorrispondente.Equals("O") && !string.IsNullOrEmpty(corrispondente.email))
                    {
                        // Modifica per corrispondente occasionale
                        idDocArrivoPar = AddDocArrivoPar(schedaDoc, corrispondente, "O");
                    }
                    else if (!string.IsNullOrEmpty(corrispondente.tipoCorrispondente) && (corrispondente.tipoCorrispondente.Equals("F") || corrispondente.tipoCorrispondente.Equals("L")))
                        idDocArrivoPar = AddDocArrivoPar(schedaDoc, corrispondente, corrispondente.tipoCorrispondente);
                    else
                        idDocArrivoPar = AddDocArrivoPar(schedaDoc, corrispondente, "D");
                    
                    //idDocArrivoPar = AddDocArrivoPar(schedaDoc, corrispondente, "D");
                    //					updateStatoInvio(db, corrispondente, idDocArrivoPar, schedaDoc.registro.systemId, schedaDoc.systemId);
                    //InsertStatoInvio(corrispondente, idDocArrivoPar, schedaDoc.registro.systemId, schedaDoc.systemId);
                    ((DocsPaVO.documento.ProtocolloUscita)schedaDoc.protocollo).destinatari[i] = corrispondente;
                }
                UpdateModProfile("CHA_MOD_MITT_DEST", schedaDoc.systemId);
                ((DocsPaVO.documento.ProtocolloUscita)schedaDoc.protocollo).daAggiornareDestinatari = false;
            }

            //Risposta
            if (schedaDoc.rispostaDocumento != null)
            {
                if ((schedaDoc.rispostaDocumento.segnatura != null && schedaDoc.rispostaDocumento.segnatura != String.Empty) || (schedaDoc.rispostaDocumento.isCatenaTrasversale != null && schedaDoc.rispostaDocumento.isCatenaTrasversale.Equals("1")))
                {
                    UpdateRispostaProtocollo(schedaDoc.rispostaDocumento.idProfile, schedaDoc.systemId);
                    schedaDoc.modificaRispostaDocumento = false;
                }
            }

            // Destinatari per conoscenza
            if (protocollo.daAggiornareDestinatariConoscenza)
            {
                schedaDoc.protocollo.modMittDest = "1";
                DeleteDocArrivoPar(idPeople, idCorrGlobali, schedaDoc.systemId, "C");

                listaCorripondenti = protocollo.destinatariConoscenza;

                for (int i = 0; listaCorripondenti != null && i < listaCorripondenti.Count; i++)
                {
                    corrispondente = (DocsPaVO.utente.Corrispondente)listaCorripondenti[i];
                    if (!AddCorrispondente(schedaDoc, ref corrispondente, ""))
                    {
                        result = false;
                    }
                    idDocArrivoPar = AddDocArrivoPar(schedaDoc, corrispondente, "C");
                    //					updateStatoInvio(db, corrispondente, idDocArrivoPar, schedaDoc.registro.systemId, schedaDoc.systemId);
                    //InsertStatoInvio(corrispondente, idDocArrivoPar, schedaDoc.registro.systemId, schedaDoc.systemId);
                    ((DocsPaVO.documento.ProtocolloUscita)schedaDoc.protocollo).destinatariConoscenza[i] = corrispondente;
                }
                UpdateModProfile("CHA_MOD_DEST_OCC", schedaDoc.systemId);
                ((DocsPaVO.documento.ProtocolloUscita)schedaDoc.protocollo).daAggiornareDestinatariConoscenza = false;
            }
            return result;
        }

        private bool SalvaProtocolloInterno(string idPeople, string idCorrGlobali, ref DocsPaVO.documento.SchedaDocumento schedaDoc)
        {
            bool result = true;
            DocsPaVO.documento.ProtocolloInterno protocollo = (DocsPaVO.documento.ProtocolloInterno)schedaDoc.protocollo;
            string idDocArrivoPar = "";
            ArrayList listaCorripondenti;
            DocsPaVO.utente.Corrispondente corrispondente;

            //Mittente
            if (((DocsPaVO.documento.ProtocolloInterno)schedaDoc.protocollo).daAggiornareMittente)
            {
                schedaDoc.protocollo.modMittDest = "1";
                DeleteDocArrivoPar(idPeople, idCorrGlobali, schedaDoc.systemId, "M");

                corrispondente = protocollo.mittente;
                if (!AddCorrispondente(schedaDoc, ref corrispondente, ""))
                {
                    result = false;
                }
                idDocArrivoPar = AddDocArrivoPar(schedaDoc, corrispondente, "M");
                ((DocsPaVO.documento.ProtocolloInterno)schedaDoc.protocollo).mittente = corrispondente;

                UpdateModProfile("CHA_MOD_MITT_DEST", schedaDoc.systemId);
                ((DocsPaVO.documento.ProtocolloInterno)schedaDoc.protocollo).daAggiornareMittente = false;
            }

            // Destinatari
            if (protocollo.daAggiornareDestinatari)
            {
                schedaDoc.protocollo.modMittDest = "1";
                DeleteDocArrivoPar(idPeople, idCorrGlobali, schedaDoc.systemId, "D");
                DeleteDocArrivoPar(idPeople, idCorrGlobali, schedaDoc.systemId, "F");

                listaCorripondenti = protocollo.destinatari;
                for (int i = 0; listaCorripondenti != null && i < listaCorripondenti.Count; i++)
                {
                    corrispondente = (DocsPaVO.utente.Corrispondente)listaCorripondenti[i];
                    if (!AddCorrispondente(schedaDoc, ref corrispondente, ""))
                    {
                        result = false;
                    }
                    idDocArrivoPar = AddDocArrivoPar(schedaDoc, corrispondente, "D");
                    //					updateStatoInvio(db, corrispondente, idDocArrivoPar, schedaDoc.registro.systemId, schedaDoc.systemId);
                    //InsertStatoInvio(corrispondente, idDocArrivoPar, schedaDoc.registro.systemId, schedaDoc.systemId);
                    ((DocsPaVO.documento.ProtocolloInterno)schedaDoc.protocollo).destinatari[i] = corrispondente;
                }
                UpdateModProfile("CHA_MOD_MITT_DEST", schedaDoc.systemId);
                ((DocsPaVO.documento.ProtocolloInterno)schedaDoc.protocollo).daAggiornareDestinatari = false;
            }

            //Risposta
            if (schedaDoc.rispostaDocumento != null)
            {
                if ((schedaDoc.rispostaDocumento.segnatura != null && schedaDoc.rispostaDocumento.segnatura != String.Empty) || (schedaDoc.rispostaDocumento.isCatenaTrasversale != null && schedaDoc.rispostaDocumento.isCatenaTrasversale.Equals("1")))
                {
                    UpdateRispostaProtocollo(schedaDoc.rispostaDocumento.idProfile, schedaDoc.systemId);
                    schedaDoc.modificaRispostaDocumento = false;
                }
            }

            // Destinatari per conoscenza
            if (protocollo.daAggiornareDestinatariConoscenza)
            {
                schedaDoc.protocollo.modMittDest = "1";
                DeleteDocArrivoPar(idPeople, idCorrGlobali, schedaDoc.systemId, "C");
                listaCorripondenti = protocollo.destinatariConoscenza;

                for (int i = 0; listaCorripondenti != null && i < listaCorripondenti.Count; i++)
                {
                    corrispondente = (DocsPaVO.utente.Corrispondente)listaCorripondenti[i];
                    if (!AddCorrispondente(schedaDoc, ref corrispondente, ""))
                    {
                        result = false;
                    }
                    idDocArrivoPar = AddDocArrivoPar(schedaDoc, corrispondente, "C");
                    ((DocsPaVO.documento.ProtocolloInterno)schedaDoc.protocollo).destinatariConoscenza[i] = corrispondente;
                }
                UpdateModProfile("CHA_MOD_DEST_OCC", schedaDoc.systemId);
                ((DocsPaVO.documento.ProtocolloInterno)schedaDoc.protocollo).daAggiornareDestinatariConoscenza = false;
            }
            return result;
        }


        private void UpdateProtocolloMittente(string dataProtoIn, string Segn_ProtIn, string idProfile)
        {
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("U_ProtMitt");
            q.setParam("param1", DocsPaDbManagement.Functions.Functions.ToDate(dataProtoIn));
            q.setParam("param2", "'" + DocsPaUtils.Functions.Functions.ReplaceApexes(Segn_ProtIn) + "'");
            q.setParam("param3", idProfile);
            string queryString = q.getSQL();
            logger.Debug(queryString);

            using (DBProvider dbProvider = new DBProvider())
            {
                dbProvider.ExecuteNonQuery(queryString);
            }
            
        }

        #endregion

        #region FileManager
        public void SetFlagDaInviare(ref DocsPaVO.documento.SchedaDocumento schedaDoc)
        {
            try
            {
                //OpenConnection();
                DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("U_Versions");
                q.setParam("param1", "CHA_DA_INVIARE = '0'");
                q.setParam("param2", "NOT CHA_DA_INVIARE = '0' AND DOCNUMBER=" + schedaDoc.docNumber);
                string queryString = q.getSQL();
                ExecuteNonQuery(queryString);
                logger.Debug(queryString);
                q = DocsPaUtils.InitQuery.getInstance().getQuery("U_Versions");
                q.setParam("param1", "CHA_DA_INVIARE = '1'");
                q.setParam("param2", "VERSION_ID=" + ((DocsPaVO.documento.Documento)schedaDoc.documenti[0]).versionId);
                queryString = q.getSQL();
                ExecuteNonQuery(queryString);
                logger.Debug(queryString);
                //CloseConnection();	
                for (int i = 1; i < schedaDoc.documenti.Count; i++)
                {
                    ((DocsPaVO.documento.Documento)schedaDoc.documenti[i]).daInviare = "0";
                }
                ((DocsPaVO.documento.Documento)schedaDoc.documenti[0]).daInviare = "1";
            }
            catch (Exception e)
            {
                logger.Error(e.Message);
                //CloseConnection();
                logger.Error("Errore nella gestione dei documenti (Query - SetFlagDaInviare)", e);
                throw new Exception("F_System");
            }
        }

        public string GetFileInfoMask(string versionId, string docNumber)
        {
            string fileInfo = null;
            try
            {
                DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_Components");
                q.setParam("param1", "FILE_INFO");
                q.setParam("param2", "VERSION_ID=" + versionId + " AND DOCNUMBER=" + docNumber);
                string queryString = q.getSQL();
                logger.Debug(queryString);
                //luluciani alcune volte il dato non torna per il problema della executeScalar
                //ExecuteScalar(out impronta, queryString);		
                using (IDataReader rtn = ExecuteReader(queryString))
                {
                    if (rtn != null && rtn.FieldCount > 0)
                        while (rtn.Read())
                            fileInfo = rtn.GetString(0);
                }
                return fileInfo;
            }
            catch
            {
                //Magari manca la colonna
            }

            return null;
        }
        public List<FileRequest> GetFileInfosToProcess(int numberOfItems)
        {
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_CODA_PROCESSO_FILEINFO");
            q.setParam("rowCount", numberOfItems.ToString());
            List<FileRequest> retval = new List<FileRequest>();

            string queryString = q.getSQL();
            logger.Debug(queryString);
            //luluciani alcune volte il dato non torna per il problema della executeScalar
            //ExecuteScalar(out impronta, queryString);		
            using (IDataReader rtn = ExecuteReader(queryString))
            {
                if (rtn != null && rtn.FieldCount > 0)
                    while (rtn.Read())
                    {
                        FileRequest fileREQ = new FileRequest
                        {
                            docNumber = rtn["DOCNUMBER"].ToString(),
                            versionId = rtn["VERSION_ID"].ToString(),
                            fileName = rtn["PATH"].ToString(),
                            firmato = rtn["CHA_FIRMATO"].ToString(),
                            idPeople = rtn["AUTHOR"].ToString(),
                            //PORCATA
                            idPeopleDelegato = rtn["ID_RUOLO_CREATORE"].ToString(),
                            versionLabel = rtn["ID_AMM"].ToString()
                        };
                        retval.Add(fileREQ);
                    }
            }
            return retval;

        }

        public List<FileRequest> GetSignTypesToProcess(int numberOfItems)
        {
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_CODA_PROCESSO_SIGN_TYPE");
            q.setParam("rowCount", numberOfItems.ToString());
            List<FileRequest> retval = new List<FileRequest>();

            string queryString = q.getSQL();
            logger.Debug(queryString);
            //luluciani alcune volte il dato non torna per il problema della executeScalar
            //this.ExecuteScalar(out impronta, queryString);		
            using (IDataReader rtn = this.ExecuteReader(queryString))
            {
                if (rtn != null && rtn.FieldCount > 0)
                    while (rtn.Read())
                    {
                        FileRequest fileREQ = new FileRequest
                        {
                            docNumber = rtn["DOCNUMBER"].ToString(),
                            versionId = rtn["VERSION_ID"].ToString(),
                            path = rtn["PATH"].ToString(),
                            fileName = rtn["VAR_NOMEORIGINALE"].ToString(),
                            firmato = rtn["CHA_FIRMATO"].ToString(),
                            idPeople = rtn["AUTHOR"].ToString(),
                            //PORCATA PRESA DA FAILLACE A DETTA DI LUCA LUCIANI
                            idPeopleDelegato = rtn["ID_RUOLO_CREATORE"].ToString(),
                            versionLabel = rtn["ID_AMM"].ToString()
                        };
                        retval.Add(fileREQ);
                    }
            }
            return retval;

        }


        public string GetNomeOriginale(string versionId, string docNumber)
        {
            string nomeOriginale = null;
            try
            {
                if (!string.IsNullOrEmpty(versionId) && !string.IsNullOrEmpty(docNumber))
                {
                    DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_Components");
                    q.setParam("param1", "VAR_NOMEORIGINALE");
                    q.setParam("param2", "VERSION_ID=" + versionId + " AND DOCNUMBER=" + docNumber);
                    string queryString = q.getSQL();
                    logger.Debug(queryString);
                    //luluciani alcune volte il dato non torna per il problema della executeScalar
                    //ExecuteScalar(out impronta, queryString);	
                    using (DBProvider dbProvider = new DBProvider())
                    {
                        using (IDataReader rtn = dbProvider.ExecuteReader(queryString))
                        {
                            if (rtn != null && rtn.FieldCount > 0)
                                while (rtn.Read())
                                    nomeOriginale = rtn.GetString(0);
                        }
                    }
                }
                return nomeOriginale;
            }
            catch
            {
                //Magari manca la colonna
            }

            return null;
        }

        public string GetFileName(string versionId, string docNumber)
        {
            string completePath = null;

            try
            {
                DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_Components");
                q.setParam("param1", "PATH");
                q.setParam("param2", "VERSION_ID=" + versionId + " AND DOCNUMBER=" + docNumber);
                string queryString = q.getSQL();
                logger.Debug(queryString);
                //luluciani alcune volte il dato non torna per il problema della executeScalar
                //ExecuteScalar(out impronta, queryString);		
                using (IDataReader rtn = ExecuteReader(queryString))
                {
                    if (rtn != null && rtn.FieldCount > 0)
                        while (rtn.Read())
                        {
                            completePath = rtn.GetString(0);
                        }
                }

                return getFileNameFromPath(completePath);
            }
            catch
            {
                //Magari manca la colonna
            }

            return null;
        }

        private string getFileNameFromPath(string completePath)
        {
            string retVal = String.Empty;
            String[] tempRet = completePath.Split('\\');
            if (tempRet.Count() > 0)
                retVal = tempRet[tempRet.Count() - 1];

            return retVal;
        }

        public void GetImpronta(out string impronta, string versionId, string docNumber)
        {

            impronta = "";

            try
            {
                DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_Components");
                q.setParam("param1", "VAR_IMPRONTA");
                q.setParam("param2", "VERSION_ID=" + versionId + " AND DOCNUMBER=" + docNumber);
                string queryString = q.getSQL();
                logger.Debug(queryString);
                //luluciani alcune volte il dato non torna per il problema della executeScalar
                //ExecuteScalar(out impronta, queryString);	
                using (DBProvider dbProvider = new DBProvider())
                {
                    using (IDataReader rtn = dbProvider.ExecuteReader(queryString))
                    {
                        if (rtn != null && rtn.FieldCount > 0)
                            while (rtn.Read())
                                impronta = rtn.GetString(0);
                    }
                }
            }
            catch
            { }
            finally
            {
                CloseConnection();
            }
        }

        public string GetDocNumberByImpronta(string impronta)
        {

            string docNum = string.Empty;

            try
            {
                DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_Components");
                q.setParam("param1", "DOCNUMBER");
                q.setParam("param2", "VAR_IMPRONTA='" + impronta + "'");
                string queryString = q.getSQL();
                logger.Debug(queryString);
                //luluciani alcune volte il dato non torna per il problema della executeScalar
                //ExecuteScalar(out impronta, queryString);		
                using (IDataReader rtn = ExecuteReader(queryString))
                {
                    if (rtn != null && rtn.FieldCount > 0)
                        while (rtn.Read())
                            docNum = rtn.GetValue(rtn.GetOrdinal("DOCNUMBER")).ToString();
                }
            }
            catch (Exception e)
            { }
            finally
            {
                CloseConnection();
            }

            return docNum;
        }

        public void UpdateComponents(string totalBytesWritten, string varImpronta, string version_id, string docNumber)
        {
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("U_Components");
            if (varImpronta == "null")
                q.setParam("param1", "FILE_SIZE= " + totalBytesWritten + ", VAR_IMPRONTA= NULL");
            else
                q.setParam("param1", "FILE_SIZE= " + totalBytesWritten + ", VAR_IMPRONTA= '" + varImpronta + "'");
            q.setParam("param2", "VERSION_ID=" + version_id + " AND DOCNUMBER=" + docNumber);
            string queryString = q.getSQL();
            ExecuteNonQuery(queryString);
        }

        public void UpdateComponentsExt(string extension, string version_id, string docNumber)
        {
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("U_Components");
            q.setParam("param1", "EXT= '" + extension + "'");
            q.setParam("param2", "VERSION_ID=" + version_id + " AND DOCNUMBER=" + docNumber);
            string queryString = q.getSQL();
            ExecuteNonQuery(queryString);

            //AGGIORNAMENTO EXT IN PROFILE
            UpdateProfileExt(extension, docNumber);
        }

        public void UpdateProfileExt(string extension, string docNumber)
        {
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("U_PROFILE_EXT");
            q.setParam("ext", "'" + extension + "'");
            q.setParam("docnumber", docNumber);
            string queryString = q.getSQL();
            ExecuteNonQuery(queryString);
        }

        public void UpdateComponentsOfn(string originalFileName, string version_id, string docNumber)
        {
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("U_Components");
            q.setParam("param1", "VAR_NOMEORIGINALE= '" + originalFileName + "'");
            q.setParam("param2", "VERSION_ID=" + version_id + " AND DOCNUMBER=" + docNumber);
            string queryString = q.getSQL();
            ExecuteNonQuery(queryString);
        }

        public void UpdateComponentsFileInfo(string fileInfoMask, string version_id, string docNumber)
        {
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("U_Components");
            q.setParam("param1", "FILE_INFO= '" + fileInfoMask + "'");
            q.setParam("param2", "VERSION_ID=" + version_id + " AND DOCNUMBER=" + docNumber);
            string queryString = q.getSQL();
            ExecuteNonQuery(queryString);
        }

        public bool UpdateComponentsPath(string path, string version_id, string docnumber)
        {
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("U_Components");
            q.setParam("param1", "PATH= '" + path.Replace("'","''") + "'");
            q.setParam("param2", "VERSION_ID=" + version_id + " AND DOCNUMBER=" + docnumber);
            string queryString = q.getSQL();
            logger.Debug(queryString);
            return ExecuteNonQuery(queryString);
        }

        public void ModificaEstensione(bool allegato, ref DocsPaVO.documento.FileRequest fileRequest, string version, string versionLabel, string version_id, string subVersion, string dataInserimento)
        {
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("U_Versions");

            if (fileRequest.descrizione == null)
                fileRequest.descrizione = string.Empty;

            string sqlString = "VERSION_LABEL = '" + versionLabel + "'" + ",DTA_CREAZIONE = " + DocsPaDbManagement.Functions.Functions.ToDate(dataInserimento) + ",COMMENTS = '" + fileRequest.descrizione.Replace("'", "''") + "'";
            if (allegato)
            {
                sqlString += ",VERSION = " + version + ",SUBVERSION = '" + subVersion + "'" + ",NUM_PAG_ALLEGATI = " + ((DocsPaVO.documento.Allegato)fileRequest).numeroPagine;
            }
            q.setParam("param1", sqlString);
            q.setParam("param2", "VERSION_ID=" + version_id);
            string queryString = q.getSQL();
            logger.Debug(queryString);
            ExecuteNonQuery(queryString);
            q = DocsPaUtils.InitQuery.getInstance().getQuery("S_Components");
            q.setParam("param1", "PATH");
            q.setParam("param2", "VERSION_ID=" + version_id);
            queryString = q.getSQL();
            logger.Debug(queryString);
            ExecuteScalar(out fileRequest.fileName, queryString);
            fileRequest.version = version;
            fileRequest.subVersion = subVersion;
            fileRequest.versionLabel = versionLabel;
            fileRequest.dataInserimento = dataInserimento;
        }

        public void SetImg(string docNumber)
        {
            BeginTransaction();
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("U_Profile");
            q.setParam("param1", "CHA_IMG = '1'");
            //  provo a togliere la condizione su cha_img='0' sembra dare problemi, insomma lo faccio per ogni versione 
            //acquisita. altrimenti non è  possibile lanciare eccezzioni in caso di errore.
            //andrebbe in eccezione ad ongi versione usccessiva alla prima. 
            //q.setParam("param2", "CHA_IMG = '0' AND DOCNUMBER = " + docNumber);
            q.setParam("param2", " DOCNUMBER = " + docNumber);
            string queryString = q.getSQL();
            logger.Debug("U_CHA_IMG " + queryString);
            int rows = 0;
            bool rtn = ExecuteNonQuery(queryString, out rows);
            if (rtn && rows > 0)
            {
                logger.Debug("U_CHA_IMG rows Affected " + rows.ToString());
                CommitTransaction();
            }
            else
            {
                RollbackTransaction();
                throw new Exception("errore nella U_CHA_IMG " + queryString + " rows affetcetd = " + rows);

            }


        }

        public ArrayList GetApplicazioni(string estensione, ArrayList res)
        {
            try
            {
                if (!string.IsNullOrEmpty(estensione))
                {
                    DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_Apps");
                    q.setParam("param1", "SYSTEM_ID,APPLICATION,DESCRIPTION, DEFAULT_EXTENSION,MIME_TYPE");
                    if (estensione != null)
                    {
                        q.setParam("param2", "WHERE UPPER(DEFAULT_EXTENSION)='" + estensione.ToUpper() + "'");
                    }
                    string queryString = q.getSQL();
                    logger.Debug(queryString);

                    DataSet ds;
                    
                    using (DBProvider dbProvider = new DBProvider())
                    {

                        dbProvider.ExecuteQuery(out ds, "APP", queryString);
                        foreach (System.Data.DataRow dr in ds.Tables["APP"].Rows)
                        {
                            DocsPaVO.documento.Applicazione appl = new DocsPaVO.documento.Applicazione();
                            appl.systemId = dr["SYSTEM_ID"].ToString();
                            appl.descrizione = dr["DESCRIPTION"].ToString();
                            appl.application = dr["APPLICATION"].ToString();
                            appl.estensione = dr["DEFAULT_EXTENSION"].ToString();
                            appl.mimeType = dr["MIME_TYPE"].ToString();
                            res.Add(appl);
                        }
                    }

                    ds.Dispose();
                    //modofica
                    if (ds.Tables["APP"].Rows.Count == 0)
                    {
                        if (InsertApp(estensione))
                            return GetApplicazioni(estensione, res);
                    }
                    else
                        //modifica
                        return res;
                }
            }
            catch (Exception e)
            {
                logger.Error(e.ToString());

            }

            return null;
        }

        //modifica

        public bool EsisteExt(string estensione)
        {
            bool retval = false;
            try
            {
                if (!string.IsNullOrEmpty(estensione))
                {
                    DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_Apps2_new");
                    q.setParam("system_id", "SYSTEM_ID DESC");
                    q.setParam("defaul_extension", estensione);
                    string queryString = q.getSQL();
                    logger.Debug(queryString);
                    using (DocsPaDB.DBProvider dbProvider = new DocsPaDB.DBProvider())
                    {
                        using (System.Data.IDataReader reader = dbProvider.ExecuteReader(queryString))
                        {
                            if (reader.Read())
                                retval = true;
                        }
                    }
                }
            }
            catch (Exception e)
            {
                logger.Error("Errore in EsisteExt: " + e.Message);
            }

            return retval;
        }


        public DocsPaVO.documento.Applicazione getExt(string estensione, DocsPaVO.documento.Applicazione res)
        {
            try
            {
                if (!string.IsNullOrEmpty(estensione))
                {
                    DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_Apps2_new");
                    q.setParam("system_id", "SYSTEM_ID DESC");
                    q.setParam("defaul_extension", estensione);
                    string queryString = q.getSQL();
                    logger.Debug(queryString);
                    using (DocsPaDB.DBProvider dbProvider = new DocsPaDB.DBProvider())
                    {
                        using (System.Data.IDataReader reader = dbProvider.ExecuteReader(queryString))
                        {
                            if (reader.Read())
                            {
                                while (reader.Read())
                                {
                                    res.systemId = reader.GetInt32(reader.GetOrdinal("SYSTEM_ID")).ToString();
                                    res.estensione = reader.GetString(reader.GetOrdinal("DEFAULT_EXTENSION "));
                                }

                            }
                            else
                            {
                                dbProvider.CloseConnection();
                                if (InsertApp(estensione))
                                    return getExt(estensione, res);
                            }
                            dbProvider.CloseConnection();
                            return res;
                        }
                    }
                }
            }
            catch (Exception e)
            {
                logger.Error("Errore in getExt: " + e.Message);
                return res;
            }

            return null;
        }

        public void GetExt(string estensione, ref DocsPaVO.documento.Applicazione res)
        {
            try
            {
                res = getExt(estensione, res);
            }
            catch (Exception e)
            {
                logger.Error("errore in GetExt - errore: " + e.Message);
            }

        }
        //modifica
public List<AnteprimaPdf> getPdfPreviews(string versionId, string docNumber)
        {
            List<AnteprimaPdf> retVal = null;

            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_PDF_PREVIEW");
            q.setParam("versionId", versionId);
            q.setParam("docNumber", docNumber);

            string queryString = q.getSQL();
            logger.Debug(queryString);
            //luluciani alcune volte il dato non torna per il problema della executeScalar
            //ExecuteScalar(out impronta, queryString);		
            using (IDataReader rtn = ExecuteReader(queryString))
            {
                if (rtn != null && rtn.FieldCount > 0)
                {
                    retVal = new List<AnteprimaPdf>();
                    while (rtn.Read())
                    {
                        AnteprimaPdf prevw = new AnteprimaPdf
                        {
                            docNumber = rtn["DOC_NUMBER"].ToString(),
                            versionId = rtn["VERSION_ID"].ToString(),
                            pathFile = rtn["PATH"].ToString(),
                            totalPageNumber = Convert.ToInt32(rtn["TOTAL_PAGES"]),
                            previewPageNamber = Convert.ToInt32(rtn["PAGE_TO"].ToString()),
                            previewPageFrom = Convert.ToInt32(rtn["PAGE_FROM"].ToString()),
                            hashFile = rtn["FILE_HASH"].ToString()
                        };
                        retVal.Add(prevw);
                    }
                }
            }

            return retVal;
        }

        public bool insPdfPreviews(AnteprimaPdf fda)
        {
            try
            {
                DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("I_PDF_PREVIEW");
                
                q.setParam("DOC_NUMBER", "'" + fda.docNumber + "'");
                q.setParam("VERSION_ID", "'" + fda.versionId + "'");
                q.setParam("TOTAL_PAGES", fda.totalPageNumber.ToString());
                q.setParam("PAGE_TO", fda.previewPageNamber.ToString());
                q.setParam("PAGE_FROM", fda.previewPageFrom.ToString());
                q.setParam("FILE_HASH", "'" + fda.hashFile + "'");
                q.setParam("PATH", "'" + fda.pathFile + "'");

                logger.Debug("insPdfPreviews-> query: " + q.getSQL());
                return ExecuteNonQuery(q.getSQL());
            }
            catch (Exception e)
            {
                logger.Error("errore in insPdfPreviews: " + e.Message);
                return false;
            }
        }

        #endregion
        public string InsertApp(int sysId, string estensione)
        {
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("I_Apps");
            q.setParam("param1", sysId + ",'GEN_" + estensione + "','GEN_" + estensione + "',2,'" + estensione + "'");
            string queryString = q.getSQL();
            return queryString;
        }

        //modifica
        #region insert apps
        public bool InsertApp(string estensione)
        {
            try
            {
                DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("I_APPS");
                if (dbType.ToUpper().Equals("ORACLE"))
                {
                    q.setParam("system_id", DocsPaDbManagement.Functions.Functions.GetSystemIdColName());
                    q.setParam("system_id_value", DocsPaDbManagement.Functions.Functions.GetSystemIdNextVal("APPS"));
                }
                q.setParam("application", "'GEN_" + estensione + "'");
                q.setParam("description", "'GEN_" + estensione + "'");
                q.setParam("filing_scheme", "2");
                q.setParam("default_extension", "'" + estensione + "'");
                logger.Debug("InsertApp-> query: " + q.getSQL());
                return ExecuteNonQuery(q.getSQL());
            }
            catch (Exception e)
            {
                logger.Error("errore in InsertApps: " + e.Message);
                return false;
            }
        }


        public bool InsertAppNonGenerica(string estensione, string mime_type)
        {
            try
            {
                DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("I_Apps_No_Gen");
                if (dbType.ToUpper().Equals("ORACLE"))
                {
                    q.setParam("system_id", DocsPaDbManagement.Functions.Functions.GetSystemIdColName());
                    q.setParam("system_id_value", DocsPaDbManagement.Functions.Functions.GetSystemIdNextVal("APPS"));
                }
                q.setParam("application", "'" + estensione + "'");
                q.setParam("description", "'" + estensione + "'");
                q.setParam("filing_scheme", "2");
                q.setParam("default_extension", "'" + estensione + "'");
                q.setParam("mime_type", "'" + mime_type + "'");
                logger.Debug("InsertApp-> query: " + q.getSQL());

                using (DBProvider dbProvider = new DBProvider())
                {
                    return dbProvider.ExecuteNonQuery(q.getSQL());
                }
            }
            catch (Exception e)
            {
                logger.Error("errore in InsertApps: " + e.Message);
                return false;
            }
        }
        //fine modifica

        #endregion

        #region InfoDocManager
        public string GetQueryProtocollo(string idGruppo, string idPeople, DocsPaVO.filtri.FiltroRicerca[][] objQueryList, string queryWhere, string queryFrom, string queryOrd)
        {
            string columnQuery = "A.SYSTEM_ID, A.DOCNUMBER, A.DTA_ANNULLA, A.VAR_PROF_OGGETTO AS VAR_DESC_OGGETTO, " +
                "A.ID_REGISTRO, A.CHA_TIPO_PROTO, A.CHA_EVIDENZA,A.NUM_ANNO_PROTO, ID_DOCUMENTO_PRINCIPALE, " +
                DocsPaDbManagement.Functions.Functions.ToChar("A.CREATION_TIME", false) + " AS CREATION_DATE, " +
                "A.NUM_PROTO, A.VAR_SEGNATURA," +
                DocsPaDbManagement.Functions.Functions.ToChar("A.DTA_PROTO", false) + " AS DTA_PROTO, A.CHA_IMG ";

            if (dbType.ToUpper().Equals("SQL"))
            {
                if (!string.IsNullOrEmpty(tipo_contatore))
                {
                    columnQuery += " , " + getUserDB() + ".GetContatoreDoc(a.system_id, '" + tipo_contatore + "') as CONTATORE," + getUserDB() + ".getContatoreDocOrdinamento(a.system_id,'" + tipo_contatore + "') as contatore_ordinamento ";
                }

            }


            String queryString = GetQueryProtocollo(idGruppo, idPeople, objQueryList, columnQuery, queryFrom, queryWhere, queryOrd);

            logger.Debug("GetQueryProtocollo > queryString = " + queryString);
            return queryString;
        }

        public string GetQueryProtocolloExport(string idGruppo, string idPeople, DocsPaVO.filtri.FiltroRicerca[][] objQueryList, string queryWhere, string queryFrom, string queryOrd, bool mittDest_indirizzo)
        {
            string order = String.Empty;
            string userDb = string.Empty;
            string dbType = System.Configuration.ConfigurationManager.AppSettings["DBType"];
            if (dbType.ToUpper() == "SQL")
                userDb = DocsPaDbManagement.Functions.Functions.GetDbUserSession();
            string columnQuery = "A.SYSTEM_ID,";
            columnQuery += "A.DOCNUMBER,";
            columnQuery += "A.num_proto as NUM_PROTOCOLLO,";
            columnQuery += DocsPaDbManagement.Functions.Functions.ToChar("A.dta_proto", false) + " as DATA_PROTOCOLLO,";
            columnQuery += "A.cha_tipo_proto as CHA_TIPO_DOC,";
            columnQuery += DocsPaDbManagement.Functions.Functions.ToChar("A.dta_annulla", false) + " as DATA_ANNULLAMENTO, A.CHA_IMG as IMMAGINE,";
            columnQuery += "A.var_prof_oggetto as OGGETTO,";
            columnQuery += "A.ID_TIPO_ATTO,";
            //columnQuery += "A.ID_AMM,";
            columnQuery += "VAR_NOTE_CESTINO,";

            if (dbType.ToUpper() == "SQL")
            {
                if (!mittDest_indirizzo)
                    columnQuery += userDb + ".corrcat(A.system_id, A.cha_tipo_proto) as MITT_DEST,";
                else
                    columnQuery += userDb + ".corrcat_address(A.system_id, A.cha_tipo_proto) as MITT_DEST,";
                columnQuery += userDb + ".classcat(A.system_id) as COD_FASCICOLI,";
                columnQuery += "ISNULL(A.DTA_PROTO,A.CREATION_TIME) AS DATA, ";
                columnQuery += DocsPaDbManagement.Functions.Functions.GetDbUserSession() + ".getInConservazione(A.system_id, null, 'D', @idPeople@, @idGruppo@) as IN_CONSERVAZIONE, ";
            }
            else
            {
                if (!mittDest_indirizzo)
                    columnQuery += "corrcat(A.system_id, A.cha_tipo_proto) as MITT_DEST,";
                else
                    columnQuery += "corrcat_address(A.system_id, A.cha_tipo_proto) as MITT_DEST,";
                columnQuery += "classcat(A.system_id) as COD_FASCICOLI,";
                columnQuery += "nvl(A.DTA_PROTO,A.CREATION_TIME) as DATA, ";
                columnQuery += DocsPaDbManagement.Functions.Functions.GetDbUserSession() + "getInConservazione(A.system_id, null, 'D', @idPeople@, @idGruppo@) as IN_CONSERVAZIONE, ";
            }
            columnQuery += "A.ID_REGISTRO,";
            columnQuery += "A.NUM_ANNO_PROTO,";
            columnQuery += "A.NUM_PROTO,";
            columnQuery += DocsPaDbManagement.Functions.Functions.ToChar("A.CREATION_DATE", false) + " as DATA_CREAZIONE";
            //columnQuery += DocsPaDbManagement.Functions.Functions.GetDbUserSession() + ".getInConservazione(A.system_id, null, 'D', @idPeople@, @idGruppo@) as IN_CONSERVAZIONE";

            DocsPaUtils.Query q;

            if (idGruppo != null && idPeople != null)
            {
                //Pezza Arlecchino per Milano
                //string nomeQuery = do_switchQuery(objQueryList[0]);
                //if (nomeQuery.Equals(""))
                //{
                bool no_security = false;
                for (int i = 0; i < objQueryList.Length; i++)
                {
                    for (int j = 0; j < objQueryList[i].Length; j++)
                    {
                        DocsPaVO.filtri.FiltroRicerca f = objQueryList[i][j];
                        if (f.argomento.Equals("REG_NO_SECURITY"))
                        {
                            no_security = true;
                            break;
                        }
                    }
                }

                if (no_security)
                {
                    queryWhere = queryWhere.Trim();
                    queryWhere = " " + queryWhere.Substring(3);
                    q = DocsPaUtils.InitQuery.getInstance().getQuery("S_J_PROFILE__SECURITY__OGGETTARIO_NO_SECURITY");
                }
                else
                {
                    q = DocsPaUtils.InitQuery.getInstance().getQuery("S_J_PROFILE__SECURITY__OGGETTARIO2");
                }


                //}
                //else
                //{
                //    q = DocsPaUtils.InitQuery.getInstance().getQuery(nomeQuery);
                //}
                //Fine pezza Arlecchino per Milano

                q.setParam("param1", columnQuery);
                q.setParam("param2", queryFrom);
                q.setParam("idPeople", idPeople);
                q.setParam("idGruppo", idGruppo);
                q.setParam("param3", queryWhere);

                string idAmm = "0";
                if (!string.IsNullOrEmpty(idPeople))
                {
                    DocsPaDB.Query_DocsPAWS.Utenti u = new Utenti();
                    idAmm = u.GetIdAmm(idPeople);
                }
                string idRuoloPubblico = DocsPaUtils.Configuration.InitConfigurationKeys.GetValue(idAmm, "ENABLE_FASCICOLO_PUBBLICO");
                q.setParam("idRuoloPubblico", !string.IsNullOrEmpty(idRuoloPubblico) ? idRuoloPubblico : "0");

                // q.setParam("param3", "C.ACCESSRIGHTS >= 0 " + "AND (C.PERSONORGROUP=" + idGruppo + " OR C.PERSONORGROUP=" + idPeople + ")" + queryWhere);
                bool checkOrder = objQueryList[0].Where(e => e.argomento == "ORDER_FILTER").Count() > 0;
                if (dbType.ToUpper().Equals("SQL"))
                {
                    q.setParam("dbUser", userDb);
                    if (checkOrder)
                        order = "A.NUM_PROTO asc,";
                    order += "A.DATA DESC, A.SYSTEM_ID DESC";
                }
                else
                {
                    if (checkOrder)
                        order = "A.NUM_PROTO asc,";
                    order += "nvl(A.DTA_PROTO,A.CREATION_TIME) DESC";
                }
                //q.setParam("param4", queryOrd);
                q.setParam("param4", order);

            }
            else
            {
                q = DocsPaUtils.InitQuery.getInstance().getQuery("S_J_PROFILE__DPA_OGGETTARIO4");
                q.setParam("param1", columnQuery);
                q.setParam("param2", queryFrom);
                q.setParam("param3", queryWhere);
                if (dbType.ToUpper().Equals("SQL"))
                {
                    q.setParam("dbUser", userDb);
                    order = "A.DATA DESC, A.SYSTEM_ID DESC";

                }
                else
                {
                    order = "nvl(A.DTA_PROTO,A.CREATION_TIME) DESC";

                }
                //q.setParam("param4", queryOrd);
                q.setParam("param4", order);
            }

            string queryString = q.getSQL();

            logger.Debug("GetQueryProtocolloExport = " + queryString);

            return queryString;
        }

        public void GetQueryDocumento(string idGruppo, string idPeople, ref string queryWhere, ref string queryFrom, ref string queryColumns)
        {
            queryColumns = "A.SYSTEM_ID, A.DOCNUMBER, A.VAR_PROF_OGGETTO AS VAR_DESC_OGGETTO, " +
                "A.ID_REGISTRO, A.CHA_TIPO_PROTO, A.CHA_EVIDENZA, " +
                DocsPaDbManagement.Functions.Functions.ToChar("A.CREATION_DATE", false) + " AS CREATION_DATE, " +
                "A.NUM_PROTO, A.VAR_SEGNATURA," +
                DocsPaDbManagement.Functions.Functions.ToChar("A.DTA_PROTO", false) + " AS DTA_PROTO, A.CHA_IMG ";
            if (idGruppo != null && idPeople != null)
            {
                queryFrom = "S_J_PROFILE__SECURITY__OGGETTARIO";
                queryWhere = "C.ACCESSRIGHTS >= 0 " +
                    "AND (C.PERSONORGROUP=" + idGruppo + " OR C.PERSONORGROUP=" + idPeople + " )";
            }
            else
            {
                queryFrom = "S_J_PROFILE__DPA_OGGETTARIO3";
                queryWhere = "";
            }
        }

        private string GetQueryCorrispondente(string valore, DocsPaVO.filtri.FiltroRicerca[][] objQueryList)
        {
            string whereStr;
            if (VisStorico(objQueryList))
            {
                whereStr = " IN (";
                whereStr += GetIdOldList(valore);
                whereStr += valore + ")";
            }
            else
            {
                whereStr = "=" + valore;
            }
            return whereStr;
        }

        private bool VisStorico(DocsPaVO.filtri.FiltroRicerca[][] objQueryList)
        {
            for (int i = 0; i < objQueryList.Length; i++)
            {
                for (int j = 0; j < objQueryList[i].Length; j++)
                {
                    DocsPaVO.filtri.FiltroRicerca f = objQueryList[i][j];
                    if (f.argomento.Equals("VIS_STORICO_MITT_DEST"))
                    {
                        return true;
                    }
                }
            }
            return false;
        }

        private string GetIdOldList(string systemId)
        {
            string listId = "";
            bool fine = false;
            do
            {
                string idOld;
                DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_DPACorrGlobali");
                q.setParam("param1", "ID_OLD");
                q.setParam("param2", "SYSTEM_ID=" + systemId);
                string queryString = q.getSQL();
                ExecuteScalar(out idOld, queryString);
                if (idOld.Equals("0"))
                {
                    fine = true;
                }
                else
                {
                    listId += idOld + ",";
                }
            }
            while (!fine);
            return listId;
        }

        private string GetFiltroData(DocsPaVO.filtri.FiltroRicerca f, string filtroData)
        {
            if (f.valore != null && !f.valore.Equals(""))
            {
                if (f.argomento.Equals("DATA_TIPO_NOTIFICA_DA"))
                    filtroData += " and f.VAR_GIORNO_ORA>=" + DocsPaDbManagement.Functions.Functions.ToDate(f.valore + " 00:00:00");

                if (f.argomento.Equals("DATA_TIPO_NOTIFICA_A"))
                    filtroData += " and f.VAR_GIORNO_ORA<=" + DocsPaDbManagement.Functions.Functions.ToDate(f.valore + " 23:59:59");

                if (f.argomento.Equals("DATA_TIPO_NOTIFICA_TODAY"))
                    filtroData += " and f.VAR_GIORNO_ORA>=" + DocsPaDbManagement.Functions.Functions.ToDate(f.valore + " 00:00:00")
                                   + " AND f.VAR_GIORNO_ORA<=" + DocsPaDbManagement.Functions.Functions.ToDate(f.valore + " 23:59:59");

                if (f.argomento.Equals("DATA_TIPO_NOTIFICA_DA_PITRE"))
                    filtroData += " and f.VAR_GIORNO_ORA>=" + DocsPaDbManagement.Functions.Functions.ToDate(f.valore + " 00:00:00");

                if (f.argomento.Equals("DATA_TIPO_NOTIFICA_A_PITRE"))
                    filtroData += " and f.VAR_GIORNO_ORA<=" + DocsPaDbManagement.Functions.Functions.ToDate(f.valore + " 23:59:59");

                if (f.argomento.Equals("DATA_TIPO_NOTIFICA_TODAY_PITRE"))
                    filtroData += " and f.VAR_GIORNO_ORA>=" + DocsPaDbManagement.Functions.Functions.ToDate(f.valore + " 00:00:00")
                                   + " AND f.VAR_GIORNO_ORA<=" + DocsPaDbManagement.Functions.Functions.ToDate(f.valore + " 23:59:59");
            }
            return filtroData;
        }

        private string GetQueryCondProtocollo(string idGruppo, string idPeople, DocsPaVO.filtri.FiltroRicerca[][] objQueryList, ref string queryFrom, ref string orderCondition, bool daProto)
        {
            string returnVal = "";
            string queryWhere = "";
            string andStr = string.Empty;
            string filtroDataPec = string.Empty;
            string filtroDataPitre = string.Empty;
            int numAndStr = 0;
            string tipo = string.Empty;
            
            ArrayList listaOR = new ArrayList();

            for (int i = 0; i < objQueryList.Length; i++)
            {
                for (int j = 0; j < objQueryList[i].Length; j++)
                {
                    DocsPaVO.filtri.FiltroRicerca f = objQueryList[i][j];
                    tipo = GetQueryCondTipo(tipo, f);

                    if (f.argomento.Equals("DATA_TIPO_NOTIFICA_DA") || f.argomento.Equals("DATA_TIPO_NOTIFICA_A") || f.argomento.Equals("DATA_TIPO_NOTIFICA_TODAY"))
                        filtroDataPec = GetFiltroData(f, filtroDataPec);
                    if (f.argomento.Equals("DATA_TIPO_NOTIFICA_DA_PITRE") || f.argomento.Equals("DATA_TIPO_NOTIFICA_A_PITRE") || f.argomento.Equals("DATA_TIPO_NOTIFICA_TODAY_PITRE"))
                        filtroDataPitre = GetFiltroData(f, filtroDataPitre);
                }
            }

            //aggiunto codice per il controllo del filtro tipo (se ancora utilizzato)
            if (tipo.Equals(string.Empty))
                tipo = GetFiltroTipo(tipo, objQueryList);

            //if (tipo.Equals("") && !daProto)
            //    throw new Exception("Selezionare almeno un tipo di documentazione");
            if (tipo.Length != 0)
                tipo = tipo.Substring(0, tipo.Length - 1);
            bool searchAllegato = false;
            string queryAllPEC = string.Empty;
            string filtroAllegato = GetFiltroDocumentoAllegato(objQueryList[0], out searchAllegato, out queryAllPEC);

            //  string filtroAllegato = GetFiltroDocumentoAllegato(objQueryList[0]);

            // daProto --> true = ricerca predisposti
            // if(filtroAllegato != string.empty) --> ricerca allegati
            // Grigi --> true = ricerca grigi
            // if(!tipo.Equals("")) --> ricerca protocollati

            string dbuser = DocsPaDbManagement.Functions.Functions.GetDbUserSession();
            if (dbuser != null && dbuser.Length > 0)
                dbuser += ".";

            andStr += "(";
            bool newOr = false;
            if (daProto)
            {
                andStr += " ( cha_tipo_proto in ('A','P','I') AND CHA_DA_PROTO='1' AND ID_DOCUMENTO_PRINCIPALE IS NULL ) ";
                newOr = true;
            }
            if (searchAllegato)
            {
                if (newOr)
                {
                    andStr += " OR ";
                    newOr = false;
                }
                andStr += " ( cha_tipo_proto in ('G') AND CHA_DA_PROTO='0' AND ID_DOCUMENTO_PRINCIPALE IS NOT NULL" + queryAllPEC + " ) ";

                newOr = true;
            }
            if (Grigi)
            {
                if (newOr)
                {
                    andStr += " OR ";
                    newOr = false;
                }
                andStr += " ( cha_tipo_proto in ('G') AND CHA_DA_PROTO='0' AND ID_DOCUMENTO_PRINCIPALE IS NULL ) ";
                newOr = true;
            }
            if (!tipo.Equals("") && (tipo.IndexOf("P") > 0 || tipo.IndexOf("A") > 0 || tipo.IndexOf("I") > 0))
            {
                if (tipo.IndexOf("P") > 0)
                {
                    if (newOr)
                    {
                        andStr += " OR ";
                        newOr = false;
                    }
                    andStr += " ( cha_tipo_proto in ('P') AND CHA_DA_PROTO='0' AND ID_DOCUMENTO_PRINCIPALE IS NULL ) ";
                    newOr = true;
                }
                if (tipo.IndexOf("A") > 0)
                {
                    if (newOr)
                    {
                        andStr += " OR ";
                        newOr = false;
                    }
                    andStr += " ( cha_tipo_proto in ('A') AND CHA_DA_PROTO='0' AND ID_DOCUMENTO_PRINCIPALE IS NULL ) ";
                    newOr = true;
                }
                if (tipo.IndexOf("I") > 0)
                {
                    if (newOr)
                    {
                        andStr += " OR ";
                        newOr = false;
                    }
                    andStr += " ( cha_tipo_proto in ('I') AND CHA_DA_PROTO='0' AND ID_DOCUMENTO_PRINCIPALE IS NULL ) ";
                    newOr = true;
                }
            }
            if (andStr.Length > 1)
                andStr += ") ";

            for (int i = 0; i < objQueryList.Length; i++)
            {
                string numAll = "0";
                //andStr += " (";
                numAndStr = 0;
                for (int j = 0; j < objQueryList[i].Length; j++)
                {
                    DocsPaVO.filtri.FiltroRicerca f = objQueryList[i][j];
                    //queryWhere += GetQueryCondComuni(queryWhere, f, ref andStr, ref numAndStr, ref queryFrom);
                    returnVal = GetQueryCondComuniDocumenti(idGruppo, idPeople, queryWhere, f, "", ref andStr, ref numAndStr, ref queryFrom, daProto, ref orderCondition);
                    if (queryWhere != returnVal)
                    {
                        queryWhere = returnVal;
                    }

                    if (f.valore != null && !f.valore.Equals(""))
                    {
                        // i confronti vengono fatti sui valori presi da
                        // DocsPaVO.filtri.ricercaArgomenti inerenti documenti protocollati
                        switch (f.argomento)
                        {
                            case "DATA_PROT_IL":
                                // if (numAndStr > 0)
                                andStr += " AND ";
                                numAndStr += 1;
                                //andStr += "A.DTA_PROTO=" + DocsPaDbManagement.Functions.Functions.ToDate(f.valore,false);				
                                andStr += "A.DTA_PROTO>=" + DocsPaDbManagement.Functions.Functions.ToDateBetween(f.valore, true) + " AND A.DTA_PROTO<= " + DocsPaDbManagement.Functions.Functions.ToDateBetween(f.valore, false);
                                break;
                            case "DATA_PROT_PRECEDENTE_IL":
                                // if (numAndStr > 0)
                                andStr += " AND ";
                                numAndStr += 1;
                                //andStr += "A.DTA_PROTO<=" + DocsPaDbManagement.Functions.Functions.ToDate(f.valore,false);				
                                andStr += "A.DTA_PROTO<" + DocsPaDbManagement.Functions.Functions.ToDateBetween(f.valore, false);
                                break;
                            case "DATA_PROT_SUCCESSIVA_AL":
                                // if (numAndStr > 0)
                                andStr += " AND ";
                                numAndStr += 1;
                                //andStr += "A.DTA_PROTO>=" + DocsPaDbManagement.Functions.Functions.ToDate(f.valore,false);		
                                andStr += "A.DTA_PROTO>=" + DocsPaDbManagement.Functions.Functions.ToDateBetween(f.valore, true);
                                break;
                            case "DATA_PROT_SC":
                                // data protocollo nella settimana corrente
                                andStr += " AND ";
                                numAndStr += 1;
                                if (!dbType.ToUpper().Equals("SQL"))
                                    andStr += "A.DTA_PROTO>=(select to_date(to_char(sysdate+ (1-to_char(sysdate,'D')))) startdayofweek from dual) AND A.DTA_PROTO<(select to_date(to_char(sysdate+ (8-to_char(sysdate,'D')))) enddayofweek from dual) ";
                                else
                                    andStr += "A.DTA_PROTO>=(select DATEADD(DAY,-DATEPART(WEEKDAY,(DATEADD(DAY,7-DATEPART(WEEKDAY,GETDATE()),GETDATE())))+(7-DATEPART(WEEKDAY,GETDATE()))+2 ,GETDATE())) AND A.DTA_PROTO<=(select DATEADD(DAY , 8-DATEPART(WEEKDAY,GETDATE()),GETDATE())) ";
                                break;
                            case "DATA_PROT_MC":
                                // data protocollo nel mese corrente
                                andStr += " AND ";
                                numAndStr += 1;
                                if (!dbType.ToUpper().Equals("SQL"))
                                    andStr += " A.DTA_PROTO>= Trunc(Sysdate,'MM')    AND A.DTA_PROTO<(Sysdate+1 )  ";

                                else
                                    andStr += "A.DTA_PROTO>=(SELECT DATEADD(dd,-(DAY(getdate())-1),getdate())) AND A.DTA_PROTO<=(SELECT DATEADD(dd,-(DAY(DATEADD(mm,1,getdate()))),DATEADD(mm,1,getdate()))) ";
                                break;
                            case "DATA_PROT_TODAY":
                                andStr += " AND ";
                                numAndStr += 1;
                                if (!dbType.ToUpper().Equals("SQL"))
                                    //andStr += "A.DTA_PROTO, 'DD/MM/YYYY') =(select to_char(sysdate, 'DD/MM/YYYY') from dual)";
                                    andStr += "A.DTA_PROTO between trunc(sysdate ,'DD') and sysdate ";
                                else
                                    //andStr += "A.DTA_PROTO>=(SELECT getdate()) AND A.DTA_PROTO<=(SELECT getdate()) ";
                                    andStr += "DATEDIFF(DD, A.DTA_PROTO, GETDATE()) = 0 ";
                                break;
                            case "ID_MITT_DEST":
                                queryWhere += "AND F.ID_PROFILE=A.SYSTEM_ID ";

                                if (queryFrom.IndexOf(" ,DPA_DOC_ARRIVO_PAR F") < 0)
                                    queryFrom += " ,DPA_DOC_ARRIVO_PAR F";

                                // if (numAndStr > 0)
                                andStr += " AND ";
                                numAndStr += 1;
                                andStr += "F.ID_MITT_DEST" + GetQueryCorrispondente(f.valore, objQueryList);
                                break;
                            case "COD_MITT_DEST":
                                // if (numAndStr++ > 0)
                                andStr += " AND ";

                                string codiceRubrica = DocsPaUtils.Functions.Functions.ReplaceApexes(f.valore).ToUpper();

                                andStr += " A.SYSTEM_ID IN (SELECT F.ID_PROFILE FROM DPA_DOC_ARRIVO_PAR F ,DPA_CORR_GLOBALI G  where F.ID_PROFILE=a.system_id and  G.SYSTEM_ID=F.ID_MITT_DEST AND (UPPER(G.VAR_COD_RUBRICA) = '" + codiceRubrica + "'";

                                if (RicercaPerMittentiDestinatariStoricizzati(objQueryList[i]))
                                {
                                    // Ricerca i documenti con i mittenti / destinatari storicizzati
                                    if (!dbType.ToUpper().Equals("SQL"))
                                        andStr += " OR UPPER(G.VAR_COD_RUBRICA) = ('" + codiceRubrica + "_' || G.SYSTEM_ID))";
                                    else
                                        andStr += " OR UPPER(G.VAR_COD_RUBRICA) = ('" + codiceRubrica + "_' + Convert(varchar(100),G.SYSTEM_ID)))";
                                }

                                andStr += ")";

                                break;
                            case "MITT_DEST":
                                //	queryWhere += "AND F.ID_PROFILE=A.SYSTEM_ID AND G.SYSTEM_ID=F.ID_MITT_DEST ";
                                //if(queryFrom.IndexOf(" ,DPA_DOC_ARRIVO_PAR F ,DPA_CORR_GLOBALI G ") < 0) queryFrom += " ,DPA_DOC_ARRIVO_PAR F ,DPA_CORR_GLOBALI G ";
                                // if (numAndStr++ > 0)
                                andStr += " AND ";

                                if (Cfg_USE_TEXT_INDEX == "0")
                                    andStr += " A.SYSTEM_ID IN (SELECT F.ID_PROFILE FROM DPA_DOC_ARRIVO_PAR F ,DPA_CORR_GLOBALI G  where F.ID_PROFILE=a.system_id and  G.SYSTEM_ID=F.ID_MITT_DEST AND UPPER(G.VAR_DESC_CORR) LIKE '%" + DocsPaUtils.Functions.Functions.ReplaceApexes(f.valore).ToUpper() + "%') ";
                                else if (Cfg_USE_TEXT_INDEX == "1")
                                {
                                    string searchMittDest = " AND a.SYSTEM_id in ( \n " +
                                                            " select system_id from table(fulltext_onvar_desc_corr ( \n " +
                                                            "'" + DocsPaUtils.Functions.Functions.ReplaceApexes(f.valore).ToUpper() + "'))) \n";
                                    andStr += " A.SYSTEM_ID IN (SELECT F.ID_PROFILE FROM DPA_DOC_ARRIVO_PAR F ,DPA_CORR_GLOBALI G  where F.ID_PROFILE=a.system_id and  G.SYSTEM_ID=F.ID_MITT_DEST " + searchMittDest + ") ";
                                }
                                else if (Cfg_USE_TEXT_INDEX == "2")
                                {
                                    string value = DocsPaUtils.Functions.Functions.ReplaceApexes(f.valore).ToUpper();
                                    string valueA = value;
                                    if (valueA.Contains("&&"))
                                        valueA = valueA.Replace("&&", "");
                                    bool casoA = false;
                                    if (value.Substring(0, value.Length - 1).Contains("%") && !value.Substring(0, value.Length - 1).Contains("%&&"))
                                        casoA = true;

                                    if (value.Contains("&&"))
                                    {
                                        string result = string.Empty;
                                        foreach (string filter in new Regex("&&").Split(value))
                                            if (!string.IsNullOrEmpty(filter))
                                                result += filter + " AND ";
                                        value = result.Substring(0, result.Length - 5);
                                    }
                                    if (value.Contains("%") && value.IndexOf("%") != value.Length - 1)
                                    {
                                        string result = string.Empty;
                                        foreach (string filter in new Regex("%").Split(value))
                                            if (!string.IsNullOrEmpty(filter))
                                                result = filter + "% AND ";
                                        value = result.Substring(0, result.Length - 5);
                                    }

                                    if (value.ToUpper().Contains(" AND  AND "))
                                        value = value.ToUpper().Replace(" AND  AND ", " AND ");
                                    andStr += " A.SYSTEM_ID IN (SELECT F.ID_PROFILE FROM DPA_DOC_ARRIVO_PAR F ,DPA_CORR_GLOBALI G  where F.ID_PROFILE=a.system_id and  G.SYSTEM_ID=F.ID_MITT_DEST AND " + DocsPaDbManagement.Functions.Functions.GetContainsTextQuery("G.VAR_DESC_CORR", value);
                                    if (casoA)
                                        andStr += " and upper(G.VAR_DESC_CORR) like upper('%" + valueA + "%')";
                                    andStr += ")";
                                }
                                break;
                            case "NUM_PROTOCOLLO":
                                // if (numAndStr++ > 0)
                                andStr += " AND ";
                                andStr += "A.NUM_PROTO=" + f.valore;
                                break;
                            case "NUM_PROTOCOLLO_AL":
                                // if (numAndStr++ > 0)
                                andStr += " AND ";
                                andStr += "A.NUM_PROTO<=" + f.valore;
                                break;
                            case "NUM_PROTOCOLLO_DAL":
                                // if (numAndStr > 0)
                                andStr += " AND ";
                                numAndStr += 1;
                                andStr += "A.NUM_PROTO>=" + f.valore;
                                break;
                            case "ID_UO_REF":
                                // if (numAndStr > 0)
                                andStr += " AND ";
                                numAndStr += 1;
                                andStr += "A.ID_UO_REF= " + f.valore; ;
                                break;

                            case "ID_MITTENTE_INTERMEDIO":
                                queryWhere += "AND F.ID_PROFILE=A.SYSTEM_ID ";

                                if (queryFrom.IndexOf(" ,DPA_DOC_ARRIVO_PAR F") < 0)
                                    queryFrom += " ,DPA_DOC_ARRIVO_PAR F";

                                // if (numAndStr > 0)
                                andStr += " AND ";
                                numAndStr += 1;

                                andStr += "F.CHA_TIPO_MITT_DEST='I' AND F.ID_MITT_DEST" + GetQueryCorrispondente(f.valore, objQueryList);
                                break;
                            case "MITTENTE_INTERMEDIO":
                                // if (numAndStr > 0)
                                andStr += " AND ";
                                numAndStr += 1;
                                if (queryFrom.IndexOf(" ,DPA_DOC_ARRIVO_PAR F ,DPA_CORR_GLOBALI G ") < 0) queryFrom += " ,DPA_DOC_ARRIVO_PAR F ,DPA_CORR_GLOBALI G ";
                                queryWhere += " AND F.ID_PROFILE=A.SYSTEM_ID AND G.SYSTEM_ID=F.ID_MITT_DEST ";
                                andStr += "UPPER(G.VAR_DESC_CORR) LIKE '%" + DocsPaUtils.Functions.Functions.ReplaceApexes(f.valore).ToUpper() + "%'";
                                break;
                            case "PROTOCOLLO_MITTENTE":
                                // if (numAndStr > 0)
                                andStr += " AND ";
                                //numAndStr += 1;
                                //andStr += "A.VAR_PROTO_IN LIKE '%" + DocsPaUtils.Functions.Functions.ReplaceApexes(f.valore).ToUpper() + "%'";

                                if (Cfg_USE_TEXT_INDEX == "0")
                                    andStr += "A.VAR_PROTO_IN LIKE '%" + DocsPaUtils.Functions.Functions.ReplaceApexes(f.valore).ToUpper() + "%'";
                                else if (Cfg_USE_TEXT_INDEX == "1")
                                {
                                    //string searchMittDest = " AND A.VAR_PROTO_IN in ( \n " +
                                    //                        " select system_id from table(fulltext_onvar_desc_corr ( \n " +
                                    //                        "'" + DocsPaUtils.Functions.Functions.ReplaceApexes(f.valore).ToUpper() + "'))) \n";
                                    //andStr += " A.SYSTEM_ID IN (SELECT F.ID_PROFILE FROM DPA_DOC_ARRIVO_PAR F ,DPA_CORR_GLOBALI G  where F.ID_PROFILE=a.system_id and  G.SYSTEM_ID=F.ID_MITT_DEST " + searchMittDest + ") ";
                                }
                                else if (Cfg_USE_TEXT_INDEX == "2")
                                {
                                    string value = DocsPaUtils.Functions.Functions.ReplaceApexes(f.valore).ToUpper();
                                    string valueA = value;
                                    if (valueA.Contains("&&"))
                                        valueA = valueA.Replace("&&", "");
                                    bool casoA = false;
                                    if (value.Substring(0, value.Length - 1).Contains("%") && !value.Substring(0, value.Length - 1).Contains("%&&"))
                                        casoA = true;

                                    if (value.Contains("&&"))
                                    {
                                        string result = string.Empty;
                                        foreach (string filter in new Regex("&&").Split(value))
                                            if (!string.IsNullOrEmpty(filter))
                                                result += filter + " AND ";
                                        value = result.Substring(0, result.Length - 5);
                                    }
                                    if (value.Contains("%") && value.IndexOf("%") != value.Length - 1)
                                    {
                                        string result = string.Empty;
                                        foreach (string filter in new Regex("%").Split(value))
                                            if (!string.IsNullOrEmpty(filter))
                                                result = filter + "% AND ";
                                        value = result.Substring(0, result.Length - 5);
                                    }

                                    if (value.ToUpper().Contains(" AND  AND "))
                                        value = value.ToUpper().Replace(" AND  AND ", " AND ");
                                    andStr += DocsPaDbManagement.Functions.Functions.GetContainsTextQuery("A.VAR_PROTO_IN", value);
                                    if (casoA)
                                        andStr += " upper(A.VAR_PROTO_IN) LIKE '%" + DocsPaUtils.Functions.Functions.ReplaceApexes(valueA).ToUpper() + "%'";
                                }
                                break;
                            case "DATA_PROT_MITTENTE_IL":
                                // if (numAndStr++ > 0)
                                andStr += " AND ";
                                andStr += "A.DTA_PROTO_IN=" + DocsPaDbManagement.Functions.Functions.ToDate(f.valore);
                                break;
                            case "DATA_PROT_MITTENTE_PRECEDENTE_IL":
                                // if (numAndStr > 0)
                                andStr += " AND ";
                                numAndStr += 1;
                                andStr += "A.DTA_PROTO_IN<" + DocsPaDbManagement.Functions.Functions.ToDate(f.valore + " 23:59:59");
                                break;
                            case "DATA_PROT_MITTENTE_SUCCESSIVA_AL":
                                // if (numAndStr++ > 0)
                                andStr += " AND ";
                                andStr += "A.DTA_PROTO_IN>=" + DocsPaDbManagement.Functions.Functions.ToDate(f.valore);
                                break;
                            case "DATA_PROT_MITTENTE_SC":
                                // data protocollo nella settimana corrente
                                andStr += " AND ";
                                numAndStr += 1;
                                if (!dbType.ToUpper().Equals("SQL"))
                                    andStr += "A.DTA_PROTO_IN>=(select to_date(to_char(sysdate+ (1-to_char(sysdate,'D')))) startdayofweek from dual) AND A.DTA_PROTO_IN<(select to_date(to_char(sysdate+ (8-to_char(sysdate,'D')))) enddayofweek from dual) ";
                                else
                                    andStr += "A.DTA_PROTO_IN>=(select DATEADD(DAY,-DATEPART(WEEKDAY,(DATEADD(DAY,7-DATEPART(WEEKDAY,GETDATE()),GETDATE())))+(7-DATEPART(WEEKDAY,GETDATE()))+2 ,GETDATE())) AND A.DTA_PROTO_IN<=(select DATEADD(DAY , 8-DATEPART(WEEKDAY,GETDATE()),GETDATE())) ";
                                break;
                            case "DATA_PROT_MITTENTE_MC":
                                // data protocollo nel mese corrente
                                andStr += " AND ";
                                numAndStr += 1;
                                if (!dbType.ToUpper().Equals("SQL"))
                                    andStr += " A.DTA_PROTO_IN>= Trunc(Sysdate,'MM')    AND A.DTA_PROTO_IN<(Sysdate+1 )  ";


                                else
                                    andStr += "A.DTA_PROTO_IN>=(SELECT DATEADD(dd,-(DAY(getdate())-1),getdate())) AND A.DTA_PROTO_IN<=(SELECT DATEADD(dd,-(DAY(DATEADD(mm,1,getdate()))),DATEADD(mm,1,getdate()))) ";
                                break;
                            case "DATA_PROT_MITTENTE_TODAY":
                                andStr += " AND ";
                                numAndStr += 1;
                                if (!dbType.ToUpper().Equals("SQL"))
                                    andStr += "to_char(A.DTA_PROTO_IN, 'DD/MM/YYYY') =(select to_char(sysdate, 'DD/MM/YYYY') from dual)";
                                else
                                    //andStr += "A.DTA_PROTO_IN>=(SELECT getdate()) AND A.DTA_PROTO_IN<=(SELECT getdate()) ";
                                    andStr += "DATEDIFF(DD, A.DTA_PROTO_IN, GETDATE()) = 0 ";
                                break;
                            case "DATA_ARRIVO_IL":
                                // if (numAndStr++ > 0)
                                andStr += " AND ";
                                queryWhere += " AND H.DOCNUMBER=A.DOCNUMBER";
                                queryFrom += " , VERSIONS H";
                                andStr += "H.DTA_ARRIVO=" + DocsPaDbManagement.Functions.Functions.ToDate(f.valore);
                                break;
                            case "DATA_ARRIVO_PRECEDENTE_IL":
                                // if (numAndStr > 0)
                                andStr += " AND ";
                                numAndStr += 1;
                                queryWhere += " AND H.DOCNUMBER=A.DOCNUMBER";
                                if (queryFrom.IndexOf("VERSIONS H") < 0) { queryFrom += " , VERSIONS H"; }
                                andStr += "H.DTA_ARRIVO<" + DocsPaDbManagement.Functions.Functions.ToDate(f.valore + " 23:59:59");
                                break;
                            case "DATA_ARRIVO_SUCCESSIVA_AL":
                                // if (numAndStr++ > 0)
                                andStr += " AND ";
                                queryWhere += " AND H.DOCNUMBER=A.DOCNUMBER";
                                if (queryFrom.IndexOf("VERSIONS H") < 0) { queryFrom += " , VERSIONS H"; }
                                andStr += "H.DTA_ARRIVO>=" + DocsPaDbManagement.Functions.Functions.ToDate(f.valore);
                                break;
                            case "DATA_ARRIVO_SC":
                                // data protocollo nella settimana corrente
                                andStr += " AND ";
                                numAndStr += 1;
                                queryWhere += " AND H.DOCNUMBER=A.DOCNUMBER";
                                if (queryFrom.IndexOf("VERSIONS H") < 0) { queryFrom += " , VERSIONS H"; }
                                if (!dbType.ToUpper().Equals("SQL"))
                                    andStr += "H.DTA_ARRIVO>=(select to_date(to_char(sysdate+ (1-to_char(sysdate,'D')))) startdayofweek from dual) AND H.DTA_ARRIVO<(select to_date(to_char(sysdate+ (8-to_char(sysdate,'D')))) enddayofweek from dual) ";
                                else
                                    andStr += "H.DTA_ARRIVO>=(select DATEADD(DAY,-DATEPART(WEEKDAY,(DATEADD(DAY,7-DATEPART(WEEKDAY,GETDATE()),GETDATE())))+(7-DATEPART(WEEKDAY,GETDATE()))+2 ,GETDATE())) AND H.DTA_ARRIVO<=(select DATEADD(DAY , 8-DATEPART(WEEKDAY,GETDATE()),GETDATE())) ";
                                break;
                            case "DATA_ARRIVO_MC":
                                // data protocollo nel mese corrente
                                andStr += " AND ";
                                numAndStr += 1;
                                queryWhere += " AND H.DOCNUMBER=A.DOCNUMBER";
                                if (queryFrom.IndexOf("VERSIONS H") < 0) { queryFrom += " , VERSIONS H"; }
                                if (!dbType.ToUpper().Equals("SQL"))
                                    // andStr += "H.DTA_ARRIVO>=(select to_date(trunc(sysdate,'MM')) as start_date from dual) AND H.DTA_ARRIVO<(select to_date(last_day(sysdate)+1) as DAY from dual) ";
                                    andStr += "  H.DTA_ARRIVO>= Trunc(Sysdate,'MM')    AND H.DTA_ARRIVO<(Sysdate+1 ) ";




                                else
                                    andStr += "H.DTA_ARRIVO>=(SELECT DATEADD(dd,-(DAY(getdate())-1),getdate())) AND H.DTA_ARRIVO<=(SELECT DATEADD(dd,-(DAY(DATEADD(mm,1,getdate()))),DATEADD(mm,1,getdate()))) ";
                                break;
                            case "DATA_ARRIVO_TODAY":
                                andStr += " AND ";
                                numAndStr += 1;
                                queryWhere += " AND H.DOCNUMBER=A.DOCNUMBER";
                                queryFrom += " , VERSIONS H";
                                if (!dbType.ToUpper().Equals("SQL"))
                                    andStr += "to_char(H.DTA_ARRIVO, 'DD/MM/YYYY') =(select to_char(sysdate, 'DD/MM/YYYY') from dual)";
                                else
                                    //andStr += "H.DTA_ARRIVO =(SELECT getdate())";
                                    andStr += "DATEDIFF(DD, H.DTA_ARRIVO, GETDATE()) = 0 ";
                                break;
                            case "NUM_PROTO_EMERGENZA":
                                // if (numAndStr++ > 0)
                                andStr += " AND ";
                                andStr += "A.VAR_PROTO_EME='" + f.valore + "'";
                                break;
                            case "DATA_PROTO_EMERGENZA_IL":
                                // if (numAndStr++ > 0)
                                andStr += " AND ";
                                andStr += "A.DTA_PROTO_EME=" + DocsPaDbManagement.Functions.Functions.ToDate(f.valore);
                                break;
                            case "DATA_PROTO_EMERGENZA_PRECEDENTE_IL":
                                // if (numAndStr > 0)
                                andStr += " AND ";
                                andStr += "A.DTA_PROTO_EME<" + DocsPaDbManagement.Functions.Functions.ToDate(f.valore + " 23:59:59");
                                break;
                            case "DATA_PROTO_EMERGENZA_SUCCESSIVA_AL":
                                // if (numAndStr++ > 0)
                                andStr += " AND ";
                                andStr += "A.DTA_PROTO_EME>=" + DocsPaDbManagement.Functions.Functions.ToDate(f.valore);
                                break;
                            case "DATA_PROT_EMERGENZA_SC":
                                // data protocollo nella settimana corrente
                                andStr += " AND ";
                                numAndStr += 1;
                                if (!dbType.ToUpper().Equals("SQL"))
                                    andStr += "A.DTA_PROTO_EME>=(select to_date(to_char(sysdate+ (1-to_char(sysdate,'D')))) startdayofweek from dual) AND A.DTA_PROTO_EME<(select to_date(to_char(sysdate+ (8-to_char(sysdate,'D')))) enddayofweek from dual) ";
                                else
                                    andStr += "A.DTA_PROTO_EME>=(select DATEADD(DAY,-DATEPART(WEEKDAY,(DATEADD(DAY,7-DATEPART(WEEKDAY,GETDATE()),GETDATE())))+(7-DATEPART(WEEKDAY,GETDATE()))+2 ,GETDATE())) AND A.DTA_PROTO_EME<=(select DATEADD(DAY , 8-DATEPART(WEEKDAY,GETDATE()),GETDATE())) ";
                                break;
                            case "DATA_PROT_EMERGENZA_MC":
                                // data protocollo nel mese corrente
                                andStr += " AND ";
                                numAndStr += 1;
                                if (!dbType.ToUpper().Equals("SQL"))
                                    // andStr += "A.DTA_PROTO_EME>=(select to_date(trunc(sysdate,'MM')) as start_date from dual) AND A.DTA_PROTO_EME<(select to_date(last_day(sysdate)+1) as DAY from dual) ";

                                    andStr += " A.DTA_PROTO_EME>= Trunc(Sysdate,'MM')    AND A.DTA_PROTO_EME<(Sysdate+1 ) ";
                                else
                                    andStr += "A.DTA_PROTO_EME>=(SELECT DATEADD(dd,-(DAY(getdate())-1),getdate())) AND A.DTA_PROTO_EME<=(SELECT DATEADD(dd,-(DAY(DATEADD(mm,1,getdate()))),DATEADD(mm,1,getdate()))) ";
                                break;
                            case "DATA_PROTO_EMERGENZA_TODAY":
                                andStr += " AND ";
                                numAndStr += 1;
                                // andStr += "A.DTA_PROTO_EME=(select sysdate from dual) ";
                                if (!dbType.ToUpper().Equals("SQL"))
                                    andStr += "to_char(A.DTA_PROTO_EME, 'DD/MM/YYYY') =(select to_char(sysdate, 'DD/MM/YYYY') from dual)";
                                else
                                    //andStr += "A.DTA_PROTO_EME =(SELECT getdate())";
                                    andStr += "DATEDIFF(DD, A.DTA_PROTO_EME, GETDATE()) = 0 ";
                                break;
                            //case "DA_PROTOCOLLARE":
                            //    if (numAndStr > 0)
                            //        andStr += " AND ";
                            //    numAndStr += 1;
                            //    andStr += "A.CHA_DA_PROTO='" + f.valore + "'";
                            //    break;
                            case "ID_PARENT":
                                // if (numAndStr > 0)
                                andStr += " AND ";
                                numAndStr += 1;
                                andStr += "A.ID_PARENT=" + f.valore;
                                break;
                            case "ANNULLATO":
                                // if (numAndStr > 0)
                                andStr += " AND ";
                                numAndStr += 1;
                                if (f.valore.Equals("0"))
                                    andStr += " A.DTA_ANNULLA IS NULL";
                                else
                                    andStr += " A.DTA_ANNULLA IS NOT NULL";
                                break;
                            case "SEGNATURA":
                                // if (numAndStr > 0)
                                andStr += " AND ";
                                numAndStr += 1;
                                andStr += "A.VAR_SEGNATURA LIKE '" + DocsPaUtils.Functions.Functions.ReplaceApexes(f.valore).ToUpper() + "%'";
                                break;
                            case "ID_PEOPLE_CREATORE":
                                // if (numAndStr > 0)
                                andStr += " AND ";
                                numAndStr += 1;
                                andStr += "A.AUTHOR = " + f.valore;
                                break;
                            case "DESC_UO_CREATORE":
                                // if (numAndStr > 0)
                                andStr += " AND ";
                                numAndStr += 1;
                                andStr += "A.ID_UO_CREATORE IN (SELECT SYSTEM_ID FROM DPA_CORR_GLOBALI WHERE UPPER(VAR_DESC_CORR) LIKE '%" + f.valore.ToUpper() + "%')";
                                break;

                            case "DESC_RUOLO_CREATORE":
                                // if (numAndStr > 0)
                                andStr += " AND ";
                                numAndStr += 1;
                                andStr += "A.ID_RUOLO_CREATORE IN (SELECT SYSTEM_ID FROM DPA_CORR_GLOBALI WHERE UPPER(VAR_DESC_CORR) LIKE '%" + f.valore.ToUpper() + "%')";
                                break;

                            case "ID_RUOLO_CREATORE":
                                // if (numAndStr > 0)
                                andStr += " AND ";
                                numAndStr += 1;
                                andStr += "A.ID_RUOLO_CREATORE = " + f.valore;
                                break;
                            case "ID_UO_CREATORE":
                                // if (numAndStr > 0)
                                andStr += " AND ";
                                numAndStr += 1;
                                andStr += "A.ID_UO_CREATORE = " + f.valore;
                                break;

                            case "DESC_PEOPLE_CREATORE":
                                // if (numAndStr > 0)
                                andStr += " AND ";
                                numAndStr += 1;
                                andStr += "A.AUTHOR IN (SELECT ID_PEOPLE FROM DPA_CORR_GLOBALI WHERE UPPER(VAR_DESC_CORR) LIKE '%" + f.valore.ToUpper() + "%')";
                                break;

                            case "CONDIZIONE_ORDINAMENTO":
                                orderCondition = "A." + f.valore + " DESC";
                                break;
                            ////arealavoro.. messo inget querycondcomuni
                            //case "DOC_IN_ADL":
                            //    //split dei valori
                            //    string [] valori = f.valore.Split('@');
                            //    andStr += " and exists (select id_profile from dpa_area_lavoro d where d.id_profile=a.system_id and id_people="+valori[0]+ " and id_ruolo_in_uo ="+valori[1]+")";
                            //    break;
                            case "MEZZO_SPEDIZIONE":
                                if (!f.valore.Equals(""))
                                {
                                    //  if (numAndStr > 0)
                                    andStr += " AND ";
                                    numAndStr += 1;
                                    andStr += "exists ( select'x' from dpa_doc_arrivo_par b where " +
                 "a.system_id = b.id_profile" +
                " AND b.id_documenttypes = " + Convert.ToInt32(f.valore) + ")";
                                    //andStr += "A.SYSTEM_ID = B.ID_PROFILE AND B.ID_DOCUMENTTYPES = " + Convert.ToInt32(f.valore);
                                }
                                break;

                            case "CONSERVAZIONE":
                                if (f.valore.Equals("1"))
                                {
                                    // if (numAndStr > 0)
                                    andStr += " AND ";
                                    numAndStr += 1;
                                    andStr += "A.SYSTEM_ID = C.ID_PROFILE AND C.CHA_STATO = 'C'";
                                }
                                if (f.valore.Equals("0"))
                                {
                                    // if (numAndStr > 0)
                                    andStr += " AND ";
                                    numAndStr += 1;
                                    andStr += "(A.SYSTEM_ID NOT IN (SELECT DISTINCT ID_PROFILE FROM DPA_ITEMS_CONSERVAZIONE) OR (A.SYSTEM_ID = C.ID_PROFILE AND C.CHA_STATO <> 'C'))";
                                }
                                break;

                            case "CODICE_DESCRIZIONE_AMMINISTRAZIONE":
                                if (numAndStr > 0)
                                    andStr += " AND ";
                                numAndStr += 1;
                                andStr += "a.system_id  IN ( SELECT  /*+ index (f)  index(g) */ f.id_profile FROM dpa_doc_arrivo_par f, dpa_corr_globali g " +
                                          "WHERE F.ID_PROFILE=a.system_id and g.system_id = f.ID_MITT_DEST AND UPPER(g.COD_DESC_INTEROP) LIKE UPPER('%" + DocsPaUtils.Functions.Functions.ReplaceApexes(f.valore) + "%'))";
                                break;
                            case "NUMERO_VERSIONI":
                                if (numAndStr > 0)
                                    andStr += " AND ";
                                numAndStr += 1;
                                andStr += " (select count(z.version_id) from VERSIONS z where a.DOCNUMBER=z.DOCNUMBER) " + f.valore;
                                break;
                            case "NUMERO_ALLEGATI":
                                if (numAndStr > 0)
                                    andStr += " AND ";
                                numAndStr += 1;
                                andStr += " (select count(x.system_id) from profile x where a.DOCNUMBER=x.id_documento_principale) " + f.valore;
                                numAll = f.valore;
                                break;
                            case "NUMERO_ALLEGATI_TIPO":
                                if (numAndStr > 0 && !f.valore.Equals("tutti"))
                                    andStr += " AND ";
                                if (f.valore.Equals("pec"))
                                {
                                    andStr += " (select count(x.system_id) from profile x, dpa_notifica n where x.docnumber=a.docnumber and a.docnumber=n.docnumber)" + numAll;
                                }
                                else if (f.valore.Equals("user"))
                                {
                                    andStr += " ((select count(x.system_id) from profile x where a.DOCNUMBER=x.id_documento_principale)-" +
                                                "(select count(x.system_id) from profile x, dpa_notifica n where x.docnumber=a.docnumber and" +
                                                " a.docnumber=n.docnumber))" + numAll;
                                }
                                else if (f.valore.Equals("esterni"))
                                {
                                    andStr += "(select count(p.system_id) FROM VERSIONS v, Profile p WHERE p.id_documento_principale=a.docnumber and v.docnumber=p.docnumber and v.CHA_ALLEGATI_ESTERNO = '1')" + numAll;
                                }
                                break;
                            case "CODICE_TIPO_NOTIFICA":
                                if (numAndStr > 0)
                                    andStr += " AND ";
                                numAndStr += 1;
                                if (f.valore.ToLower().Equals("tutti"))
                                {
                                    andStr += "a.docnumber  IN (SELECT unique f.docnumber FROM dpa_notifica f, dpa_tipo_notifica g " +
                                                               "WHERE a.docnumber = f.DOCNUMBER)";

                                }
                                else
                                {
                                    andStr += "a.docnumber  IN (SELECT unique f.docnumber FROM dpa_notifica f " +
                                              "WHERE a.docnumber = f.DOCNUMBER filtroDataPec " +
                                              "and f.ID_TIPO_NOTIFICA in " +
                                              "(select g.SYSTEM_ID from dpa_tipo_notifica g  where " +
                                              "g.var_codice_notifica ='" + f.valore + "'))";
                                }
                                break;

                            case "CODICE_TIPO_NOTIFICA_PITRE":
                                if (numAndStr > 0)
                                    andStr += " AND ";
                                numAndStr += 1;
                                if (f.valore.ToLower().Equals("tutti"))
                                {
                                    andStr += "a.docnumber  IN (SELECT unique f.docnumber FROM dpa_notifica f, dpa_tipo_notifica g " +
                                                               "WHERE a.docnumber = f.DOCNUMBER " +
                                                               " and lower(f.var_mittente) like 'http%' )";
                                }
                                else
                                {
                                    andStr += "a.docnumber  IN (SELECT unique f.docnumber FROM dpa_notifica f " +
                                              "WHERE a.docnumber = f.DOCNUMBER " +
                                              "and lower(f.var_mittente) like 'http%' filtroDataPitre " +
                                              "and f.ID_TIPO_NOTIFICA in " +
                                              "(select g.SYSTEM_ID from dpa_tipo_notifica g  where " +
                                              "g.var_codice_notifica ='" + f.valore + "'))";
                                }
                                break;

                            case "DATA_ULTIMA_MODIFICA_IL":
                                andStr += " AND ";
                                andStr += "A.LAST_EDIT_DATE>=" + DocsPaDbManagement.Functions.Functions.ToDateBetween(f.valore, true) + " AND A.LAST_EDIT_DATE<= " + DocsPaDbManagement.Functions.Functions.ToDateBetween(f.valore, false);
                                break;
                            case "DATA_ULTIMA_MODIFICA_PRECEDENTE_IL":
                                andStr += " AND ";
                                if (!dbType.ToUpper().Equals("SQL"))
                                    andStr += "A.LAST_EDIT_DATE <= to_date('" + f.valore + "','dd/mm/yyyy HH24:mi:ss') ";
                                else
                                    andStr += "A.LAST_EDIT_DATE <= convert(datetime,'" + f.valore.Replace(".", ":") + "', 103) ";
                                break;
                            case "DATA_ULTIMA_MODIFICA_SUCCESSIVA_AL":
                                andStr += " AND ";
                                if (!dbType.ToUpper().Equals("SQL"))
                                    andStr += "A.LAST_EDIT_DATE >= to_date('" + f.valore + "','dd/mm/yyyy HH24:mi:ss') ";
                                else
                                    andStr += "A.LAST_EDIT_DATE >= convert(datetime,'" + f.valore.Replace(".", ":") + "', 103) ";
                                break;
                        }
                    }
                }

                if (andStr.Length > 1)
                {
                    listaOR.Add(andStr + ")");
                    numAndStr = 0;
                }
            }
            if (listaOR.Count > 0)
            {
                queryWhere += " AND (" + (string)listaOR[0];
                for (int i = 1; i < numAndStr; i++)
                    queryWhere += " OR " + listaOR[i];
                queryWhere += ") ";
            }

            if (queryWhere.Contains("filtroDataPec"))
                queryWhere = queryWhere.Replace("filtroDataPec", filtroDataPec);
            if (queryWhere.Contains("filtroDataPitre"))
                queryWhere = queryWhere.Replace("filtroDataPitre", filtroDataPitre);

            // luluciani
            //purtroppo questo metodo è condiviso tra vari metodi di ricerca e se chiamato dal metodo dei WS smart 
            //si trova una parentesi in più.. ho trovato solo questo modo per risolvere il problema: poco elegante, ma efficacie!!

            int apri = queryWhere.Count(c => c == '(');
            int Chiudi = queryWhere.Count(c => c == ')');
            if (apri != Chiudi)
                queryWhere = queryWhere.Substring(0, queryWhere.Length - 2);

            return queryWhere;
        }

        private string GetQueryCondDocumenti(string idGruppo, string idPeople, DocsPaVO.filtri.FiltroRicerca[][] objQueryList, ref string queryFrom, ref string orderCondition, bool daProto, bool unionStampaReg, bool security)
        {
            string returnVal = "";
            string queryWhere = "";
            string andStr = string.Empty;
            string andStrR = string.Empty;
            int numAndStr = 0;
            string numAll = "0";
            string tipo = string.Empty;
            ArrayList listaOR = new ArrayList();
            Grigi = false;
            Arrivo = false;
            Partenza = false;
            Interno = false;
            string filtroReg = string.Empty;
            string filtroDocSpediti = string.Empty;
            string filtroDataSped = string.Empty;
            string filtroDocSpeditiTipo = string.Empty;
            string filtroDataPec = string.Empty;
            string filtroDataPitre = string.Empty;
            string filtroStatoCons = string.Empty;
            string UserDB = String.Empty;
            bool fromRicercaVis = false;

            string filtroRepertorio = string.Empty;

            if (dbType.ToUpper() == "SQL") UserDB = getUserDB();

            for (int i = 0; i < objQueryList.Length; i++)
            {
                for (int j = 0; j < objQueryList[i].Length; j++)
                {
                    DocsPaVO.filtri.FiltroRicerca f = objQueryList[i][j];
                    tipo = GetQueryCondTipo(tipo, f);
                    //EM 18/11/2008
                    //aggiungo filtro registro quando c'è la condizione di ricercare anche i doc predisposti
                    filtroReg = GetQueryCondRegPredisposti(objQueryList[i][j], ref andStrR, ref numAndStr);

                    if (f.argomento.Equals("DATA_TIPO_NOTIFICA_DA") || f.argomento.Equals("DATA_TIPO_NOTIFICA_A") || f.argomento.Equals("DATA_TIPO_NOTIFICA_TODAY"))
                        filtroDataPec = GetFiltroData(f, filtroDataPec);
                    if (f.argomento.Equals("DATA_TIPO_NOTIFICA_DA_PITRE") || f.argomento.Equals("DATA_TIPO_NOTIFICA_A_PITRE") || f.argomento.Equals("DATA_TIPO_NOTIFICA_TODAY_PITRE"))
                        filtroDataPitre = GetFiltroData(f, filtroDataPitre);

                    filtroRepertorio += GetQueryCondDocRepertoriato(f);
                }
            }

            fromRicercaVis = GetFiltroRicercaVis(objQueryList);

            //aggiunto codice per il controllo del filtro tipo (se ancora utilizzato)
            if (tipo.Equals(string.Empty))
                tipo = GetFiltroTipo(tipo, objQueryList);

            if (tipo.Length != 0)
            {
                //andStr += "(";
                tipo = tipo.Substring(0, tipo.Length - 1);
            }
            bool searchAllegato = false;
            string queryAllPEC = string.Empty;
            string filtroAllegato = GetFiltroDocumentoAllegato(objQueryList[0], out searchAllegato, out queryAllPEC);

            string dbuser = DocsPaDbManagement.Functions.Functions.GetDbUserSession();
            if (dbuser != null && dbuser.Length > 0)
                dbuser += ".";

            if (tipo.Length != 0 || daProto || searchAllegato)
                andStr += "(";

            bool newOr = false;
            if (daProto)
            {
                andStr += " ( cha_tipo_proto in ('A','P','I') AND CHA_DA_PROTO='1' AND ID_DOCUMENTO_PRINCIPALE IS NULL ) ";
                newOr = true;
            }
            if (searchAllegato)
            {
                if (newOr)
                {
                    andStr += " OR ";
                    newOr = false;
                }
                andStr += " ( cha_tipo_proto in ('G') AND CHA_DA_PROTO='0' AND ID_DOCUMENTO_PRINCIPALE IS NOT NULL" + queryAllPEC + " ) ";
                newOr = true;
            }

            if (Grigi)
            {
                if (newOr)
                {
                    andStr += " OR ";
                    newOr = false;
                }
                andStr += " ( cha_tipo_proto in ('G') AND CHA_DA_PROTO='0' AND ID_DOCUMENTO_PRINCIPALE IS NULL ) ";
                newOr = true;
            }
            if (!tipo.Equals("") && (tipo.IndexOf("P") > 0 || tipo.IndexOf("A") > 0 || tipo.IndexOf("I") > 0))
            {
                if (tipo.IndexOf("P") > 0)
                {
                    if (newOr)
                    {
                        andStr += " OR ";
                        newOr = false;
                    }
                    andStr += " ( cha_tipo_proto in ('P') AND CHA_DA_PROTO='0' AND ID_DOCUMENTO_PRINCIPALE IS NULL ) ";
                    newOr = true;
                }
                if (tipo.IndexOf("A") > 0)
                {
                    if (newOr)
                    {
                        andStr += " OR ";
                        newOr = false;
                    }
                    andStr += " ( cha_tipo_proto in ('A') AND CHA_DA_PROTO='0' AND ID_DOCUMENTO_PRINCIPALE IS NULL ) ";
                    newOr = true;
                }
                if (tipo.IndexOf("I") > 0)
                {
                    if (newOr)
                    {
                        andStr += " OR ";
                        newOr = false;
                    }
                    andStr += " ( cha_tipo_proto in ('I') AND CHA_DA_PROTO='0' AND ID_DOCUMENTO_PRINCIPALE IS NULL ) ";
                    newOr = true;
                }
                if (tipo.IndexOf("G") > 0)
                {
                    if (newOr)
                    {
                        andStr += " OR ";
                        newOr = false;
                    }
                    andStr += " ( cha_tipo_proto in ('G') AND CHA_DA_PROTO='0' AND ID_DOCUMENTO_PRINCIPALE IS NULL ) ";
                    newOr = true;
                }
            }
            if (andStr.Length > 1)
            {
                andStr += ") ";
                if (!security)
                {
                    if (!fromRicercaVis)
                    {
                        if (string.IsNullOrEmpty(System.Configuration.ConfigurationManager.AppSettings["NO_FILTRO_AOO"]) ||
                            System.Configuration.ConfigurationManager.AppSettings["NO_FILTRO_AOO"] == "0")
                            andStr += ") ";
                    }
                }
            }

            for (int i = 0; i < objQueryList.Length; i++)
            {
                numAndStr = 0;
                for (int j = 0; j < objQueryList[i].Length; j++)
                {
                    DocsPaVO.filtri.FiltroRicerca f = objQueryList[i][j];
                    string anno_prof = string.Empty;

                    if (f.argomento.Equals("PROFILAZIONE_DINAMICA"))
                    {
                        for (int a = 0; a < objQueryList.Length; a++)
                        {
                            for (int b = 0; b < objQueryList[a].Length; b++)
                            {
                                DocsPaVO.filtri.FiltroRicerca f1 = objQueryList[a][b];
                                if (f1.argomento.Equals("ANNO_PROFILAZIONE") && !string.IsNullOrEmpty(f1.valore))
                                {
                                    anno_prof = f1.valore;
                                }
                            }
                        }
                    }
                    returnVal = GetQueryCondComuniDocumenti(idGruppo, idPeople, queryWhere, f, anno_prof, ref andStr, ref numAndStr, ref queryFrom, daProto, ref orderCondition);
                    if (queryWhere != returnVal)
                        queryWhere = returnVal;

                    if (f.valore != null && !f.valore.Equals(""))
                    {
                        // i confronti vengono fatti sui valori presi da
                        // DocsPaVO.filtri.ricercaArgomenti inerenti documenti protocollati
                        switch (f.argomento)
                        {
                            case "DOC_REPERTORIATO":
                                if (tipo.Length == 0)
                                {
                                    andStr += numAndStr == 0 ? "( cha_tipo_proto in ('A','P','I', 'G') AND ID_DOCUMENTO_PRINCIPALE IS NULL )" : " AND ( cha_tipo_proto in ('A','P','I', 'G') AND ID_DOCUMENTO_PRINCIPALE IS NULL ) ";
                                }
                                numAndStr += 1;
                                andStr += " AND EXISTS (SELECT 'X' FROM DPA_ASSOCIAZIONE_TEMPLATES T JOIN DPA_OGGETTI_CUSTOM O ON T.ID_OGGETTO = O.SYSTEM_ID AND O.REPERTORIO = '1' ";
                                if (!dbType.ToUpper().Equals("SQL"))
                                    andStr += " WHERE T.DOC_NUMBER = a.system_id AND NVL(T.VALORE_OGGETTO_DB, '0') <> '0' " + filtroRepertorio + ")";
                                else
                                    andStr += " WHERE T.DOC_NUMBER = a.system_id AND ISNULL(NULLIF(T.VALORE_OGGETTO_DB, ''), '0') <> '0' " + filtroRepertorio + ")";
                                break;
                            case "DATA_PROT_IL":
                                andStr += " AND ";
                                numAndStr += 1;
                                andStr += "A.DTA_PROTO>=" + DocsPaDbManagement.Functions.Functions.ToDateBetween(f.valore, true) + " AND A.DTA_PROTO<= " + DocsPaDbManagement.Functions.Functions.ToDateBetween(f.valore, false);
                                break;
                            case "DATA_PROT_PRECEDENTE_IL":
                                andStr += " AND ";
                                numAndStr += 1;
                                andStr += "A.DTA_PROTO<=" + DocsPaDbManagement.Functions.Functions.ToDateBetween(f.valore, false);
                                break;
                            case "DATA_PROT_SUCCESSIVA_AL":
                                andStr += " AND ";
                                numAndStr += 1;
                                andStr += "A.DTA_PROTO>=" + DocsPaDbManagement.Functions.Functions.ToDateBetween(f.valore, true);
                                break;
                            case "DATA_PROT_SC":
                                // data protocollo nella settimana corrente
                                andStr += " AND ";
                                numAndStr += 1;
                                if (!dbType.ToUpper().Equals("SQL"))
                                    andStr += "A.DTA_PROTO>=(select to_date(to_char(sysdate+ (1-to_char(sysdate,'D')))) startdayofweek from dual) AND A.DTA_PROTO<(select to_date(to_char(sysdate+ (8-to_char(sysdate,'D')))) enddayofweek from dual) ";
                                else
                                    //andStr += "A.DTA_PROTO>=(select DATEADD(DAY,-DATEPART(WEEKDAY,(DATEADD(DAY,7-DATEPART(WEEKDAY,GETDATE()),GETDATE())))+(7-DATEPART(WEEKDAY,GETDATE()))+2 ,GETDATE())) AND A.DTA_PROTO<=(select DATEADD(DAY , 8-DATEPART(WEEKDAY,GETDATE()),GETDATE())) ";
                                    /* MAC 3881 (Mario Caropreso)
                                     * Le due date che delimitano l'intervallo contengono anche l'orario corrente
                                     * La modifica effettuata consiste nel rimuovere l'orario
                                     */
                                    andStr += "A.DTA_PROTO>=(select CAST(DATEADD(DAY,-DATEPART(WEEKDAY,(DATEADD(DAY,7-DATEPART(WEEKDAY,GETDATE()),GETDATE())))+(7-DATEPART(WEEKDAY,GETDATE()))+2 ,GETDATE()) as date)) AND A.DTA_PROTO<=(select CAST(DATEADD(DAY , 8-DATEPART(WEEKDAY,GETDATE()),GETDATE()) as date)) ";
                                break;
                            case "DATA_PROT_MC":
                                // data protocollo nel mese corrente
                                andStr += " AND ";
                                numAndStr += 1;
                                if (!dbType.ToUpper().Equals("SQL"))
                                    andStr += "A.DTA_PROTO>= Trunc(Sysdate,'MM')    AND A.DTA_PROTO<(Sysdate+1 ) ";


                                else
                                    andStr += "A.DTA_PROTO>=(SELECT DATEADD(dd,-(DAY(getdate())-1),getdate())) AND A.DTA_PROTO<=(SELECT DATEADD(dd,-(DAY(DATEADD(mm,1,getdate()))),DATEADD(mm,1,getdate()))) ";
                                break;
                            case "DATA_PROT_TODAY":
                                andStr += " AND ";
                                numAndStr += 1;
                                if (!dbType.ToUpper().Equals("SQL"))
                                    //andStr += "to_char(A.DTA_PROTO, 'DD/MM/YYYY') =(select to_char(sysdate, 'DD/MM/YYYY') from dual)";
                                    andStr += "A.DTA_PROTO between trunc(sysdate ,'DD') and sysdate";
                                else
                                    //andStr += "A.DTA_PROTO>=(SELECT getdate()) AND A.DTA_PROTO<=(SELECT getdate()) ";
                                    andStr += "DATEDIFF(DD, A.DTA_PROTO, GETDATE()) = 0 ";
                                break;
                            case "DATA_PROTO_YESTERDAY":
                                andStr += " AND ";
                                numAndStr += 1;
                                if (!dbType.ToUpper().Equals("SQL"))
                                    //andStr += "to_char(A.DTA_PROTO, 'DD/MM/YYYY') =(select to_char(sysdate, 'DD/MM/YYYY') from dual)";
                                    andStr += " to_date(to_char(A.DTA_PROTO,'dd/mm/yyyy'),'dd/mm/yyyy') = trunc(sysdate -1 ,'DD') ";
                                else
                                    //andStr += "A.DTA_PROTO>=(SELECT getdate()) AND A.DTA_PROTO<=(SELECT getdate()) ";
                                    andStr += "DATEDIFF(DD, A.DTA_PROTO, GETDATE() -1) = 0 ";
                                break;
                            case "DATA_PROTO_LAST_SEVEN_DAYS":
                                // data protocollo nel mese corrente
                                andStr += " AND ";
                                numAndStr += 1;
                                if (!dbType.ToUpper().Equals("SQL"))
                                    andStr += "A.DTA_PROTO>=(select to_date(to_char(sysdate - 7)) from dual) ";
                                else
                                    andStr += "A.DTA_PROTO>=(SELECT DATEADD(day, -7, GETDATE())) ";
                                break;
                            case "DATA_PROTO_LAST_THIRTY_ONE_DAYS":
                                // data protocollo nel mese corrente
                                andStr += " AND ";
                                numAndStr += 1;
                                if (!dbType.ToUpper().Equals("SQL"))
                                    andStr += "A.DTA_PROTO>=(select to_date(to_char(sysdate - 31)) from dual) ";
                                else
                                    andStr += "A.DTA_PROTO>=(SELECT DATEADD(day, -31, GETDATE())) ";
                                break;
                            case "ID_MITT_DEST":
                                queryWhere += "AND F.ID_PROFILE=A.SYSTEM_ID ";

                                if (queryFrom.IndexOf(" ,DPA_DOC_ARRIVO_PAR F") < 0)
                                    queryFrom += " ,DPA_DOC_ARRIVO_PAR F";

                                andStr += " AND ";
                                numAndStr += 1;
                                andStr += "F.ID_MITT_DEST" + GetQueryCorrispondente(f.valore, objQueryList);
                                break;
                            case "COD_MITT_DEST":
                                andStr += " AND ";
                                string codiceRubrica = DocsPaUtils.Functions.Functions.ReplaceApexes(f.valore).ToUpper();
                                andStr += " A.SYSTEM_ID IN (SELECT F.ID_PROFILE FROM DPA_DOC_ARRIVO_PAR F ,DPA_CORR_GLOBALI G  where G.SYSTEM_ID=F.ID_MITT_DEST AND (UPPER(G.VAR_COD_RUBRICA) = '" + codiceRubrica + "'";

                                if (RicercaPerMittentiDestinatariStoricizzati(objQueryList[i]))
                                {
                                    // Ricerca i documenti con i mittenti / destinatari storicizzati
                                    if (!dbType.ToUpper().Equals("SQL"))
                                        andStr += " OR UPPER(G.VAR_COD_RUBRICA) = ('" + codiceRubrica + "_' || G.SYSTEM_ID))";
                                    else
                                        andStr += " OR UPPER(G.VAR_COD_RUBRICA) = ('" + codiceRubrica + "_' + Convert(varchar(100),G.SYSTEM_ID)))";
                                }
                                andStr += ")";
                                break;
                            case "MITT_DEST":
                                andStr += " AND ";
                                numAndStr += 1;
                                if (Cfg_USE_TEXT_INDEX.Equals("0"))
                                    andStr += " A.SYSTEM_ID IN (SELECT F.ID_PROFILE FROM DPA_DOC_ARRIVO_PAR F ,DPA_CORR_GLOBALI G  where G.SYSTEM_ID=F.ID_MITT_DEST AND UPPER(G.VAR_DESC_CORR) LIKE '%" + DocsPaUtils.Functions.Functions.ReplaceApexes(f.valore).ToUpper() + "%') ";
                                else
                                {
                                    if (Cfg_USE_TEXT_INDEX.Equals("1"))
                                    {
                                        string searchMittDest = " AND g.SYSTEM_id in ( \n " +
                                                                " select system_id from table(fulltext_onvar_desc_corr ( \n " +
                                                                "'" + DocsPaUtils.Functions.Functions.ReplaceApexes(f.valore).ToUpper() + "'))) \n";
                                        andStr += " A.SYSTEM_ID IN (SELECT F.ID_PROFILE FROM DPA_DOC_ARRIVO_PAR F ,DPA_CORR_GLOBALI G  where G.SYSTEM_ID=F.ID_MITT_DEST " + searchMittDest + ") ";
                                    }
                                    else
                                    {
                                        if (Cfg_USE_TEXT_INDEX.Equals("2"))
                                        {
                                            string value = DocsPaUtils.Functions.Functions.ReplaceApexes(f.valore).ToUpper();
                                            string valueA = value;
                                            if (valueA.Contains("&&"))
                                                valueA = valueA.Replace("&&", "");
                                            bool casoA = false;
                                            if (value.Substring(0, value.Length - 1).Contains("%") && !value.Substring(0, value.Length - 1).Contains("%&&"))
                                                casoA = true;
                                            if (value.Contains("&&"))
                                            {
                                                string result = string.Empty;
                                                foreach (string filter in new Regex("&&").Split(value))
                                                    if (!string.IsNullOrEmpty(filter))
                                                        result += filter + " AND ";
                                                value = result.Substring(0, result.Length - 5);
                                            }
                                            if (value.Contains("%") && value.IndexOf("%") != value.Length - 1)
                                            {
                                                bool finale = value.EndsWith("%");
                                                string result = string.Empty;
                                                foreach (string filter in new Regex("%").Split(value))
                                                    if (!string.IsNullOrEmpty(filter))
                                                        result += filter + "% AND ";
                                                value = result.Substring(0, result.Length - 6);
                                                if (finale)
                                                    value = value + "%";
                                            }
                                            if (value.ToUpper().Contains(" AND  AND "))
                                                value = value.ToUpper().Replace(" AND  AND ", " AND ");
                                            //andStr += " A.SYSTEM_ID IN (SELECT F.ID_PROFILE FROM DPA_DOC_ARRIVO_PAR F ,DPA_CORR_GLOBALI G  where F.ID_PROFILE=a.system_id and  G.SYSTEM_ID=F.ID_MITT_DEST AND " + DocsPaDbManagement.Functions.Functions.GetContainsTextQuery("G.VAR_DESC_CORR", new SearchTextItem(DocsPaUtils.Functions.Functions.ReplaceApexes(f.valore).ToUpper(), SearchTextOptionsEnum.InitWithWord)) + ") ";
                                            andStr += " A.SYSTEM_ID IN (SELECT F.ID_PROFILE FROM DPA_DOC_ARRIVO_PAR F ,DPA_CORR_GLOBALI G  where G.SYSTEM_ID=F.ID_MITT_DEST AND " + DocsPaDbManagement.Functions.Functions.GetContainsTextQuery("G.VAR_DESC_CORR", value);
                                            if (casoA)
                                                andStr += " and upper(G.VAR_DESC_CORR) like upper('%" + valueA + "%')";
                                            andStr += ") ";
                                        }
                                    }
                                }
                                break;
                            case "COD_UO_PROT":
                                andStr += " AND ";
                                string codiceUoProt = DocsPaUtils.Functions.Functions.ReplaceApexes(f.valore).ToUpper();
                                andStr += " A.ID_UO_PROT IN (SELECT G.SYSTEM_ID FROM DPA_CORR_GLOBALI G  where CHA_TIPO_URP='U' AND CHA_TIPO_IE = 'I' AND (UPPER(G.VAR_COD_RUBRICA) = '" + codiceUoProt + "'";

                                if (RicercaPerUoProtollatriceStoricizzate(objQueryList[i]))
                                {
                                    // Ricerca i documenti con i mittenti / destinatari storicizzati
                                    if (!dbType.ToUpper().Equals("SQL"))
                                        andStr += " OR UPPER(G.VAR_COD_RUBRICA) = ('" + codiceUoProt + "_' || G.SYSTEM_ID))";
                                    else
                                        andStr += " OR UPPER(G.VAR_COD_RUBRICA) = ('" + codiceUoProt + "_' + Convert(varchar(100),G.SYSTEM_ID)))";
                                }
                                andStr += ")";
                                break;
                            case "ID_UO_PROT":
                                bool uoSottostanti = RicercaPerUoProtocollatriciSottostanti(objQueryList[i]);
                                bool uoStoricizzate = RicercaPerUoProtollatriceStoricizzate(objQueryList[i]);
                                if (!uoSottostanti && !uoStoricizzate)
                                    andStr += " AND A.ID_UO_PROT= " + f.valore + " ";
                                else
                                {
                                    string chaSottostanti = uoSottostanti ? "1" : "0";
                                    string chaStoricizzate = uoStoricizzate ? "1" : "0";
                                    if(dbType.ToUpper().Equals("SQL"))
                                        andStr += " AND " + getUserDB() + ".checkUoProto(A.SYSTEM_ID, " + f.valore + ", '" + chaStoricizzate + "', '" + chaSottostanti + "')=1  ";
                                    else
                                        andStr += " AND checkUoProto(A.SYSTEM_ID, " + f.valore + ", '" + chaStoricizzate + "', '" + chaSottostanti + "')=1  ";
                                }
                                break;
                            case "ID_UO_PROT_GERARCHIA":
                                Console.WriteLine("GERARCHIA");
                                //List<string> idList = this.getIdUOSottoposte(f.valore);
                                andStr += " AND " + getUserDB() + ".checkUoProto(A.SYSTEM_ID, " + f.valore + ", '0', '1')=1  ";
                                break;
                            case "DESC_UO_PROT":
                                andStr += " AND A.ID_UO_PROT IN (SELECT G.SYSTEM_ID FROM DPA_CORR_GLOBALI G  where G.CHA_TIPO_URP='U' AND CHA_TIPO_IE = 'I' AND DTA_FINE IS NULL AND UPPER(G.VAR_DESC_CORR) LIKE '%" + DocsPaUtils.Functions.Functions.ReplaceApexes(f.valore).ToUpper() + "%') ";
                                break;
                            case "NUM_PROTOCOLLO":
                                andStr += " AND ";
                                numAndStr += 1;
                                andStr += "A.NUM_PROTO=" + f.valore;
                                break;
                            case "NUM_PROTOCOLLO_AL":
                                andStr += " AND ";
                                numAndStr += 1;
                                andStr += "A.NUM_PROTO<=" + f.valore;
                                break;
                            case "NUM_PROTOCOLLO_DAL":
                                andStr += " AND ";
                                numAndStr += 1;
                                andStr += "A.NUM_PROTO>=" + f.valore;
                                break;
                            case "ID_UO_REF":
                                andStr += " AND ";
                                numAndStr += 1;
                                andStr += "A.ID_UO_REF= " + f.valore; ;
                                break;
                            case "ID_MITTENTE_INTERMEDIO":
                                queryWhere += "AND F.ID_PROFILE=A.SYSTEM_ID ";
                                if (queryFrom.IndexOf(" ,DPA_DOC_ARRIVO_PAR F") < 0)
                                    queryFrom += " ,DPA_DOC_ARRIVO_PAR F";

                                andStr += " AND ";
                                numAndStr += 1;
                                andStr += "F.CHA_TIPO_MITT_DEST='I' AND F.ID_MITT_DEST" + GetQueryCorrispondente(f.valore, objQueryList);
                                break;
                            case "MITTENTE_INTERMEDIO":
                                andStr += " AND ";
                                numAndStr += 1;
                                if (queryFrom.IndexOf(" ,DPA_DOC_ARRIVO_PAR F ,DPA_CORR_GLOBALI G ") < 0) queryFrom += " ,DPA_DOC_ARRIVO_PAR F ,DPA_CORR_GLOBALI G ";
                                queryWhere += " AND F.ID_PROFILE=A.SYSTEM_ID AND G.SYSTEM_ID=F.ID_MITT_DEST ";
                                andStr += "UPPER(G.VAR_DESC_CORR) LIKE UPPER('%" + DocsPaUtils.Functions.Functions.ReplaceApexes(f.valore).ToUpper() + "%')";
                                break;
                            case "PROTOCOLLO_MITTENTE":
                                andStr += " AND ";

                                if (Cfg_USE_TEXT_INDEX == "0")
                                    andStr += "A.VAR_PROTO_IN LIKE '%" + DocsPaUtils.Functions.Functions.ReplaceApexes(f.valore).ToUpper() + "%'";
                                else if (Cfg_USE_TEXT_INDEX == "1")
                                {
                                    //string searchMittDest = " AND A.VAR_PROTO_IN in ( \n " +
                                    //                        " select system_id from table(fulltext_onvar_desc_corr ( \n " +
                                    //                        "'" + DocsPaUtils.Functions.Functions.ReplaceApexes(f.valore).ToUpper() + "'))) \n";
                                    //andStr += " A.SYSTEM_ID IN (SELECT F.ID_PROFILE FROM DPA_DOC_ARRIVO_PAR F ,DPA_CORR_GLOBALI G  where F.ID_PROFILE=a.system_id and  G.SYSTEM_ID=F.ID_MITT_DEST " + searchMittDest + ") ";
                                }
                                else if (Cfg_USE_TEXT_INDEX == "2")
                                {
                                    string value = DocsPaUtils.Functions.Functions.ReplaceApexes(f.valore).ToUpper();
                                    string valueA = value;
                                    if (valueA.Contains("&&"))
                                        valueA = valueA.Replace("&&", "");
                                    bool casoA = false;
                                    if (value.Substring(0, value.Length - 1).Contains("%") && !value.Substring(0, value.Length - 1).Contains("%&&"))
                                        casoA = true;

                                    if (value.Contains("&&"))
                                    {
                                        string result = string.Empty;
                                        foreach (string filter in new Regex("&&").Split(value))
                                            if (!string.IsNullOrEmpty(filter))
                                                result += filter + " AND ";
                                        value = result.Substring(0, result.Length - 5);
                                    }
                                    if (value.Contains("%") && value.IndexOf("%") != value.Length - 1)
                                    {
                                        string result = string.Empty;
                                        foreach (string filter in new Regex("%").Split(value))
                                            if (!string.IsNullOrEmpty(filter))
                                                result = filter + "% AND ";
                                        value = result.Substring(0, result.Length - 5);
                                    }

                                    if (value.ToUpper().Contains(" AND  AND "))
                                        value = value.ToUpper().Replace(" AND  AND ", " AND ");
                                    andStr += DocsPaDbManagement.Functions.Functions.GetContainsTextQuery("A.VAR_PROTO_IN", value);
                                    if (casoA)
                                        andStr += " upper(A.VAR_PROTO_IN) LIKE '%" + DocsPaUtils.Functions.Functions.ReplaceApexes(valueA).ToUpper() + "%'";
                                }
                                break;
                            case "DATA_PROT_MITTENTE_IL":
                                andStr += " AND ";
                                numAndStr += 1;
                                andStr += "A.DTA_PROTO_IN=" + DocsPaDbManagement.Functions.Functions.ToDate(f.valore);
                                break;
                            case "DATA_PROT_MITTENTE_PRECEDENTE_IL":
                                andStr += " AND ";
                                numAndStr += 1;
                                andStr += "A.DTA_PROTO_IN<" + DocsPaDbManagement.Functions.Functions.ToDate(f.valore + " 23:59:59");
                                break;
                            case "DATA_PROT_MITTENTE_SUCCESSIVA_AL":
                                andStr += " AND ";
                                numAndStr += 1;
                                andStr += "A.DTA_PROTO_IN>=" + DocsPaDbManagement.Functions.Functions.ToDate(f.valore);
                                break;
                            case "DATA_PROT_MITTENTE_SC":
                                // data protocollo nella settimana corrente
                                andStr += " AND ";
                                numAndStr += 1;
                                if (!dbType.ToUpper().Equals("SQL"))
                                    andStr += "A.DTA_PROTO_IN>=(select to_date(to_char(sysdate+ (1-to_char(sysdate,'D')))) startdayofweek from dual) AND A.DTA_PROTO_IN<(select to_date(to_char(sysdate+ (8-to_char(sysdate,'D')))) enddayofweek from dual) ";
                                else
                                    andStr += "A.DTA_PROTO_IN>=(select DATEADD(DAY,-DATEPART(WEEKDAY,(DATEADD(DAY,7-DATEPART(WEEKDAY,GETDATE()),GETDATE())))+(7-DATEPART(WEEKDAY,GETDATE()))+2 ,GETDATE())) AND A.DTA_PROTO_IN<=(select DATEADD(DAY , 8-DATEPART(WEEKDAY,GETDATE()),GETDATE())) ";
                                break;
                            case "DATA_PROT_MITTENTE_MC":
                                // data protocollo nel mese corrente
                                andStr += " AND ";
                                numAndStr += 1;
                                if (!dbType.ToUpper().Equals("SQL"))
                                    andStr += "A.DTA_PROTO_IN>=(select to_date(trunc(sysdate,'MM')) as start_date from dual) AND A.DTA_PROTO_IN<(select to_date(last_day(sysdate)+1) as DAY from dual) ";
                                else
                                    andStr += "A.DTA_PROTO_IN>=(SELECT DATEADD(dd,-(DAY(getdate())-1),getdate())) AND A.DTA_PROTO_IN<=(SELECT DATEADD(dd,-(DAY(DATEADD(mm,1,getdate()))),DATEADD(mm,1,getdate()))) ";
                                break;
                            case "DATA_PROT_MITTENTE_TODAY":
                                andStr += " AND ";
                                numAndStr += 1;
                                if (!dbType.ToUpper().Equals("SQL"))
                                    andStr += "to_char(A.DTA_PROTO_IN, 'DD/MM/YYYY') =(select to_char(sysdate, 'DD/MM/YYYY') from dual)";
                                else
                                    //andStr += "A.DTA_PROTO_IN>=(SELECT getdate()) AND A.DTA_PROTO_IN<=(SELECT getdate()) ";
                                    andStr += "DATEDIFF(DD, A.DTA_PROTO_IN, GETDATE()) = 0 ";
                                break;
                            case "DATA_ARRIVO_IL":
                                andStr += " AND ";
                                numAndStr += 1;
                                queryWhere += " AND H.DOCNUMBER=A.DOCNUMBER";
                                queryFrom += " , VERSIONS H";
                                andStr += "H.DTA_ARRIVO=" + DocsPaDbManagement.Functions.Functions.ToDate(f.valore);
                                break;
                            case "DATA_ARRIVO_PRECEDENTE_IL":
                                andStr += " AND ";
                                numAndStr += 1;
                                queryWhere += " AND H.DOCNUMBER=A.DOCNUMBER";
                                if (queryFrom.IndexOf("VERSIONS H") < 0) { queryFrom += " , VERSIONS H"; }
                                andStr += "H.DTA_ARRIVO<" + DocsPaDbManagement.Functions.Functions.ToDate(f.valore + " 23:59:59");
                                break;
                            case "DATA_ARRIVO_SUCCESSIVA_AL":
                                andStr += " AND ";
                                numAndStr += 1;
                                queryWhere += " AND H.DOCNUMBER=A.DOCNUMBER";
                                if (queryFrom.IndexOf("VERSIONS H") < 0) { queryFrom += " , VERSIONS H"; }
                                andStr += "H.DTA_ARRIVO>=" + DocsPaDbManagement.Functions.Functions.ToDate(f.valore);
                                break;
                            case "DATA_ARRIVO_SC":
                                // data protocollo nella settimana corrente
                                andStr += " AND ";
                                numAndStr += 1;
                                queryWhere += " AND H.DOCNUMBER=A.DOCNUMBER";
                                if (queryFrom.IndexOf("VERSIONS H") < 0) { queryFrom += " , VERSIONS H"; }
                                if (!dbType.ToUpper().Equals("SQL"))
                                    andStr += "H.DTA_ARRIVO>=(select to_date(to_char(sysdate+ (1-to_char(sysdate,'D')))) startdayofweek from dual) AND H.DTA_ARRIVO<(select to_date(to_char(sysdate+ (8-to_char(sysdate,'D')))) enddayofweek from dual) ";
                                else
                                    andStr += "H.DTA_ARRIVO>=(select DATEADD(DAY,-DATEPART(WEEKDAY,(DATEADD(DAY,7-DATEPART(WEEKDAY,GETDATE()),GETDATE())))+(7-DATEPART(WEEKDAY,GETDATE()))+2 ,GETDATE())) AND H.DTA_ARRIVO<=(select DATEADD(DAY , 8-DATEPART(WEEKDAY,GETDATE()),GETDATE())) ";
                                break;
                            case "DATA_ARRIVO_MC":
                                // data protocollo nel mese corrente
                                andStr += " AND ";
                                numAndStr += 1;
                                queryWhere += " AND H.DOCNUMBER=A.DOCNUMBER";
                                if (queryFrom.IndexOf("VERSIONS H") < 0) { queryFrom += " , VERSIONS H"; }
                                if (!dbType.ToUpper().Equals("SQL"))
                                    //  andStr += "H.DTA_ARRIVO>=(select to_date(trunc(sysdate,'MM')) as start_date from dual) AND H.DTA_ARRIVO<(select to_date(last_day(sysdate)+1) as DAY from dual) ";
                                    andStr += " H.DTA_ARRIVO>= Trunc(Sysdate,'MM')    AND H.DTA_ARRIVO<(Sysdate+1 ) ";


                                else
                                    andStr += "H.DTA_ARRIVO>=(SELECT DATEADD(dd,-(DAY(getdate())-1),getdate())) AND H.DTA_ARRIVO<=(SELECT DATEADD(dd,-(DAY(DATEADD(mm,1,getdate()))),DATEADD(mm,1,getdate()))) ";
                                break;
                            case "DATA_ARRIVO_TODAY":
                                andStr += " AND ";
                                numAndStr += 1;
                                queryWhere += " AND H.DOCNUMBER=A.DOCNUMBER";
                                queryFrom += " , VERSIONS H";
                                if (!dbType.ToUpper().Equals("SQL"))
                                    andStr += "to_char(H.DTA_ARRIVO, 'DD/MM/YYYY') =(select to_char(sysdate, 'DD/MM/YYYY') from dual)";
                                else
                                    //andStr += "H.DTA_ARRIVO =(SELECT getdate())";
                                    andStr += "DATEDIFF(DD, H.DTA_ARRIVO, GETDATE()) = 0 ";
                                break;
                            case "NUM_PROTO_EMERGENZA":
                                andStr += " AND ";
                                numAndStr += 1;
                                andStr += "upper(A.VAR_PROTO_EME) like '%" + f.valore.Replace("'", "''").ToUpper() + "%'";
                                break;
                            case "DATA_PROTO_EMERGENZA_IL":
                                andStr += " AND ";
                                numAndStr += 1;
                                andStr += "A.DTA_PROTO_EME>=" + DocsPaDbManagement.Functions.Functions.ToDate(f.valore) + " AND A.DTA_PROTO_EME<" + DocsPaDbManagement.Functions.Functions.ToDate(f.valore + " 23:59:59");
                                break;
                            case "DATA_PROTO_EMERGENZA_PRECEDENTE_IL":
                                andStr += " AND ";
                                numAndStr += 1;
                                andStr += "A.DTA_PROTO_EME<" + DocsPaDbManagement.Functions.Functions.ToDate(f.valore + " 23:59:59");
                                break;
                            case "DATA_PROTO_EMERGENZA_SUCCESSIVA_AL":
                                andStr += " AND ";
                                numAndStr += 1;
                                andStr += "A.DTA_PROTO_EME>=" + DocsPaDbManagement.Functions.Functions.ToDate(f.valore);
                                break;
                            case "DATA_PROT_EMERGENZA_SC":
                                // data protocollo nella settimana corrente
                                andStr += " AND ";
                                numAndStr += 1;
                                if (!dbType.ToUpper().Equals("SQL"))
                                    andStr += "A.DTA_PROTO_EME>=(select to_date(to_char(sysdate+ (1-to_char(sysdate,'D')))) startdayofweek from dual) AND A.DTA_PROTO_EME<(select to_date(to_char(sysdate+ (8-to_char(sysdate,'D')))) enddayofweek from dual) ";
                                else
                                    andStr += "A.DTA_PROTO_EME>=(select DATEADD(DAY,-DATEPART(WEEKDAY,(DATEADD(DAY,7-DATEPART(WEEKDAY,GETDATE()),GETDATE())))+(7-DATEPART(WEEKDAY,GETDATE()))+2 ,GETDATE())) AND A.DTA_PROTO_EME<=(select DATEADD(DAY , 8-DATEPART(WEEKDAY,GETDATE()),GETDATE())) ";
                                break;
                            case "DATA_PROT_EMERGENZA_MC":
                                // data protocollo nel mese corrente
                                andStr += " AND ";
                                numAndStr += 1;
                                if (!dbType.ToUpper().Equals("SQL"))
                                    andStr += "A.DTA_PROTO_EME>=(select to_date(trunc(sysdate,'MM')) as start_date from dual) AND A.DTA_PROTO_EME<(select to_date(last_day(sysdate)+1) as DAY from dual) ";
                                else
                                    andStr += "A.DTA_PROTO_EME>=(SELECT DATEADD(dd,-(DAY(getdate())-1),getdate())) AND A.DTA_PROTO_EME<=(SELECT DATEADD(dd,-(DAY(DATEADD(mm,1,getdate()))),DATEADD(mm,1,getdate()))) ";
                                break;
                            case "DATA_PROTO_EMERGENZA_TODAY":
                                andStr += " AND ";
                                numAndStr += 1;
                                // andStr += "A.DTA_PROTO_EME=(select sysdate from dual) ";
                                if (!dbType.ToUpper().Equals("SQL"))
                                    andStr += "to_char(A.DTA_PROTO_EME, 'DD/MM/YYYY') =(select to_char(sysdate, 'DD/MM/YYYY') from dual)";
                                else
                                    //andStr += "A.DTA_PROTO_EME =(SELECT getdate())";
                                    andStr += "DATEDIFF(DD, A.DTA_PROTO_EME, GETDATE()) = 0 ";
                                break;
                            case "ID_PARENT":
                                andStr += " AND ";
                                numAndStr += 1;
                                andStr += "A.ID_PARENT=" + f.valore;
                                break;
                            case "ANNULLATO":
                                andStr += " AND ";
                                numAndStr += 1;
                                if (f.valore.Equals("0"))
                                    andStr += " A.DTA_ANNULLA IS NULL";
                                else
                                    andStr += " A.DTA_ANNULLA IS NOT NULL";
                                break;
                            case "SEGNATURA":
                                andStr += " AND ";
                                numAndStr += 1;
                                andStr += "A.VAR_SEGNATURA LIKE '" + DocsPaUtils.Functions.Functions.ReplaceApexes(f.valore).ToUpper() + "%'";
                                break;
                            case "ID_PEOPLE_CREATORE":
                                andStr += " AND ";
                                numAndStr += 1;
                                andStr += "A.AUTHOR = " + f.valore;
                                break;
                            case "DESC_UO_CREATORE":
                                andStr += " AND ";
                                numAndStr += 1;
                                andStr += "A.ID_UO_CREATORE IN (SELECT SYSTEM_ID FROM DPA_CORR_GLOBALI WHERE UPPER(VAR_DESC_CORR) LIKE '%" + f.valore.ToUpper() + "%')";
                                break;
                            case "DESC_RUOLO_CREATORE":
                                andStr += " AND ";
                                numAndStr += 1;
                                andStr += "A.ID_RUOLO_CREATORE IN (SELECT SYSTEM_ID FROM DPA_CORR_GLOBALI WHERE UPPER(VAR_DESC_CORR) LIKE '%" + f.valore.ToUpper() + "%')";
                                break;
                            case "ID_RUOLO_CREATORE":
                                andStr += " AND ";
                                numAndStr += 1;
                                andStr += "A.ID_RUOLO_CREATORE = " + f.valore;
                                break;
                            case "ID_UO_CREATORE":
                                andStr += " AND ";
                                numAndStr += 1;
                                andStr += "A.ID_UO_CREATORE = " + f.valore;
                                break;
                            case "DESC_PEOPLE_CREATORE":
                                andStr += " AND ";
                                numAndStr += 1;
                                andStr += "A.AUTHOR IN (SELECT ID_PEOPLE FROM DPA_CORR_GLOBALI WHERE UPPER(VAR_DESC_CORR) LIKE '%" + f.valore.ToUpper() + "%')";
                                break;

                            case "CONDIZIONE_ORDINAMENTO":
                                orderCondition = f.valore;
                                break;
                            ////arealavoro.. messo inget querycondcomuni
                            //case "DOC_IN_ADL":
                            //    //split dei valori
                            //    string [] valori = f.valore.Split('@');
                            //    andStr += " and exists (select id_profile from dpa_area_lavoro d where d.id_profile=a.system_id and id_people="+valori[0]+ " and id_ruolo_in_uo ="+valori[1]+")";
                            //    break;
                            case "MEZZO_SPEDIZIONE":
                                if (!f.valore.Equals(""))
                                {
                                    andStr += " AND ";
                                    numAndStr += 1;
                                    andStr += "exists ( select'x' from dpa_doc_arrivo_par b where " +
                 "a.system_id = b.id_profile" +
                " AND b.id_documenttypes = " + Convert.ToInt32(f.valore) + ")";
                                    //andStr += "A.SYSTEM_ID = B.ID_PROFILE AND B.ID_DOCUMENTTYPES = " + Convert.ToInt32(f.valore);
                                }
                                break;
                            //case "FIRMATO":
                            //    andStr += " AND ";
                            //    numAndStr += 1;
                            //    if (f.valore == "1")
                            //        andStr += "A.CHA_FIRMATO='1'";
                            //    else
                            //        if (f.valore == "0")
                            //            andStr += "A.CHA_FIRMATO='0'";
                            //        else
                            //        {
                            //            if (!string.IsNullOrEmpty(UserDB))
                            //                andStr += UserDB + ".getchaimg(A.SYSTEM_ID)<>'0'";
                            //            else
                            //                andStr += "getchaimg(A.SYSTEM_ID)<>'0'";
                            //        }
                            //    break;

                            //case "TIPO_FILE_ACQUISITO":
                            //    queryWhere += "AND A.DOCNUMBER=COMPONENTS.DOCNUMBER ";
                            //    if (queryFrom.IndexOf(" ,COMPONENTS") < 0)
                            //        queryFrom += " ,COMPONENTS";

                            //    andStr += " AND ";
                            //    numAndStr += 1;
                            //    andStr += "UPPER(COMPONENTS.EXT)='" + f.valore.ToUpper() + "' AND COMPONENTS.VERSION_ID=(select max(versions.version_id)  from versions, components where" +
                            //    " versions.version_id=components.version_id AND versions.docnumber=A.DOCNUMBER)";
                            //    break;


                            // PEC 4 Requisito 3: ricerca documenti spediti
                            // punto di ingresso
                            case "DOC_SPEDITI":
                                if (string.IsNullOrEmpty(filtroDocSpeditiTipo))
                                {
                                    // PEC 4 Requisito 3: ricerca documenti spediti
                                    // la query per le ricevute passano da tutti i destinatari ad almeno uno.
                                    andStr += " AND ";
                                    numAndStr += 1;
                                    if (f.valore == "T") // Tutti i documenti spediti tramite PEC
                                    {
                                        andStr += " a.system_id in" +
                                        "(select a.system_id from dpa_stato_invio s, dpa_doc_arrivo_par r  " +
                                        "where a.SYSTEM_ID= s.ID_PROFILE " +
                                        "and r.SYSTEM_ID=s.ID_DOC_ARRIVO_PAR " +
                                        "and a.CHA_DA_PROTO='0' and a.CHA_TIPO_PROTO='P' " +
                                        "and s.DTA_SPEDIZIONE is not null " +
                                        "and r.CHA_TIPO_MITT_DEST in ('D','C', 'F') " + filtroDataSped + ")";
                                    }
                                    if (f.valore == "0") // Documenti in attesa di risposta.
                                    {
                                        string filtro = "dpa_stato_invio s, dpa_doc_arrivo_par r " +
                                        "where a.SYSTEM_ID= s.ID_PROFILE " +
                                        "and r.SYSTEM_ID=s.ID_DOC_ARRIVO_PAR " +
                                        "and a.CHA_DA_PROTO='0' and a.CHA_TIPO_PROTO='P' " +
                                        "and s.DTA_SPEDIZIONE is not null " +
                                        "and r.CHA_TIPO_MITT_DEST in ('D','C', 'F') " + filtroDataSped;

                                        // Modifica ricerca doc in attesa di risposta. La precedente la commento per riferimento, le altre modifico. Lembo.
                                        andStr += " a.system_id in" +
                                        "(select a.system_id from " + filtro +
                                        " and (select count(*) from " +
                                        filtro +
                                        " and s.status_c_mask like '___A_A%')>0)";

                                    }
                                    if (f.valore == "1") // Documenti con almeno una ricevuta di conferma 
                                    {
                                        string filtro = "dpa_stato_invio s, dpa_doc_arrivo_par r " +
                                        "where a.SYSTEM_ID= s.ID_PROFILE " +
                                        "and r.SYSTEM_ID=s.ID_DOC_ARRIVO_PAR " +
                                        "and a.CHA_DA_PROTO='0' and a.CHA_TIPO_PROTO='P' " +
                                        "and s.DTA_SPEDIZIONE is not null " +
                                        "and r.CHA_TIPO_MITT_DEST in ('D','C', 'F') " + filtroDataSped;

                                        andStr += " a.system_id in" +
                                        "(select a.system_id from " + filtro +
                                        " and (select count(*) from " + filtro +
                                        " and s.var_proto_dest is not null and s.var_motivo_annulla is null and s.cha_annullato is null)>0)";
                                    }
                                    if (f.valore == "2") // Documenti con almeno una ricevuta di annullamento
                                    {
                                        // PEC 4 Requisito 3: ricerca documenti spediti
                                        // La prima parte dovrebbe essere uguale per tutti
                                        string filtro = "dpa_stato_invio s, dpa_doc_arrivo_par r " +
                                        "where a.SYSTEM_ID= s.ID_PROFILE " +
                                        "and r.SYSTEM_ID=s.ID_DOC_ARRIVO_PAR " +
                                        "and a.CHA_DA_PROTO='0' and a.CHA_TIPO_PROTO='P' " +
                                        "and s.DTA_SPEDIZIONE is not null " +
                                        "and r.CHA_TIPO_MITT_DEST in ('D','C', 'F') " + filtroDataSped;
                                        // Modifico la query in modo che controlli che abbiano una ricevuta di annullamento
                                        // cioè cha_annullato='1'
                                        andStr += " a.system_id in" +
                                        "(select a.system_id from " + filtro +
                                        " and (select count(*) from " + filtro +
                                        " and s.var_proto_dest is not null and s.cha_annullato='1')>0)";

                                    }
                                    if (f.valore == "3") // Documenti con almeno una ricevuta di eccezione
                                    {
                                        // PEC 4 Requisito 3: ricerca documenti spediti
                                        // La prima parte dovrebbe essere uguale per tutti
                                        string filtro = "dpa_stato_invio s, dpa_doc_arrivo_par r " +
                                        "where a.SYSTEM_ID= s.ID_PROFILE " +
                                        "and r.SYSTEM_ID=s.ID_DOC_ARRIVO_PAR " +
                                        "and a.CHA_DA_PROTO='0' and a.CHA_TIPO_PROTO='P' " +
                                        "and s.DTA_SPEDIZIONE is not null " +
                                        "and r.CHA_TIPO_MITT_DEST in ('D','C', 'F') " + filtroDataSped;
                                        // Modifico la query in modo che controlli che abbiano una ricevuta di eccezione
                                        // il problema è che le ricevute di eccezioni arrivano anche in caso di spedizione con esito negativo
                                        // quindi la query deve essere fatta sulla status_c_mask
                                        andStr += " a.system_id in" +
                                        "(select a.system_id from " + filtro +
                                        " and (select count(*) from " + filtro +
                                        " and s.status_c_mask like '_____X%')>0)";

                                    }
                                }
                                if (!string.IsNullOrEmpty(filtroDocSpeditiTipo) && filtroDocSpeditiTipo.Equals("PEC"))
                                {
                                    // PEC 4 Requisito 3: ricerca documenti spediti
                                    // la query per le ricevute passano da tutti i destinatari ad almeno uno.
                                    andStr += " AND ";
                                    numAndStr += 1;
                                    if (f.valore == "T") // Tutti i documenti spediti tramite PEC
                                    {
                                        andStr += " a.system_id in" +
                                        "(select a.system_id from dpa_stato_invio s, dpa_doc_arrivo_par r, documenttypes d " +
                                        "where a.SYSTEM_ID= s.ID_PROFILE " +
                                        "and r.SYSTEM_ID=s.ID_DOC_ARRIVO_PAR " +
                                        "and d.SYSTEM_ID=r.ID_DOCUMENTTYPES " +
                                        "and a.CHA_DA_PROTO='0' and a.CHA_TIPO_PROTO='P' " +
                                        "and s.DTA_SPEDIZIONE is not null " +
                                        "and d.TYPE_ID='INTEROPERABILITA' and r.CHA_TIPO_MITT_DEST in ('D','C', 'F') " + filtroDataSped + ")";
                                    }
                                    if (f.valore == "0") // Documenti in attesa di risposta.
                                    {
                                        string filtro = "dpa_stato_invio s, dpa_doc_arrivo_par r, documenttypes d " +
                                        "where a.SYSTEM_ID= s.ID_PROFILE " +
                                        "and r.SYSTEM_ID=s.ID_DOC_ARRIVO_PAR " +
                                        "and d.SYSTEM_ID=r.ID_DOCUMENTTYPES " +
                                        "and a.CHA_DA_PROTO='0' and a.CHA_TIPO_PROTO='P' " +
                                        "and s.DTA_SPEDIZIONE is not null " +
                                        "and d.TYPE_ID='INTEROPERABILITA' and r.CHA_TIPO_MITT_DEST in ('D','C', 'F') " + filtroDataSped;

                                        // PEC 4 Requisito 3: ricerca documenti spediti
                                        // La query attuale controlla solo se è presente il var_proto_dest, ma in caso di eccezione non è presente.
                                        // controllo che il var_motivo_annulla e il cha_annullato siano null
                                        // andStr += " a.system_id in" +
                                        // "(select a.system_id from " + filtro +
                                        // " and (select count(*) from " +
                                        //filtro +
                                        // " )!=(select count(*) from " +
                                        // filtro +
                                        // " and (s.var_proto_dest is not null or s.var_motivo_annulla is not null or s.cha_annullato is not null)))";
                                        //" and (select count(*) from " + filtro + ")!=(select count(*) from " + filtro + " and s.var_proto_dest is not null))";

                                        // Modifica ricerca doc in attesa di risposta. La precedente la commento per riferimento, le altre modifico. Lembo.
                                        andStr += " a.system_id in" +
                                        "(select a.system_id from " + filtro +
                                        " and (select count(*) from " +
                                        filtro +
                                        " and s.status_c_mask like '___A_A%')>0)";


                                    }
                                    if (f.valore == "1") // Documenti con almeno una ricevuta di conferma 
                                    {
                                        string filtro = "dpa_stato_invio s, dpa_doc_arrivo_par r, documenttypes d " +
                                        "where a.SYSTEM_ID= s.ID_PROFILE " +
                                        "and r.SYSTEM_ID=s.ID_DOC_ARRIVO_PAR " +
                                        "and d.SYSTEM_ID=r.ID_DOCUMENTTYPES " +
                                        "and a.CHA_DA_PROTO='0' and a.CHA_TIPO_PROTO='P' " +
                                        "and s.DTA_SPEDIZIONE is not null " +
                                        "and d.TYPE_ID='INTEROPERABILITA' and r.CHA_TIPO_MITT_DEST in ('D','C', 'F') " + filtroDataSped;
                                        // PEC 4 Requisito 3: ricerca documenti spediti
                                        // Modifico la query in modo che controlli che non abbiano la ricevuta di annullamento
                                        //andStr += " a.system_id in" +
                                        //"(select a.system_id from " + filtro +
                                        //" and (select count(*) from dpa_stato_invio s where" +
                                        //" a.SYSTEM_ID= s.ID_PROFILE" +
                                        //" and s.DTA_SPEDIZIONE is not null)=(select count(*) from dpa_stato_invio s where" +
                                        //" a.SYSTEM_ID= s.ID_PROFILE" +
                                        //" and s.DTA_SPEDIZIONE is not null" +
                                        //" and s.var_proto_dest is not null and s.var_motivo_annulla is null and s.cha_annullato is null))";
                                        //" and (select count(*) from " + filtro + ")=(select count(*) from " + filtro + "and s.var_proto_dest is not null))";
                                        andStr += " a.system_id in" +
                                        "(select a.system_id from " + filtro +
                                        " and (select count(*) from " + filtro +
                                        " and s.var_proto_dest is not null and s.var_motivo_annulla is null and s.cha_annullato is null)>0)";
                                    }
                                    if (f.valore == "2") // Documenti con almeno una ricevuta di annullamento
                                    {
                                        // PEC 4 Requisito 3: ricerca documenti spediti
                                        // La prima parte dovrebbe essere uguale per tutti
                                        string filtro = "dpa_stato_invio s, dpa_doc_arrivo_par r, documenttypes d " +
                                        "where a.SYSTEM_ID= s.ID_PROFILE " +
                                        "and r.SYSTEM_ID=s.ID_DOC_ARRIVO_PAR " +
                                        "and d.SYSTEM_ID=r.ID_DOCUMENTTYPES " +
                                        "and a.CHA_DA_PROTO='0' and a.CHA_TIPO_PROTO='P' " +
                                        "and s.DTA_SPEDIZIONE is not null " +
                                        "and d.TYPE_ID='INTEROPERABILITA' and r.CHA_TIPO_MITT_DEST in ('D','C', 'F') " + filtroDataSped;
                                        // Modifico la query in modo che controlli che abbiano una ricevuta di annullamento
                                        // cioè cha_annullato='1'
                                        andStr += " a.system_id in" +
                                        "(select a.system_id from " + filtro +
                                        " and (select count(*) from " + filtro +
                                        " and s.var_proto_dest is not null and s.cha_annullato='1')>0)";

                                    }
                                    if (f.valore == "3") // Documenti con almeno una ricevuta di eccezione
                                    {
                                        // PEC 4 Requisito 3: ricerca documenti spediti
                                        // La prima parte dovrebbe essere uguale per tutti
                                        string filtro = "dpa_stato_invio s, dpa_doc_arrivo_par r, documenttypes d " +
                                        "where a.SYSTEM_ID= s.ID_PROFILE " +
                                        "and r.SYSTEM_ID=s.ID_DOC_ARRIVO_PAR " +
                                        "and d.SYSTEM_ID=r.ID_DOCUMENTTYPES " +
                                        "and a.CHA_DA_PROTO='0' and a.CHA_TIPO_PROTO='P' " +
                                        "and s.DTA_SPEDIZIONE is not null " +
                                        "and d.TYPE_ID='INTEROPERABILITA' and r.CHA_TIPO_MITT_DEST in ('D','C', 'F') " + filtroDataSped;
                                        // Modifico la query in modo che controlli che abbiano una ricevuta di eccezione
                                        // il problema è che le ricevute di eccezioni arrivano anche in caso di spedizione con esito negativo
                                        // quindi la query deve essere fatta sulla status_c_mask
                                        andStr += " a.system_id in" +
                                        "(select a.system_id from " + filtro +
                                        " and (select count(*) from " + filtro +
                                        " and s.status_c_mask like '_____X%')>0)";

                                    }
                                }
                                if (!string.IsNullOrEmpty(filtroDocSpeditiTipo) && filtroDocSpeditiTipo.Equals("PITRE"))
                                {
                                    // PEC 4 Requisito 3: ricerca documenti spediti
                                    // Per i commenti vedere l'if della PEC
                                    andStr += " AND ";
                                    numAndStr += 1;
                                    if (f.valore == "T")
                                    {
                                        andStr += " a.system_id in" +
                                        "(select a.system_id from dpa_stato_invio s, dpa_doc_arrivo_par r, documenttypes d " +
                                        "where a.SYSTEM_ID= s.ID_PROFILE " +
                                        "and r.SYSTEM_ID=s.ID_DOC_ARRIVO_PAR " +
                                        "and d.SYSTEM_ID=r.ID_DOCUMENTTYPES " +
                                        "and a.CHA_DA_PROTO='0' and a.CHA_TIPO_PROTO='P' " +
                                        "and s.DTA_SPEDIZIONE is not null " +
                                        "and d.TYPE_ID='" + DocsPaDB.Query_DocsPAWS.InteroperabilitaSemplificata.SimplifiedInteroperabilityId + "' and r.CHA_TIPO_MITT_DEST in ('D','C', 'F') " + filtroDataSped + ")";
                                    }
                                    if (f.valore == "0")
                                    {
                                        string filtro = "dpa_stato_invio s, dpa_doc_arrivo_par r, documenttypes d " +
                                        "where a.SYSTEM_ID= s.ID_PROFILE " +
                                        "and r.SYSTEM_ID=s.ID_DOC_ARRIVO_PAR " +
                                        "and d.SYSTEM_ID=r.ID_DOCUMENTTYPES " +
                                        "and a.CHA_DA_PROTO='0' and a.CHA_TIPO_PROTO='P' " +
                                        "and s.DTA_SPEDIZIONE is not null " +
                                        "and d.TYPE_ID='" + DocsPaDB.Query_DocsPAWS.InteroperabilitaSemplificata.SimplifiedInteroperabilityId + "' and r.CHA_TIPO_MITT_DEST in ('D','C', 'F') " + filtroDataSped;

                                        andStr += " a.system_id in" +
                                         "(select a.system_id from " + filtro +
                                         " and (select count(*) from " +
                                         filtro +
                                         " and s.status_c_mask like '___A_A%')>0)";
                                    }
                                    if (f.valore == "1")
                                    {
                                        string filtro = "dpa_stato_invio s, dpa_doc_arrivo_par r, documenttypes d " +
                                        "where a.SYSTEM_ID= s.ID_PROFILE " +
                                        "and r.SYSTEM_ID=s.ID_DOC_ARRIVO_PAR " +
                                        "and d.SYSTEM_ID=r.ID_DOCUMENTTYPES " +
                                        "and a.CHA_DA_PROTO='0' and a.CHA_TIPO_PROTO='P' " +
                                        "and s.DTA_SPEDIZIONE is not null " +
                                        "and d.TYPE_ID='" + DocsPaDB.Query_DocsPAWS.InteroperabilitaSemplificata.SimplifiedInteroperabilityId + "' and r.CHA_TIPO_MITT_DEST in ('D','C', 'F') " + filtroDataSped;

                                        andStr += " a.system_id in" +
                                        "(select a.system_id from " + filtro +
                                        " and (select count(*) from " + filtro +
                                        " and s.var_proto_dest is not null and s.var_motivo_annulla is null and s.cha_annullato is null)>0)";
                                        //" and (select count(*) from " + filtro + ")=(select count(*) from " + filtro + "and s.var_proto_dest is not null))";
                                    }
                                    if (f.valore == "2")
                                    {
                                        string filtro = "dpa_stato_invio s, dpa_doc_arrivo_par r, documenttypes d " +
                                        "where a.SYSTEM_ID= s.ID_PROFILE " +
                                        "and r.SYSTEM_ID=s.ID_DOC_ARRIVO_PAR " +
                                        "and d.SYSTEM_ID=r.ID_DOCUMENTTYPES " +
                                        "and a.CHA_DA_PROTO='0' and a.CHA_TIPO_PROTO='P' " +
                                        "and s.DTA_SPEDIZIONE is not null " +
                                        "and d.TYPE_ID='" + DocsPaDB.Query_DocsPAWS.InteroperabilitaSemplificata.SimplifiedInteroperabilityId + "' and r.CHA_TIPO_MITT_DEST in ('D','C', 'F') " + filtroDataSped;

                                        andStr += " a.system_id in" +
                                        "(select a.system_id from " + filtro +
                                        " and (select count(*) from " + filtro +
                                       " and s.var_proto_dest is not null and s.cha_annullato='1')>0)";
                                        //" and (select count(*) from " + filtro + ")=(select count(*) from " + filtro + "and s.var_proto_dest is not null))";
                                    }
                                    if (f.valore == "3")
                                    {
                                        string filtro = "dpa_stato_invio s, dpa_doc_arrivo_par r, documenttypes d " +
                                        "where a.SYSTEM_ID= s.ID_PROFILE " +
                                        "and r.SYSTEM_ID=s.ID_DOC_ARRIVO_PAR " +
                                        "and d.SYSTEM_ID=r.ID_DOCUMENTTYPES " +
                                        "and a.CHA_DA_PROTO='0' and a.CHA_TIPO_PROTO='P' " +
                                        "and s.DTA_SPEDIZIONE is not null " +
                                        "and d.TYPE_ID='" + DocsPaDB.Query_DocsPAWS.InteroperabilitaSemplificata.SimplifiedInteroperabilityId + "' and r.CHA_TIPO_MITT_DEST in ('D','C', 'F') " + filtroDataSped;

                                        andStr += " a.system_id in" +
                                        "(select a.system_id from " + filtro +
                                        " and (select count(*) from " + filtro +
                                        " and s.status_c_mask like '_____X%')>0)";
                                        //" and (select count(*) from " + filtro + ")=(select count(*) from " + filtro + "and s.var_proto_dest is not null))";
                                    }
                                }
                                if (!string.IsNullOrEmpty(filtroDocSpeditiTipo) && filtroDocSpeditiTipo.Equals("ALL"))
                                {
                                    // PEC 4 Requisito 3: ricerca documenti spediti
                                    // Per i commenti vedere l'if della PEC
                                    andStr += " AND ";
                                    numAndStr += 1;
                                    if (f.valore == "T")
                                    {
                                        andStr += " a.system_id in" +
                                        "(select a.system_id from dpa_stato_invio s, dpa_doc_arrivo_par r, documenttypes d " +
                                        "where a.SYSTEM_ID= s.ID_PROFILE " +
                                        "and r.SYSTEM_ID=s.ID_DOC_ARRIVO_PAR " +
                                        "and d.SYSTEM_ID=r.ID_DOCUMENTTYPES " +
                                        "and a.CHA_DA_PROTO='0' and a.CHA_TIPO_PROTO='P' " +
                                        "and s.DTA_SPEDIZIONE is not null " +
                                        "and d.TYPE_ID in ('INTEROPERABILITA','" + DocsPaDB.Query_DocsPAWS.InteroperabilitaSemplificata.SimplifiedInteroperabilityId + "') and r.CHA_TIPO_MITT_DEST in ('D','C', 'F') " + filtroDataSped + ")";
                                    }
                                    if (f.valore == "0")
                                    {
                                        string filtro = "dpa_stato_invio s, dpa_doc_arrivo_par r, documenttypes d " +
                                        "where a.SYSTEM_ID= s.ID_PROFILE " +
                                        "and r.SYSTEM_ID=s.ID_DOC_ARRIVO_PAR " +
                                        "and d.SYSTEM_ID=r.ID_DOCUMENTTYPES " +
                                        "and a.CHA_DA_PROTO='0' and a.CHA_TIPO_PROTO='P' " +
                                        "and s.DTA_SPEDIZIONE is not null " +
                                        "and d.TYPE_ID in ('INTEROPERABILITA','" + DocsPaDB.Query_DocsPAWS.InteroperabilitaSemplificata.SimplifiedInteroperabilityId + "') and r.CHA_TIPO_MITT_DEST in ('D','C', 'F') " + filtroDataSped;

                                        andStr += " a.system_id in" +
                                        "(select a.system_id from " + filtro +
                                        " and (select count(*) from " +
                                        filtro +
                                        " and s.status_c_mask like '___A_A%')>0)";
                                    }
                                    if (f.valore == "1")
                                    {
                                        string filtro = "dpa_stato_invio s, dpa_doc_arrivo_par r, documenttypes d " +
                                        "where a.SYSTEM_ID= s.ID_PROFILE " +
                                        "and r.SYSTEM_ID=s.ID_DOC_ARRIVO_PAR " +
                                        "and d.SYSTEM_ID=r.ID_DOCUMENTTYPES " +
                                        "and a.CHA_DA_PROTO='0' and a.CHA_TIPO_PROTO='P' " +
                                        "and s.DTA_SPEDIZIONE is not null " +
                                        "and d.TYPE_ID in ('INTEROPERABILITA','" + DocsPaDB.Query_DocsPAWS.InteroperabilitaSemplificata.SimplifiedInteroperabilityId + "') and r.CHA_TIPO_MITT_DEST in ('D','C', 'F') " + filtroDataSped;

                                        andStr += " a.system_id in" +
                                        "(select a.system_id from " + filtro +
                                        " and (select count(*) from " + filtro +
                                        " and s.var_proto_dest is not null and s.var_motivo_annulla is null and s.cha_annullato is null)>0)";
                                        //" and (select count(*) from " + filtro + ")=(select count(*) from " + filtro + "and s.var_proto_dest is not null))";
                                    }
                                    if (f.valore == "2")
                                    {
                                        string filtro = "dpa_stato_invio s, dpa_doc_arrivo_par r, documenttypes d " +
                                        "where a.SYSTEM_ID= s.ID_PROFILE " +
                                        "and r.SYSTEM_ID=s.ID_DOC_ARRIVO_PAR " +
                                        "and d.SYSTEM_ID=r.ID_DOCUMENTTYPES " +
                                        "and a.CHA_DA_PROTO='0' and a.CHA_TIPO_PROTO='P' " +
                                        "and s.DTA_SPEDIZIONE is not null " +
                                        "and d.TYPE_ID in ('INTEROPERABILITA','" + DocsPaDB.Query_DocsPAWS.InteroperabilitaSemplificata.SimplifiedInteroperabilityId + "') and r.CHA_TIPO_MITT_DEST in ('D','C', 'F') " + filtroDataSped;

                                        andStr += " a.system_id in" +
                                        "(select a.system_id from " + filtro +
                                        " and (select count(*) from " + filtro +
                                        " and s.var_proto_dest is not null and s.cha_annullato='1')>0)";
                                        //" and (select count(*) from " + filtro + ")=(select count(*) from " + filtro + "and s.var_proto_dest is not null))";
                                    }
                                    if (f.valore == "3")
                                    {
                                        string filtro = "dpa_stato_invio s, dpa_doc_arrivo_par r, documenttypes d " +
                                        "where a.SYSTEM_ID= s.ID_PROFILE " +
                                        "and r.SYSTEM_ID=s.ID_DOC_ARRIVO_PAR " +
                                        "and d.SYSTEM_ID=r.ID_DOCUMENTTYPES " +
                                        "and a.CHA_DA_PROTO='0' and a.CHA_TIPO_PROTO='P' " +
                                        "and s.DTA_SPEDIZIONE is not null " +
                                        "and d.TYPE_ID in ('INTEROPERABILITA','" + DocsPaDB.Query_DocsPAWS.InteroperabilitaSemplificata.SimplifiedInteroperabilityId + "') and r.CHA_TIPO_MITT_DEST in ('D','C', 'F') " + filtroDataSped;

                                        andStr += " a.system_id in" +
                                        "(select a.system_id from " + filtro +
                                        " and (select count(*) from " + filtro +
                                        " and s.status_c_mask like '_____X%')>0)";
                                        //" and (select count(*) from " + filtro + ")=(select count(*) from " + filtro + "and s.var_proto_dest is not null))";
                                    }
                                }
                                break;
                            case "DOC_SPEDITI_TIPO":
                                filtroDocSpeditiTipo += f.valore;
                                break;
                            case "DOC_SPEDITI_ESITO":
                                // PEC 4 Requisito 3: ricerca documenti spediti
                                // Questo filtro si basa solo sul risultato della spedizione, non comprende le ricevute degli interoperanti
                                andStr += " AND ";
                                numAndStr += 1;
                                if (f.valore == "V") // Documenti spediti con esito positivo
                                {
                                    string filtro = "dpa_stato_invio s " +
                                        "where a.SYSTEM_ID= s.ID_PROFILE " +
                                        "and a.CHA_DA_PROTO='0' and a.CHA_TIPO_PROTO='P' " +
                                        "and s.DTA_SPEDIZIONE is not null ";

                                    andStr += " a.system_id in" +
                                    "(select a.system_id from " + filtro +
                                    " and (select count(*) from dpa_stato_invio s where" +
                                    " a.SYSTEM_ID= s.ID_PROFILE" +
                                    " and s.DTA_SPEDIZIONE is not null)=(select count(*) from dpa_stato_invio s where" +
                                    " a.SYSTEM_ID= s.ID_PROFILE" +
                                    " and s.DTA_SPEDIZIONE is not null" +
                                    " and (s.status_c_mask like 'VV____%' or s.status_c_mask like '__V___%')))"; // primo filtro per doc via mail, secondo per PEC e IS
                                }
                                if (f.valore == "X") // Documenti spediti con esito negativo
                                {
                                    string filtro = "dpa_stato_invio s " +
                                                                            "where a.SYSTEM_ID= s.ID_PROFILE " +
                                                                            "and a.CHA_DA_PROTO='0' and a.CHA_TIPO_PROTO='P' " +
                                                                            "and s.DTA_SPEDIZIONE is not null ";

                                    andStr += " a.system_id in" +
                                    "(select a.system_id from " + filtro +
                                    " and ((select count(*) from dpa_stato_invio s where" +
                                    " a.SYSTEM_ID= s.ID_PROFILE" +
                                    " and s.DTA_SPEDIZIONE is not null" +
                                    " and (s.status_c_mask like 'XX____%' or s.status_c_mask like '__X___%'))>0))"; // primo filtro per doc via mail, secondo per PEC e IS

                                }
                                if (f.valore == "A") // Documenti spediti in attesa di ricezione delle ricevute di accettazione e/o consegna
                                {
                                    string filtro = "dpa_stato_invio s " +
                                                                            "where a.SYSTEM_ID= s.ID_PROFILE " +
                                                                            "and a.CHA_DA_PROTO='0' and a.CHA_TIPO_PROTO='P' " +
                                                                            "and s.DTA_SPEDIZIONE is not null ";

                                    andStr += " a.system_id in" +
                                    "(select a.system_id from " + filtro +
                                    " and ((select count(*) from dpa_stato_invio s where" +
                                    " a.SYSTEM_ID= s.ID_PROFILE" +
                                    " and s.DTA_SPEDIZIONE is not null" +
                                    " and (s.status_c_mask like 'AA____%' or s.status_c_mask like '__A___%'))>0)" +
                                    " and ((select count(*) from dpa_stato_invio s where" +
                                    " a.SYSTEM_ID= s.ID_PROFILE" +
                                    " and s.DTA_SPEDIZIONE is not null" +
                                    " and (s.status_c_mask like 'XX____%' or s.status_c_mask like '__X___%'))=0))"; // primo filtro per doc via mail, secondo per PEC e IS

                                }
                                break;
                            case "DATA_SPEDIZIONE_DA":
                                filtroDataSped += " and s.DTA_SPEDIZIONE >=" + DocsPaDbManagement.Functions.Functions.ToDateBetween(f.valore, true);
                                break;
                            case "DATA_SPEDIZIONE_A":
                                filtroDataSped += " and s.DTA_SPEDIZIONE <=" + DocsPaDbManagement.Functions.Functions.ToDateBetween(f.valore, false);
                                break;
                            case "DOC_MAI_SPEDITI":
                                    numAndStr += 1;
                                    andStr += " AND NOT EXISTS (SELECT 'X' FROM DPA_STATO_INVIO WHERE ID_PROFILE = A.SYSTEM_ID AND ROWNUM = 1) ";
                                break;
                            case "DOC_MAI_SPEDITI_DA_UTENTE":
                                numAndStr += 1;
                                andStr += " AND NOT EXISTS (SELECT 'X' FROM DPA_LOG WHERE ID_OGGETTO = A.SYSTEM_ID AND ID_PEOPLE_OPERATORE=" + f.valore + " AND VAR_COD_AZIONE='DOCUMENTOSPEDISCI' AND ROWNUM = 1) ";
                                break;
                            case "DOC_MAI_SPEDITI_DA_RUOLO":
                                numAndStr += 1;
                                andStr += " AND NOT EXISTS (SELECT 'X' FROM DPA_SEND_STO WHERE ID_PROFILE = A.SYSTEM_ID AND ID_GROUP_SENDER = " + f.valore + " AND ROWNUM=1 ) ";
                                break;
                            case "CODICE_DESCRIZIONE_AMMINISTRAZIONE":
                                if (numAndStr > 0)
                                    andStr += " AND ";
                                numAndStr += 1;
                                andStr += "a.system_id  IN ( SELECT  /*+ index (f)  index(f) */ f.id_profile FROM dpa_doc_arrivo_par f, dpa_corr_globali g " +
                                            "WHERE F.ID_PROFILE=a.system_id and g.system_id = f.ID_MITT_DEST AND UPPER(g.COD_DESC_INTEROP) LIKE UPPER('%" + DocsPaUtils.Functions.Functions.ReplaceApexes(f.valore) + "%'))";
                                break;
                            case "NUMERO_VERSIONI":
                                if (numAndStr > 0)
                                    andStr += " AND ";
                                numAndStr += 1;
                                andStr += " (select count(z.version_id) from VERSIONS z where a.DOCNUMBER=z.DOCNUMBER) " + f.valore;
                                break;
                            case "NUMERO_ALLEGATI":
                                //if (numAndStr > 0)
                                //    andStr += " AND ";
                                //numAndStr += 1;
                                //if (f.valore.Equals("user") || f.valore.Equals("esterni") || f.valore.Equals("tutti"))
                                //{
                                //    andStr += " (select count(x.system_id) from profile x where a.DOCNUMBER=x.id_documento_principale) " + f.valore;
                                //}
                                //else
                                //{ 
                                //    andStr += " (select count(x.system_id) from profile x, dpa_notifica n where x.docnumber=a.docnumber and" +
                                //                " a.docnumber=n.docnumber) > 0 ";
                                //}
                                numAll = f.valore;
                                break;
                            case "NUMERO_ALLEGATI_TIPO":
                                if (numAndStr > 0 /*&& !f.valore.Equals("tutti")*/)
                                    andStr += " AND ";
                                if (f.valore.Equals("pec"))
                                {
                                    andStr += " (select count(x.system_id) from profile x, dpa_notifica n where x.docnumber=a.docnumber and a.docnumber=n.docnumber) > 0 AND ";
                                    andStr += " (select count(x.system_id) from profile x where x.id_documento_principale=a.docnumber and x.var_prof_oggetto LIKE 'Ricevuta di ritorno delle Mail%')" + numAll;
                                }
                                else if (f.valore.Equals("user"))
                                {
                                    andStr += " (select count(x.system_id) from profile x where a.DOCNUMBER=x.id_documento_principale) " + numAll + " AND ";
                                    andStr += " ((select count(x.system_id) from profile x where a.DOCNUMBER=x.id_documento_principale)-" +
                                                "(select count(x.system_id) from profile x, dpa_notifica n where x.docnumber=a.docnumber and" +
                                                " a.docnumber=n.docnumber)" +
                                                "-(select count(p.system_id) FROM VERSIONS v, Profile p WHERE p.id_documento_principale=a.docnumber and v.docnumber=p.docnumber and v.CHA_ALLEGATI_ESTERNO = '1'))"
                                                + numAll;
                                }
                                else if (f.valore.Equals("esterni"))
                                {
                                    andStr += " (select count(x.system_id) from profile x where a.DOCNUMBER=x.id_documento_principale) " + numAll + " AND ";
                                    andStr += "(select count(p.system_id) FROM VERSIONS v, Profile p WHERE p.id_documento_principale=a.docnumber and v.docnumber=p.docnumber and v.CHA_ALLEGATI_ESTERNO = '1')" + numAll;
                                }
                                else if (f.valore.Equals(InteroperabilitaSemplificata.SimplifiedInteroperabilityId))
                                {
                                    andStr += " (select count(x.system_id) from profile x, dpa_notifica n where x.docnumber=a.docnumber and a.docnumber=n.docnumber) > 0 AND ";
                                    andStr += " (select count(x.system_id) from profile x where x.id_documento_principale=a.docnumber and (x.var_prof_oggetto LIKE 'Ricevuta di mancata consegna%' or x.var_prof_oggetto LIKE 'Ricevuta di avvenuta%'))" + numAll;
                                }
                                else if (f.valore.Equals("tutti"))
                                {
                                    andStr += " (select count(x.system_id) from profile x where a.DOCNUMBER=x.id_documento_principale) " + numAll;
                                }
                                break;
                            case "RIFERIMENTO_MITTENTE":
                                andStr += " AND a.CHA_RIFF_MITT LIKE '%" + f.valore + "%' ";
                                break;

                            case "ID_AUTHOR":
                                FiltroRicerca corrTypeAuthorId = objQueryList[0].Where(e => e.argomento == CommonSearchFilters.CORR_TYPE_AUTHOR.ToString()).FirstOrDefault();
                                StringBuilder filterConditionAuthorId = new StringBuilder(" AND ");
                                // Se esiste il filtro CORR_TYPE_AUTHOR, viene costruito il filtro per system_id del creatore
                                if (corrTypeAuthorId != null)
                                {
                                    switch (corrTypeAuthorId.valore)
                                    {
                                        case "R":
                                            FiltroRicerca searchHistoricized = objQueryList[0].Where(e => e.argomento == CommonSearchFilters.EXTEND_TO_HISTORICIZED_AUTHOR.ToString()).FirstOrDefault();
                                            if (searchHistoricized != null && Convert.ToBoolean(searchHistoricized.valore))
                                            {
                                                Query q = null;
                                                Query sqlDb = null;

                                                if (dbType == "SQL")
                                                {
                                                    q = InitQuery.getInstance().getQuery("S_GET_ROLE_CHAIN_ID_CORR_GLOBALI_IN_CLAUSOLE");

                                                    sqlDb = InitQuery.getInstance().getQuery("S_GET_ROLE_CHAIN_ID_CORR_GLOBALI_OUT_CLAUSOLE");
                                                    sqlDb.setParam("idCorrGlob", f.valore);
                                                    chaiTableDef = sqlDb.getSQL();
                                                    
                                                }
                                                else
                                                {
                                                    q = InitQuery.getInstance().getQuery("S_GET_ROLE_CHAIN_ID_CORR_GLOBALI");
                                                    q.setParam("idCorrGlob", f.valore);
                                                    
                                                }

                                                filterConditionAuthorId.AppendFormat("id_ruolo_creatore IN ({0})", q.getSQL());
                                            }
                                            else
                                                filterConditionAuthorId.AppendFormat("id_ruolo_creatore = {0} ", f.valore);
                                            break;
                                        case "P":
                                            filterConditionAuthorId.AppendFormat("author IN (SELECT id_people FROM dpa_corr_globali WHERE system_id = {0}) ", f.valore);
                                            break;
                                        case "U":
                                            filterConditionAuthorId.AppendFormat("id_uo_creatore = {0} ", f.valore);
                                            break;
                                    }

                                }

                                andStr += filterConditionAuthorId.ToString();
                                break;

                            case "DESC_AUTHOR":
                                FiltroRicerca corrTypeAuthorDescr = objQueryList[0].Where(e => e.argomento == CommonSearchFilters.CORR_TYPE_AUTHOR.ToString()).FirstOrDefault();
                                StringBuilder filterConditionAuthorDescr = new StringBuilder(" AND EXISTS(SELECT 'x' FROM dpa_corr_globali cg WHERE ");
                                // Se esiste il filtro CORR_TYPE_AUTHOR, viene costruito il filtro per system_id del creatore
                                if (corrTypeAuthorDescr != null)
                                {
                                    switch (corrTypeAuthorDescr.valore)
                                    {
                                        case "R":
                                            // Se biosgna estenere la ricerca ai ruoli storicizzati, devono essere considerati anche
                                            // quelli con dta_fine valorizzata altrimenti devono essere considerati solo quelli con
                                            // dta_fine non impostata
                                            FiltroRicerca searchHistoricized = objQueryList[0].Where(e => e.argomento == CommonSearchFilters.EXTEND_TO_HISTORICIZED_AUTHOR.ToString()).FirstOrDefault();
                                            if (searchHistoricized != null && !Convert.ToBoolean(searchHistoricized.valore))
                                                filterConditionAuthorDescr.Append("cg.dta_fine IS NULL AND ");

                                            filterConditionAuthorDescr.Append("cg.system_id = id_ruolo_creatore");
                                            break;
                                        case "P":
                                            filterConditionAuthorDescr.Append("cg.id_people = author");
                                            break;
                                        case "U":
                                            filterConditionAuthorDescr.Append("cg.system_id = id_uo_creatore");
                                            break;
                                    }

                                    if (Cfg_USE_TEXT_INDEX.Equals("0"))
                                        filterConditionAuthorDescr.AppendFormat(" AND UPPER(cg.var_desc_corr) LIKE UPPER('%{0}%'))", f.valore);
                                    else
                                    {
                                        if (Cfg_USE_TEXT_INDEX.Equals("1"))
                                        {
                                            //string searchMittDest = " AND g.SYSTEM_id in ( \n " +
                                            //                        " select system_id from table(fulltext_onvar_desc_corr ( \n " +
                                            //                        "'" + DocsPaUtils.Functions.Functions.ReplaceApexes(f.valore).ToUpper() + "'))) \n";
                                            //andStr += " A.SYSTEM_ID IN (SELECT F.ID_PROFILE FROM DPA_DOC_ARRIVO_PAR F ,DPA_CORR_GLOBALI G  where F.ID_PROFILE=a.system_id and  G.SYSTEM_ID=F.ID_MITT_DEST " + searchMittDest + ") ";
                                        }
                                        else
                                        {
                                            if (Cfg_USE_TEXT_INDEX.Equals("2"))
                                            {
                                                string value = DocsPaUtils.Functions.Functions.ReplaceApexes(f.valore).ToUpper();
                                                string valueA = value;
                                                if (valueA.Contains("&&"))
                                                    valueA = valueA.Replace("&&", "");
                                                bool casoA = false;
                                                if (value.Substring(0, value.Length - 1).Contains("%") && !value.Substring(0, value.Length - 1).Contains("%&&"))
                                                    casoA = true;
                                                if (value.Contains("&&"))
                                                {
                                                    string result = string.Empty;
                                                    foreach (string filter in new Regex("&&").Split(value))
                                                        if (!string.IsNullOrEmpty(filter))
                                                            result += filter + " AND ";
                                                    value = result.Substring(0, result.Length - 5);
                                                }
                                                if (value.Contains("%") && value.IndexOf("%") != value.Length - 1)
                                                {
                                                    bool finale = value.EndsWith("%");
                                                    string result = string.Empty;
                                                    foreach (string filter in new Regex("%").Split(value))
                                                        if (!string.IsNullOrEmpty(filter))
                                                            result += filter + "% AND ";
                                                    value = result.Substring(0, result.Length - 6);
                                                    if (finale)
                                                        value = value + "%";
                                                }
                                                if (value.ToUpper().Contains(" AND  AND "))
                                                    value = value.ToUpper().Replace(" AND  AND ", " AND ");

                                                filterConditionAuthorDescr.AppendFormat(" AND {0} ", DocsPaDbManagement.Functions.Functions.GetContainsTextQuery("cg.VAR_DESC_CORR", value));
                                                if (casoA)
                                                    filterConditionAuthorDescr.AppendFormat(" and upper(cg.VAR_DESC_CORR) like upper('%" + valueA + "%')");
                                                filterConditionAuthorDescr.Append(")");
                                            }
                                        }
                                    }
                                }

                                andStr += filterConditionAuthorDescr.ToString();
                                break;
                            case "ID_OWNER":
                                FiltroRicerca corrTypeOwnerId = objQueryList[0].Where(e => e.argomento == CommonSearchFilters.CORR_TYPE_OWNER.ToString()).FirstOrDefault();
                                StringBuilder filterConditionOwnerId = new StringBuilder(" AND EXISTS(SELECT 'x' FROM security sec WHERE sec.thing = a.system_id AND sec.cha_tipo_diritto = 'P' AND sec.personorgroup IN (SELECT ");
                                // Se esiste il filtro CORR_TYPE_OWNER, viene costruito il filtro per system_id del proprietario
                                if (corrTypeOwnerId != null)
                                {
                                    switch (corrTypeOwnerId.valore)
                                    {
                                        case "R":
                                            filterConditionOwnerId.Append("cg.id_gruppo");
                                            break;
                                        case "P":
                                            filterConditionOwnerId.Append("cg.id_people");
                                            break;
                                        case "U":
                                            filterConditionOwnerId.Append("cg.id_gruppo");
                                            filterConditionOwnerId.AppendFormat(" FROM dpa_corr_globali cg WHERE cg.id_uo = {0}))", f.valore);
                                            break;
                                    }
                                }
                                if (corrTypeOwnerId.valore != "U")
                                    filterConditionOwnerId.AppendFormat(" FROM dpa_corr_globali cg WHERE cg.system_id = {0}))", f.valore);

                                andStr += filterConditionOwnerId.ToString();
                                break;

                            case "DESC_OWNER":
                                FiltroRicerca corrTypeOwnerDescr = objQueryList[0].Where(e => e.argomento == CommonSearchFilters.CORR_TYPE_OWNER.ToString()).FirstOrDefault();
                                StringBuilder filterConditionOwnerDescr = new StringBuilder(" AND EXISTS(SELECT 'x' FROM security sec WHERE sec.thing = a.system_id AND sec.cha_tipo_diritto = 'P' AND sec.personorgroup IN (SELECT ");
                                // Se esiste il filtro CORR_TYPE_OWNER, viene costruito il filtro per descrizione del proprietario
                                if (corrTypeOwnerDescr != null)
                                {
                                    switch (corrTypeOwnerDescr.valore)
                                    {
                                        case "R":
                                        case "U":
                                            filterConditionOwnerDescr.Append("cg.id_gruppo");
                                            break;
                                        case "P":
                                            filterConditionOwnerDescr.Append("cg.id_people");
                                            break;
                                    }

                                }

                                if (Cfg_USE_TEXT_INDEX.Equals("0"))
                                {
                                    if (corrTypeOwnerDescr.valore != "U")
                                         filterConditionOwnerDescr.AppendFormat(" FROM dpa_corr_globali cg WHERE dta_fine IS NULL AND UPPER(cg.var_desc_corr) LIKE UPPER('%{0}%')))", f.valore);
                                    else
                                        filterConditionOwnerDescr.AppendFormat(" FROM dpa_corr_globali cg WHERE dta_fine IS NULL AND EXISTS(SELECT 'X' FROM DPA_CORR_GLOBALI cg1 WHERE cg1.system_id = cg.id_uo AND UPPER(cg1.var_desc_corr) LIKE UPPER('%{0}%'))))", f.valore);
                                }
                                else
                                {
                                    if (Cfg_USE_TEXT_INDEX.Equals("1"))
                                    {
                                        //string searchMittDest = " AND g.SYSTEM_id in ( \n " +
                                        //                        " select system_id from table(fulltext_onvar_desc_corr ( \n " +
                                        //                        "'" + DocsPaUtils.Functions.Functions.ReplaceApexes(f.valore).ToUpper() + "'))) \n";
                                        //andStr += " A.SYSTEM_ID IN (SELECT F.ID_PROFILE FROM DPA_DOC_ARRIVO_PAR F ,DPA_CORR_GLOBALI G  where F.ID_PROFILE=a.system_id and  G.SYSTEM_ID=F.ID_MITT_DEST " + searchMittDest + ") ";
                                    }
                                    else
                                    {
                                        if (Cfg_USE_TEXT_INDEX.Equals("2"))
                                        {
                                            string value = DocsPaUtils.Functions.Functions.ReplaceApexes(f.valore).ToUpper();
                                            string valueA = value;
                                            if (valueA.Contains("&&"))
                                                valueA = valueA.Replace("&&", "");
                                            bool casoA = false;
                                            if (value.Substring(0, value.Length - 1).Contains("%") && !value.Substring(0, value.Length - 1).Contains("%&&"))
                                                casoA = true;
                                            if (value.Contains("&&"))
                                            {
                                                string result = string.Empty;
                                                foreach (string filter in new Regex("&&").Split(value))
                                                    if (!string.IsNullOrEmpty(filter))
                                                        result += filter + " AND ";
                                                value = result.Substring(0, result.Length - 5);
                                            }
                                            if (value.Contains("%") && value.IndexOf("%") != value.Length - 1)
                                            {
                                                bool finale = value.EndsWith("%");
                                                string result = string.Empty;
                                                foreach (string filter in new Regex("%").Split(value))
                                                    if (!string.IsNullOrEmpty(filter))
                                                        result += filter + "% AND ";
                                                value = result.Substring(0, result.Length - 6);
                                                if (finale)
                                                    value = value + "%";
                                            }
                                            if (value.ToUpper().Contains(" AND  AND "))
                                                value = value.ToUpper().Replace(" AND  AND ", " AND ");

                                            //filterConditionOwnerDescr.AppendFormat(" FROM dpa_corr_globali cg WHERE dta_fine IS NULL AND UPPER(cg.var_desc_corr) LIKE UPPER('%{0}%')))", DocsPaDbManagement.Functions.Functions.GetContainsTextQuery("G.VAR_DESC_CORR", value));
                                            if (corrTypeOwnerDescr.valore != "U")
                                            {
                                                filterConditionOwnerDescr.AppendFormat(" FROM dpa_corr_globali cg WHERE dta_fine IS NULL AND {0} )", DocsPaDbManagement.Functions.Functions.GetContainsTextQuery("cg.VAR_DESC_CORR", value));
                                                if (casoA)
                                                    filterConditionOwnerDescr.AppendFormat(" and upper(cg.var_desc_corr) like upper('%" + valueA + "%')");
                                                filterConditionOwnerDescr.Append(")");
                                            }
                                            else
                                            {
                                                filterConditionOwnerDescr.AppendFormat(" FROM dpa_corr_globali cg WHERE dta_fine IS NULL AND EXISTS(SELECT 'X' FROM DPA_CORR_GLOBALI cg1 WHERE cg1.system_id =cg.id_uo AND {0} ))", DocsPaDbManagement.Functions.Functions.GetContainsTextQuery("cg1.VAR_DESC_CORR", value));
                                                if (casoA)
                                                    filterConditionOwnerDescr.AppendFormat(" and EXISTS (SLECT 'X' FROM DPA_CORR_GLOBALI CG1 WHERE CG1.SYSTEM_ID = cg.id_uo AND upper(cg1.var_desc_corr) like upper('%" + valueA + "%'))");
                                                filterConditionOwnerDescr.Append(")");
                                            }
                                        }
                                    }
                                }
                                andStr += filterConditionOwnerDescr.ToString();
                                break;

                            case "IN_CONSERVAZIONE":
                                if (f.valore.Equals("D"))
                                {
                                    if (dbType == "SQL")
                                    {
                                        string dbUser = DocsPaDbManagement.Functions.Functions.GetDbUserSession() + ".";

                                        andStr += " AND " + dbUser + "getInConservazioneNoSec(a.SYSTEM_ID,null,'D') is not null";
                                        //Faillace/Veltri 4/12/2012 Filtro per IDAMM su ricrca documenti conservazione
                                        //IdAmm è recuperato dall'IdPEople dell'utente loggato in centro servizi
                                        string idAmm = new Utenti().GetIdAmm(idPeople);
                                        andStr += String.Format(" AND " + dbUser + "getidamm(a.author) ={0}", idAmm);
                                    }
                                    else
                                    {
                                        andStr += " AND getInConservazioneNoSec(a.SYSTEM_ID,null,'D') is not null";
                                        //Faillace/Veltri 4/12/2012 Filtro per IDAMM su ricrca documenti conservazione
                                        //IdAmm è recuperato dall'IdPEople dell'utente loggato in centro servizi
                                        string idAmm = new Utenti().GetIdAmm(idPeople);
                                        andStr += String.Format(" AND getidamm(a.author) ={0}", idAmm);
                                    }
                                }
                                break;
                            ////
                            //// MEV CS 1.4 Esibizione
                            //// Aggiunto nuovo filtro per ricerca esibizione
                            //case "IN_CONSERVAZIONE_ESIB":
                            //    if (f.valore.Equals("D"))
                            //    {
                            //        if (dbType == "SQL")
                            //        {
                            //            string dbUser = DocsPaDbManagement.Functions.Functions.GetDbUserSession() + ".";

                            //            andStr += " AND " + dbUser + "getInConsNoSecPerEsib(a.SYSTEM_ID,null,'D') is not null";
                            //            //Faillace/Veltri 4/12/2012 Filtro per IDAMM su ricrca documenti conservazione
                            //            //IdAmm è recuperato dall'IdPEople dell'utente loggato in centro servizi
                            //            string idAmm = new Utenti().GetIdAmm(idPeople);
                            //            andStr += String.Format(" AND " + dbUser + "getidamm(a.author) ={0}", idAmm);
                            //        }
                            //        else
                            //        {
                            //            andStr += " AND getInConsNoSecPerEsib(a.SYSTEM_ID,null,'D') is not null";
                            //            //Faillace/Veltri 4/12/2012 Filtro per IDAMM su ricrca documenti conservazione
                            //            //IdAmm è recuperato dall'IdPEople dell'utente loggato in centro servizi
                            //            string idAmm = new Utenti().GetIdAmm(idPeople);
                            //            andStr += String.Format(" AND getidamm(a.author) ={0}", idAmm);
                            //        }
                            //    }
                            //    break;
                            //// End MEV
                            ////
                            case "SEARCH_DOCUMENT_SIMPLE":
                                if (!string.IsNullOrEmpty(f.valore))
                                {
                                    // if (numAndStr > 0)
                                    andStr += " AND (";
                                    numAndStr += 1;

                                    // La stringa di testo contenuta nel campo oggetto è messa in
                                    // AND utilizzando come separatore la stringa fissa '&&'

                                    if (Cfg_USE_TEXT_INDEX == "0")
                                    {
                                        Regex regex = new Regex("&&");
                                        string[] lista = regex.Split(f.valore);
                                        if (lista[0].ToUpper().Contains("'"))
                                            andStr += "UPPER(A.VAR_PROF_OGGETTO) LIKE '%" + lista[0].ToUpper().Replace("'", "''") + "%'";
                                        else
                                            andStr += "UPPER(A.VAR_PROF_OGGETTO) LIKE '%" + lista[0].ToUpper() + "%'";
                                        for (int z = 1; z < lista.Length; z++)
                                        {
                                            if (lista[i].ToUpper().Contains("'"))
                                                andStr += " AND UPPER(A.VAR_PROF_OGGETTO) LIKE '%" + lista[z].ToUpper().Replace("'", "''") + "%'";
                                            else
                                                andStr += " AND UPPER(A.VAR_PROF_OGGETTO) LIKE '%" + lista[z].ToUpper() + "%'";
                                        }
                                    }
                                    else if (Cfg_USE_TEXT_INDEX == "1")
                                    {
                                        f.valore.Replace("&&", " ");
                                        andStr += "a.SYSTEM_id in ( \n " +
                                                                " select system_id from table(fulltext_onvar_prof_oggetto ( \n " +
                                                                "'" + f.valore.ToUpper().Replace("'", "''") + "', \n" +
                                                                dtaCreazSucc + ", \n" +
                                                                dtaCreazPreced + ", \n" +
                                                                dtaProtoSucc + ", \n" +
                                                                dtaProtoPreced + " \n" + "))) \n";
                                    }
                                    else if (Cfg_USE_TEXT_INDEX == "2")
                                    {
                                        List<DocsPaVO.filtri.SearchTextItem> items = new List<DocsPaVO.filtri.SearchTextItem>();
                                        string value = DocsPaUtils.Functions.Functions.ReplaceApexes(f.valore).ToUpper();
                                        string valueA = value;
                                        if (valueA.Contains("&&"))
                                            valueA = valueA.Replace("&&", "");
                                        bool casoA = false;
                                        if (value.Substring(0, value.Length - 1).Contains("%") && !value.Substring(0, value.Length - 1).Contains("%&&"))
                                            casoA = true;
                                        if (value.Contains("&&"))
                                        {
                                            string result = string.Empty;
                                            foreach (string filter in new Regex("&&").Split(value))
                                                if (!string.IsNullOrEmpty(filter))
                                                    result += filter + " AND ";
                                            value = result.Substring(0, result.Length - 5);
                                        }
                                        if (value.Contains("%") && value.IndexOf("%") != value.Length - 1)
                                        {
                                            bool finale = value.EndsWith("%");
                                            string result = string.Empty;
                                            foreach (string filter in new Regex("%").Split(value))
                                                if (!string.IsNullOrEmpty(filter))
                                                    result += filter + "% AND ";
                                            value = result.Substring(0, result.Length - 6);
                                            if (finale)
                                                value = value + "%";
                                        }
                                        if (value.ToUpper().Contains(" AND  AND "))
                                            value = value.ToUpper().Replace(" AND  AND ", " AND ");
                                        andStr += DocsPaDbManagement.Functions.Functions.GetContainsTextQuery("A.VAR_PROF_OGGETTO", value);
                                        if (casoA)
                                            andStr += " and upper(A.VAR_PROF_OGGETTO) like upper('%" + valueA + "%')";
                                    }
                                    int res;
                                    if (Int32.TryParse(f.valore, out res))
                                    {
                                        andStr += " OR a.num_proto=" + res;
                                    }
                                    if (dbType.ToUpper() == "ORACLE")
                                    {
                                        andStr += " OR (  EXISTS (SELECT 'x' FROM dpa_doc_arrivo_par dp, dpa_corr_globali sim WHERE a.system_id = dp.id_profile AND sim.system_id = dp.id_mitt_dest and a.SYSTEM_ID = dp.ID_PROFILE AND contains (sim.var_desc_corr, '" + f.valore + "') > 0))";
                                    }
                                    else
                                    {
                                        andStr += " OR (  EXISTS (SELECT 'x' FROM dpa_doc_arrivo_par dp, dpa_corr_globali sim WHERE a.system_id = dp.id_profile AND sim.system_id = dp.id_mitt_dest and a.SYSTEM_ID = dp.ID_PROFILE AND upper(A.VAR_PROF_OGGETTO) like upper('%" + f.valore + "%')))";
                                    }
                                    andStr += ") ";
                                }
                                break;
                            //
                            // MEV CS 1.4 Esibizione
                            // Aggiunto nuovo filtro per ricerca esibizione
                            case "IN_CONSERVAZIONE_ESIB":
                                if (f.valore.Equals("D"))
                                {
                                    if (dbType == "SQL")
                                    {
                                        string dbUser = DocsPaDbManagement.Functions.Functions.GetDbUserSession() + ".";

                                        andStr += " AND " + dbUser + "getInConsNoSecPerEsib(a.SYSTEM_ID,null,'D') is not null";
                                        //Faillace/Veltri 4/12/2012 Filtro per IDAMM su ricrca documenti conservazione
                                        //IdAmm è recuperato dall'IdPEople dell'utente loggato in centro servizi
                                        string idAmm = new Utenti().GetIdAmm(idPeople);
                                        andStr += String.Format(" AND " + dbUser + "getidamm(a.author) ={0}", idAmm);
                                    }
                                    else
                                    {
                                        andStr += " AND getInConsNoSecPerEsib(a.SYSTEM_ID,null,'D') is not null";
                                        //Faillace/Veltri 4/12/2012 Filtro per IDAMM su ricrca documenti conservazione
                                        //IdAmm è recuperato dall'IdPEople dell'utente loggato in centro servizi
                                        string idAmm = new Utenti().GetIdAmm(idPeople);
                                        andStr += String.Format(" AND getidamm(a.author) ={0}", idAmm);
                                    }
                                }
                                break;
                            // End MEV
                            //
                            // ---- INTEGRAZIONE PITRE-PARER ----
                            case "STATO_CONSERVAZIONE":
                                if (!(f.valore.Equals("NVWCRETF")))
                                {
                                    string value = string.Empty;
                                    string condNoQueue = string.Empty;
                                    string condQueue = string.Empty;
                                    if (f.valore.Contains("N"))
                                    {
                                        //value += "'N'";
                                        if (!searchAllegato)
                                            //condNoQueue = "a.SYSTEM_ID NOT IN (SELECT id_profile FROM dpa_versamento)";
                                            condNoQueue = " NOT EXISTS (SELECT 'x' FROM DPA_VERSAMENTO V WHERE V.ID_PROFILE=A.SYSTEM_ID) ";
                                        else
                                            //condNoQueue = "(a.SYSTEM_ID NOT IN (SELECT id_profile FROM dpa_versamento))  OR  (a.ID_DOCUMENTO_PRINCIPALE NOT IN (SELECT id_profile FROM dpa_versamento))";
                                            condNoQueue = " NOT EXISTS (SELECT 'x' FROM DPA_VERSAMENTO V WHERE V.ID_PROFILE=A.SYSTEM_ID OR V.ID_PROFILE=A.ID_DOCUMENTO_PRINCIPALE) ";
                                    }
                                    if (f.valore.Contains("V"))
                                    {
                                        if (!string.IsNullOrEmpty(value))
                                            value += ",";
                                        value += "'V'";
                                    }
                                    if (f.valore.Contains("W"))
                                    {
                                        if (!string.IsNullOrEmpty(value))
                                            value += ",";
                                        value += "'W'";
                                    }
                                    if (f.valore.Contains("C"))
                                    {
                                        if (!string.IsNullOrEmpty(value))
                                            value += ",";
                                        value += "'C'";
                                    }
                                    if (f.valore.Contains("R"))
                                    {
                                        if (!string.IsNullOrEmpty(value))
                                            value += ",";
                                        value += "'R'";
                                    }
                                    if (f.valore.Contains("E"))
                                    {
                                        if (!string.IsNullOrEmpty(value))
                                            value += ",";
                                        value += "'E'";
                                    }
                                    if (f.valore.Contains("T"))
                                    {
                                        if (!string.IsNullOrEmpty(value))
                                            value += ",";
                                        value += "'T'";
                                    }
                                    if (f.valore.Contains("F"))
                                    {
                                        if (!string.IsNullOrEmpty(value))
                                            value += ",";
                                        value += "'F'";
                                    }
                                    if (!string.IsNullOrEmpty(value))
                                    {
                                        if (string.IsNullOrEmpty(condNoQueue))
                                        {
                                            // ricerca solo su doc in coda
                                            if (!searchAllegato)
                                                //andStr += string.Format(" AND a.SYSTEM_ID IN (SELECT id_profile FROM dpa_versamento WHERE cha_stato IN ({0}) )", value);
                                                andStr += string.Format(" AND EXISTS (SELECT 'x' FROM DPA_VERSAMENTO V WHERE V.ID_PROFILE=A.SYSTEM_ID AND V.CHA_STATO IN ({0}))", value);
                                            else
                                                //andStr += string.Format(" AND ( (a.SYSTEM_ID IN (SELECT id_profile FROM dpa_versamento WHERE cha_stato IN ({0}) )) OR ( a.ID_DOCUMENTO_PRINCIPALE IN (SELECT id_profile FROM dpa_versamento WHERE cha_stato IN ({0}) )) ) ", value);
                                                andStr += string.Format(" AND EXISTS (SELECT 'x' FROM DPA_VERSAMENTO V WHERE (V.ID_PROFILE=A.SYSTEM_ID OR V.ID_PROFILE=A.ID_DOCUMENTO_PRINCIPALE) AND V.CHA_STATO IN ({0}))", value);
                                        }
                                        else
                                        {
                                            // ricerca mista in coda e non in coda
                                            if (!searchAllegato)
                                                //condQueue = string.Format("a.SYSTEM_ID IN (SELECT id_profile FROM dpa_versamento WHERE cha_stato IN ({0}) )", value);
                                                condQueue = string.Format(" EXISTS (SELECT 'x' FROM DPA_VERSAMENTO V WHERE V.ID_PROFILE=A.SYSTEM_ID AND V.CHA_STATO IN ({0}))", value);
                                            else
                                                //condQueue = string.Format("(a.SYSTEM_ID IN (SELECT id_profile FROM dpa_versamento WHERE cha_stato IN ({0}) ))  OR  ( a.ID_DOCUMENTO_PRINCIPALE IN (SELECT id_profile FROM dpa_versamento WHERE cha_stato IN ({0}) ) )  ", value);
                                                condQueue = string.Format(" EXISTS (SELECT 'x' FROM DPA_VERSAMENTO V WHERE (V.ID_PROFILE=A.SYSTEM_ID OR V.ID_PROFILE=A.ID_DOCUMENTO_PRINCIPALE) AND V.CHA_STATO IN ({0}))", value);

                                            andStr += string.Format("AND ( ({0}) OR ({1}) )", condNoQueue, condQueue);
                                        }
                                        //andStr += string.Format(" AND GetStatoConservazione(a.SYSTEM_ID) IN ({0})", value);
                                        //andStr += string.Format(" AND a.SYSTEM_ID IN (SELECT id_profile FROM dpa_versamento WHERE cha_stato IN ({0}) )", value);
                                    }
                                    else
                                    {
                                        // ricerco solo su documenti non in coda
                                        if(!string.IsNullOrEmpty(condNoQueue))
                                            andStr += " AND " + condNoQueue;
                                    }
                                }
                                break;
                            case "DATA_VERSAMENTO_DA":
                                numAndStr += 1;
                                if(queryFrom.IndexOf("DPA_VERSAMENTO VS") < 0)
                                    queryFrom += " , DPA_VERSAMENTO VS";
                                queryWhere += " AND VS.ID_PROFILE=A.SYSTEM_ID ";
                                andStr += "AND VS.DTA_INVIO>" + DocsPaDbManagement.Functions.Functions.ToDate(f.valore + " 00:00:00", true);
                                break;
                            case "DATA_VERSAMENTO_A":
                                numAndStr += 1;
                                if (queryFrom.IndexOf("DPA_VERSAMENTO VS") < 0)
                                    queryFrom += " , DPA_VERSAMENTO VS";
                                if (queryWhere.IndexOf("VS.ID_PROFILE") < 0)
                                    queryWhere += " AND VS.ID_PROFILE=A.SYSTEM_ID ";
                                andStr += " AND VS.DTA_INVIO<" + DocsPaDbManagement.Functions.Functions.ToDate(f.valore + " 23:59:59", true);
                                break;
                            case "DATA_VERSAMENTO_IL":
                                numAndStr += 1;
                                queryFrom += " , DPA_VERSAMENTO VS";
                                queryWhere += " AND VS.ID_PROFILE=A.SYSTEM_ID ";
                                andStr += " AND VS.DTA_INVIO BETWEEN " + DocsPaDbManagement.Functions.Functions.ToDateBetween(f.valore, true) + " AND " + DocsPaDbManagement.Functions.Functions.ToDateBetween(f.valore, false);
                                break;
                            case "POLICY_CODICE":
                                numAndStr += 1;
                                if (queryFrom.IndexOf("DPA_POLICY_PARER POL") < 0)
                                    queryFrom += ", DPA_POLICY_PARER POL";
                                if (queryFrom.IndexOf("DPA_VERSAMENTI_POLICY VP") < 0)
                                    queryFrom += ", DPA_VERSAMENTI_POLICY VP";
                                queryWhere += " AND A.SYSTEM_ID=VP.ID_PROFILE AND VP.ID_POLICY=POL.SYSTEM_ID AND UPPER(POL.VAR_CODICE)='" + f.valore.ToUpper() + "' " ;
                                break;
                            case "POLICY_NUM_ESECUZIONE":
                                numAndStr += 1;
                                if (queryFrom.IndexOf("DPA_VERSAMENTI_POLICY VP") < 0)
                                    queryFrom += ", DPA_VERSAMENTI_POLICY VP";
                                if (queryWhere.IndexOf("VP.ID_PROFILE") < 0)
                                    queryWhere += " AND A.SYSTEM_ID=VP.ID_PROFILE ";
                                queryWhere += " AND VP.NUM_ESECUZIONE_POLICY=" + f.valore + " ";
                                break;
                            case "DATA_EXEC_POLICY_DA":
                                numAndStr += 1;
                                //if (queryFrom.IndexOf("DPA_VERSAMENTI_POLICY VP") < 0)
                                //    queryFrom += ", DPA_VERSAMENTI_POLICY VP ";
                                //if (queryWhere.IndexOf("VP.ID_PROFILE") < 0)
                                //    queryWhere += " AND A.SYSTEM_ID=VP.ID_PROFILE ";
                                //queryWhere += " AND VP.DATA_ESECUZIONE_POLICY>" + DocsPaDbManagement.Functions.Functions.ToDate(f.valore + "00:00:00", true) + " ";
                                queryWhere += "AND EXISTS (SELECT 'x' FROM DPA_VERSAMENTI_POLICY VP WHERE VP.ID_PROFILE=A.SYSTEM_ID AND VP.DATA_ESECUZIONE_POLICY> " + DocsPaDbManagement.Functions.Functions.ToDate(f.valore + "00:00:00", true) + " ) ";
                                break;
                            case "DATA_EXEC_POLICY_A":
                                numAndStr += 1;
                                //if (queryFrom.IndexOf("DPA_VERSAMENTI_POLICY VP") < 0)
                                //    queryFrom += ", DPA_VERSAMENTI_POLICY VP ";
                                //if (queryWhere.IndexOf("VP.ID_PROFILE") < 0)
                                //    queryWhere += " AND A.SYSTEM_ID=VP.ID_PROFILE ";
                                //queryWhere += " AND VP.DATA_ESECUZIONE_POLICY<" + DocsPaDbManagement.Functions.Functions.ToDate(f.valore + "23:59:59", true);
                                queryWhere += "AND EXISTS (SELECT 'x' FROM DPA_VERSAMENTI_POLICY VP WHERE VP.ID_PROFILE=A.SYSTEM_ID AND VP.DATA_ESECUZIONE_POLICY< " + DocsPaDbManagement.Functions.Functions.ToDate(f.valore + "23:59:59", true) + " ) ";
                                break;
                            case "DATA_EXEC_POLICY_IL":
                                numAndStr += 1;
                                if (queryFrom.IndexOf("DPA_VERSAMENTI_POLICY VP") < 0)
                                    queryFrom += " ,DPA_VERSAMENTI_POLICY VP ";
                                if (queryWhere.IndexOf("VP.ID_PROFILE") < 0)
                                    queryWhere += " AND A.SYSTEM_ID=VP.ID_PROFILE ";
                                queryWhere += " AND VP.DATA_ESECUZIONE_POLICY BETWEEN " + DocsPaDbManagement.Functions.Functions.ToDateBetween(f.valore, true) + " AND " + DocsPaDbManagement.Functions.Functions.ToDateBetween(f.valore, false) + " ";
                                break;
                            case "DATA_EXEC_POLICY_YESTERDAY":
                                numAndStr += 1;
                                queryWhere += "AND EXISTS (SELECT 'x' FROM DPA_VERSAMENTI_POLICY VP WHERE VP.ID_PROFILE=A.SYSTEM_ID AND to_date(to_char(VP.DATA_ESECUZIONE_POLICY,'dd/mm/yyyy'),'dd/mm/yyyy')  = " + DocsPaDbManagement.Functions.Functions.ToDate(f.valore, false) + " ) ";
                                break;
                            // --------------FINE----------------

                        }
                    }
                }
                /*
                 * 22/02/2016: Aggiungo un limite temporale sulla data creazione dei documenti se non è specificato uno dei seguenti filtri: data creazione, 
                 * data protocolozzazione, anno, Id documento, numero protocollo o tipologia.
                 * 
                 * */
                string numAnni = DocsPaUtils.Configuration.InitConfigurationKeys.GetValue("0", "MAX_YEARS_SEARCHABLE");
                if (!string.IsNullOrEmpty(numAnni) && !numAnni.Equals("0"))
                {
                    DocsPaVO.filtri.FiltroRicerca checkFilter = (from f in objQueryList[i]
                                                                 where f.argomento.Equals("DOCNUMBER") || f.argomento.Equals("DOCNUMBER_DAL")
                                                                     || f.argomento.Equals("NUM_PROTOCOLLO") || f.argomento.Equals("NUM_PROTOCOLLO_DAL")
                                                                     || (f.argomento.Equals("ANNO_PROTOCOLLO") && !string.IsNullOrEmpty(f.valore))
                                                                     || f.argomento.Equals("DATA_PROT_TODAY") || f.argomento.Equals("DATA_PROT_SC")
                                                                     || f.argomento.Equals("DATA_PROT_MC") || f.argomento.Equals("DATA_PROTO_YESTERDAY")
                                                                     || f.argomento.Equals("DATA_PROTO_YESTERDAY") || f.argomento.Equals("DATA_PROTO_LAST_THIRTY_ONE_DAYS")
                                                                     || f.argomento.Equals("DATA_PROT_IL") || f.argomento.Equals("DATA_PROT_SUCCESSIVA_AL")
                                                                     || f.argomento.Equals("DATA_PROTO_LAST_SEVEN_DAYS")
                                                                     || f.argomento.Equals("DATA_CREAZ_TODAY") || f.argomento.Equals("DATA_CREAZ_SC")
                                                                     || f.argomento.Equals("DATA_CREAZ_MC") || f.argomento.Equals("DATA_CREAZ_YESTERDAY")
                                                                     || f.argomento.Equals("DATA_CREAZ_YESTERDAY") || f.argomento.Equals("DATA_CREAZ_LAST_THIRTY_ONE_DAYS")
                                                                     || f.argomento.Equals("DATA_CREAZ_IL") || f.argomento.Equals("DATA_CREAZ_SUCCESSIVA_AL")
                                                                     || f.argomento.Equals("DATA_CREAZ_LAST_SEVEN_DAYS") || f.argomento.Equals("DATA_CREAZIONE_IL")
                                                                     || f.argomento.Equals("PROFILAZIONE_DINAMICA") || f.argomento.Equals("TIPO_ATTO")
                                                                     || f.argomento.Equals("DATA_CREAZIONE_SUCCESSIVA_AL") || f.argomento.Equals("DOC_IN_ADL")
                                                                 select f).FirstOrDefault();
                    if (checkFilter == null && !unionStampaReg)
                    {
                        //Aggiungo limite intervallo temporale sulla data di creazione
                        if (!dbType.ToUpper().Equals("SQL"))
                            andStr += " AND A.CREATION_TIME BETWEEN (add_months(sysdate, -12 * " + Convert.ToInt32(numAnni) +" )) AND SYSDATE";
                    }
                }
                if (andStr.Length > 0)
                {
                    listaOR.Add(andStr);
                    numAndStr = 0;
                }
            }

            if (listaOR.Count > 0)
            {
                queryWhere += " AND (" + (string)listaOR[0];
                for (int i = 1; i < numAndStr; i++)
                    queryWhere += " OR " + listaOR[i];
                queryWhere += ") ";
            }

            if (queryWhere.Contains("filtroDataPec"))
                queryWhere = queryWhere.Replace("filtroDataPec", filtroDataPec);
            if (queryWhere.Contains("filtroDataPitre"))
                queryWhere = queryWhere.Replace("filtroDataPitre", filtroDataPitre);

            return queryWhere;
        }

        private int GetCountDocSimpleSearch(string idGruppo,
                                        string idPeople,
                                        int maxRisultatiQuery,
                                        DocsPaVO.filtri.FiltroRicerca[][] objQueryList,
                                        bool ricercaVeloce,
                                        string fromTables,
                                        string filterString,
                                        bool unionStampeReg,
                                        string filters_stampe,
                                        bool security,
                                        bool getIdProfilesList,
                                        out List<SearchResultInfo> idProfileList,
                                        bool isRicercaFullText,
                                        ArrayList fullTextResult
                                        )
        {
            // Lista degli id profile restituiti dalla ricerca
            List<SearchResultInfo> idProfiles = null;
            // Il dataset in cui memorizzarre il risultato della query
            DataSet dataSet;
            int retValue = 0;
            DocsPaUtils.Query queryDef = DocsPaUtils.InitQuery.getInstance().getQuery("S_SIMPLE_SEARCH_GET_COUNT_DOC");
            string tipiDoc = "";
            string simpleSearchValue = "";
            string simpleSearchOggetto = "";
            string simpleSearchMittDest = "";
            string dataFrom = " ";
            string dataTo = " ";
            for (int i = 0; i < objQueryList.Length; i++)
            {
                for (int j = 0; j < objQueryList[i].Length; j++)
                {
                    DocsPaVO.filtri.FiltroRicerca f = objQueryList[i][j];
                    if (!string.IsNullOrEmpty(f.valore))
                    {
                        switch (f.argomento)
                        {
                            case "PROT_ARRIVO":
                                tipiDoc += "( cha_tipo_proto IN ('A') AND CHA_DA_PROTO = '0' AND ID_DOCUMENTO_PRINCIPALE IS NULL) OR";
                                break;
                            case "PROT_PARTENZA":
                                tipiDoc += "( cha_tipo_proto IN ('P') AND CHA_DA_PROTO = '0' AND ID_DOCUMENTO_PRINCIPALE IS NULL) OR";
                                break;
                            case "PROT_INTERNO":
                                tipiDoc += "( cha_tipo_proto IN ('I') AND CHA_DA_PROTO = '0' AND ID_DOCUMENTO_PRINCIPALE IS NULL) OR";
                                break;
                            case "GRIGIO":
                                tipiDoc += "( cha_tipo_proto IN ('G') AND CHA_DA_PROTO = '0' AND ID_DOCUMENTO_PRINCIPALE IS NULL) OR";
                                break;
                            case "PREDISPOSTO":
                                tipiDoc += "( cha_tipo_proto IN ('A', 'P', 'I') AND CHA_DA_PROTO = '1' AND ID_DOCUMENTO_PRINCIPALE IS NULL) OR";
                                break;
                            case "DATA_CREAZIONE_PRECEDENTE_IL":
                                dataTo = " AND A.CREATION_TIME <= " + DocsPaDbManagement.Functions.Functions.ToDateBetween(f.valore, false);
                                break;
                            case "DATA_CREAZIONE_SUCCESSIVA_AL":
                                dataFrom = " AND A.CREATION_TIME >= " + DocsPaDbManagement.Functions.Functions.ToDateBetween(f.valore, true);
                                break;
                            case "SEARCH_DOCUMENT_SIMPLE":
                                simpleSearchValue = f.valore;
                                break;

                        }
                    }
                }
            }

            queryDef.setParam("idPeople", idPeople);
            queryDef.setParam("idGruppo", idGruppo);
            int simpleSearchNumber = 0;
            // Ricerca semplice per numero di protocollo
            if (!Int32.TryParse(simpleSearchValue, out simpleSearchNumber))
            {
                simpleSearchNumber = 0;
            }

            #region Ricerca semplice per oggetto
            if (Cfg_USE_TEXT_INDEX == "0" || Cfg_USE_TEXT_INDEX == "1")
            {
                Regex regex = new Regex("&&");
                string[] lista = regex.Split(simpleSearchValue);
                if (lista[0].ToUpper().Contains("'"))
                    simpleSearchOggetto += "UPPER(A.VAR_PROF_OGGETTO) LIKE '%" + lista[0].ToUpper().Replace("'", "''") + "%'";
                else
                    simpleSearchOggetto += "UPPER(A.VAR_PROF_OGGETTO) LIKE '%" + lista[0].ToUpper() + "%'";
                for (int i = 1; i < lista.Length; i++)
                {
                    if (lista[i].ToUpper().Contains("'"))
                        simpleSearchOggetto += " AND UPPER(A.VAR_PROF_OGGETTO) LIKE '%" + lista[i].ToUpper().Replace("'", "''") + "%'";
                    else
                        simpleSearchOggetto += " AND UPPER(A.VAR_PROF_OGGETTO) LIKE '%" + lista[i].ToUpper() + "%'";
                }
            }
            //else if (Cfg_USE_TEXT_INDEX == "1")
            //{
            //    f.valore.Replace("&&", " ");
            //    andStr += "a.SYSTEM_id in ( \n " +
            //                            " select system_id from table(fulltext_onvar_prof_oggetto ( \n " +
            //                            "'" + f.valore.ToUpper().Replace("'", "''") + "', \n" +
            //                            dtaCreazSucc + ", \n" +
            //                            dtaCreazPreced + ", \n" +
            //                            dtaProtoSucc + ", \n" +
            //                            dtaProtoPreced + " \n" + "))) \n";
            //}
            else if (Cfg_USE_TEXT_INDEX == "2")
            {
                List<DocsPaVO.filtri.SearchTextItem> items = new List<DocsPaVO.filtri.SearchTextItem>();
                string value = DocsPaUtils.Functions.Functions.ReplaceApexes(simpleSearchValue).ToUpper();
                string valueA = value;
                if (valueA.Contains("&&"))
                    valueA = valueA.Replace("&&", "");
                bool casoA = false;
                if (value.Substring(0, value.Length - 1).Contains("%") && !value.Substring(0, value.Length - 1).Contains("%&&"))
                    casoA = true;
                if (value.Contains("&&"))
                {
                    string result = string.Empty;
                    foreach (string filter in new Regex("&&").Split(value))
                        if (!string.IsNullOrEmpty(filter))
                            result += filter + " AND ";
                    value = result.Substring(0, result.Length - 5);
                }
                if (value.Contains("%") && value.IndexOf("%") != value.Length - 1)
                {
                    bool finale = value.EndsWith("%");
                    string result = string.Empty;
                    foreach (string filter in new Regex("%").Split(value))
                        if (!string.IsNullOrEmpty(filter))
                            result += filter + "% AND ";
                    value = result.Substring(0, result.Length - 6);
                    if (finale)
                        value = value + "%";
                }
                if (value.ToUpper().Contains(" AND  AND "))
                    value = value.ToUpper().Replace(" AND  AND ", " AND ");
                simpleSearchOggetto += DocsPaDbManagement.Functions.Functions.GetContainsTextQuery("A.VAR_PROF_OGGETTO", value);
                if (casoA)
                    simpleSearchOggetto += " and upper(A.VAR_PROF_OGGETTO) like upper('%" + valueA + "%')";
            }
            #endregion

            #region Ricerca Semplice per mittenti e destinatari
            if (Cfg_USE_TEXT_INDEX == "0" || Cfg_USE_TEXT_INDEX == "1")
                simpleSearchMittDest += " A.SYSTEM_ID IN (SELECT F.ID_PROFILE FROM DPA_DOC_ARRIVO_PAR F ,DPA_CORR_GLOBALI G  where F.ID_PROFILE=a.system_id and  G.SYSTEM_ID=F.ID_MITT_DEST AND UPPER(G.VAR_DESC_CORR) LIKE '%" + DocsPaUtils.Functions.Functions.ReplaceApexes(simpleSearchValue).ToUpper() + "%') ";
            //else if (Cfg_USE_TEXT_INDEX == "1")
            //{
            //    string searchMittDest = " AND a.SYSTEM_id in ( \n " +
            //                            " select system_id from table(fulltext_onvar_desc_corr ( \n " +
            //                            "'" + DocsPaUtils.Functions.Functions.ReplaceApexes(f.valore).ToUpper() + "'))) \n";
            //    andStr += " A.SYSTEM_ID IN (SELECT F.ID_PROFILE FROM DPA_DOC_ARRIVO_PAR F ,DPA_CORR_GLOBALI G  where F.ID_PROFILE=a.system_id and  G.SYSTEM_ID=F.ID_MITT_DEST " + searchMittDest + ") ";
            //}
            else if (Cfg_USE_TEXT_INDEX == "2")
            {
                string value = DocsPaUtils.Functions.Functions.ReplaceApexes(simpleSearchValue).ToUpper();
                string valueA = value;
                if (valueA.Contains("&&"))
                    valueA = valueA.Replace("&&", "");
                bool casoA = false;
                if (value.Substring(0, value.Length - 1).Contains("%") && !value.Substring(0, value.Length - 1).Contains("%&&"))
                    casoA = true;

                if (value.Contains("&&"))
                {
                    string result = string.Empty;
                    foreach (string filter in new Regex("&&").Split(value))
                        if (!string.IsNullOrEmpty(filter))
                            result += filter + " AND ";
                    value = result.Substring(0, result.Length - 5);
                }
                if (value.Contains("%") && value.IndexOf("%") != value.Length - 1)
                {
                    string result = string.Empty;
                    foreach (string filter in new Regex("%").Split(value))
                        if (!string.IsNullOrEmpty(filter))
                            result = filter + "% AND ";
                    value = result.Substring(0, result.Length - 5);
                }

                if (value.ToUpper().Contains(" AND  AND "))
                    value = value.ToUpper().Replace(" AND  AND ", " AND ");
                simpleSearchMittDest += " A.SYSTEM_ID IN (SELECT F.ID_PROFILE FROM DPA_DOC_ARRIVO_PAR F ,DPA_CORR_GLOBALI G  where F.ID_PROFILE=a.system_id and  G.SYSTEM_ID=F.ID_MITT_DEST AND " + DocsPaDbManagement.Functions.Functions.GetContainsTextQuery("G.VAR_DESC_CORR", value);
                if (casoA)
                    simpleSearchMittDest += " and upper(G.VAR_DESC_CORR) like upper('%" + valueA + "%')";
                simpleSearchMittDest += ")";
            }
            #endregion

            queryDef.setParam("simplesearchvalue", simpleSearchValue);
            queryDef.setParam("simplesearchnumber", simpleSearchNumber.ToString());
            queryDef.setParam("simplesearchoggetto", simpleSearchOggetto);
            queryDef.setParam("simplesearchmittdest", simpleSearchMittDest);
            queryDef.setParam("tipiDoc", tipiDoc.Substring(0, tipiDoc.Length - 3));
            queryDef.setParam("dataFrom", dataFrom);
            queryDef.setParam("dataTo", dataTo);

            //ricerca fullText
            string ricercaFullText = string.Empty;
            if (isRicercaFullText && fullTextResult != null && fullTextResult.Capacity > 0)
            {
                ricercaFullText += " UNION ";
                if (dbType.ToUpper().Equals("SQL"))
                {
                    ricercaFullText += "( SELECT A.SYSTEM_ID,(CASE " +
                        "WHEN a.num_proto IS NOT NULL THEN a.num_proto " +
                        "WHEN a.num_proto IS NULL THEN a.docnumber " +
                        "END) " +
                        "AS codice FROM PROFILE a " +
                        "LEFT JOIN components c on a.system_id = c.docnumber " +
                        "WHERE EXISTS (SELECT 'x' FROM security e WHERE a.system_id = e.thing AND e.PERSONORGROUP IN (" + idPeople + ", " + idGruppo + ") AND e.ACCESSRIGHTS > 0) ";
                }
                else
                {
                    ricercaFullText += "( SELECT A.SYSTEM_ID,(CASE " +
                        "WHEN a.num_proto IS NOT NULL THEN a.num_proto " +
                        "WHEN a.num_proto IS NULL THEN a.docnumber " +
                        "END) " +
                        "AS codice FROM PROFILE a " +
                        "LEFT JOIN components c on a.system_id = c.docnumber " +
                        "WHERE EXISTS (SELECT 'x' FROM security e WHERE a.system_id = e.thing AND e.PERSONORGROUP IN (" + idPeople + ", " + idGruppo + ") AND e.ACCESSRIGHTS > 0) ";
                }

                int i = 0;
                ricercaFullText += " AND ( C.VERSION_ID IN(";
                foreach (string id in fullTextResult)
                {
                    ricercaFullText += id;
                    if (i < fullTextResult.Count - 1)
                    {
                        if (i % 998 == 0 && i > 0)
                        {
                            ricercaFullText += ") OR C.VERSION_ID IN (";
                        }
                        else
                        {
                            ricercaFullText += ", ";
                        }
                    }
                    else
                    {
                        ricercaFullText += ")";
                    }
                    i++;
                }
                ricercaFullText += "))";


            }
            queryDef.setParam("fulltext", ricercaFullText);

            string commandText = queryDef.getSQL();
            logger.Debug(commandText);
            string field;
            // Se è richiesta la lista dei system id dei risultati restituiti dalla ricerca,
            // viene compilata la lista altrimenti viene restituito il numero di documenti
            // trovati
            if (getIdProfilesList)
            {
                // Creazione della lista di idProfile
                idProfiles = new List<SearchResultInfo>();

                // Esecuzione query
                ExecuteQuery(out dataSet, commandText);

                // Analisi del risultato e compilazione della lista di systemId
                if (dataSet != null)
                    foreach (DataRow dataRow in dataSet.Tables[0].Rows)
                    {
                        SearchResultInfo temp = new SearchResultInfo();
                        temp.Id = dataRow["SYSTEM_ID"].ToString();
                        temp.Codice = dataRow["CODICE"].ToString();
                        idProfiles.Add(temp);
                    }

                // Calcolo del numero di documenti individuati
                retValue = idProfiles.Count;

            }
            else
            {
                ExecuteQuery(out dataSet, commandText);

                if (ricercaVeloce)
                {
                    if (dataSet != null && dataSet.Tables != null && dataSet.Tables[0] != null && dataSet.Tables[0].Rows != null)
                    {
                        retValue = dataSet.Tables[0].Rows.Count;
                    }
                    else
                    {
                        retValue = 0;
                    }
                }
                else
                {

                    if (ExecuteScalar(out field, commandText))
                        Int32.TryParse(field, out retValue);
                }

            }

            idProfileList = idProfiles;
            return retValue;
        }

        private void ListaDocSimpleSearchPagingCustom(DocsPaVO.utente.InfoUtente infoUtente,
                                   ArrayList listaDoc,
                                   bool ricercaVeloce,
                                   int maxRisultatiQuery,
                                   string fromTables,
                                   DocsPaVO.filtri.FiltroRicerca[][] objQueryList,
                                   string orderCriteria,
                                   string reverseOrderCriteria,
                                   int numPage,
                                   int pageSize,
                                   bool security,
                                   out int numTotPage,
                                   out int nRec,
                                   bool unionStampeReg,
                                   string filters_stampe,
                                   bool getIdProfilesList,
                                   out List<SearchResultInfo> idProfilesList, string extractFieldValue, bool export, string valoriCustom, Field[] visibleFieldsTemplate, bool gridPersonalization, bool stampaReg, string queryFromStampe, String[] documentsSystemId, String contatore, string filtro_conservazione, string filtro_versamento, string tipoRicevutaInteroperante,
                                   bool isRicercaFullText, ArrayList fullTextResult)
        {
            logger.Debug("ListaDocSimpleSearchPagingCustom");

            // La query è per la ricerca semplice, quindi molte informazioni saranno codificate queryList.
            numTotPage = 0;

            nRec = GetCountDocSimpleSearch(infoUtente.idGruppo,
                infoUtente.idPeople,
                maxRisultatiQuery,
                objQueryList,
                ricercaVeloce,
                fromTables,
                "",
                unionStampeReg,
                filters_stampe,
                security,
                getIdProfilesList,
               out idProfilesList,
               isRicercaFullText,
               fullTextResult);

            /* ABBATANGELI GIANLUIGI
             * Aggiunto il valore di configurazione MAX_ROW_SEARCHABLE
             * che determina il numero massimo di righe accettatte
             * come risultato di una ricerca documenti 
             * tranne il caso in cui sto eseguendo un export */
            int maxRowSearchable = (export ? 0 : Cfg_MAX_ROW_SEARCHABLE(infoUtente.idAmministrazione));

            if (maxRowSearchable == 0 || nRec <= maxRowSearchable)
            {
                if (nRec > 0)
                {
                    string queryName = string.Empty;
                    string verSecurity = " (A.SYSTEM_ID = A.SYSTEM_ID ";
                    // if (!ricercaVeloce)
                    queryName = "S_RIC_DOC_SIMPLE_SEARCH";
                    //   else
                    //       queryName = "S_RIC_DOC_VELOCE_CUSTOM";

                    DocsPaUtils.Query queryDef = DocsPaUtils.InitQuery.getInstance().getQuery(queryName);

                    string tipiDoc = "";
                    string simpleSearchValue = "";
                    string simpleSearchOggetto = "";
                    string simpleSearchMittDest = "";
                    string dataFrom = " ";
                    string dataTo = " ";
                    for (int i = 0; i < objQueryList.Length; i++)
                    {
                        for (int j = 0; j < objQueryList[i].Length; j++)
                        {
                            DocsPaVO.filtri.FiltroRicerca f = objQueryList[i][j];
                            if (!string.IsNullOrEmpty(f.valore))
                            {
                                switch (f.argomento)
                                {
                                    case "PROT_ARRIVO":
                                        tipiDoc += "( cha_tipo_proto IN ('A') AND CHA_DA_PROTO = '0' AND ID_DOCUMENTO_PRINCIPALE IS NULL) OR";
                                        break;
                                    case "PROT_PARTENZA":
                                        tipiDoc += "( cha_tipo_proto IN ('P') AND CHA_DA_PROTO = '0' AND ID_DOCUMENTO_PRINCIPALE IS NULL) OR";
                                        break;
                                    case "PROT_INTERNO":
                                        tipiDoc += "( cha_tipo_proto IN ('I') AND CHA_DA_PROTO = '0' AND ID_DOCUMENTO_PRINCIPALE IS NULL) OR";
                                        break;
                                    case "GRIGIO":
                                        tipiDoc += "( cha_tipo_proto IN ('G') AND CHA_DA_PROTO = '0' AND ID_DOCUMENTO_PRINCIPALE IS NULL) OR";
                                        break;
                                    case "PREDISPOSTO":
                                        tipiDoc += "( cha_tipo_proto IN ('A', 'P', 'I') AND CHA_DA_PROTO = '1' AND ID_DOCUMENTO_PRINCIPALE IS NULL) OR";
                                        break;
                                    case "DATA_CREAZIONE_PRECEDENTE_IL":
                                        dataTo = " AND A.CREATION_TIME <= " + DocsPaDbManagement.Functions.Functions.ToDateBetween(f.valore, false);
                                        break;
                                    case "DATA_CREAZIONE_SUCCESSIVA_AL":
                                        dataFrom = " AND A.CREATION_TIME >= " + DocsPaDbManagement.Functions.Functions.ToDateBetween(f.valore, true);
                                        break;
                                    case "SEARCH_DOCUMENT_SIMPLE":
                                        simpleSearchValue = f.valore;
                                        break;

                                }
                            }
                        }
                    }
                    int simpleSearchNumber = 0;
                    if (!Int32.TryParse(simpleSearchValue, out simpleSearchNumber))
                    {
                        simpleSearchNumber = 0;
                    }


                    #region Ricerca semplice per oggetto
                    if (Cfg_USE_TEXT_INDEX == "0" || Cfg_USE_TEXT_INDEX == "1")
                    {
                        Regex regex = new Regex("&&");
                        string[] lista = regex.Split(simpleSearchValue);
                        if (lista[0].ToUpper().Contains("'"))
                            simpleSearchOggetto += "UPPER(A.VAR_PROF_OGGETTO) LIKE '%" + lista[0].ToUpper().Replace("'", "''") + "%'";
                        else
                            simpleSearchOggetto += "UPPER(A.VAR_PROF_OGGETTO) LIKE '%" + lista[0].ToUpper() + "%'";
                        for (int i = 1; i < lista.Length; i++)
                        {
                            if (lista[i].ToUpper().Contains("'"))
                                simpleSearchOggetto += " AND UPPER(A.VAR_PROF_OGGETTO) LIKE '%" + lista[i].ToUpper().Replace("'", "''") + "%'";
                            else
                                simpleSearchOggetto += " AND UPPER(A.VAR_PROF_OGGETTO) LIKE '%" + lista[i].ToUpper() + "%'";
                        }
                    }
                    //else if (Cfg_USE_TEXT_INDEX == "1")
                    //{
                    //    f.valore.Replace("&&", " ");
                    //    andStr += "a.SYSTEM_id in ( \n " +
                    //                            " select system_id from table(fulltext_onvar_prof_oggetto ( \n " +
                    //                            "'" + f.valore.ToUpper().Replace("'", "''") + "', \n" +
                    //                            dtaCreazSucc + ", \n" +
                    //                            dtaCreazPreced + ", \n" +
                    //                            dtaProtoSucc + ", \n" +
                    //                            dtaProtoPreced + " \n" + "))) \n";
                    //}
                    else if (Cfg_USE_TEXT_INDEX == "2")
                    {
                        List<DocsPaVO.filtri.SearchTextItem> items = new List<DocsPaVO.filtri.SearchTextItem>();
                        string value = DocsPaUtils.Functions.Functions.ReplaceApexes(simpleSearchValue).ToUpper();
                        string valueA = value;
                        if (valueA.Contains("&&"))
                            valueA = valueA.Replace("&&", "");
                        bool casoA = false;
                        if (value.Substring(0, value.Length - 1).Contains("%") && !value.Substring(0, value.Length - 1).Contains("%&&"))
                            casoA = true;
                        if (value.Contains("&&"))
                        {
                            string result = string.Empty;
                            foreach (string filter in new Regex("&&").Split(value))
                                if (!string.IsNullOrEmpty(filter))
                                    result += filter + " AND ";
                            value = result.Substring(0, result.Length - 5);
                        }
                        if (value.Contains("%") && value.IndexOf("%") != value.Length - 1)
                        {
                            bool finale = value.EndsWith("%");
                            string result = string.Empty;
                            foreach (string filter in new Regex("%").Split(value))
                                if (!string.IsNullOrEmpty(filter))
                                    result += filter + "% AND ";
                            value = result.Substring(0, result.Length - 6);
                            if (finale)
                                value = value + "%";
                        }
                        if (value.ToUpper().Contains(" AND  AND "))
                            value = value.ToUpper().Replace(" AND  AND ", " AND ");
                        simpleSearchOggetto += DocsPaDbManagement.Functions.Functions.GetContainsTextQuery("A.VAR_PROF_OGGETTO", value);
                        if (casoA)
                            simpleSearchOggetto += " and upper(A.VAR_PROF_OGGETTO) like upper('%" + valueA + "%')";
                    }
                    #endregion

                    #region Ricerca Semplice per mittenti e destinatari
                    if (Cfg_USE_TEXT_INDEX == "0" || Cfg_USE_TEXT_INDEX == "1")
                        simpleSearchMittDest += " A.SYSTEM_ID IN (SELECT F.ID_PROFILE FROM DPA_DOC_ARRIVO_PAR F ,DPA_CORR_GLOBALI G  where F.ID_PROFILE=a.system_id and  G.SYSTEM_ID=F.ID_MITT_DEST AND UPPER(G.VAR_DESC_CORR) LIKE '%" + DocsPaUtils.Functions.Functions.ReplaceApexes(simpleSearchValue).ToUpper() + "%') ";
                    //else if (Cfg_USE_TEXT_INDEX == "1")
                    //{
                    //    string searchMittDest = " AND a.SYSTEM_id in ( \n " +
                    //                            " select system_id from table(fulltext_onvar_desc_corr ( \n " +
                    //                            "'" + DocsPaUtils.Functions.Functions.ReplaceApexes(f.valore).ToUpper() + "'))) \n";
                    //    andStr += " A.SYSTEM_ID IN (SELECT F.ID_PROFILE FROM DPA_DOC_ARRIVO_PAR F ,DPA_CORR_GLOBALI G  where F.ID_PROFILE=a.system_id and  G.SYSTEM_ID=F.ID_MITT_DEST " + searchMittDest + ") ";
                    //}
                    else if (Cfg_USE_TEXT_INDEX == "2")
                    {
                        string value = DocsPaUtils.Functions.Functions.ReplaceApexes(simpleSearchValue).ToUpper();
                        string valueA = value;
                        if (valueA.Contains("&&"))
                            valueA = valueA.Replace("&&", "");
                        bool casoA = false;
                        if (value.Substring(0, value.Length - 1).Contains("%") && !value.Substring(0, value.Length - 1).Contains("%&&"))
                            casoA = true;

                        if (value.Contains("&&"))
                        {
                            string result = string.Empty;
                            foreach (string filter in new Regex("&&").Split(value))
                                if (!string.IsNullOrEmpty(filter))
                                    result += filter + " AND ";
                            value = result.Substring(0, result.Length - 5);
                        }
                        if (value.Contains("%") && value.IndexOf("%") != value.Length - 1)
                        {
                            string result = string.Empty;
                            foreach (string filter in new Regex("%").Split(value))
                                if (!string.IsNullOrEmpty(filter))
                                    result = filter + "% AND ";
                            value = result.Substring(0, result.Length - 5);
                        }

                        if (value.ToUpper().Contains(" AND  AND "))
                            value = value.ToUpper().Replace(" AND  AND ", " AND ");
                        simpleSearchMittDest += " A.SYSTEM_ID IN (SELECT F.ID_PROFILE FROM DPA_DOC_ARRIVO_PAR F ,DPA_CORR_GLOBALI G  where F.ID_PROFILE=a.system_id and  G.SYSTEM_ID=F.ID_MITT_DEST AND " + DocsPaDbManagement.Functions.Functions.GetContainsTextQuery("G.VAR_DESC_CORR", value);
                        if (casoA)
                            simpleSearchMittDest += " and upper(G.VAR_DESC_CORR) like upper('%" + valueA + "%')";
                        simpleSearchMittDest += ")";
                    }
                    #endregion

                    queryDef.setParam("simplesearchvalue", simpleSearchValue);
                    queryDef.setParam("simplesearchnumber", simpleSearchNumber.ToString());
                    queryDef.setParam("simplesearchoggetto", simpleSearchOggetto);
                    queryDef.setParam("simplesearchmittdest", simpleSearchMittDest);
                    queryDef.setParam("tipiDoc", tipiDoc.Substring(0, tipiDoc.Length - 3));
                    queryDef.setParam("dataFrom", dataFrom);
                    queryDef.setParam("dataTo", dataTo);
                    if (!string.IsNullOrEmpty(filtro_conservazione))
                    {
                        if (filtro_conservazione.Equals("D"))
                        {
                            if (dbType == "SQL")
                            {
                                queryDef.setParam("conservazione", " ,@dbuser@.getInConservazioneNoSec(a.SYSTEM_ID,null,'D') as istanzeConservazione ");
                            }
                            else
                            {
                                queryDef.setParam("conservazione", " ,getInConservazioneNoSec(a.SYSTEM_ID,null,'D') as istanzeConservazione ");
                            }
                        }
                        else
                        {
                            if (dbType == "SQL")
                                queryDef.setParam("conservazione", " ,@dbuser@.getInConservazioneNoSec(a.SYSTEM_ID,B.project_id,'F') as istanzeConservazione ");
                            else
                                queryDef.setParam("conservazione", " ,getInConservazioneNoSec(a.SYSTEM_ID,B.project_id,'F') as istanzeConservazione ");
                        }
                    }
                    else
                    {
                        queryDef.setParam("conservazione", string.Empty);
                    }
                    // INTEGRAZIONE PITRE-PARER
                    if (this.isConservazionePARER())
                    {
                    if (!string.IsNullOrEmpty(filtro_versamento))
                    {
                        if (dbType == "SQL")
                        {
                            queryDef.setParam("stato_cons", " ,@dbuser@.GetStatoConservazione(a.system_id) as StatoConservazione ");
                        }
                        else
                        {
                            queryDef.setParam("stato_cons", " ,GetStatoConservazione(a.system_id) as StatoConservazione ");
                        }
                    }
                    else
                    {
                        queryDef.setParam("stato_cons", string.Empty);
                    }
                    }
                    else
                    {
                        // Conservazione interna
                        if (this.dbType.ToUpper() == "SQL")
                        {
                            queryDef.setParam("stato_cons", " ,@dbuser@.getInConservazioneDoc(a.system_id) as StatoConservazione ");
                        }
                        else
                        {
                            queryDef.setParam("stato_cons", " ,getInConservazioneDoc(a.system_id) as StatoConservazione ");
                        }
                    }
                    

                    // PEC 4 Requisito 3: ricerca documenti spediti
                    // Inserisco il parametro aggiuntivo.

                    //queryDef.setParam("tipoRicevutaInteroperante", "'" + tipoRicevutaInteroperante + "'");


                    //if (stampaReg)
                    //{
                    //    queryDef.setParam("fromOther", queryFromStampe);
                    //    queryDef.setParam("stampe", filters_stampe);
                    //}
                    //else
                    //{
                    //    queryDef.setParam("fromOther", "");
                    //    queryDef.setParam("stampe", "");
                    //}
                    // Reperimento del numero di elementi da visualizzare per pagina
                    int pageSizeSqlServer = pageSize;


                    // per query sqlserver:
                    // il numero totale di righe da estrarre equivale 
                    // al limite inferiore dell'ultima riga da estrarre
                    int totalRowsSqlServer = (numPage * pageSize);
                    if ((nRec - totalRowsSqlServer) <= 0)
                    {
                        pageSizeSqlServer -= System.Math.Abs(nRec - totalRowsSqlServer);
                        totalRowsSqlServer = nRec;
                    }

                    // Parametri specifici per query sqlserver
                    queryDef.setParam("pageSize", pageSizeSqlServer.ToString());
                    queryDef.setParam("totalRows", totalRowsSqlServer.ToString());
                    queryDef.setParam("reverseOrder", reverseOrderCriteria);




                    // Parametri specifici per query oracle
                    string preferedIndex = string.Empty;
                    if (!export)
                    {
                        preferedIndex = "/*+ FIRST_ROWS(" + pageSize + ") */";
                    }
                    else
                    {
                        preferedIndex = "/*+ FIRST_ROWS(" + nRec + ") */";
                    }
                    string index2 = "/*+index (a)*/";
                    #region codice commentato
                    //if ((filters.ToUpper().IndexOf("A.VAR_PROF_OGGETTO") > -1 ||
                    //     filters.ToUpper().IndexOf("G.VAR_DESC_CORR") > -1) && Cfg_USE_TEXT_INDEX != "0")
                    //// Impostazione indice da utilizzare
                    //{
                    //    if (filters.ToUpper().IndexOf("CONTAINS(A.VAR_PROF_OGGETTO") > -1)
                    //        index2 = "/*+index (a indx_ogg_text)*/ ";

                    //    //TODO: se var_desc_corr
                    //}

                    //if (security)
                    //{

                    //    bool IS_ARCHIVISTA_DEPOSITO;
                    //    DocsPaDB.Query_DocsPAWS.Utenti ut = new Utenti();
                    //    IS_ARCHIVISTA_DEPOSITO = ut.isUtArchivistaDeposito(infoUtente.idPeople, infoUtente.idGruppo);
                    //    if (filters.ToUpper().IndexOf("AND id_documento_principale IS NOT NULL".ToUpper()) > -1 ||
                    //            (filters.IndexOf("NOT A.ID_DOCUMENTO_PRINCIPALE IS NULL") > -1) ||
                    //            IS_ARCHIVISTA_DEPOSITO)
                    //    {
                    //        if (dbType.ToUpper() == "SQL")
                    //            verSecurity = "(@dbuser@.checkSecurityDocumento(A.SYSTEM_ID, @idPeople@, @idGruppo@,'D') > 0)";
                    //        else
                    //            verSecurity = "(checkSecurityDocumento(A.SYSTEM_ID, @idPeople@, @idGruppo@,'D') > 0)";
                    //    }
                    //    else
                    //    {
                    //        if (IndexSecurity())
                    //            verSecurity = " EXISTS (select /*+INDEX(e) */ 'x' from security e where a.system_id=e.thing and e.PERSONORGROUP in (@idPeople@, @idGruppo@) and e.ACCESSRIGHTS>0) ";
                    //        else
                    //            verSecurity = " EXISTS (select  'x' from security e where a.system_id=e.thing and e.PERSONORGROUP in (@idPeople@, @idGruppo@) and e.ACCESSRIGHTS>0) ";
                    //    }

                    //}
                    #endregion
                    if (verSecurity == string.Empty)
                        verSecurity = " (A.SYSTEM_ID = A.SYSTEM_ID ";

                    queryDef.setParam("security", verSecurity);
                    queryDef.setParam("index", preferedIndex);
                    queryDef.setParam("index2", index2);
                    queryDef.setParam("rowCount", maxRisultatiQuery.ToString());

                    // Parametro contentente le tabelle addizionali da aggiungere alla query
                    queryDef.setParam("from", fromTables);

                    // Parametri validi per tutte le query
                    queryDef.setParam("idGruppo", infoUtente.idGruppo);
                    queryDef.setParam("idPeople", infoUtente.idPeople);

                    //fine modifica
                    numTotPage = (nRec / pageSize);

                    int startRow = ((numPage * pageSize) - pageSize) + 1;
                    int endRow = (startRow - 1) + pageSize;

                    string paging = string.Empty;

                    if (dbType == "SQL")
                    {
                        if (!export)
                        {
                            if (ricercaVeloce)
                            {
                                paging = "WHERE Row <= " + endRow.ToString() + " AND Row <=" + maxRisultatiQuery.ToString() + " AND Row >=" + startRow.ToString();
                            }
                            else
                            {
                                paging = "WHERE Row <= " + endRow.ToString() + " AND Row >=" + startRow.ToString();
                            }
                        }
                        else
                        {
                            if (ricercaVeloce)
                            {
                                paging = "WHERE Row <=" + maxRisultatiQuery.ToString();
                            }
                        }

                        if (ricercaVeloce)
                        {
                            queryDef.setParam("ricVeloce", " and isnull(dta_proto,creation_date) between convert(datetime,'@dataInizioAnno@',103) and getdate() ");
                        }
                        else
                        {
                            queryDef.setParam("ricVeloce", "");
                        }
                    }
                    else
                    {
                        if (!export)
                        {
                            if (ricercaVeloce)
                            {
                                paging = "WHERE ROWNUM <= " + endRow.ToString() + " AND ROWNUM <=" + maxRisultatiQuery.ToString() + " ) a WHERE rnum >=" + startRow.ToString();
                            }
                            else
                            {
                                paging = "WHERE ROWNUM <= " + endRow.ToString() + " ) a WHERE rnum >=" + startRow.ToString();
                            }
                        }
                        else
                        {
                            if (ricercaVeloce)
                            {
                                paging = "WHERE ROWNUM <= " + nRec.ToString() + " AND ROWNUM <=" + maxRisultatiQuery.ToString() + " ) a WHERE rnum >=" + startRow.ToString();
                            }
                            else
                            {
                                paging = "WHERE ROWNUM <= " + nRec.ToString() + " ) a WHERE rnum >=" + startRow.ToString();
                            }
                        }

                        if (ricercaVeloce)
                        {
                            queryDef.setParam("ricVeloce", " AND NVL (dta_proto, creation_date) between add_months(sysdate,-1) and sysdate ");
                        }
                        else
                        {
                            queryDef.setParam("ricVeloce", "");
                        }
                    }

                    string listDocuments = string.Empty;
                    if (export)
                    {
                        if (documentsSystemId != null &&
        documentsSystemId.Length > 0)
                        {
                            int i = 0;
                            listDocuments += " AND ( A.SYSTEM_ID IN(";
                            foreach (string id in documentsSystemId)
                            {
                                listDocuments += id;
                                if (i < documentsSystemId.Length - 1)
                                {
                                    if (i % 998 == 0 && i > 0)
                                    {
                                        listDocuments += ") OR A.SYSTEM_ID IN (";
                                    }
                                    else
                                    {
                                        listDocuments += ", ";
                                    }
                                }
                                else
                                {
                                    listDocuments += ")";
                                }
                                i++;
                            }
                            listDocuments += ")";
                        }

                    }


                    string unionStampe = string.Empty;
                    if (unionStampeReg)
                    {
                        unionStampe += " UNION ";
                        string idRuoloPubblico = DocsPaUtils.Configuration.InitConfigurationKeys.GetValue(infoUtente.idAmministrazione, "ENABLE_FASCICOLO_PUBBLICO");
                        if (string.IsNullOrEmpty(idRuoloPubblico))
                            idRuoloPubblico = "0";
                        if (dbType.ToUpper().Equals("SQL"))
                        {
                            //unionStampe += "SELECT TOP " + totalRowsSqlServer.ToString() +
                            //" A.SYSTEM_ID, A.DOCNUMBER, A.DTA_ANNULLA, A.VAR_PROF_OGGETTO AS VAR_DESC_OGGETTO, A.ID_REGISTRO," +
                            //"A.CHA_TIPO_PROTO, A.CHA_EVIDENZA, A.NUM_ANNO_PROTO, ISNULL(A.DTA_PROTO,A.CREATION_TIME) AS DATA," +
                            //"convert(nvarchar (10), A.CREATION_TIME, 103) AS CREATION_DATE," +
                            //"A.NUM_PROTO, A.VAR_SEGNATURA, convert(nvarchar (10), A.DTA_PROTO, 103) AS DTA_PROTO, " +
                            //getUserDB() + ".getchaimg(A.DOCNUMBER) AS CHA_IMG , A.CHA_PRIVATO, A.CHA_PERSONALE, " + getUserDB() + ".getInADL(A.SYSTEM_ID,'D'," + infoUtente.idGruppo + "," + infoUtente.idPeople + ") AS IN_ADL, " +
                            //"A.ID_DOCUMENTO_PRINCIPALE," + getUserDB() + ".getInConservazione(A.SYSTEM_ID, null,'D'," + infoUtente.idPeople + "," + infoUtente.idGruppo + ") AS IN_CONSERVAZIONE, A.CHA_IN_ARCHIVIO," +
                            //"a.id_tipo_atto as ID_TIPO_ATTO, ta.var_desc_atto as DESC_TIPO_ATTO, " +
                            //getUserDB() + ".getPeopleUserId (a.AUTHOR) as AUTHOR, a.prot_tit as PROT_TIT," +
                            //getUserDB() + ".getchafirmato(A.DOCNUMBER) as CHA_FIRMATO," +
                            //getUserDB() + ".GetContatoreDoc(a.system_id, '" + tipo_contatore + "') as CONTATORE," +
                            //getUserDB() + ".getContatoreDocOrdinamento(a.system_id, '" + tipo_contatore + "') as contatore_ordinamento " +
                            //"@customFieldFilter@" +
                            //" FROM DPA_STAMPAREGISTRI R, PROFILE a " +
                            //"LEFT JOIN dpa_tipo_atto ta on a.id_tipo_atto = ta.system_id " +
                            //"WHERE (" + getUserDB() + ".checkSecurityDocumento(A.SYSTEM_ID, " + infoUtente.idPeople + ", " + infoUtente.idGruppo + ",'D') > 0) " +
                            //filters_stampe;
                            unionStampe += "SELECT   Row, SYSTEM_ID, DOCNUMBER, DTA_ANNULLA,VAR_DESC_OGGETTO, ID_REGISTRO, cha_tipo_proto,CHA_EVIDENZA, NUM_ANNO_PROTO, DATA, CREATION_DATE, NUM_PROTO, VAR_SEGNATURA, DTA_PROTO, ARCHIVE_DATE as dta_archiviazione,@dbuser@.getchaimg(DOCNUMBER) AS CHA_IMG,CHA_PRIVATO,CHA_PERSONALE,@dbuser@.getInADL(SYSTEM_ID,'D'," + infoUtente.idGruppo + "," + infoUtente.idPeople + ") AS IN_ADL,ID_DOCUMENTO_PRINCIPALE,@dbuser@.getInConservazione(SYSTEM_ID, null,'D', " + infoUtente.idPeople + ", " + infoUtente.idGruppo + ") AS IN_CONSERVAZIONE,CHA_IN_ARCHIVIO, ID_TIPO_ATTO, DESC_TIPO_ATTO, @dbuser@.getPeopleUserId (AUTHOR) as code_author,PROT_TIT, @dbuser@.getchafirmato(DOCNUMBER) as CHA_FIRMATO,@dbuser@.gettestoultimanota('D',system_id," + infoUtente.idGruppo + "," + infoUtente.idPeople + "," + infoUtente.idGruppo + ") as ULTIMA_NOTA,@dbuser@.GETCODREG(id_registro) as cod_registro,@dbuser@.CORRCAT(system_id, cha_tipo_proto) as MITT_DEST,@dbuser@.getpeoplename (author) AS desc_autore,@dbuser@.getdesccorr (id_ruolo_creatore) AS desc_ruolo_autore,@dbuser@.getcodruolobyidcorr(id_ruolo_creatore) AS cod_ruolo_autore,@dbuser@.classcat(system_id) as COD_FASCICOLI,@dbuser@.getdataarrivodoc (DOCNUMBER) AS data_arrivo,@dbuser@.getdiagrammistato (docnumber, 'D') AS stato,@dbuser@.corrcatbytipo(docnumber, cha_tipo_proto, 'M') as mittenti,@dbuser@.corrcatbytipo(docnumber, cha_tipo_proto, 'D') as destinatari,@dbuser@.getEsitoPubblicazione(system_id) as pubblicazione,@dbuser@.esisteNotaVisibile('D',a.system_id," + infoUtente.idGruppo + "," + infoUtente.idPeople + "," + infoUtente.idGruppo + ") AS esiste_nota @contatore@ @valoriCustom@ FROM (SELECT  ROW_NUMBER() OVER (ORDER BY @order@) AS Row, a.SYSTEM_ID, A.DOCNUMBER, A.DTA_ANNULLA,A.VAR_PROF_OGGETTO AS VAR_DESC_OGGETTO,A.ID_REGISTRO, A.CHA_TIPO_PROTO,A.CHA_EVIDENZA, A.NUM_ANNO_PROTO,ISNULL(A.DTA_PROTO,A.CREATION_TIME) AS DATA,convert(nvarchar (10),A.CREATION_TIME, 103) AS CREATION_DATE,A.NUM_PROTO, A.VAR_SEGNATURA,convert(nvarchar (10), A.DTA_PROTO, 103) AS DTA_PROTO,A.CHA_PRIVATO, A.CHA_PERSONALE,A.ID_DOCUMENTO_PRINCIPALE,A.CHA_IN_ARCHIVIO,a.id_tipo_atto as ID_TIPO_ATTO,ta.var_desc_atto as DESC_TIPO_ATTO, a.AUTHOR,a.prot_tit as PROT_TIT, a.ID_RUOLO_CREATORE,a.ARCHIVE_DATE FROM DPA_STAMPAREGISTRI R, PROFILE A LEFT JOIN dpa_tipo_atto ta on a.id_tipo_atto = ta.system_id WHERE (" + this.getUserDB() + ".checkSecurityDocumento(A.SYSTEM_ID, " + infoUtente.idPeople + ", " + infoUtente.idGruppo + ", " + idRuoloPubblico + ",'D') > 0) " + filters_stampe + ")AS a @paging@";
                        }
                        else
                        {
                            //unionStampe += "SELECT ROW_NUMBER() OVER(ORDER BY nvl(DTA_PROTO,CREATION_DATE) DESC) AS RN," +
                            //"A.SYSTEM_ID, A.DOCNUMBER, A.DTA_ANNULLA, A.VAR_PROF_OGGETTO AS VAR_DESC_OGGETTO," +
                            //"A.ID_REGISTRO, A.CHA_TIPO_PROTO, A.CHA_EVIDENZA, A.NUM_ANNO_PROTO," +
                            //"nvl(A.DTA_PROTO,A.CREATION_TIME) AS DATA," +
                            //"to_char(A.CREATION_TIME,'dd/mm/yyyy') AS CREATION_DATE," +
                            //"A.NUM_PROTO, A.VAR_SEGNATURA, to_char(A.DTA_PROTO,'dd/mm/yyyy')  AS DTA_PROTO," +
                            //"A.CHA_PRIVATO, A.CHA_PERSONALE, " +
                            //"A.ID_DOCUMENTO_PRINCIPALE, A.CHA_IN_ARCHIVIO," +
                            //"a.id_tipo_atto as ID_TIPO_ATTO, ta.var_desc_atto as DESC_TIPO_ATTO, " +
                            //"getPeopleUserId (a.AUTHOR) as AUTHOR, a.prot_tit as PROT_TIT " +
                            //    //"getchafirmato(A.DOCNUMBER) as CHA_FIRMATO " +
                            //"@customFieldFilter@" +
                            //" FROM DPA_STAMPAREGISTRI R, PROFILE a " +
                            //"LEFT JOIN dpa_tipo_atto ta on a.id_tipo_atto = ta.system_id " +
                            //"WHERE (checkSecurityDocumento(A.SYSTEM_ID, " + infoUtente.idPeople + ", " + infoUtente.idGruppo + ",'D') > 0) " +
                            //filters_stampe;
                            unionStampe += "SELECT a.*, getpeopleuserid (a.author) AS code_author, getchaimg (a.docnumber) AS cha_img, getinadl (a.system_id, 'D',  " + infoUtente.idGruppo + ",  " + infoUtente.idPeople + ") AS in_adl, getinconservazione (a.system_id,NULL,'D'," + infoUtente.idPeople + "," + infoUtente.idGruppo + ") AS in_conservazione,getchafirmato (a.docnumber) AS cha_firmato,corrcat (a.system_id, a.cha_tipo_proto) AS mitt_dest,gettestoultimanota ('D',a.system_id," + infoUtente.idGruppo + "," + infoUtente.idPeople + "," + infoUtente.idGruppo + ") AS ultima_nota,getpeoplename (a.author) AS desc_autore,getdesccorr (a.id_ruolo_creatore) AS desc_ruolo_autore,getcodruolobyidcorr (a.id_ruolo_creatore) AS cod_ruolo_autore,getcodreg (a.id_registro) AS cod_registro,classcat (a.system_id) AS cod_fascicoli,getdataarrivodoc (a.docnumber) AS data_arrivo,getdiagrammistato (a.docnumber, 'D') AS stato,corrcatbytipo (a.docnumber, a.cha_tipo_proto, 'M') AS mittenti,corrcatbytipo (a.docnumber, a.cha_tipo_proto, 'D') AS destinatari, getesitopubblicazione (a.system_id) AS pubblicazione,esistenotavisibile ('D', a.system_id," + infoUtente.idGruppo + "," + infoUtente.idPeople + "," + infoUtente.idGruppo + ") AS esiste_nota, a.cha_cod_t_a, getimpronta (a.docnumber) AS impronta  @contatore@ @valoriCustom@ FROM (SELECT " + preferedIndex + "interna.*, ROWNUM rnum FROM (SELECT   /*+INDEX(a)*/a.system_id, a.docnumber, a.dta_annulla,a.var_prof_oggetto AS var_desc_oggetto, a.id_registro, a.cha_tipo_proto, a.cha_evidenza,a.num_anno_proto,TO_CHAR (NVL (a.dta_proto, a.creation_time),'dd/mm/yyyy') AS DATA, TO_CHAR (a.creation_time,'dd/mm/yyyy') AS creation_date,a.num_proto, a.var_segnatura,TO_CHAR (a.dta_proto, 'dd/mm/yyyy') AS dta_proto, a.cha_privato, a.cha_personale,a.id_documento_principale, a.cha_in_archivio,a.id_tipo_atto AS id_tipo_atto,ta.var_desc_atto AS desc_tipo_atto, a.prot_tit AS prot_tit,a.archive_date AS dta_archiviazione, a.id_ruolo_creatore, a.author, a.cha_cod_t_a, a.cod_ext_app @customFieldFilter@ FROM dpa_stamparegistri r, PROFILE a LEFT JOIN dpa_tipo_atto ta ON a.id_tipo_atto = ta.system_id WHERE (checksecuritydocumento (a.system_id, " + infoUtente.idPeople + ", " + infoUtente.idGruppo + ", " + idRuoloPubblico + ", 'D') > 0) " + filters_stampe + "ORDER BY @order@ )interna @paging@";

                        }
                    }
                    queryDef.setParam("unionStampe", unionStampe);

                    string ricercaFullText = string.Empty;
                    if (isRicercaFullText && fullTextResult != null && fullTextResult.Capacity > 0)
                    {
                        ricercaFullText += " UNION ";
                        if (dbType.ToUpper().Equals("SQL"))
                        {
                            ricercaFullText += "(SELECT a.system_id, a.docnumber, a.dta_annulla, " +
                                "a.var_prof_oggetto AS var_desc_oggetto, a.id_registro, " +
                                "a.cha_tipo_proto, a.cha_evidenza, a.num_anno_proto, " +
                                "CONVERT (datetime, ISNULL (a.dta_proto, a.creation_time), 103) AS DATA, " +
                                "CONVERT (datetime, a.creation_time, 103) AS creation_date, " +
                                "a.num_proto, a.var_segnatura, " +
                                "CONVERT (datetime, a.dta_proto, 103) AS dta_proto, " +
                                "a.cha_privato, a.cha_personale, a.id_documento_principale, " +
                                "a.cha_in_archivio, a.id_tipo_atto AS id_tipo_atto, " +
                                "ta.var_desc_atto AS desc_tipo_atto, " +
                                "a.prot_tit AS prot_tit, " +
                                "a.archive_date as dta_archiviazione, a.ID_RUOLO_CREATORE, a.author, a.cha_cod_t_a, a.COD_EXT_APP " +
                                "FROM PROFILE a " +
                                "LEFT JOIN dpa_tipo_atto ta on a.id_tipo_atto = ta.system_id " +
                                "LEFT JOIN components c on a.system_id = c.docnumber " +
                                "WHERE  EXISTS (select  'x' from security e where a.system_id=e.thing and e.PERSONORGROUP in ( " + infoUtente.idPeople + ", " + infoUtente.idGruppo + ") and e.ACCESSRIGHTS>0) ";
                        }
                        else
                        {
                            ricercaFullText += "(SELECT /*+index (a)*/ " +
                                "a.system_id, a.docnumber, a.dta_annulla, " +
                                "a.var_prof_oggetto AS var_desc_oggetto, a.id_registro, " +
                                "a.cha_tipo_proto, a.cha_evidenza, a.num_anno_proto, " +
                                "TO_CHAR ( NVL (a.dta_proto, a.creation_time), 'dd/mm/yyyy') AS DATA, " +
                                "TO_CHAR (a.creation_time, 'dd/mm/yyyy') AS creation_date, " +
                                "a.num_proto, a.var_segnatura, " +
                                "TO_CHAR (a.dta_proto, 'dd/mm/yyyy') AS dta_proto, " +
                                "a.cha_privato, a.cha_personale, a.id_documento_principale, " +
                                "a.cha_in_archivio, a.id_tipo_atto AS id_tipo_atto, " +
                                "ta.var_desc_atto AS desc_tipo_atto, " +
                                "a.prot_tit AS prot_tit, " +
                                "a.archive_date as dta_archiviazione, a.ID_RUOLO_CREATORE, a.author, a.cha_cod_t_a, a.COD_EXT_APP, a.ext " +
                                "FROM PROFILE a " +
                                "LEFT JOIN dpa_tipo_atto ta on a.id_tipo_atto = ta.system_id " +
                                "LEFT JOIN components c on a.system_id = c.docnumber " +
                                "WHERE  EXISTS (select  'x' from security e where a.system_id=e.thing and e.PERSONORGROUP in ( " + infoUtente.idPeople + ", " + infoUtente.idGruppo + ") and e.ACCESSRIGHTS>0) ";


                            //"SELECT a.*, getpeopleuserid (a.author) AS code_author, getchaimg (a.docnumber) AS cha_img, getinadl (a.system_id, 'D',  " + infoUtente.idGruppo + ",  " + infoUtente.idPeople + ") AS in_adl, getinconservazione (a.system_id,NULL,'D'," + infoUtente.idPeople + "," + infoUtente.idGruppo + ") AS in_conservazione,getchafirmato (a.docnumber) AS cha_firmato,corrcat (a.system_id, a.cha_tipo_proto) AS mitt_dest,gettestoultimanota ('D',a.system_id," + infoUtente.idGruppo + "," + infoUtente.idPeople + "," + infoUtente.idGruppo + ") AS ultima_nota,getpeoplename (a.author) AS desc_autore,getdesccorr (a.id_ruolo_creatore) AS desc_ruolo_autore,getcodruolobyidcorr (a.id_ruolo_creatore) AS cod_ruolo_autore,getcodreg (a.id_registro) AS cod_registro,classcat (a.system_id) AS cod_fascicoli,getdataarrivodoc (a.docnumber) AS data_arrivo,getdiagrammistato (a.docnumber, 'D') AS stato,corrcatbytipo (a.docnumber, a.cha_tipo_proto, 'M') AS mittenti,corrcatbytipo (a.docnumber, a.cha_tipo_proto, 'D') AS destinatari, getesitopubblicazione (a.system_id) AS pubblicazione,esistenotavisibile ('D', a.system_id," + infoUtente.idGruppo + "," + infoUtente.idPeople + "," + infoUtente.idGruppo + ") AS esiste_nota, a.cha_cod_t_a, getimpronta (a.docnumber) AS impronta  @contatore@ @valoriCustom@ FROM (SELECT " + preferedIndex + "interna.*, ROWNUM rnum FROM (SELECT   /*+INDEX(a)*/a.system_id, a.docnumber, a.dta_annulla,a.var_prof_oggetto AS var_desc_oggetto, a.id_registro, a.cha_tipo_proto, a.cha_evidenza,a.num_anno_proto,TO_CHAR (NVL (a.dta_proto, a.creation_time),'dd/mm/yyyy') AS DATA, TO_CHAR (a.creation_time,'dd/mm/yyyy') AS creation_date,a.num_proto, a.var_segnatura,TO_CHAR (a.dta_proto, 'dd/mm/yyyy') AS dta_proto, a.cha_privato, a.cha_personale,a.id_documento_principale, a.cha_in_archivio,a.id_tipo_atto AS id_tipo_atto,ta.var_desc_atto AS desc_tipo_atto, a.prot_tit AS prot_tit,a.archive_date AS dta_archiviazione, a.id_ruolo_creatore, a.author, a.cha_cod_t_a, a.cod_ext_app @customFieldFilter@ FROM dpa_stamparegistri r, PROFILE a LEFT JOIN dpa_tipo_atto ta ON a.id_tipo_atto = ta.system_id WHERE (checksecuritydocumento (a.system_id, " + infoUtente.idPeople + ", " + infoUtente.idGruppo + ", 'D') > 0) " + filters_stampe + "ORDER BY @order@ )interna @paging@";
                        }

                        int i = 0;
                        ricercaFullText += " AND ( C.VERSION_ID IN(";
                        foreach (string id in fullTextResult)
                        {
                            ricercaFullText += id;
                            if (i < fullTextResult.Count - 1)
                            {
                                if (i % 998 == 0 && i > 0)
                                {
                                    ricercaFullText += ") OR C.VERSION_ID IN (";
                                }
                                else
                                {
                                    ricercaFullText += ", ";
                                }
                            }
                            else
                            {
                                ricercaFullText += ")";
                            }
                            i++;
                        }
                        ricercaFullText += "))";
                    }

                    queryDef.setParam("fulltext", ricercaFullText);

                    queryDef.setParam("contatore", contatore);
                    // Parametri per l'impostazione dell'ordinamento
                    queryDef.setParam("order", orderCriteria);

                    queryDef.setParam("listDocuments", listDocuments);

                    queryDef.setParam("paging", paging);


                    queryDef.setParam("from", fromTables);

                    // Se è una stampa registri viene rieseguita la sostituzione della function per l'estrazione
                    // del valore assunto da un campo profilato
                    if (unionStampeReg)
                        queryDef.setParam("customFieldFilter", extractFieldValue);

                    if (ricercaVeloce)
                        queryDef.setParam("dataInizioAnno", "01/01/" + DateTime.Now.Year.ToString() + " 00:00:00");

                    queryDef.setParam("valoriCustom", valoriCustom);


                    // per SQL
                    queryDef.setParam("dbuser", getUserDB());
                    queryDef.setParam("idPeople", infoUtente.idPeople);
                    queryDef.setParam("idGruppo", infoUtente.idGruppo);

                    ////Ricerca FullText 
                    //queryDef.setParam("ricercaFulltext", valoriCustom);


                    string commandText = queryDef.getSQL();

                    logger.Debug(commandText);

                    AppendListaDocumentiPagingCustom(listaDoc, commandText, visibleFieldsTemplate);
                }
            }
            else
            {
                /* ABBATANGELI GIANLUIGI
                 * Non carico i documenti perchè raggiunto il numero massimo 
                 * di righe per la ricerca ed imposto numTotPage = -2. */
                numTotPage = -2;
            }
        }


        private string GetQueryCondComuni(string idGruppo, string idPeople, string queryWhere, DocsPaVO.filtri.FiltroRicerca f, ref string andStr, ref int numAndStr, ref string queryFrom)
        {
            string dbType = System.Configuration.ConfigurationManager.AppSettings["DBType"];
            DocsPaDB.Query_Utils.Utils obj = new DocsPaDB.Query_Utils.Utils();
            string filtroDataPec = string.Empty;
            string filtroDataPitre = string.Empty;

            if (f.valore != null && !f.valore.Equals(""))
            {

                //tipo_contatore = tipoContatoreTemplates(f.template);
                // i confronti vengono fatti sui valori presi da
                // DocsPaVO.filtri.ricercaArgomenti inerenti documenti protocollati
                //modifica
                //if(tipo_contatore.Equals(""))
                //    tipo_contatore = tipoContatoreTemplates(f.template);
                //modifica
                switch (f.argomento)
                {
                    case "DATA_SCADENZA_IL":
                        if (numAndStr > 0)
                            andStr += " AND ";
                        numAndStr += 1;
                        andStr += " A.DTA_SCADENZA >=" +
                            DocsPaDbManagement.Functions.Functions.ToDateBetween(f.valore, true) +
                            " AND A.DTA_SCADENZA <=" + DocsPaDbManagement.Functions.Functions.ToDateBetween(f.valore, false);
                        ;
                        break;
                    case "DATA_SCADENZA_SUCCESSIVA_AL":
                        if (numAndStr > 0)
                            andStr += " AND ";
                        numAndStr += 1;
                        andStr += "A.DTA_SCADENZA>=" + DocsPaDbManagement.Functions.Functions.ToDateBetween(f.valore, true);
                        break;
                    case "DATA_SCADENZA_PRECEDENTE_IL":
                        if (numAndStr > 0)
                            andStr += " AND ";
                        numAndStr += 1;
                        andStr += "A.DTA_SCADENZA<" + DocsPaDbManagement.Functions.Functions.ToDateBetween(f.valore, false);
                        break;
                    case "DATA_CREAZIONE_IL":
                        if (numAndStr > 0)
                            andStr += " AND ";
                        numAndStr += 1;
                        //andStr += " A.CREATION_DATE >=" + 
                        //	DocsPaDbManagement.Functions.Functions.ToDateBetween(f.valore,true)+
                        //	" AND A.CREATION_DATE <=" + DocsPaDbManagement.Functions.Functions.ToDateBetween(f.valore,false);
                        andStr += " A.CREATION_TIME >=" +
                            DocsPaDbManagement.Functions.Functions.ToDateBetween(f.valore, true) +
                            " AND A.CREATION_TIME <=" + DocsPaDbManagement.Functions.Functions.ToDateBetween(f.valore, false);

                        break;
                    case "DATA_CREAZIONE_SUCCESSIVA_AL":
                        if (numAndStr > 0)
                            andStr += " AND ";
                        numAndStr += 1;
                        //andStr += "A.CREATION_DATE>=" + DocsPaDbManagement.Functions.Functions.ToDateBetween(f.valore,true);				
                        andStr += "A.CREATION_TIME>=" + DocsPaDbManagement.Functions.Functions.ToDateBetween(f.valore, true);
                        dtaCreazSucc = "'" + f.valore + "'";
                        break;
                    case "DATA_CREAZIONE_PRECEDENTE_IL":
                        if (numAndStr > 0)
                            andStr += " AND ";
                        numAndStr += 1;
                        //andStr += "A.CREATION_DATE<=" + DocsPaDbManagement.Functions.Functions.ToDateBetween(f.valore,false);				
                        andStr += "A.CREATION_TIME<=" + DocsPaDbManagement.Functions.Functions.ToDateBetween(f.valore, false);
                        dtaCreazPreced = "'" + f.valore + "'";
                        break;
                    case "ANNO_PROTOCOLLO":
                        if (!string.IsNullOrEmpty(f.valore))
                        {
                            if (numAndStr > 0)
                                andStr += " AND ";
                            numAndStr += 1;

                            andStr += "A.DTA_PROTO BETWEEN " + DocsPaDbManagement.Functions.Functions.ToDateBetween("01/01/" + f.valore, true);
                            andStr += " AND " + DocsPaDbManagement.Functions.Functions.ToDateBetween("31/12/" + f.valore, false);
                        }
                        break;
                    case "DOCNUMBER":
                        if (numAndStr++ > 0)
                            andStr += " AND ";
                        andStr += "A.DOCNUMBER=" + f.valore;
                        break;
                    case "DOCNUMBER_DAL":
                        if (numAndStr++ > 0)
                            andStr += " AND ";
                        andStr += "A.DOCNUMBER>=" + f.valore;
                        break;
                    case "DOCNUMBER_AL":
                        if (numAndStr++ > 0)
                            andStr += " AND ";
                        andStr += "A.DOCNUMBER<=" + f.valore;
                        break;
                    case "ID_OGGETTO":
                        if (numAndStr > 0)
                            andStr += " AND ";
                        numAndStr += 1;
                        andStr += "D.SYSTEM_ID=" + f.valore;
                        break;
                    case "OGGETTO":
                        if (numAndStr > 0)
                            andStr += " AND ";
                        numAndStr += 1;

                        // La stringa di testo contenuta nel campo oggetto è messa in
                        // AND utilizzando come separatore la stringa fissa '&&'

                        if (Cfg_USE_TEXT_INDEX == "0")
                        {
                            Regex regex = new Regex("&&");
                            string[] lista = regex.Split(f.valore);
                            andStr += "UPPER(A.VAR_PROF_OGGETTO) LIKE '%" + lista[0].ToUpper().Replace("'", "''") + "%'";
                            for (int i = 1; i < lista.Length; i++)
                                andStr += " AND UPPER(A.VAR_PROF_OGGETTO) LIKE '%" + lista[i].ToUpper().Replace("'", "''") + "%'";
                        }
                        else if (Cfg_USE_TEXT_INDEX == "1")
                        {
                            f.valore.Replace("&&", " ");
                            andStr += "a.SYSTEM_id in ( \n " +
                                                    " select system_id from table(fulltext_onvar_prof_oggetto ( \n " +
                                                    "'" + f.valore.ToUpper().Replace("'", "''") + "', \n" +
                                                    dtaCreazSucc + ", \n" +
                                                    dtaCreazPreced + ", \n" +
                                                    dtaProtoSucc + ", \n" +
                                                    dtaProtoPreced + " \n" +
                                                    "))) \n";
                        }
                        else if (Cfg_USE_TEXT_INDEX == "2")
                        {
                            List<DocsPaVO.filtri.SearchTextItem> items = new List<DocsPaVO.filtri.SearchTextItem>();

                            string value = DocsPaUtils.Functions.Functions.ReplaceApexes(f.valore).ToUpper();

                            foreach (string filter in new Regex("&&").Split(value))
                                items.Add(new DocsPaVO.filtri.SearchTextItem(filter, DocsPaVO.filtri.SearchTextOptionsEnum.InitWithWord));

                            andStr += DocsPaDbManagement.Functions.Functions.GetContainsTextQuery("A.VAR_PROF_OGGETTO", items.ToArray());

                        }
                        break;
                    case "REGISTRO":
                        if (numAndStr > 0)
                            andStr += " AND ";
                        numAndStr += 1;
                        andStr += "A.ID_REGISTRO IN (" + f.valore + ")";
                        break;
                    case "REGISTRI_UTENTE_IN_CONDITION":
                        if (numAndStr > 0)
                            andStr += " AND ";
                        numAndStr += 1;
                        andStr += "A.ID_REGISTRO " + f.valore;
                        break;
                    case "REGISTRI_UTENTE_IN_CONDITION_CON_NULL":
                        if (numAndStr > 0)
                            andStr += " AND ";
                        numAndStr += 1;
                        andStr += "(A.ID_REGISTRO " + f.valore + " OR A.ID_REGISTRO IS NULL)";
                        break;
                    case "TIPO":
                        if (numAndStr++ > 0)
                            andStr += " AND ";

                        if (f.valore.Equals("T"))
                            andStr += "A.CHA_TIPO_PROTO IN ('A', 'P', 'I')";
                        else
                            andStr += "A.CHA_TIPO_PROTO='" + f.valore + "'";

                        if (dbType.ToUpper() == "ORACLE")
                            andStr += " AND nvl(A.CHA_IN_CESTINO,'0')='0'";
                        else
                            andStr += " AND ISNULL(A.CHA_IN_CESTINO,'0')='0'";

                        break;
                    case "TIPO_DOCUMENTO":
                        queryWhere = " AND A.DOCUMENTTYPE=H.SYSTEM_ID";
                        queryFrom = " , DOCUMENTTYPES H";
                        if (numAndStr > 0)
                            andStr += " AND ";
                        numAndStr += 1;
                        andStr += "H.TYPE_ID='" + f.valore + "'";
                        break;

                    //ABBATANGELI GIANLUIGI
                    case "COD_EXT_APP":
                        if (numAndStr > 0)
                            andStr += " AND ";
                        numAndStr += 1;
                        andStr += "A.COD_EXT_APP='" + f.valore + "'";
                        break;

                    case "PAROLE_CHIAVE":
                        if (numAndStr > 0)
                            andStr += " AND ";
                        numAndStr += 1;
                        andStr += "A.SYSTEM_ID IN (SELECT ID_PROFILE FROM DPA_PROF_PAROLE WHERE ID_PAROLA IN (" + f.valore + "))";
                        break;
                    case "TIPO_ATTO":
                        if (numAndStr > 0)
                            andStr += " AND ";
                        numAndStr += 1;
                        andStr += "A.ID_TIPO_ATTO=" + f.valore;
                        //
                        tipo_contatore = tipoContatoreTemplates(f.valore);
                        oggettoCUstom = getOggettoCustom(f.valore);
                        break;
                    case "NOTE":
                        if (numAndStr > 0)
                            andStr += " AND ";
                        numAndStr += 1;

                        string userDb = getUserDB();
                        if (!string.IsNullOrEmpty(userDb))
                            userDb += ".";


                        string[] ricNote = SplittaStringaRicercaNote(f.valore);
                        string rf = ricNote[2];
                        andStr += string.Format("{0}GetCountNote('D', A.SYSTEM_ID, '{1}', {2}, {3}, '{4}', {5}) > 0", userDb, ricNote[0].Replace("'", "''"), idPeople, idGruppo, ricNote[1], rf);

                        break;
                    case "FIRMATARIO_NOME":
                        queryWhere = " AND L.DOCNUMBER=A.DOCNUMBER AND M.ID_VERSIONE=L.VERSION_ID AND M.ID_FIRMATARIO=N.SYSTEM_ID";
                        queryFrom = " , VERSIONS L , DPA_FIRMA_VERS M, DPA_FIRMATARI N";
                        if (numAndStr > 0)
                            andStr += " AND ";
                        numAndStr += 1;
                        andStr += "UPPER(N.VAR_NOME) LIKE '%" + f.valore.ToUpper().Replace("'", "''") + "%'";
                        break;
                    case "FIRMATARIO_COGNOME":
                        queryWhere = " AND L.DOCNUMBER=A.DOCNUMBER AND M.ID_VERSIONE=L.VERSION_ID AND M.ID_FIRMATARIO=N.SYSTEM_ID";
                        queryFrom = " , VERSIONS L, DPA_FIRMA_VERS M, DPA_FIRMATARI N";
                        if (numAndStr > 0)
                            andStr += " AND ";
                        numAndStr += 1;
                        andStr += "UPPER(N.VAR_COGNOME) LIKE '%" + f.valore.ToUpper().Replace("'", "''") + "%'";
                        break;
                    case "EVIDENZA":
                        if (numAndStr > 0)
                            andStr += " AND ";
                        numAndStr += 1;
                        andStr += "A.CHA_EVIDENZA='" + f.valore + "'";
                        break;
                    case "IN_CHILD_RIC_ESTESA":
                        queryFrom += " , PROJECT_COMPONENTS B";
                        if (numAndStr > 0)
                            andStr += " AND ";
                        numAndStr += 1;
                        andStr += " A.SYSTEM_ID = B.LINK AND B.PROJECT_ID " + f.valore;
                        break;
                    case "MANCANZA_IMMAGINE":
                        if (numAndStr > 0)
                            andStr += " AND ";
                        numAndStr += 1;
                        andStr += "A.CHA_IMG='0'";
                        break;
                    case "MANCANZA_ASSEGNAZIONE":
                        if (numAndStr > 0)
                            andStr += " AND ";
                        numAndStr += 1;
                        andStr += "A.CHA_ASSEGNATO='0'";
                        break;
                    case "MANCANZA_FASCICOLAZIONE":
                        if (numAndStr > 0)
                            andStr += " AND ";
                        numAndStr += 1;
                        //andStr += "A.SYSTEM_ID NOT IN (SELECT LINK FROM PROJECT_COMPONENTS WHERE TYPE='D')";				
                        andStr += "A.CHA_FASCICOLATO = '0'";
                        break;
                    case "PROFILAZIONE_DINAMICA":
                        DocsPaDB.Query_DocsPAWS.Model model = new Model();
                        andStr += model.getSeriePerRicercaProfilazione(f.template, "");
                        break;
                    case "DIAGRAMMA_STATO_DOC":
                        //queryFrom += " ,DPA_DIAGRAMMI ";//,DPA_DIAGRAMMI_STO";
                        if ((f.nomeCampo.ToUpper() == "UNEQUALS"))
                            queryWhere += "  AND A.SYSTEM_ID IN (SELECT DOC_NUMBER FROM DPA_DIAGRAMMI WHERE DPA_DIAGRAMMI.ID_STATO != " + f.valore + ") ";
                        else
                        {
                            queryWhere += "  AND A.SYSTEM_ID IN (SELECT DOC_NUMBER FROM DPA_DIAGRAMMI WHERE DPA_DIAGRAMMI.ID_STATO = " + f.valore + ") ";
                        }
                        break;
                    //arealavoro
                    case "DOC_IN_ADL":
                        //split dei valori
                        string[] val = f.valore.Split('@');
                        andStr += " and exists (select id_profile from dpa_area_lavoro d where d.id_profile=a.system_id and id_people=" + val[0] + " and id_ruolo_in_uo =" + val[1] + ")";
                        break;
                    case "ID_PARENT":
                        if (numAndStr > 0)
                            andStr += " AND ";
                        numAndStr += 1;
                        andStr += "A.ID_PARENT=" + f.valore;
                        break;

                    case "DOCUMENTI_DAL_AL":
                        val = f.valore.Split(';');
                        if (val.Length == 2 &&
                            val[0].Length == 10 &&
                            val[1].Length == 10)
                        {
                            andStr += "A.DTA_PROTO BETWEEN " + DocsPaDbManagement.Functions.Functions.ToDateBetween(val[0], true);
                            andStr += " AND " + DocsPaDbManagement.Functions.Functions.ToDateBetween(val[1], false);
                        }
                        break;
                    case "CODICE_DESCRIZIONE_AMMINISTRAZIONE":
                        if (numAndStr > 0)
                            andStr += " AND ";
                        numAndStr += 1;
                        andStr += "a.system_id  IN ( SELECT /*+ index (f)  index(g) */  f.id_profile FROM dpa_doc_arrivo_par f, dpa_corr_globali g " +
                                  "WHERE F.ID_PROFILE=a.system_id and g.system_id = f.ID_MITT_DEST AND UPPER(g.COD_DESC_INTEROP) LIKE UPPER('%" + f.valore + "%'))";
                        break;
                    case "NUMERO_VERSIONI":
                        if (numAndStr > 0)
                            andStr += " AND ";
                        numAndStr += 1;
                        andStr += " (select count(z.version_id) from VERSIONS z where a.DOCNUMBER=z.DOCNUMBER) " + f.valore;
                        break;
                    case "NUMERO_ALLEGATI":
                        if (numAndStr > 0)
                            andStr += " AND ";
                        numAndStr += 1;
                        andStr += " (select count(x.system_id) from profile x where a.DOCNUMBER=x.id_documento_principale) " + f.valore;
                        break;
                    case "CODICE_TIPO_NOTIFICA":
                        if (numAndStr > 0)
                            andStr += " AND ";
                        numAndStr += 1;
                        if (f.valore.ToLower().Equals("tutti"))
                        {
                            andStr += "a.docnumber  IN (SELECT unique f.docnumber FROM dpa_notifica f, dpa_tipo_notifica g " +
                                                       "WHERE a.docnumber = f.DOCNUMBER)";
                        }
                        else
                        {
                            andStr += "a.docnumber  IN (SELECT unique f.docnumber FROM dpa_notifica f " +
                                      "WHERE a.docnumber = f.DOCNUMBER filtroDataPec" + //filtroDataPec +
                                      "and f.VAR_TIPO_DESTINATARIO IS NOT NULL " +
                                      "and f.ID_TIPO_NOTIFICA in " +
                                      "(select g.SYSTEM_ID from dpa_tipo_notifica g  where " +
                                      "g.var_codice_notifica ='" + f.valore + "'))";
                        }
                        break;

                    //case "DATA_TIPO_NOTIFICA_DA":
                    //    andStr += " AND ";
                    //    andStr += "f.VAR_GIORNO_ORA>=" + DocsPaDbManagement.Functions.Functions.ToDate(f.valore + " 00:00:00");
                    //    //filtroDataPec += " and f.VAR_GIORNO_ORA>=" + DocsPaDbManagement.Functions.Functions.ToDate(f.valore + " 00:00:00");
                    //    break;

                    //case "DATA_TIPO_NOTIFICA_A":
                    //    andStr += " AND ";
                    //    andStr += "f.VAR_GIORNO_ORA<=" + DocsPaDbManagement.Functions.Functions.ToDate(f.valore + " 23:59:59");
                    //    //filtroDataPec += " and f.VAR_GIORNO_ORA<=" + DocsPaDbManagement.Functions.Functions.ToDate(f.valore + " 23:59:59");
                    //    break;

                    //case "DATA_TIPO_NOTIFICA_TODAY":
                    //    andStr += " AND ";
                    //    andStr += "f.VAR_GIORNO_ORA>=" + DocsPaDbManagement.Functions.Functions.ToDate(f.valore + " 00:00:00")
                    //               + " AND f.VAR_GIORNO_ORA<=" + DocsPaDbManagement.Functions.Functions.ToDate(f.valore + " 23:59:59");
                    //    //filtroDataPec += " and f.VAR_GIORNO_ORA>=" + DocsPaDbManagement.Functions.Functions.ToDate(f.valore + " 00:00:00")
                    //    //           + " AND f.VAR_GIORNO_ORA<=" + DocsPaDbManagement.Functions.Functions.ToDate(f.valore + " 23:59:59");
                    //    break;

                    //case "DATA_TIPO_NOTIFICA_NESSUNA":
                    //    andStr += f.valore;
                    //    break;

                    case "CODICE_TIPO_NOTIFICA_PITRE":
                        if (numAndStr > 0)
                            andStr += " AND ";
                        numAndStr += 1;
                        if (f.valore.ToLower().Equals("tutti"))
                        {
                            andStr += "a.docnumber  IN (SELECT unique f.docnumber FROM dpa_notifica f, dpa_tipo_notifica g " +
                                                       "WHERE a.docnumber = f.DOCNUMBER " +
                                                       " and lower(f.var_mittente) like 'http%' )";
                        }
                        else
                        {
                            andStr += "a.docnumber  IN (SELECT unique f.docnumber FROM dpa_notifica f " +
                                      "WHERE a.docnumber = f.DOCNUMBER " +
                                      "and lower(f.var_mittente) like 'http%' filtroDataPitre " + //filtroDataPitre +
                                      "and f.VAR_TIPO_DESTINATARIO IS NULL " +
                                      "and f.ID_TIPO_NOTIFICA in " +
                                      "(select g.SYSTEM_ID from dpa_tipo_notifica g  where " +
                                      "g.var_codice_notifica ='" + f.valore + "'))";
                        }
                        break;

                    //case "DATA_TIPO_NOTIFICA_DA_PITRE":
                    //    andStr += " AND ";
                    //    andStr += "f.VAR_GIORNO_ORA>=" + DocsPaDbManagement.Functions.Functions.ToDate(f.valore + " 00:00:00");
                    //    //filtroDataPitre += " and f.VAR_GIORNO_ORA>=" + DocsPaDbManagement.Functions.Functions.ToDate(f.valore + " 00:00:00");
                    //    break;

                    //case "DATA_TIPO_NOTIFICA_A_PITRE":
                    //    andStr += " AND ";
                    //    andStr += "f.VAR_GIORNO_ORA<=" + DocsPaDbManagement.Functions.Functions.ToDate(f.valore + " 23:59:59");
                    //    //filtroDataPitre += " and f.VAR_GIORNO_ORA<=" + DocsPaDbManagement.Functions.Functions.ToDate(f.valore + " 23:59:59");
                    //    break;
                    //case "DATA_TIPO_NOTIFICA_TODAY_PITRE":
                    //    andStr += " AND ";
                    //    andStr += "f.VAR_GIORNO_ORA>=" + DocsPaDbManagement.Functions.Functions.ToDate(f.valore + " 00:00:00")
                    //               + " AND f.VAR_GIORNO_ORA<=" + DocsPaDbManagement.Functions.Functions.ToDate(f.valore + " 23:59:59");
                    //    //filtroDataPitre += " and f.VAR_GIORNO_ORA>=" + DocsPaDbManagement.Functions.Functions.ToDate(f.valore + " 00:00:00")
                    //    //           + " AND f.VAR_GIORNO_ORA<=" + DocsPaDbManagement.Functions.Functions.ToDate(f.valore + " 23:59:59");
                    //    break;
                    //case "DATA_TIPO_NOTIFICA_NESSUNA_PITRE":
                    //    andStr += f.valore;
                    //    break;
                    case "DATA_PROT_SUCCESSIVA_AL":
                        dtaProtoSucc = "'" + f.valore + "'";
                        break;
                    case "DATA_PROT_PRECEDENTE_IL":
                        dtaProtoPreced = "'" + f.valore + "'";
                        break;
                    //case "ESCLUDI_SYSTEM_ID":
                    //    andStr += " AND A.SYSTEM_ID NOT IN (" + f.valore + ")";
                    //    break;

                    case "DATA_ULTIMA_MODIFICA_IL":
                        andStr += " AND ";
                        andStr += "A.LAST_EDIT_DATE >= " + DocsPaDbManagement.Functions.Functions.ToDateBetween(f.valore, true) + " AND A.LAST_EDIT_DATE<= " + DocsPaDbManagement.Functions.Functions.ToDateBetween(f.valore, false);
                        break;
                    case "DATA_ULTIMA_MODIFICA_SUCCESSIVA_AL":
                        andStr += " AND ";
                        if (!dbType.ToUpper().Equals("SQL"))
                            andStr += "A.LAST_EDIT_DATE >= to_date('" + f.valore + "','dd/mm/yyyy HH24:mi:ss') ";
                        else
                            andStr += "A.LAST_EDIT_DATE >= convert(datetime,'" + f.valore.Replace(".", ":") + "', 103) ";
                        break;

                    case "DATA_ULTIMA_MODIFICA_PRECEDENTE_IL":
                        andStr += " AND ";
                        if (!dbType.ToUpper().Equals("SQL"))
                            andStr += "A.LAST_EDIT_DATE <= to_date('" + f.valore + "','dd/mm/yyyy HH24:mi:ss') ";
                        else
                            andStr += "A.LAST_EDIT_DATE <= convert(datetime,'" + f.valore.Replace(".", ":") + "', 103) ";
                        break;
                }
            }

            return queryWhere;
        }

        private static string[] SplittaStringaRicercaNote(string valore)
        {
            // La stringa da ricercare nelle note, oltre al testo da
            // ricercare contiene anche la tipologia di ricerca 
            // richiesta
            string[] separatore = new string[] { "@-@" };
            string[] ricNote = valore.Split(separatore, StringSplitOptions.None);
            return ricNote;
        }

        private bool GetFiltroRicercaVis(DocsPaVO.filtri.FiltroRicerca[][] objQueryList)
        {
            bool retVal = false;
            for (int i = 0; i < objQueryList.Length; i++)
            {
                for (int j = 0; j < objQueryList[i].Length; j++)
                {
                    DocsPaVO.filtri.FiltroRicerca f = objQueryList[i][j];
                    if (f.argomento.ToUpper().Equals("FROM_RICERCA_VIS"))
                        retVal = true;
                }
            }
            return retVal;
        }

        private string GetFiltroTipo(string tipo, DocsPaVO.filtri.FiltroRicerca[][] objQueryList)
        {
            for (int i = 0; i < objQueryList.Length; i++)
            {
                for (int j = 0; j < objQueryList[i].Length; j++)
                {
                    DocsPaVO.filtri.FiltroRicerca f = objQueryList[i][j];
                    if (f.argomento.ToUpper().Equals("TIPO"))
                    {
                        switch (f.valore)
                        {
                            case "A":
                                tipo += "'A',";
                                break;

                            case "P":
                                tipo += "'P',";
                                break;

                            case "I":
                                tipo += "'I',";
                                break;

                            case "G":
                                tipo += "'G',";
                                break;

                            case "T":
                                tipo += "'A','P','I','G',";
                                break;
                        }
                    }
                }
            }
            return tipo;
        }

        private string GetQueryCondTipo(string tipo, DocsPaVO.filtri.FiltroRicerca f)
        {
            if (f.valore != null && !f.valore.Equals(""))
            {
                // i confronti vengono fatti sui valori presi da
                // DocsPaVO.filtri.ricercaArgomenti inerenti documenti protocollati
                switch (f.argomento)
                {
                    case "PROT_ARRIVO":
                        if (f.valore.ToUpper().Equals("TRUE"))
                        {
                            tipo += "'A',";
                            Arrivo = true;
                        }
                        break;

                    case "PROT_PARTENZA":
                        if (f.valore.ToUpper().Equals("TRUE"))
                        {
                            tipo += "'P',";
                            Partenza = true;
                        }
                        break;

                    case "PROT_INTERNO":
                        if (f.valore.ToUpper().Equals("TRUE"))
                        {
                            tipo += "'I',";
                            Interno = true;
                        }
                        break;

                    case "GRIGIO":
                        if (f.valore.ToUpper().Equals("TRUE"))
                        {
                            tipo += "'G',";
                            Grigi = true;
                        }
                        break;

                    //case "ALLEGATO":
                    //    if (f.valore.ToUpper().Equals("TRUE"))
                    //    {
                    //        if (!Grigi)
                    //        {
                    //            tipo += "'G',";
                    //            Grigi = true;
                    //        }
                    //    }
                    //    break;
                }
            }
            return tipo;
        }

        private string GetQueryCondRegPredisposti(DocsPaVO.filtri.FiltroRicerca f, ref string andStr, ref int numAndStr)
        {
            DocsPaDB.Query_Utils.Utils obj = new DocsPaDB.Query_Utils.Utils();
            numAndStr = 1;
            if (f.valore != null && !f.valore.Equals(""))
            {
                // i confronti vengono fatti sui valori presi da
                // DocsPaVO.filtri.ricercaArgomenti inerenti documenti protocollati
                switch (f.argomento)
                {
                    case "REGISTRO":
                        if (numAndStr > 0)
                            andStr += " AND ";
                        numAndStr += 1;
                        andStr += "(A.ID_REGISTRO IN (" + f.valore + ") OR A.ID_REGISTRO IS NULL)";
                        break;
                    case "REGISTRI_UTENTE_IN_CONDITION":
                        //if (!obj.isFiltroAooEnabled())
                        //{
                        if (numAndStr > 0)
                            andStr += " AND ";
                        numAndStr += 1;
                        andStr += "(A.ID_REGISTRO " + f.valore + " OR A.ID_REGISTRO IS NULL)";
                        //}
                        break;
                    case "REGISTRI_UTENTE_IN_CONDITION_CON_NULL":
                        //if (!obj.isFiltroAooEnabled())
                        //{
                        if (numAndStr > 0)
                            andStr += " AND ";
                        numAndStr += 1;
                        andStr += "(A.ID_REGISTRO " + f.valore + " OR A.ID_REGISTRO IS NULL)";
                        //}
                        break;
                }
            }
            return andStr;
        }

        private string GetQueryCondComuniDocumenti(string idGruppo, string idPeople, string queryWhere, DocsPaVO.filtri.FiltroRicerca f, string anno_prof, ref string andStr, ref int numAndStr, ref string queryFrom, bool daProto, ref string orderCondition)
        {
            string dbType = System.Configuration.ConfigurationManager.AppSettings["DBType"];
            DocsPaDB.Query_Utils.Utils obj = new DocsPaDB.Query_Utils.Utils();
            //string filtroDataPec = string.Empty;
            //string filtroDataPitre = string.Empty;
            if (f.valore != null && !f.valore.Equals(""))
            {

                //if (tipo_contatore.Equals(""))
                //    tipo_contatore = tipoContatoreTemplates(f.template);
                //modifica
                // i confronti vengono fatti sui valori presi da
                // DocsPaVO.filtri.ricercaArgomenti inerenti documenti protocollati
                switch (f.argomento)
                {
                    case "TIPO":
                        if (f.valore != null)
                        {
                            //if (numAndStr > 0)
                            if(!string.IsNullOrEmpty(andStr))
                                andStr += " AND ";
                            numAndStr += 1;
                            //andStr += "A.CHA_TIPO_PROTO IN " + in_valor;

                            if (dbType.ToUpper().Equals("ORACLE"))
                                andStr += " nvl(A.CHA_IN_CESTINO,'0')='0'";
                            else andStr += " ISNULL(A.CHA_IN_CESTINO,'0')='0'";
                        }
                        break;
                    case "DOC_IN_ADL":
                        //if (numAndStr > 0)
                        andStr += " AND ";
                        numAndStr += 1;
                        //split dei valori
                        string[] val = f.valore.Split('@');
                        andStr += " exists (select id_profile from dpa_area_lavoro d where d.id_profile=a.system_id and id_people=" + val[0] + " and id_ruolo_in_uo =" + val[1] + ")";
                        break;
                    case "DATA_SCADENZA_IL":
                        // if (numAndStr > 0)
                        andStr += " AND ";
                        numAndStr += 1;
                        andStr += " A.DTA_SCADENZA >=" +
                            DocsPaDbManagement.Functions.Functions.ToDateBetween(f.valore, true) +
                            " AND A.DTA_SCADENZA <=" + DocsPaDbManagement.Functions.Functions.ToDateBetween(f.valore, false);
                        break;
                    case "DATA_SCADENZA_SUCCESSIVA_AL":
                        // if (numAndStr > 0)
                        andStr += " AND ";
                        numAndStr += 1;
                        andStr += "A.DTA_SCADENZA>=" + DocsPaDbManagement.Functions.Functions.ToDateBetween(f.valore, true);
                        break;
                    case "DATA_SCADENZA_PRECEDENTE_IL":
                        // if (numAndStr > 0)
                        andStr += " AND ";
                        numAndStr += 1;
                        andStr += "A.DTA_SCADENZA<=" + DocsPaDbManagement.Functions.Functions.ToDateBetween(f.valore, false);
                        break;
                    case "DATA_SCAD_SC":
                        // data scadenza nella settimana corrente
                        andStr += " AND ";
                        numAndStr += 1;
                        if (!dbType.ToUpper().Equals("SQL"))
                            andStr += "A.DTA_SCADENZA>=(select to_date(to_char(sysdate+ (1-to_char(sysdate,'D')))) startdayofweek from dual) AND A.DTA_SCADENZA<(select to_date(to_char(sysdate+ (8-to_char(sysdate,'D')))) enddayofweek from dual) ";
                        else
                            andStr += "A.DTA_SCADENZA>=(select DATEADD(DAY,-DATEPART(WEEKDAY,(DATEADD(DAY,7-DATEPART(WEEKDAY,GETDATE()),GETDATE())))+(7-DATEPART(WEEKDAY,GETDATE()))+2 ,GETDATE())) AND A.DTA_SCADENZA<=(select DATEADD(DAY , 8-DATEPART(WEEKDAY,GETDATE()),GETDATE())) ";
                        break;
                    case "DATA_SCAD_MC":
                        // data scadenza nel mese corrente
                        andStr += " AND ";
                        numAndStr += 1;
                        if (!dbType.ToUpper().Equals("SQL"))
                            andStr += "A.DTA_SCADENZA>=(select to_date(trunc(sysdate,'MM')) as start_date from dual) AND A.DTA_SCADENZA<(select to_date(last_day(sysdate)+1) as DAY from dual) ";
                        else
                            andStr += "A.DTA_SCADENZA>=(SELECT DATEADD(dd,-(DAY(getdate())-1),getdate())) AND A.DTA_SCADENZA<=(SELECT DATEADD(dd,-(DAY(DATEADD(mm,1,getdate()))),DATEADD(mm,1,getdate()))) ";
                        break;
                    case "DATA_SCADENZA_TODAY":
                        // if (numAndStr > 0)
                        andStr += " AND ";
                        numAndStr += 1;
                        if (!dbType.ToUpper().Equals("SQL"))
                            andStr += "to_char(A.DTA_SCADENZA, 'DD/MM/YYYY') = (select to_char(sysdate, 'DD/MM/YYYY') from dual)";
                        else
                            //andStr += "A.DTA_SCADENZA>=(SELECT getdate()) AND A.DTA_SCADENZA<=(SELECT getdate()) ";
                            andStr += "DATEDIFF(DD, A.DTA_SCADENZA, GETDATE()) = 0 ";
                        break;
                    case "DATA_CREAZIONE_IL":
                        // if (numAndStr > 0)
                        andStr += " AND ";
                        numAndStr += 1;
                        andStr += " A.CREATION_TIME >=" +
                            DocsPaDbManagement.Functions.Functions.ToDateBetween(f.valore, true) +
                            " AND A.CREATION_TIME <=" + DocsPaDbManagement.Functions.Functions.ToDateBetween(f.valore, false);
                        break;
                    case "DATA_CREAZIONE_SUCCESSIVA_AL":
                        // if (numAndStr > 0)
                        andStr += " AND ";
                        numAndStr += 1;
                        andStr += "A.CREATION_TIME>=" + DocsPaDbManagement.Functions.Functions.ToDateBetween(f.valore, true);
                        dtaCreazSucc = "'" + f.valore + "'";
                        break;
                    case "DATA_CREAZIONE_PRECEDENTE_IL":
                        // if (numAndStr > 0)
                        andStr += " AND ";
                        numAndStr += 1;
                        andStr += "A.CREATION_TIME<=" + DocsPaDbManagement.Functions.Functions.ToDateBetween(f.valore, false);
                        dtaCreazPreced = "'" + f.valore + "'";
                        break;
                    case "DATA_CREAZ_SC":
                        // data creazione nella settimana corrente
                        andStr += " AND ";
                        numAndStr += 1;
                        if (!dbType.ToUpper().Equals("SQL"))
                            andStr += "A.CREATION_TIME>=(select to_date(to_char(sysdate+ (1-to_char(sysdate,'D')))) startdayofweek from dual) AND A.CREATION_TIME<(select to_date(to_char(sysdate+ (8-to_char(sysdate,'D')))) enddayofweek from dual) ";
                        else
                            andStr += "A.CREATION_TIME>=(select DATEADD(DAY,-DATEPART(WEEKDAY,(DATEADD(DAY,7-DATEPART(WEEKDAY,GETDATE()),GETDATE())))+(7-DATEPART(WEEKDAY,GETDATE()))+2 ,GETDATE())) AND A.CREATION_TIME<=(select DATEADD(DAY , 8-DATEPART(WEEKDAY,GETDATE()),GETDATE())) ";
                        break;
                    case "DATA_CREAZ_MC":
                        // data creazione nel mese corrente
                        andStr += " AND ";
                        numAndStr += 1;
                        if (!dbType.ToUpper().Equals("SQL"))
                            // andStr += "A.CREATION_TIME>=(select to_date(trunc(sysdate,'MM')) as start_date from dual) AND A.CREATION_TIME<(select to_date(last_day(sysdate)+1) as DAY from dual) ";

                            andStr += "A.CREATION_TIME>= Trunc(Sysdate,'MM')    AND A.CREATION_TIME<(Sysdate+1 ) ";
                        else
                            andStr += "A.CREATION_TIME>=(SELECT DATEADD(dd,-(DAY(getdate())-1),getdate())) AND A.CREATION_TIME<=(SELECT DATEADD(dd,-(DAY(DATEADD(mm,1,getdate()))),DATEADD(mm,1,getdate()))) ";
                        break;
                    case "DATA_CREAZ_TODAY":
                        // if (numAndStr > 0)
                        andStr += " AND ";
                        numAndStr += 1;
                        if (!dbType.ToUpper().Equals("SQL"))
                            //andStr += "to_char(A.CREATION_TIME, 'DD/MM/YYYY') = (select to_char(sysdate, 'DD/MM/YYYY') from dual)";
                            andStr += "A.CREATION_TIME between trunc(sysdate ,'DD') and sysdate";
                        else
                            //andStr += "A.CREATION_TIME>=(SELECT getdate()) AND A.CREATION_TIME<=(SELECT getdate()) ";
                            andStr += "DATEDIFF(DD, A.CREATION_TIME, GETDATE()) = 0 ";
                        break;
                    case "DATA_CREAZ_YESTERDAY":
                        andStr += " AND ";
                        numAndStr += 1;
                        if (!dbType.ToUpper().Equals("SQL"))
                            //andStr += "to_char(A.DTA_PROTO, 'DD/MM/YYYY') =(select to_char(sysdate, 'DD/MM/YYYY') from dual)";
                            andStr += " to_date(to_char(A.CREATION_TIME,'dd/mm/yyyy'),'dd/mm/yyyy') = trunc(sysdate -1 ,'DD') ";
                        else
                            //andStr += "A.DTA_PROTO>=(SELECT getdate()) AND A.DTA_PROTO<=(SELECT getdate()) ";
                            andStr += "DATEDIFF(DD, A.CREATION_TIME, GETDATE() -1) = 0 ";
                        break;
                    case "DATA_CREAZ_LAST_SEVEN_DAYS":
                        // data protocollo nel mese corrente
                        andStr += " AND ";
                        numAndStr += 1;
                        if (!dbType.ToUpper().Equals("SQL"))
                            andStr += "A.CREATION_TIME>=(select to_date(to_char(sysdate - 7)) from dual) ";
                        else
                            andStr += "A.CREATION_TIME>=(SELECT DATEADD(day, -7, GETDATE())) ";
                        break;
                    case "DATA_CREAZ_LAST_THIRTY_ONE_DAYS":
                        // data protocollo nel mese corrente
                        andStr += " AND ";
                        numAndStr += 1;
                        if (!dbType.ToUpper().Equals("SQL"))
                            andStr += "A.CREATION_TIME>=(select to_date(to_char(sysdate - 31)) from dual) ";
                        else
                            andStr += "A.CREATION_TIME>=(SELECT DATEADD(day, -31, GETDATE())) ";
                        break;
                    case "ANNO_PROTOCOLLO":
                        // if (numAndStr > 0)
                        if (!string.IsNullOrEmpty(f.valore))
                        {
                            andStr += " AND ";
                            numAndStr += 1;
                            if (dbType.ToUpper().Equals("SQL"))
                            {
                                andStr += "(ISNULL(A.DTA_PROTO,A.CREATION_TIME) BETWEEN " + DocsPaDbManagement.Functions.Functions.ToDateBetween("01/01/" + f.valore, true);
                                andStr += " AND " + DocsPaDbManagement.Functions.Functions.ToDateBetween("31/12/" + f.valore, false) + ")";
                            }
                            else
                            {
                                andStr += "(NVL(A.DTA_PROTO,A.CREATION_TIME) BETWEEN " + DocsPaDbManagement.Functions.Functions.ToDateBetween("01/01/" + f.valore, true);
                                andStr += " AND " + DocsPaDbManagement.Functions.Functions.ToDateBetween("31/12/" + f.valore, false) + ")";
                            }
                        }
                        break;
                    case "DOCNUMBER":
                        // if (numAndStr++ > 0)
                        andStr += " AND ";
                        andStr += "A.DOCNUMBER=" + f.valore;
                        break;
                    case "DOCNUMBER_DAL":
                        // if (numAndStr++ > 0)
                        andStr += " AND ";
                        andStr += "A.DOCNUMBER>=" + f.valore;
                        break;
                    case "DOCNUMBER_AL":
                        // if (numAndStr++ > 0)
                        andStr += " AND ";
                        andStr += "A.DOCNUMBER<=" + f.valore;
                        break;
                    case "ID_OGGETTO":
                        // if (numAndStr > 0)
                        andStr += " AND ";
                        numAndStr += 1;
                        andStr += "D.SYSTEM_ID=" + f.valore;
                        break;
                    case "OGGETTO":
                        // if (numAndStr > 0)
                        andStr += " AND ";
                        numAndStr += 1;

                        // La stringa di testo contenuta nel campo oggetto è messa in
                        // AND utilizzando come separatore la stringa fissa '&&'

                        if (Cfg_USE_TEXT_INDEX == "0")
                        {
                            Regex regex = new Regex("&&");
                            string[] lista = regex.Split(f.valore);
                            if (lista[0].ToUpper().Contains("'"))
                                andStr += "UPPER(A.VAR_PROF_OGGETTO) LIKE '%" + lista[0].ToUpper().Replace("'", "''") + "%'";
                            else
                                andStr += "UPPER(A.VAR_PROF_OGGETTO) LIKE '%" + lista[0].ToUpper() + "%'";
                            for (int i = 1; i < lista.Length; i++)
                            {
                                if (lista[i].ToUpper().Contains("'"))
                                    andStr += " AND UPPER(A.VAR_PROF_OGGETTO) LIKE '%" + lista[i].ToUpper().Replace("'", "''") + "%'";
                                else
                                    andStr += " AND UPPER(A.VAR_PROF_OGGETTO) LIKE '%" + lista[i].ToUpper() + "%'";
                            }
                        }
                        else if (Cfg_USE_TEXT_INDEX == "1")
                        {
                            f.valore.Replace("&&", " ");
                            andStr += "a.SYSTEM_id in ( \n " +
                                                    " select system_id from table(fulltext_onvar_prof_oggetto ( \n " +
                                                    "'" + f.valore.ToUpper().Replace("'", "''") + "', \n" +
                                                    dtaCreazSucc + ", \n" +
                                                    dtaCreazPreced + ", \n" +
                                                    dtaProtoSucc + ", \n" +
                                                    dtaProtoPreced + " \n" + "))) \n";
                        }
                        else if (Cfg_USE_TEXT_INDEX == "2")
                        {
                            List<DocsPaVO.filtri.SearchTextItem> items = new List<DocsPaVO.filtri.SearchTextItem>();
                            string value = DocsPaUtils.Functions.Functions.ReplaceApexes(f.valore).ToUpper();
                            string valueA = value;
                            if (valueA.Contains("&&"))
                                valueA = valueA.Replace("&&", "");
                            bool casoA = false;
                            if (value.Substring(0, value.Length - 1).Contains("%") && !value.Substring(0, value.Length - 1).Contains("%&&"))
                                casoA = true;
                            if (value.Contains("&&"))
                            {
                                string result = string.Empty;
                                foreach (string filter in new Regex("&&").Split(value))
                                    if (!string.IsNullOrEmpty(filter))
                                        result += filter + " AND ";
                                value = result.Substring(0, result.Length - 5);
                            }
                            if (value.Contains("%") && value.IndexOf("%") != value.Length - 1)
                            {
                                bool finale = value.EndsWith("%");
                                string result = string.Empty;
                                foreach (string filter in new Regex("%").Split(value))
                                    if (!string.IsNullOrEmpty(filter))
                                        result += filter + "% AND ";
                                value = result.Substring(0, result.Length - 6);
                                if (finale)
                                    value = value + "%";
                            }
                            if (value.ToUpper().Contains(" AND  AND "))
                                value = value.ToUpper().Replace(" AND  AND ", " AND ");
                            andStr += DocsPaDbManagement.Functions.Functions.GetContainsTextQuery("A.VAR_PROF_OGGETTO", value);
                            if (casoA)
                                andStr += " and upper(A.VAR_PROF_OGGETTO) like upper('%" + valueA + "%')";
                        }
                        break;
                    case "OGGETTO_ALLEGATO":
                        // if (numAndStr > 0)
                        andStr += " AND ";
                        numAndStr += 1;

                        // La stringa di testo contenuta nel campo oggetto è messa in
                        // AND utilizzando come separatore la stringa fissa '&&'

                        if (Cfg_USE_TEXT_INDEX == "0")
                        {
                            Regex regex = new Regex("&&");
                            string[] lista = regex.Split(f.valore);
                            if (lista[0].ToUpper().Contains("'"))
                                andStr += "UPPER(A.VAR_PROF_OGGETTO) LIKE '%" + lista[0].ToUpper().Replace("'", "''") + "%'";
                            else
                                andStr += "UPPER(A.VAR_PROF_OGGETTO) LIKE '%" + lista[0].ToUpper() + "%'";
                            for (int i = 1; i < lista.Length; i++)
                            {
                                if (lista[i].ToUpper().Contains("'"))
                                    andStr += " AND UPPER(A.VAR_PROF_OGGETTO) LIKE '%" + lista[i].ToUpper().Replace("'", "''") + "%'";
                                else
                                    andStr += " AND UPPER(A.VAR_PROF_OGGETTO) LIKE '%" + lista[i].ToUpper() + "%'";
                            }
                        }
                        else if (Cfg_USE_TEXT_INDEX == "1")
                        {
                            f.valore.Replace("&&", " ");
                            andStr += "a.SYSTEM_id in ( \n " +
                                                    " select system_id from table(fulltext_onvar_prof_oggetto ( \n " +
                                                    "'" + f.valore.ToUpper().Replace("'", "''") + "', \n" +
                                                    dtaCreazSucc + ", \n" +
                                                    dtaCreazPreced + ", \n" +
                                                    dtaProtoSucc + ", \n" +
                                                    dtaProtoPreced + " \n" + "))) \n";
                        }
                        else if (Cfg_USE_TEXT_INDEX == "2")
                        {
                            List<DocsPaVO.filtri.SearchTextItem> items = new List<DocsPaVO.filtri.SearchTextItem>();
                            string value = DocsPaUtils.Functions.Functions.ReplaceApexes(f.valore).ToUpper();
                            string valueA = value;
                            if (valueA.Contains("&&"))
                                valueA = valueA.Replace("&&", "");
                            bool casoA = false;
                            if (value.Substring(0, value.Length - 1).Contains("%") && !value.Substring(0, value.Length - 1).Contains("%&&"))
                                casoA = true;
                            if (value.Contains("&&"))
                            {
                                string result = string.Empty;
                                foreach (string filter in new Regex("&&").Split(value))
                                    if (!string.IsNullOrEmpty(filter))
                                        result += filter + " AND ";
                                value = result.Substring(0, result.Length - 5);
                            }
                            if (value.Contains("%") && value.IndexOf("%") != value.Length - 1)
                            {
                                bool finale = value.EndsWith("%");
                                string result = string.Empty;
                                foreach (string filter in new Regex("%").Split(value))
                                    if (!string.IsNullOrEmpty(filter))
                                        result += filter + "% AND ";
                                value = result.Substring(0, result.Length - 6);
                                if (finale)
                                    value = value + "%";
                            }
                            if (value.ToUpper().Contains(" AND  AND "))
                                value = value.ToUpper().Replace(" AND  AND ", " AND ");
                            andStr += DocsPaDbManagement.Functions.Functions.GetContainsTextQuery("A.VAR_PROF_OGGETTO", value);
                            if (casoA)
                                andStr += " and upper(A.VAR_PROF_OGGETTO) like upper('%" + valueA + "%')";
                        }
                        break;
                    case "OGGETTO_DOCUMENTO_PRINCIPALE":
                        // if (numAndStr > 0)
                        andStr += " AND EXISTS ( SELECT 'X' FROM PROFILE P WHERE P.DOCNUMBER = A.ID_DOCUMENTO_PRINCIPALE AND  ";
                        numAndStr += 1;
                        andStr += "UPPER(P.VAR_PROF_OGGETTO) LIKE '%" + f.valore.ToUpper().Replace("'", "''") + "%'";
                        // La stringa di testo contenuta nel campo oggetto è messa in
                        // AND utilizzando come separatore la stringa fissa '&&'

                        //if (Cfg_USE_TEXT_INDEX == "0")
                        //{
                        //    Regex regex = new Regex("&&");
                        //    string[] lista = regex.Split(f.valore);
                        //    if (lista[0].ToUpper().Contains("'"))
                        //        andStr += "UPPER(P.VAR_PROF_OGGETTO) LIKE '%" + lista[0].ToUpper().Replace("'", "''") + "%'";
                        //    else
                        //        andStr += "UPPER(P.VAR_PROF_OGGETTO) LIKE '%" + lista[0].ToUpper() + "%'";
                        //    for (int i = 1; i < lista.Length; i++)
                        //    {
                        //        if (lista[i].ToUpper().Contains("'"))
                        //            andStr += " AND UPPER(P.VAR_PROF_OGGETTO) LIKE '%" + lista[i].ToUpper().Replace("'", "''") + "%'";
                        //        else
                        //            andStr += " AND UPPER(P.VAR_PROF_OGGETTO) LIKE '%" + lista[i].ToUpper() + "%'";
                        //    }
                        //}
                        //else if (Cfg_USE_TEXT_INDEX == "1")
                        //{
                        //    f.valore.Replace("&&", " ");
                        //    andStr += "P.SYSTEM_id in ( \n " +
                        //                            " select system_id from table(fulltext_onvar_prof_oggetto ( \n " +
                        //                            "'" + f.valore.ToUpper().Replace("'", "''") + "', \n" +
                        //                            dtaCreazSucc + ", \n" +
                        //                            dtaCreazPreced + ", \n" +
                        //                            dtaProtoSucc + ", \n" +
                        //                            dtaProtoPreced + " \n" + "))) \n";
                        //}
                        //else if (Cfg_USE_TEXT_INDEX == "2")
                        //{
                        //    List<DocsPaVO.filtri.SearchTextItem> items = new List<DocsPaVO.filtri.SearchTextItem>();
                        //    string value = DocsPaUtils.Functions.Functions.ReplaceApexes(f.valore).ToUpper();
                        //    string valueA = value;
                        //    if (valueA.Contains("&&"))
                        //        valueA = valueA.Replace("&&", "");
                        //    bool casoA = false;
                        //    if (value.Substring(0, value.Length - 1).Contains("%") && !value.Substring(0, value.Length - 1).Contains("%&&"))
                        //        casoA = true;
                        //    if (value.Contains("&&"))
                        //    {
                        //        string result = string.Empty;
                        //        foreach (string filter in new Regex("&&").Split(value))
                        //            if (!string.IsNullOrEmpty(filter))
                        //                result += filter + " AND ";
                        //        value = result.Substring(0, result.Length - 5);
                        //    }
                        //    if (value.Contains("%") && value.IndexOf("%") != value.Length - 1)
                        //    {
                        //        bool finale = value.EndsWith("%");
                        //        string result = string.Empty;
                        //        foreach (string filter in new Regex("%").Split(value))
                        //            if (!string.IsNullOrEmpty(filter))
                        //                result += filter + "% AND ";
                        //        value = result.Substring(0, result.Length - 6);
                        //        if (finale)
                        //            value = value + "%";
                        //    }
                        //    if (value.ToUpper().Contains(" AND  AND "))
                        //        value = value.ToUpper().Replace(" AND  AND ", " AND ");
                        //    andStr += DocsPaDbManagement.Functions.Functions.GetContainsTextQuery("P.VAR_PROF_OGGETTO", value);
                        //    if (casoA)
                        //        andStr += " and upper(p.VAR_PROF_OGGETTO) like upper('%" + valueA + "%')";
                        //}
                        andStr += " ) ";
                        break;
                    case "REGISTRO":
                        //if (!obj.isFiltroAooEnabled())
                        //{
                        // if (numAndStr > 0)
                        andStr += " AND ";
                        numAndStr += 1;
                        andStr += "(A.ID_REGISTRO IN (" + f.valore + ") OR A.ID_REGISTRO IS NULL)";
                        //}
                        break;
                    case "REGISTRI_UTENTE_IN_CONDITION":
                        //if (!obj.isFiltroAooEnabled())
                        //{
                        // if (numAndStr > 0)
                        andStr += " AND ";
                        numAndStr += 1;
                        andStr += "(A.ID_REGISTRO " + f.valore + " OR A.ID_REGISTRO IS NULL)";
                        //}
                        break;
                    case "REGISTRI_UTENTE_IN_CONDITION_CON_NULL":
                        //if (!obj.isFiltroAooEnabled())
                        //{
                        // if (numAndStr > 0)
                        andStr += " AND ";
                        numAndStr += 1;
                        andStr += "(A.ID_REGISTRO " + f.valore + " OR A.ID_REGISTRO IS NULL)";
                        //}
                        break;

                    case "TIPO_DOCUMENTO":
                        queryWhere = " AND A.DOCUMENTTYPE=H.SYSTEM_ID";
                        queryFrom = " , DOCUMENTTYPES H";
                        // if (numAndStr > 0)
                        andStr += " AND ";
                        numAndStr += 1;
                        andStr += "H.TYPE_ID='" + f.valore + "'";
                        break;

                    //ABBATANGELI GIANLUIGI
                    case "COD_EXT_APP":
                        if (numAndStr > 0)
                            andStr += " AND ";
                        numAndStr += 1;
                        andStr += "A.COD_EXT_APP='" + f.valore + "'";
                        break;

                    case "PAROLE_CHIAVE":
                        // if (numAndStr > 0)
                        andStr += " AND ";
                        numAndStr += 1;
                        andStr += "A.SYSTEM_ID IN (SELECT ID_PROFILE FROM DPA_PROF_PAROLE WHERE ID_PAROLA IN (" + f.valore + "))";
                        break;
                    case "TIPO_ATTO":
                        // if (numAndStr > 0)
                        if (f.valore != "0")
                        {
                            DocsPaDB.Query_DocsPAWS.Model md = new Model();
                            DocsPaVO.ProfilazioneDinamica.Templates profilo = md.getTemplateById(f.valore);

                            if (profilo != null && profilo.IPER_FASC_DOC == "1")
                            {
                                andStr += " ";
                            }
                            else
                            {
                                //if (numAndStr > 0)
                                //{
                                andStr += " AND ";
                                //numAndStr += 1;
                                //}
                                andStr += "(A.ID_TIPO_ATTO=" + f.valore + ")";
                            }

                            //tipo_contatore = tipoContatoreTemplates(f.valore);
                            tipo_contatore = tipoContatoreTemplates(profilo);

                            //oggettoCUstom = getOggettoCustom(f.valore);
                            oggettoCUstom = getOggettoCustom(profilo);


                            DocsPaDB.Query_DocsPAWS.Model model1 = new DocsPaDB.Query_DocsPAWS.Model();

                            //if (model1.getContatoreTemplates(f.valore))
                            if (model1.getContatoreTemplates(profilo))
                            {
                                if (dbType.ToUpper().Equals("SQL"))
                                    orderCondition = getUserDB() + ".getContatoreDocOrdinamento(a.system_id, '" + tipo_contatore + "') desc";
                                else
                                    orderCondition = "getContatoreDocOrdinamento(a.system_id, '" + tipo_contatore + "') desc";
                            }
                        }
                        else
                        {
                            andStr += " AND A.ID_TIPO_ATTO IS NULL ";
                        }
                        break;
                    case "NOTE":
                        // if (numAndStr > 0)
                        andStr += " AND ";
                        numAndStr += 1;

                        string userDb = getUserDB();
                        if (!string.IsNullOrEmpty(userDb))
                            userDb += ".";

                        string[] ricNote = SplittaStringaRicercaNote(f.valore);
                        string rf = ricNote[2];
                        andStr += string.Format("{0}GetCountNote('D', A.SYSTEM_ID, '{1}', {2}, {3}, '{4}', {5}) > 0", userDb, ricNote[0].Replace("'", "''"), idPeople, idGruppo, ricNote[1], rf);

                        break;
                    case "FIRMATARIO_NOME":
                        queryWhere = " AND L.DOCNUMBER=A.DOCNUMBER AND M.ID_VERSIONE=L.VERSION_ID AND M.ID_FIRMATARIO=N.SYSTEM_ID";
                        queryFrom = " , VERSIONS L , DPA_FIRMA_VERS M, DPA_FIRMATARI N";
                        // if (numAndStr > 0)
                        andStr += " AND ";
                        numAndStr += 1;
                        andStr += "UPPER(N.VAR_NOME) LIKE '%" + f.valore.ToUpper().Replace("'", "''") + "%'";
                        break;
                    case "FIRMATARIO_COGNOME":
                        queryWhere = " AND L.DOCNUMBER=A.DOCNUMBER AND M.ID_VERSIONE=L.VERSION_ID AND M.ID_FIRMATARIO=N.SYSTEM_ID";
                        queryFrom = " , VERSIONS L, DPA_FIRMA_VERS M, DPA_FIRMATARI N";
                        // if (numAndStr > 0)
                        andStr += " AND ";
                        numAndStr += 1;
                        andStr += "UPPER(N.VAR_COGNOME) LIKE '%" + f.valore.ToUpper().Replace("'", "''") + "%'";
                        break;
                    case "EVIDENZA":
                        // if (numAndStr > 0)
                        andStr += " AND ";
                        numAndStr += 1;
                        andStr += "A.CHA_EVIDENZA='" + f.valore + "'";
                        break;
                    case "IN_CHILD_RIC_ESTESA":
                        queryFrom += " , PROJECT_COMPONENTS B";
                        // if (numAndStr > 0)
                        andStr += " AND ";
                        numAndStr += 1;
                        andStr += " A.SYSTEM_ID = B.LINK AND B.PROJECT_ID " + f.valore;
                        break;
                    case "ESTENDI_A_NODI_FIGLI_E_FASCICOLI":
                        numAndStr += 1;
                        andStr += this.GetQueryCondDocInNodieFasicoli(f, idPeople);
                        break;
                    case "MANCANZA_IMMAGINE":
                        // if (numAndStr > 0)
                        andStr += " AND ";
                        numAndStr += 1;
                        //if (dbType.ToUpper() == "SQL")
                        //{
                        //    andStr += getUserDB() + ".";
                        //}
                        if (!f.valore.Equals("0"))
                            //andStr += "A.CHA_IMG='0'";
                            /* 03-09-2012: Commento e sostituisco con il codice seguente perchè lenta
                            andStr += "getchaimg(A.SYSTEM_ID)='0'";
                             * */
                            //andStr += " NOT EXISTS (SELECT 'X' FROM components c WHERE c.docnumber=A.SYSTEM_ID AND c.version_id = " +
                            //          "(select max(v.version_id)  from versions v, components c1 where v.docnumber=A.SYSTEM_ID AND v.version_id=c1.version_id) AND c.ext is not null AND c.ext <> '0' AND ROWNUM = 1) ";
                            if (dbType.ToUpper() == "SQL")
                                andStr += " ISNULL(a.ext, '0') = '0'";
                            else
                                andStr += "a.ext is NULL";
                        else
                            //andStr += "A.CHA_IMG='1'";
                            //andStr += "getchaimg(A.SYSTEM_ID)<>'0'";
                            //andStr += "EXISTS (SELECT 'X' FROM components c WHERE c.docnumber=A.SYSTEM_ID AND c.version_id = " +
                            //          "(select max(v.version_id)  from versions v, components c1 where v.docnumber=A.SYSTEM_ID AND v.version_id=c1.version_id) AND c.ext is not null AND c.ext <> '0' AND ROWNUM = 1) ";
                            if (dbType.ToUpper() == "SQL")
                                andStr += " ISNULL(a.ext, '0') <> '0'";
                            else
                                andStr += "a.ext is NOT NULL";
                        break;
                    //case "MANCANZA_ASSEGNAZIONE":
                    //    if (numAndStr > 0)
                    //        andStr += " AND ";
                    //    numAndStr += 1;
                    //    andStr += "A.CHA_ASSEGNATO='0'";
                    //    break;
                    case "MANCANZA_FASCICOLAZIONE":
                        //  if (numAndStr > 0)
                        andStr += " AND ";
                        numAndStr += 1;
                        if (!f.valore.Equals("0"))
                            andStr += "A.CHA_FASCICOLATO = '0'";
                        else
                            andStr += "A.CHA_FASCICOLATO = '1'";
                        break;
                    case "TRASMESSI_CON":
                        // if (numAndStr > 0)
                        andStr += " AND ";
                        numAndStr += 1;
                        /* 03-09-2014 : COMMENTATO E SOSTITUITO CON IL BLOCCO SEGUENTE POICHè MOLTO LENTA
                        // per SQL
                        if (dbType.ToUpper() == "SQL")
                        {
                            andStr += getUserDB() + ".";
                        }
                        andStr += "GetSeDocTrasmConRag(A.SYSTEM_ID,'" + f.valore + "') = 1";
                         * */
                        if (!f.valore.ToUpper().Equals("TUTTE"))
                        {
                            andStr += "EXISTS (SELECT 'X' FROM dpa_trasmissione tx, dpa_trasm_singola ts, dpa_ragione_trasm tr " +
                                      "WHERE tx.id_profile = A.SYSTEM_ID AND tx.system_id = ts.id_trasmissione AND ts.id_ragione = tr.system_id AND UPPER (tr.var_desc_ragione) = UPPER ('" + f.valore + "') AND ROWNUM = 1) ";
                        }
                        else
                        {
                            andStr += "EXISTS (SELECT 'x' FROM dpa_trasmissione tx WHERE tx.id_profile = A.SYSTEM_ID AND ROWNUM = 1) ";
                        }
                        break;
                    case "TRASMESSI_SENZA":
                        // if (numAndStr > 0)
                        andStr += " AND ";
                        numAndStr += 1;
                        // per SQL
                        /* 03-09-2014 : COMMENTATO E SOSTITUITO CON IL BLOCCO SEGUENTE POICHè MOLTO LENTA
                        if (dbType.ToUpper() == "SQL")
                        {
                            andStr += getUserDB() + ".";
                        }
                        andStr += "GetSeDocTrasmConRag(A.SYSTEM_ID,'" + f.valore + "') = 0";
                         */
                        if (!f.valore.ToUpper().Equals("TUTTE"))
                        {
                            andStr += "NOT EXISTS (SELECT 'X' FROM dpa_trasmissione tx, dpa_trasm_singola ts, dpa_ragione_trasm tr " +
                                      "WHERE tx.id_profile = A.SYSTEM_ID AND tx.system_id = ts.id_trasmissione AND ts.id_ragione = tr.system_id AND UPPER (tr.var_desc_ragione) = UPPER ('" + f.valore + "') AND ROWNUM = 1 ";
                        }
                        else
                        {
                            andStr += "NOT EXISTS (SELECT 'x' FROM dpa_trasmissione tx WHERE tx.id_profile = A.SYSTEM_ID AND ROWNUM = 1 ";
                        }
                        break;
                    case "DOC_MAI_TRASMESSI_DA_UTENTE":
                        andStr += " AND tx.id_people=" + f.valore + " ) ";
                        break;
                    case "DOC_MAI_TRASMESSI_DA_RUOLO":
                        andStr += (!f.valore.Equals("0")) ? " AND tx.id_ruolo_in_uo=" + f.valore + " ) " : " ) ";
                        break;
                    case "PROFILAZIONE_DINAMICA":
                        DocsPaDB.Query_DocsPAWS.Model model = new Model();
                        andStr += model.getSeriePerRicercaProfilazione(f.template, anno_prof);
                        if (ConfigurationManager.AppSettings["dbType"].ToUpper() == "SQL")
                        {              
                            idCorrespondentTemplate = model.GetIdCorrespondentForTemplate(f.template);
                        }
                        break;
                    case "DIAGRAMMA_STATO_DOC":
                        //queryFrom += " ,DPA_DIAGRAMMI ";//,DPA_DIAGRAMMI_STO";
                        if ((f.nomeCampo.ToUpper() == "UNEQUALS"))
                            queryWhere += "  AND A.SYSTEM_ID IN (SELECT DOC_NUMBER FROM DPA_DIAGRAMMI WHERE DPA_DIAGRAMMI.ID_STATO != " + f.valore + ") ";
                        else
                        {
                            queryWhere += "  AND A.SYSTEM_ID IN (SELECT DOC_NUMBER FROM DPA_DIAGRAMMI WHERE DPA_DIAGRAMMI.ID_STATO = " + f.valore + ") ";
                        }
                        break;
                    case "CODICE_FASCICOLO":
                        if (numAndStr > 0)
                            andStr += " AND ";
                        andStr += string.Format(" A.SYSTEM_ID IN ({0})", Fascicoli.getQueryIdDocumentiInFascicolo(f.valore));
                        break;
                    case "ID_TITOLARIO":
                        andStr += " AND A.ID_TITOLARIO IN(" + f.valore + ") ";
                        break;
                    case "NUM_PROT_TITOLARIO":
                        andStr += " AND A.NUM_PROT_TIT = " + f.valore + " ";
                        break;
                    case "FIRMATO":
                        andStr += " AND ";
                        numAndStr += 1;
                        if (f.valore == "1")
                        {
                            if (dbType.ToUpper() == "SQL")
                                andStr += getUserDB() + ".getchafirmato(A.DOCNUMBER) = '1'";
                            else
                            {
                               //OLD
                                //andStr += " exists (";
                                //andStr += "SELECT /*+index ( components )*/   'x'";
                                //andStr += " FROM components";
                                //andStr += " WHERE docnumber = a.docnumber AND version_id = getmaxver(docnumber) and  cha_firmato='1') ";

                              andStr += " exists   ( SELECT /*+index ( c1 )*/ ";
                              andStr += "  'x' ";
                              andStr += " FROM components c1 ";
                            andStr += " WHERE     c1.docnumber = a.docnumber ";
                              andStr += "     AND version_id = "; 
                                andStr += "          (SELECT /*+index (c) index (v1)*/ ";
                                    andStr += "             MAX (v1.version_id) ";
                                   andStr += "          FROM VERSIONS v1, components c ";
                                     andStr += "       WHERE     v1.docnumber = ";
                                     andStr += "                    a.docnumber ";
                                     andStr += "             AND v1.version_id = ";
                                    andStr += "                     c.version_id ";
                                    andStr += "              AND c.file_size > 0) ";
                                andStr += "    AND cha_firmato = '1') ";
                            }
                        }
                        else
                            if (f.valore == "0")
                            {
                                if (dbType.ToUpper() == "SQL")
                                    andStr += getUserDB() + ".getchafirmato(A.DOCNUMBER) = '0'";
                                else
                                {
                                    //OLD
                                    //andStr += " exists (";
                                    //andStr += "SELECT /*+index ( components )*/   'x'";
                                    //andStr += " FROM components";
                                    //andStr += " WHERE docnumber = a.docnumber AND version_id = getmaxver(docnumber) and  cha_firmato='0') ";

                                    andStr += " exists   ( SELECT /*+index ( c1 )*/ ";
                                    andStr += "  'x' ";
                                    andStr += " FROM components c1 ";
                                    andStr += " WHERE     c1.docnumber = a.docnumber ";
                                    andStr += "     AND version_id = ";
                                    andStr += "          (SELECT /*+index (c) index (v1)*/ ";
                                    andStr += "             MAX (v1.version_id) ";
                                    andStr += "          FROM VERSIONS v1, components c ";
                                    andStr += "       WHERE     v1.docnumber = ";
                                    andStr += "                    a.docnumber ";
                                    andStr += "             AND v1.version_id = ";
                                    andStr += "                     c.version_id ";
                                    andStr += "              AND c.file_size > 0) ";
                                    andStr += "    AND cha_firmato = '0') ";


                                }
                            }
                            else
                            {
                                if (dbType.ToUpper() == "SQL")
                                {
                                    andStr += getUserDB() + ".getchaimg(A.SYSTEM_ID)<>'0'";
                                }
                                else
                                {
                                    andStr += "getchaimg(A.SYSTEM_ID)<>'0'";
                                }
                            }
                        break;

                    case "TIPO_FILE_ACQUISITO":
                        queryWhere += "AND A.DOCNUMBER=COMPONENTS.DOCNUMBER ";
                        if (queryFrom.IndexOf(" ,COMPONENTS") < 0)
                            queryFrom += " ,COMPONENTS";

                        // if (numAndStr > 0)
                        andStr += " AND ";
                        numAndStr += 1;
                        andStr += "UPPER(COMPONENTS.EXT)='" + f.valore.ToUpper() + "' AND COMPONENTS.VERSION_ID=(select max(versions.version_id)  from versions, components where" +
                        " versions.version_id=components.version_id AND versions.docnumber=A.DOCNUMBER)";
                        break;
                    //case "CONSERVAZIONE":
                    //    if (f.valore == "1")
                    //    {
                    //        andStr += " AND ";
                    //        numAndStr += 1;
                    //        andStr += "a.SYSTEM_ID in (select distinct(a.id_profile) from dpa_items_conservazione a, dpa_area_conservazione b where a.id_conservazione = b.system_id and b.cha_stato='C')";
                    //    }
                    //    else
                    //    {
                    //        andStr += " AND ";
                    //        numAndStr += 1;
                    //        andStr += "a.SYSTEM_ID not in (select distinct(a.id_profile) from dpa_items_conservazione a, dpa_area_conservazione b where a.id_conservazione = b.system_id and b.cha_stato='C')";
                    //    }
                    //    break;

                    //CORREZIONE PERCHé IL CAMPO CHA_STATO DELLA DPA_ITEMS_CONSERVAZIONE NON VIENE MAI AGGIORNATO
                    //Gabriele Melini 30-8-2013
                    //il campo cha_stato della tabella dpa_items_conservazione non è mai impostato a C
                    //seleziono i documenti appartenenti ad almeno un'istanza chiusa (cha_stato='C' in dpa_area_conservazione)
                    //o conservata (cha_stato='V' in dpa_area_conservazione)
                    case "FIRMA_ELETTRONICA":
                        if (f.valore == "1")
                        { 
                            andStr += " AND ";
                            numAndStr += 1;
                            andStr += "EXISTS (SELECT /*+INDEX(F) */ 'X' FROM DPA_FIRMA_ELETTRONICA F WHERE F.ID_DOCUMENTO = A.SYSTEM_ID  AND XML IS NOT NULL ";
                        }
                        break;
                    case "ID_UTENTE_FIRMATARIO_ELETTRONICA":
                        if (f.valore.Equals("0"))
                            andStr += ") ";
                        else
                        {
                            andStr += " AND UPPER(XML) LIKE UPPER ('%UTENTE ID=\"" + f.valore + "\"%') )";
                        }
                        break;
                    case "ID_RUOLO_FIRMATARIO_ELETTRONICA":
                        andStr += " AND UPPER(XML) LIKE UPPER ('%RUOLO ID=\"" + f.valore + "\"%') )";
                        break;
                    case "DESC_FIRMATARIO_ELETTRONICA":
                        andStr += " AND UPPER(XML) LIKE UPPER ('%" + f.valore + "%') )";
                        break;
                    case "CONSERVAZIONE":
                        if (f.valore == "1")
                        {
                            andStr += " AND ";
                            numAndStr += 1;
                            //andStr += "a.SYSTEM_ID in (select id_profile from dpa_items_conservazione where cha_stato='C')";
                            andStr += "a.SYSTEM_ID in (SELECT id_profile FROM dpa_items_conservazione WHERE id_conservazione IN (SELECT system_id FROM dpa_area_conservazione WHERE cha_stato='C' OR cha_stato='V'))";
                        }
                        else
                        {
                            andStr += " AND ";
                            numAndStr += 1;
                            //andStr += "a.SYSTEM_ID not in (select id_profile from dpa_items_conservazione where cha_stato='C')";
                            andStr += "a.SYSTEM_ID not in (SELECT id_profile FROM dpa_items_conservazione WHERE id_conservazione IN (SELECT system_id FROM dpa_area_conservazione WHERE cha_stato='C' OR cha_stato='V'))";
                        }
                        break;
                    case "CODICE_DESCRIZIONE_AMMINISTRAZIONE":
                        if (numAndStr > 0)
                            andStr += " AND ";
                        numAndStr += 1;
                        andStr += "a.system_id  IN ( SELECT /*+ index (f)  index(g) */  f.id_profile FROM dpa_doc_arrivo_par f, dpa_corr_globali g " +
                                   "WHERE F.ID_PROFILE=a.system_id and g.system_id = f.ID_MITT_DEST AND UPPER(g.COD_DESC_INTEROP) LIKE UPPER('%" + DocsPaUtils.Functions.Functions.ReplaceApexes(f.valore) + "%'))";
                        break;
                    //case "NUMERO_VERSIONI":
                    //    if (numAndStr > 0)
                    //        andStr += " AND ";
                    //    numAndStr += 1;
                    //    andStr += " (select count(z.version_id) from VERSIONS z where a.DOCNUMBER=z.DOCNUMBER) " + f.valore;
                    //    break;
                    //case "NUMERO_ALLEGATI":
                    //    if (numAndStr > 0)
                    //        andStr += " AND ";
                    //    numAndStr += 1;
                    //    andStr += " (select count(x.system_id) from profile x where a.DOCNUMBER=x.id_documento_principale) " + f.valore;
                    //    break;
                    case "SENZA_TIMESTAMP":
                        andStr += " AND a.docnumber not in (select distinct doc_number from dpa_timestamp_doc) ";
                        break;

                    case "CON_TIMESTAMP":
                        andStr += " AND a.docnumber in (select distinct doc_number from dpa_timestamp_doc) ";
                        break;

                    // Modifica per INC000000622977 - controllo timestamp multiversione.
                        // Commento la vecchia logica
                    //case "TIMESTAMP_SCADUTO":
                    //    andStr += " AND a.docnumber in (select distinct doc_number from dpa_timestamp_doc where dta_scadenza <= " + DocsPaDbManagement.Functions.Functions.ToDate(System.DateTime.Now.Date.ToString()) + ") ";
                    //    break;

                    //case "TIMESTAMP_SCADE_PRIMA_DI":
                    //    if (!string.IsNullOrEmpty(f.valore))
                    //        andStr += " AND a.docnumber in (select distinct doc_number from dpa_timestamp_doc where dta_scadenza <= " + DocsPaDbManagement.Functions.Functions.ToDate(f.valore) + ") ";
                    //    else

                    //        andStr += " AND a.docnumber in (select distinct doc_number from dpa_timestamp_doc where dta_scadenza <= " + DocsPaDbManagement.Functions.Functions.ToDate(System.DateTime.Now.Date.ToString()) + ") ";
                    //    break;

                    case "TIMESTAMP_SCADUTO":
                        andStr += " AND a.docnumber in (select doc_number from (select distinct doc_number, max(version_id) over(partition by doc_number) as max_vers, max(dta_scadenza) over (partition by doc_number) as max_scad from dpa_timestamp_doc) where max_scad <= " + DocsPaDbManagement.Functions.Functions.ToDate(System.DateTime.Now.Date.ToString()) + ") ";
                        break;

                    case "TIMESTAMP_SCADE_PRIMA_DI":
                        if (!string.IsNullOrEmpty(f.valore))
                            andStr += " AND a.docnumber in (select doc_number from (select distinct doc_number, max(version_id) over(partition by doc_number) as max_vers, max(dta_scadenza) over (partition by doc_number) as max_scad from dpa_timestamp_doc) where max_scad <= " + DocsPaDbManagement.Functions.Functions.ToDate(f.valore) + " and max_scad >= " + DocsPaDbManagement.Functions.Functions.ToDate(System.DateTime.Now.Date.ToString()) + ") ";
                        else

                            andStr += " AND a.docnumber in (select doc_number from (select distinct doc_number, max(version_id) over(partition by doc_number) as max_vers, max(dta_scadenza) over (partition by doc_number) as max_scad from dpa_timestamp_doc) where max_scad <= " + DocsPaDbManagement.Functions.Functions.ToDate(System.DateTime.Now.Date.ToString()) + ") ";
                        break;
                    case "CODICE_TIPO_NOTIFICA":
                        if (numAndStr > 0)
                            andStr += " AND ";
                        numAndStr += 1;
                        if (f.valore.ToLower().Equals("tutti"))
                        {
                            andStr += "a.docnumber  IN (SELECT unique f.docnumber FROM dpa_notifica f, dpa_tipo_notifica g " +
                                                       "WHERE a.docnumber = f.DOCNUMBER)";
                        }
                        else
                        {
                            andStr += "a.docnumber  IN (SELECT unique f.docnumber FROM dpa_notifica f " +
                                      "WHERE a.docnumber = f.DOCNUMBER filtroDataPec " +
                                      "and f.VAR_TIPO_DESTINATARIO IS NOT NULL " +
                                      "and f.ID_TIPO_NOTIFICA in " +
                                      "(select g.SYSTEM_ID from dpa_tipo_notifica g  where " +
                                      "g.var_codice_notifica ='" + f.valore + "'))";
                        }
                        break;

                    //case "DATA_TIPO_NOTIFICA_NESSUNA":
                    //    andStr += f.valore;
                    //    break;
                    case "CODICE_TIPO_NOTIFICA_PITRE":
                        if (numAndStr > 0)
                            andStr += " AND ";
                        numAndStr += 1;
                        if (f.valore.ToLower().Equals("tutti"))
                        {
                            andStr += "a.docnumber  IN (SELECT unique f.docnumber FROM dpa_notifica f, dpa_tipo_notifica g " +
                                                       "WHERE a.docnumber = f.DOCNUMBER " +
                                                       " and lower(f.var_mittente) like 'http%' )";
                        }
                        else
                        {
                            andStr += "a.docnumber  IN (SELECT unique f.docnumber FROM dpa_notifica f " +
                                      "WHERE a.docnumber = f.DOCNUMBER " +
                                      "and lower(f.var_mittente) like 'http%' filtroDataPitre " +
                                      "and f.VAR_TIPO_DESTINATARIO IS NULL " +
                                      "and f.ID_TIPO_NOTIFICA in " +
                                      "(select g.SYSTEM_ID from dpa_tipo_notifica g  where " +
                                      "g.var_codice_notifica ='" + f.valore + "'))";
                        }
                        break;

                    //case "DATA_TIPO_NOTIFICA_DA_PITRE":
                    //    //andStr += " AND ";
                    //    //andStr += "f.VAR_GIORNO_ORA>=" + DocsPaDbManagement.Functions.Functions.ToDate(f.valore + " 00:00:00");
                    //    filtroDataPitre += " and f.VAR_GIORNO_ORA>=" + DocsPaDbManagement.Functions.Functions.ToDate(f.valore + " 00:00:00");
                    //    break;

                    //case "DATA_TIPO_NOTIFICA_A_PITRE":
                    //    //andStr += " AND ";
                    //    //andStr += "f.VAR_GIORNO_ORA<=" + DocsPaDbManagement.Functions.Functions.ToDate(f.valore + " 23:59:59");
                    //    filtroDataPitre += " and f.VAR_GIORNO_ORA<=" + DocsPaDbManagement.Functions.Functions.ToDate(f.valore + " 23:59:59");
                    //    break;
                    //case "DATA_TIPO_NOTIFICA_TODAY_PITRE":
                    //    //andStr += " AND ";
                    //    //andStr += "f.VAR_GIORNO_ORA>=" + DocsPaDbManagement.Functions.Functions.ToDate(f.valore + " 00:00:00")
                    //    //+ " AND f.VAR_GIORNO_ORA<=" + DocsPaDbManagement.Functions.Functions.ToDate(f.valore + " 23:59:59");
                    //    filtroDataPitre += " and f.VAR_GIORNO_ORA>=" + DocsPaDbManagement.Functions.Functions.ToDate(f.valore + " 00:00:00")
                    //               + " AND f.VAR_GIORNO_ORA<=" + DocsPaDbManagement.Functions.Functions.ToDate(f.valore + " 23:59:59");
                    //    break;
                    //case "DATA_TIPO_NOTIFICA_NESSUNA_PITRE":
                    //    andStr += f.valore;
                    //    break;
                    case "STATO_CONSOLIDAMENTO":
                        if (!string.IsNullOrEmpty(f.valore))
                        {
                            andStr += " AND ";

                            bool caso1 = false;

                            string filterValues = string.Empty;

                            foreach (string itm in f.valore.Split(new char[1] { '|' }, StringSplitOptions.RemoveEmptyEntries))
                            {
                                if (!string.IsNullOrEmpty(filterValues))
                                {
                                    filterValues += ", ";
                                }

                                if (itm == "0")
                                {
                                    caso1 = true;
                                    andStr += "(A.CONSOLIDATION_STATE IS NULL OR A.CONSOLIDATION_STATE = '0') ";
                                }
                                else
                                {
                                    filterValues += itm;
                                }
                            }
                            if (!string.IsNullOrEmpty(filterValues))
                            {
                                if (caso1)
                                {
                                    andStr += string.Format("OR A.CONSOLIDATION_STATE IN ({0})", filterValues);
                                }
                                else
                                {
                                    andStr += string.Format("A.CONSOLIDATION_STATE IN ({0})", filterValues);
                                }
                            }

                        }

                        break;
                    case "DATA_CONSOLIDAMENTO_DA":
                        andStr += " AND (";
                        andStr += "A.CONSOLIDATION_DATE >= " + DocsPaDbManagement.Functions.Functions.ToDate(f.valore + " 00:00:00") + " OR A.CONSOLIDATION_DATE IS NULL)";

                        break;
                    case "DATA_CONSOLIDAMENTO_A":
                        andStr += " AND (";
                        andStr += "A.CONSOLIDATION_DATE <= " + DocsPaDbManagement.Functions.Functions.ToDate(f.valore + " 23:59:59") + " OR A.CONSOLIDATION_DATE IS NULL)";

                        break;
                    case "ID_UTENTE_CONSOLIDANTE":
                        andStr += " AND (";
                        andStr += string.Format("A.CONSOLIDATION_AUTHOR = (SELECT ID_PEOPLE FROM DPA_CORR_GLOBALI WHERE SYSTEM_ID = {0})", f.valore) + " OR A.CONSOLIDATION_AUTHOR IS NULL)";

                        break;
                    case "ID_RUOLO_CONSOLIDANTE":
                        andStr += " AND (";
                        andStr += string.Format("A.CONSOLIDATION_ROLE = (SELECT ID_GRUPPO FROM DPA_CORR_GLOBALI WHERE SYSTEM_ID = {0})", f.valore) + " OR A.CONSOLIDATION_ROLE IS NULL)";

                        break;
                    case "DATA_ULTIMA_MODIFICA_IL":
                        andStr += " AND ";
                        andStr += "A.LAST_EDIT_DATE>=" + DocsPaDbManagement.Functions.Functions.ToDateBetween(f.valore, true) + " AND A.LAST_EDIT_DATE<= " + DocsPaDbManagement.Functions.Functions.ToDateBetween(f.valore, false);
                        break;
                    case "DATA_ULTIMA_MODIFICA_SUCCESSIVA_AL":
                        andStr += " AND ";
                        if (!dbType.ToUpper().Equals("SQL"))
                            andStr += "A.LAST_EDIT_DATE >= to_date('" + f.valore + "','dd/mm/yyyy HH24:mi:ss') ";
                        else
                            andStr += "A.LAST_EDIT_DATE >= convert(datetime,'" + f.valore.Replace(".", ":") + "', 103) ";
                        break;

                    case "DATA_ULTIMA_MODIFICA_PRECEDENTE_IL":
                        andStr += " AND ";
                        if (!dbType.ToUpper().Equals("SQL"))
                            andStr += "A.LAST_EDIT_DATE <= to_date('" + f.valore + "','dd/mm/yyyy HH24:mi:ss') ";
                        else
                            andStr += "A.LAST_EDIT_DATE <= convert(datetime,'" + f.valore.Replace(".", ":") + "', 103) ";
                        break;
                    case "VISIBILITA_T_A":
                        if (f.valore.ToUpper().Equals("T"))
                            andStr += " AND A.CHA_COD_T_A = 'T' ";
                        if (f.valore.ToUpper().Equals("A"))
                            andStr += " AND A.CHA_COD_T_A != 'T' ";
                        break;

                    case "DATA_PROT_SUCCESSIVA_AL":
                        dtaProtoSucc = "'" + f.valore + "'";
                        break;
                    case "DATA_PROT_PRECEDENTE_IL":
                        dtaProtoPreced = "'" + f.valore + "'";
                        break;
                    case "ANNO_PUBBLICAZIONE_DEL":
                        if (f.valore.Contains("^"))
                        {
                            queryFrom += " ,DPA_ASSOCIAZIONE_TEMPLATES";//,DPA_DIAGRAMMI_STO";
                            queryWhere += " AND DPA_ASSOCIAZIONE_TEMPLATES.DOC_NUMBER = A.DOCNUMBER AND DPA_ASSOCIAZIONE_TEMPLATES.ID_OGGETTO = 275 AND DPA_ASSOCIAZIONE_TEMPLATES.ANNO =" + f.valore.Split('^')[0] + " AND DPA_ASSOCIAZIONE_TEMPLATES.ID_TEMPLATE = 171 and DPA_ASSOCIAZIONE_TEMPLATES.VALORE_OGGETTO_DB = '" + f.valore.Split('^')[1] + "'";
                        }
                        break;
                    case "ANNO_PUBBLICAZIONE_DET":
                        if (f.valore.Contains("^"))
                        {
                            queryFrom += " ,DPA_ASSOCIAZIONE_TEMPLATES";//,DPA_DIAGRAMMI_STO";
                            queryWhere += " AND DPA_ASSOCIAZIONE_TEMPLATES.DOC_NUMBER = A.DOCNUMBER AND DPA_ASSOCIAZIONE_TEMPLATES.ID_OGGETTO = 300 AND DPA_ASSOCIAZIONE_TEMPLATES.ANNO =" + f.valore.Split('^')[0] + " AND DPA_ASSOCIAZIONE_TEMPLATES.ID_TEMPLATE = 191 and DPA_ASSOCIAZIONE_TEMPLATES.VALORE_OGGETTO_DB = '" + f.valore.Split('^')[1] + "'";
                        }
                        break;
                }
            }
            return queryWhere;
        }

        public string GetQueryCondDocRepertoriato(DocsPaVO.filtri.FiltroRicerca f)
        {
            string queryWhere = string.Empty;

            switch(f.argomento)
            {
                case "NUM_REPERTORIO":
                    if (dbType.ToUpper() == "SQL")
                    {
                        queryWhere += " AND (SELECT CONVERT(INT, T1.VALORE_OGGETTO_DB) FROM DPA_ASSOCIAZIONE_TEMPLATES T1 WHERE T1.SYSTEM_ID IN ";
                        queryWhere += " (SELECT T2.SYSTEM_ID FROM DPA_ASSOCIAZIONE_TEMPLATES T2 WHERE T2.SYSTEM_ID = T.SYSTEM_ID)) = " + DocsPaDbManagement.Functions.Functions.ToInt(f.valore, false);
                    }
                    else
                    {
                        queryWhere += " AND (SELECT TO_NUMBER(T1.VALORE_OGGETTO_DB) FROM DPA_ASSOCIAZIONE_TEMPLATES T1 WHERE T1.SYSTEM_ID IN ";
                        queryWhere += " (SELECT T2.SYSTEM_ID FROM DPA_ASSOCIAZIONE_TEMPLATES T2 WHERE T2.SYSTEM_ID = T.SYSTEM_ID)) = " + DocsPaDbManagement.Functions.Functions.ToInt(f.valore, false);
                    }
                    break;
                case "NUM_REPERTORIO_DAL":
                    if (dbType.ToUpper() == "SQL")
                    {
                        queryWhere += " AND (SELECT CONVERT(INT, T1.VALORE_OGGETTO_DB) FROM DPA_ASSOCIAZIONE_TEMPLATES T1 WHERE T1.SYSTEM_ID IN ";
                        queryWhere += " (SELECT T2.SYSTEM_ID FROM DPA_ASSOCIAZIONE_TEMPLATES T2 WHERE T2.SYSTEM_ID = T.SYSTEM_ID)) >= " + DocsPaDbManagement.Functions.Functions.ToInt(f.valore, false);
                    }
                    else
                    {
                        queryWhere += " AND (SELECT TO_NUMBER(T1.VALORE_OGGETTO_DB) FROM DPA_ASSOCIAZIONE_TEMPLATES T1 WHERE T1.SYSTEM_ID IN ";
                        queryWhere += " (SELECT T2.SYSTEM_ID FROM DPA_ASSOCIAZIONE_TEMPLATES T2 WHERE T2.SYSTEM_ID = T.SYSTEM_ID)) >= " + DocsPaDbManagement.Functions.Functions.ToInt(f.valore, false);
                    }
                    break;
                case "NUM_REPERTORIO_AL":
                    if (dbType.ToUpper() == "SQL")
                    {
                        queryWhere += " AND (SELECT CONVERT(INT, T1.VALORE_OGGETTO_DB) FROM DPA_ASSOCIAZIONE_TEMPLATES T1 WHERE T1.SYSTEM_ID IN ";
                        queryWhere += " (SELECT T2.SYSTEM_ID FROM DPA_ASSOCIAZIONE_TEMPLATES T2 WHERE T2.SYSTEM_ID = T.SYSTEM_ID)) <= " + DocsPaDbManagement.Functions.Functions.ToInt(f.valore, false);
                    }
                    else
                    {
                        queryWhere += " AND (SELECT TO_NUMBER(T1.VALORE_OGGETTO_DB) FROM DPA_ASSOCIAZIONE_TEMPLATES T1 WHERE T1.SYSTEM_ID IN ";
                        queryWhere += " (SELECT T2.SYSTEM_ID FROM DPA_ASSOCIAZIONE_TEMPLATES T2 WHERE T2.SYSTEM_ID = T.SYSTEM_ID)) <= " + DocsPaDbManagement.Functions.Functions.ToInt(f.valore, false);
                    }
                    break;
                case "DATA_REPERTORIO_TODAY":
                    if (!dbType.ToUpper().Equals("SQL"))
                        queryWhere += " AND T.DTA_INS between trunc(sysdate ,'DD') and sysdate ";
                    else
                        queryWhere += " AND DATEDIFF(DD, T.DTA_INS, GETDATE()) = 0 ";
                    break;
                case "DATA_REPERTORIO_SC":
                    if (!dbType.ToUpper().Equals("SQL"))
                        queryWhere += " AND T.DTA_INS>=(select to_date(to_char(sysdate+ (1-to_char(sysdate,'D')))) startdayofweek from dual) AND T.DTA_INS<(select to_date(to_char(sysdate+ (8-to_char(sysdate,'D')))) enddayofweek from dual) ";
                    else
                        queryWhere += " AND T.DTA_INS>=(select DATEADD(DAY,-DATEPART(WEEKDAY,(DATEADD(DAY,7-DATEPART(WEEKDAY,GETDATE()),GETDATE())))+(7-DATEPART(WEEKDAY,GETDATE()))+2 ,DATEDIFF(dd, 0, getdate()))) AND T.DTA_INS<=(select DATEADD(DAY , 8-DATEPART(WEEKDAY,GETDATE()),DATEDIFF(dd, 0, getdate()))) ";
                    break;
                case "DATA_REPERTORIO_MC":
                    if (!dbType.ToUpper().Equals("SQL"))
                        queryWhere += " AND T.DTA_INS>= Trunc(Sysdate,'MM') AND T.DTA_INS<(Sysdate+1 )  ";
                    else
                        queryWhere += " AND T.DTA_INS>=(SELECT DATEADD(dd,-(DAY(getdate())-1),getdate())) AND T.DTA_INS<=(SELECT DATEADD(dd,-(DAY(DATEADD(mm,1,getdate()))),DATEADD(mm,1,getdate()))) ";
                    break;
                case "DATA_REPERTORIO_IL":
                    queryWhere += " AND T.DTA_INS >=" + DocsPaDbManagement.Functions.Functions.ToDateBetween(f.valore, true) + " AND " + "T.DTA_INS<=" + DocsPaDbManagement.Functions.Functions.ToDateBetween(f.valore, false);
                    break;
                case "DATA_REPERTORIO_SUCCESSIVA_AL":
                    queryWhere += " AND T.DTA_INS>=" + DocsPaDbManagement.Functions.Functions.ToDateBetween(f.valore, true);
                    break;
                case "DATA_REPERTORIO_PRECEDENTE_IL":
                    queryWhere += " AND T.DTA_INS<=" + DocsPaDbManagement.Functions.Functions.ToDateBetween(f.valore, false);
                    break;
            }
            return queryWhere;
        }

        private string GetQueryCondDocGrigia(string idGruppo, string idPeople, DocsPaVO.filtri.FiltroRicerca[][] objQueryList, ref string queryFrom)
        {
            string queryWhere = "";
            string andStr;
            int numAndStr = 0;
            ArrayList listaOR = new ArrayList();

            for (int i = 0; i < objQueryList.Length; i++)
            {
                andStr = " (";

                // Aggiunta filtro ricerca per grigio / allegato
                string filtroAllegato = GetFiltroDocumentoGrigioAllegato(objQueryList[i]);
                if (filtroAllegato != string.Empty)
                {
                    andStr += filtroAllegato;
                    numAndStr = 1;
                }
                else
                    numAndStr = 0;

                for (int j = 0; j < objQueryList[i].Length; j++)
                {
                    DocsPaVO.filtri.FiltroRicerca f = objQueryList[i][j];
                    queryWhere += GetQueryCondComuni(idGruppo, idPeople, queryWhere, f, ref andStr, ref numAndStr, ref queryFrom);
                }

                andStr += ") ";

                logger.Debug("andStr = " + andStr);
                if (andStr.Length > 4)
                {
                    listaOR.Add(andStr);
                    numAndStr = 0;
                }
            }

            if (listaOR.Count > 0)
            {
                queryWhere += " AND (" + (string)listaOR[0];
                for (int i = 1; i < numAndStr; i++)
                    queryWhere += " OR " + listaOR[i];
                queryWhere += ") ";

            }
            return queryWhere;
        }

        #region Gestione query per stampe registri

        private string GetQueryCondStampaRegistro(DocsPaVO.filtri.FiltroRicerca[][] objQueryList, ref string queryFrom)
        {
            const string BETWEEN_CONDITION = "BETWEEN R.NUM_PROTO_START AND R.NUM_PROTO_END";
            const string BETWEEN_CONDITION_REP = "BETWEEN R.NUM_REP_START AND R.NUM_REP_END";

            string queryWhere = "";
            string andStr;
            string filtroDataPec = string.Empty;
            string filtroDataPitre = string.Empty;
            int numAndStr = 0;
            ArrayList listaOR = new ArrayList();

            for (int i = 0; i < objQueryList.Length; i++)
            {
                andStr = " (";
                numAndStr = 0;

                string filterStringNumProtocollo = string.Empty;

                for (int j = 0; j < objQueryList[i].Length; j++)
                {
                    DocsPaVO.filtri.FiltroRicerca f = objQueryList[i][j];
                    if (f.valore != null && !f.valore.Equals(""))
                    {
                        switch (f.argomento)
                        {
                            case "REGISTRO":
                                if (numAndStr++ > 0)
                                    andStr += " AND ";
                                andStr += "(A.ID_REGISTRO IN (" + f.valore + ") OR A.ID_REGISTRO IS NULL)";
                                break;
                            case "TIPO":
                                if (f.valore != null)
                                {
                                    if (numAndStr > 0)
                                        andStr += " AND ";
                                    numAndStr += 1;
                                    if (f.valore.Equals("R"))
                                        andStr += "A.CHA_TIPO_PROTO IN ('A','P','I','G','R')";
                                    if (f.valore.Equals("C"))
                                        andStr += "A.CHA_TIPO_PROTO IN ('A','P','I','G','C')";

                                    if (f.valore.Equals("R") || f.valore.Equals("C"))
                                    {
                                        if (dbType.ToUpper().Equals("ORACLE"))
                                            andStr += " AND nvl(A.CHA_IN_CESTINO,'0')='0'";
                                        else andStr += " AND ISNULL(A.CHA_IN_CESTINO,'0')='0'";
                                    }
                                    else
                                    {
                                        if (dbType.ToUpper().Equals("ORACLE"))
                                            andStr += " nvl(A.CHA_IN_CESTINO,'0')='0'";
                                        else andStr += " ISNULL(A.CHA_IN_CESTINO,'0')='0'";
                                    }
                                }
                                break;
                            case "DATA_STAMPA_REGISTRO":
                                if (numAndStr > 0)
                                    andStr += " AND ";
                                numAndStr += 1;
                                andStr += " R.DTA_STAMPA >=" +
                                    DocsPaDbManagement.Functions.Functions.ToDateBetween(f.valore, true) +
                                    " AND R.DTA_STAMPA <=" + DocsPaDbManagement.Functions.Functions.ToDateBetween(f.valore, false);
                                break;
                            case "DATA_STAMPA_REGISTRO_DAL":
                                if (numAndStr > 0)
                                    andStr += " AND ";
                                numAndStr += 1;
                                andStr += "R.DTA_STAMPA>=" + DocsPaDbManagement.Functions.Functions.ToDateBetween(f.valore, true);
                                break;
                            case "DATA_STAMPA_REGISTRO_AL":
                                if (numAndStr > 0)
                                    andStr += " AND ";
                                numAndStr += 1;
                                andStr += "R.DTA_STAMPA<=" + DocsPaDbManagement.Functions.Functions.ToDateBetween(f.valore, false);
                                break;
                            case "DATA_STAMPA_SC":
                                // data stampa nella settimana corrente
                                andStr += " AND ";
                                numAndStr += 1;
                                if (!dbType.ToUpper().Equals("SQL"))
                                    andStr += "R.DTA_STAMPA>=(select to_date(to_char(sysdate+ (1-to_char(sysdate,'D')))) startdayofweek from dual) AND R.DTA_STAMPA<(select to_date(to_char(sysdate+ (8-to_char(sysdate,'D')))) enddayofweek from dual) ";
                                else
                                    andStr += "R.DTA_STAMPA>=(select DATEADD(DAY,-DATEPART(WEEKDAY,(DATEADD(DAY,7-DATEPART(WEEKDAY,GETDATE()),GETDATE())))+(7-DATEPART(WEEKDAY,GETDATE()))+2 ,GETDATE())) AND R.DTA_STAMPA<=(select DATEADD(DAY , 8-DATEPART(WEEKDAY,GETDATE()),GETDATE())) ";
                                break;
                            case "DATA_STAMPA_MC":
                                // data stampa nel mese corrente
                                andStr += " AND ";
                                numAndStr += 1;
                                if (!dbType.ToUpper().Equals("SQL"))
                                    andStr += "R.DTA_STAMPA>=(select to_date(trunc(sysdate,'MM')) as start_date from dual) AND R.DTA_STAMPA<(select to_date(last_day(sysdate)+1) as DAY from dual) ";
                                else
                                    andStr += "R.DTA_STAMPA>=(SELECT DATEADD(dd,-(DAY(getdate())-1),getdate())) AND R.DTA_STAMPA<=(SELECT DATEADD(dd,-(DAY(DATEADD(mm,1,getdate()))),DATEADD(mm,1,getdate()))) ";
                                break;
                            case "DATA_STAMPA_TODAY":
                                if (numAndStr > 0)
                                    andStr += " AND ";
                                numAndStr += 1;
                                if (!dbType.ToUpper().Equals("SQL"))
                                    andStr += "to_char(R.DTA_STAMPA, 'DD/MM/YYYY') = (select to_char(sysdate, 'DD/MM/YYYY') from dual)";
                                else
                                    //andStr += "R.DTA_STAMPA>=(SELECT getdate()) AND R.DTA_STAMPA<=(SELECT getdate()) ";
                                    andStr += "DATEDIFF(DD, R.DTA_STAMPA, GETDATE()) = 0 ";
                                break;
                            case "ANNO_PROTOCOLLO_STAMPA":
                                if (numAndStr > 0)
                                    andStr += " AND ";
                                numAndStr += 1;
                                andStr += "R.NUM_ANNO=" + f.valore;
                                break;
                            case "NUM_PROTOCOLLO_STAMPA":
                                if (numAndStr++ > 0)
                                    andStr += " AND ";
                                andStr += f.valore + " " + BETWEEN_CONDITION;
                                break;
                            case "NUM_PROTOCOLLO_STAMPA_DAL":
                                if (numAndStr++ > 0)
                                    andStr += " AND ";
                                andStr += "(" + f.valore + " " + BETWEEN_CONDITION;
                                break;
                            case "NUM_PROTOCOLLO_STAMPA_AL":
                                if (numAndStr++ > 0)
                                    andStr += " OR ";
                                andStr += f.valore + " " + BETWEEN_CONDITION + ")";
                                break;
                            case "DOCNUMBER":
                                if (numAndStr++ > 0)
                                    andStr += " AND ";
                                andStr += "R.DOCNUMBER = " + f.valore;
                                break;
                            case "DOCNUMBER_DAL":
                                if (numAndStr++ > 0)
                                    andStr += " AND ";
                                andStr += "R.DOCNUMBER >= " + f.valore;
                                break;
                            case "DOCNUMBER_AL":
                                if (numAndStr++ > 0)
                                    andStr += " AND ";
                                andStr += "R.DOCNUMBER <= " + f.valore;
                                break;
                            case "CONSERVAZIONE":
                                if (f.valore == "1")
                                {
                                    andStr += " AND ";
                                    numAndStr += 1;
                                    andStr += "a.SYSTEM_ID in (select distinct(a.id_profile) from dpa_items_conservazione a, dpa_area_conservazione b where a.id_conservazione = b.system_id and b.cha_stato='C')";
                                }
                                else
                                {
                                    andStr += " AND ";
                                    numAndStr += 1;
                                    andStr += "a.SYSTEM_ID not in (select distinct(a.id_profile) from dpa_items_conservazione a, dpa_area_conservazione b where a.id_conservazione = b.system_id and b.cha_stato='C')";
                                }
                                break;
                            case "CODICE_DESCRIZIONE_AMMINISTRAZIONE":
                                if (numAndStr > 0)
                                    andStr += " AND ";
                                numAndStr += 1;
                                andStr += "a.system_id  IN ( SELECT /*+ index (f)  index(g) */  f.id_profile FROM dpa_doc_arrivo_par f, dpa_corr_globali g " +
                                         "WHERE F.ID_PROFILE=a.system_id and g.system_id = f.ID_MITT_DEST AND UPPER(g.COD_DESC_INTEROP) LIKE UPPER('%" + DocsPaUtils.Functions.Functions.ReplaceApexes(f.valore) + "%'))";
                                break;
                            case "NUMERO_VERSIONI":
                                if (numAndStr > 0)
                                    andStr += " AND ";
                                numAndStr += 1;
                                andStr += " (select count(z.version_id) from VERSIONS z where a.DOCNUMBER=z.DOCNUMBER) " + f.valore;
                                break;
                            case "NUMERO_ALLEGATI":
                                if (numAndStr > 0)
                                    andStr += " AND ";
                                numAndStr += 1;
                                andStr += " (select count(x.system_id) from profile x where a.DOCNUMBER=x.id_documento_principale) " + f.valore;
                                break;
                            case "CODICE_TIPO_NOTIFICA":
                                if (numAndStr > 0)
                                    andStr += " AND ";
                                numAndStr += 1;
                                if (f.valore.ToLower().Equals("tutti"))
                                {
                                    andStr += "a.docnumber  IN (SELECT unique f.docnumber FROM dpa_notifica f, dpa_tipo_notifica g " +
                                                               "WHERE a.docnumber = f.DOCNUMBER)";

                                }
                                else
                                {

                                    andStr += "a.docnumber  IN (SELECT unique f.docnumber FROM dpa_notifica f " +
                                              "WHERE a.docnumber = f.DOCNUMBER filtroDataPec " +
                                              "and f.ID_TIPO_NOTIFICA in " +
                                              "(select g.SYSTEM_ID from dpa_tipo_notifica g  where " +
                                              "g.var_codice_notifica ='" + f.valore + "'))";
                                }
                                break;

                            // Aggiunto filtro su data creazione per risoluzione INC000000640211
                            // ATTENZIONE - mancano anche gli altri filtri accessibili dalla maschera di ricerca avanzata (non ricerca stampe!)
                    case "DATA_CREAZIONE_IL":
                        // if (numAndStr > 0)
                        andStr += " AND ";
                        numAndStr += 1;
                        andStr += " A.CREATION_TIME >=" +
                            DocsPaDbManagement.Functions.Functions.ToDateBetween(f.valore, true) +
                            " AND A.CREATION_TIME <=" + DocsPaDbManagement.Functions.Functions.ToDateBetween(f.valore, false);
                        break;
                    case "DATA_CREAZIONE_SUCCESSIVA_AL":
                        // if (numAndStr > 0)
                        andStr += " AND ";
                        numAndStr += 1;
                        andStr += "A.CREATION_TIME>=" + DocsPaDbManagement.Functions.Functions.ToDateBetween(f.valore, true);
                        dtaCreazSucc = "'" + f.valore + "'";
                        break;
                    case "DATA_CREAZIONE_PRECEDENTE_IL":
                        // if (numAndStr > 0)
                        andStr += " AND ";
                        numAndStr += 1;
                        andStr += "A.CREATION_TIME<=" + DocsPaDbManagement.Functions.Functions.ToDateBetween(f.valore, false);
                        dtaCreazPreced = "'" + f.valore + "'";
                        break;
                    case "DATA_CREAZ_SC":
                        // data creazione nella settimana corrente
                        andStr += " AND ";
                        numAndStr += 1;
                        if (!dbType.ToUpper().Equals("SQL"))
                            andStr += "A.CREATION_TIME>=(select to_date(to_char(sysdate+ (1-to_char(sysdate,'D')))) startdayofweek from dual) AND A.CREATION_TIME<(select to_date(to_char(sysdate+ (8-to_char(sysdate,'D')))) enddayofweek from dual) ";
                        else
                            andStr += "A.CREATION_TIME>=(select DATEADD(DAY,-DATEPART(WEEKDAY,(DATEADD(DAY,7-DATEPART(WEEKDAY,GETDATE()),GETDATE())))+(7-DATEPART(WEEKDAY,GETDATE()))+2 ,GETDATE())) AND A.CREATION_TIME<=(select DATEADD(DAY , 8-DATEPART(WEEKDAY,GETDATE()),GETDATE())) ";
                        break;
                    case "DATA_CREAZ_MC":
                        // data creazione nel mese corrente
                        andStr += " AND ";
                        numAndStr += 1;
                        if (!dbType.ToUpper().Equals("SQL"))
                            // andStr += "A.CREATION_TIME>=(select to_date(trunc(sysdate,'MM')) as start_date from dual) AND A.CREATION_TIME<(select to_date(last_day(sysdate)+1) as DAY from dual) ";

                            andStr += "A.CREATION_TIME>= Trunc(Sysdate,'MM')    AND A.CREATION_TIME<(Sysdate+1 ) ";
                        else
                            andStr += "A.CREATION_TIME>=(SELECT DATEADD(dd,-(DAY(getdate())-1),getdate())) AND A.CREATION_TIME<=(SELECT DATEADD(dd,-(DAY(DATEADD(mm,1,getdate()))),DATEADD(mm,1,getdate()))) ";
                        break;
                    case "DATA_CREAZ_TODAY":
                        // if (numAndStr > 0)
                        andStr += " AND ";
                        numAndStr += 1;
                        if (!dbType.ToUpper().Equals("SQL"))
                            //andStr += "to_char(A.CREATION_TIME, 'DD/MM/YYYY') = (select to_char(sysdate, 'DD/MM/YYYY') from dual)";
                            andStr += "A.CREATION_TIME between trunc(sysdate ,'DD') and sysdate";
                        else
                            //andStr += "A.CREATION_TIME>=(SELECT getdate()) AND A.CREATION_TIME<=(SELECT getdate()) ";
                            andStr += "DATEDIFF(DD, A.CREATION_TIME, GETDATE()) = 0 ";
                        break;

                            //case "DATA_TIPO_NOTIFICA_DA":
                            //    andStr += " AND ";
                            //    andStr += "f.VAR_GIORNO_ORA>=" + DocsPaDbManagement.Functions.Functions.ToDate(f.valore + " 00:00:00");
                            //    break;

                            //case "DATA_TIPO_NOTIFICA_A":
                            //    andStr += " AND ";
                            //    andStr += "f.VAR_GIORNO_ORA<=" + DocsPaDbManagement.Functions.Functions.ToDate(f.valore + " 23:59:59");
                            //    break;
                            //case "DATA_TIPO_NOTIFICA_TODAY":
                            //    andStr += " AND ";
                            //    andStr += "f.VAR_GIORNO_ORA>=" + DocsPaDbManagement.Functions.Functions.ToDate(f.valore + " 00:00:00")
                            //               + " AND f.VAR_GIORNO_ORA<=" + DocsPaDbManagement.Functions.Functions.ToDate(f.valore + " 23:59:59");
                            //    break;
                            //case "DATA_TIPO_NOTIFICA_NESSUNA":
                            //    andStr += f.valore;
                            //    break;
                            case "CODICE_TIPO_NOTIFICA_PITRE":
                                if (numAndStr > 0)
                                    andStr += " AND ";
                                numAndStr += 1;
                                if (f.valore.ToLower().Equals("tutti"))
                                {
                                    andStr += "a.docnumber  IN (SELECT unique f.docnumber FROM dpa_notifica f, dpa_tipo_notifica g " +
                                                               "WHERE a.docnumber = f.DOCNUMBER " +
                                                               " and lower(f.var_mittente) like 'http%' )";
                                }
                                else
                                {
                                    andStr += "a.docnumber  IN (SELECT unique f.docnumber FROM dpa_notifica f " +
                                              "WHERE a.docnumber = f.DOCNUMBER " +
                                              "and lower(f.var_mittente) like 'http%' filtroDataPitre " +
                                              "and f.ID_TIPO_NOTIFICA in " +
                                              "(select g.SYSTEM_ID from dpa_tipo_notifica g  where " +
                                              "g.var_codice_notifica ='" + f.valore + "'))";
                                }
                                break;

                            //case "DATA_TIPO_NOTIFICA_DA_PITRE":
                            //    //andStr += " AND ";
                            //    //andStr += "f.VAR_GIORNO_ORA>=" + DocsPaDbManagement.Functions.Functions.ToDate(f.valore + " 00:00:00");
                            //    filtroDataPitre += " and f.VAR_GIORNO_ORA>=" + DocsPaDbManagement.Functions.Functions.ToDate(f.valore + " 00:00:00");
                            //    break;

                            //case "DATA_TIPO_NOTIFICA_A_PITRE":
                            //    //andStr += " AND ";
                            //    //andStr += "f.VAR_GIORNO_ORA<=" + DocsPaDbManagement.Functions.Functions.ToDate(f.valore + " 23:59:59");
                            //    filtroDataPitre += " and f.VAR_GIORNO_ORA<=" + DocsPaDbManagement.Functions.Functions.ToDate(f.valore + " 23:59:59");
                            //    break;
                            //case "DATA_TIPO_NOTIFICA_TODAY_PITRE":
                            //    //andStr += " AND ";
                            //    //andStr += "f.VAR_GIORNO_ORA>=" + DocsPaDbManagement.Functions.Functions.ToDate(f.valore + " 00:00:00")
                            //    //+ " AND f.VAR_GIORNO_ORA<=" + DocsPaDbManagement.Functions.Functions.ToDate(f.valore + " 23:59:59");
                            //    filtroDataPitre += " and f.VAR_GIORNO_ORA>=" + DocsPaDbManagement.Functions.Functions.ToDate(f.valore + " 00:00:00")
                            //               + " AND f.VAR_GIORNO_ORA<=" + DocsPaDbManagement.Functions.Functions.ToDate(f.valore + " 23:59:59");
                            //    break;
                            //case "DATA_TIPO_NOTIFICA_NESSUNA_PITRE":
                            //    andStr += f.valore;
                            //    break;
                            case "DATA_ULTIMA_MODIFICA_IL":
                                andStr += " AND ";
                                andStr += "A.LAST_EDIT_DATE>=" + DocsPaDbManagement.Functions.Functions.ToDateBetween(f.valore, true) + " AND A.LAST_EDIT_DATE<= " + DocsPaDbManagement.Functions.Functions.ToDateBetween(f.valore, false);
                                break;
                            case "DATA_ULTIMA_MODIFICA_SUCCESSIVA_AL":
                                andStr += " AND ";
                                if (!dbType.ToUpper().Equals("SQL"))
                                    andStr += "A.LAST_EDIT_DATE >= to_date('" + f.valore + "','dd/mm/yyyy HH24:mi:ss') ";
                                else
                                    andStr += "A.LAST_EDIT_DATE >= convert(datetime,'" + f.valore.Replace(".", ":") + "', 103) ";
                                break;

                            case "DATA_ULTIMA_MODIFICA_PRECEDENTE_IL":
                                andStr += " AND ";
                                if (!dbType.ToUpper().Equals("SQL"))
                                    andStr += "A.LAST_EDIT_DATE <= to_date('" + f.valore + "','dd/mm/yyyy HH24:mi:ss') ";
                                else
                                    andStr += "A.LAST_EDIT_DATE <= convert(datetime,'" + f.valore.Replace(".", ":") + "', 103) ";
                                break;
                            case "REP_RF_AOO":
                                if (!f.valore.Equals("0"))
                                {
                                    if (numAndStr++ > 0)
                                        andStr += " AND ";
                                    andStr += "A.ID_REGISTRO IN (" + f.valore + ") ";
                                }
                                break;
                            case "REP_FIRMATO":
                                if (numAndStr > 0)
                                    andStr += " AND ";
                                numAndStr += 1;
                                andStr += "A.CHA_FIRMATO='" + f.valore + "'";
                                break;
                            case "NUM_REP_STAMPA":
                                if (numAndStr++ > 0)
                                    andStr += " AND ";
                                andStr += f.valore + " " + BETWEEN_CONDITION_REP;
                                break;
                            case "NUM_REP_STAMPA_DAL":
                                if (numAndStr++ > 0)
                                    andStr += " AND ";
                                andStr += "(" + f.valore + " " + BETWEEN_CONDITION_REP;
                                break;
                            case "NUM_REP_STAMPA_AL":
                                if (numAndStr++ > 0)
                                    andStr += " OR ";
                                andStr += f.valore + " " + BETWEEN_CONDITION_REP + ")";
                                break;
                            case "ANNO_REP_STAMPA":
                                if (numAndStr > 0)
                                    andStr += " AND ";
                                numAndStr += 1;
                                andStr += "R.NUM_ANNO=" + f.valore;
                                break;
                            case "DATA_STAMPA_REP":
                                if (numAndStr > 0)
                                    andStr += " AND ";
                                numAndStr += 1;
                                andStr += " R.DTA_STAMPA >=" +
                                    DocsPaDbManagement.Functions.Functions.ToDateBetween(f.valore, true) +
                                    " AND R.DTA_STAMPA <=" + DocsPaDbManagement.Functions.Functions.ToDateBetween(f.valore, false);
                                break;
                            case "DATA_STAMPA_REP_DAL":
                                if (numAndStr > 0)
                                    andStr += " AND ";
                                numAndStr += 1;
                                andStr += "R.DTA_STAMPA>=" + DocsPaDbManagement.Functions.Functions.ToDateBetween(f.valore, true);
                                break;
                            case "DATA_STAMPA_REP_AL":
                                if (numAndStr > 0)
                                    andStr += " AND ";
                                numAndStr += 1;
                                andStr += "R.DTA_STAMPA<=" + DocsPaDbManagement.Functions.Functions.ToDateBetween(f.valore, false);
                                break;
                            case "ID_REPERTORIO":
                                // MEV Ricerca e gestione stampe repertorio
                                // Nuovo filtro "TUTTI"
                                if (!f.valore.Equals("ALL"))
                                {
                                    if (numAndStr > 0)
                                        andStr += " AND ";
                                    numAndStr += 1;
                                    andStr += "R.ID_REPERTORIO=" + f.valore;
                                }
                                break;
                            // ---- INTEGRAZIONE PITRE-PARER ----
                            case "STATO_CONSERVAZIONE":
                                if (!(f.valore.Equals("NVWCRETF")))
                                {
                                    string value = string.Empty;
                                    string condNoQueue = string.Empty;
                                    string condQueue = string.Empty;
                                    if (f.valore.Contains("N"))
                                    {
                                        //value += "'N'";
                                        //condNoQueue = "a.SYSTEM_ID NOT IN (SELECT id_profile FROM dpa_versamento)";
                                        condNoQueue = " NOT EXISTS (SELECT 'x' FROM DPA_VERSAMENTO V WHERE V.ID_PROFILE=A.SYSTEM_ID) ";
                                    }
                                    if (f.valore.Contains("V"))
                                    {
                                        if (!string.IsNullOrEmpty(value))
                                            value += ",";
                                        value += "'V'";
                                    }
                                    if (f.valore.Contains("W"))
                                    {
                                        if (!string.IsNullOrEmpty(value))
                                            value += ",";
                                        value += "'W'";
                                    }
                                    if (f.valore.Contains("C"))
                                    {
                                        if (!string.IsNullOrEmpty(value))
                                            value += ",";
                                        value += "'C'";
                                    }
                                    if (f.valore.Contains("R"))
                                    {
                                        if (!string.IsNullOrEmpty(value))
                                            value += ",";
                                        value += "'R'";
                                    }
                                    if (f.valore.Contains("E"))
                                    {
                                        if (!string.IsNullOrEmpty(value))
                                            value += ",";
                                        value += "'E'";
                                    }
                                    if (f.valore.Contains("T"))
                                    {
                                        if (!string.IsNullOrEmpty(value))
                                            value += ",";
                                        value += "'T'";
                                    }
                                    if (f.valore.Contains("F"))
                                    {
                                        if (!string.IsNullOrEmpty(value))
                                            value += ",";
                                        value += "'F'";
                                    }
                                    if (!string.IsNullOrEmpty(value))
                                    {
                                        if (string.IsNullOrEmpty(condNoQueue))
                                        {
                                            // ricerca solo su doc in coda
                                            //andStr += string.Format(" AND a.SYSTEM_ID IN (SELECT id_profile FROM dpa_versamento WHERE cha_stato IN ({0}) )", value);
                                            andStr += string.Format(" AND EXISTS (SELECT 'x' FROM DPA_VERSAMENTO V WHERE V.ID_PROFILE=A.SYSTEM_ID AND V.CHA_STATO IN ({0}))", value);
                                        }
                                        else 
                                        {
                                            // ricerca mista in coda e non in coda
                                            //condQueue = string.Format("a.SYSTEM_ID IN (SELECT id_profile FROM dpa_versamento WHERE cha_stato IN ({0}) )", value);
                                            condQueue = string.Format(" EXISTS (SELECT 'x' FROM DPA_VERSAMENTO V WHERE V.ID_PROFILE=A.SYSTEM_ID AND V.CHA_STATO IN ({0}))", value);
                                            andStr += string.Format("AND ( ({0}) OR ({1}) )", condNoQueue, condQueue);
                                        }
                                        
                                        //andStr += string.Format(" AND a.SYSTEM_ID IN (SELECT id_profile FROM dpa_versamento WHERE cha_stato IN ({0}) )", value);
                                    }
                                    else
                                    {
                                        // ricerco solo su documenti non in coda
                                        if (!string.IsNullOrEmpty(condNoQueue))
                                            andStr += " AND " + condNoQueue;
                                    }
                                }
                                break;
                            case "DATA_VERSAMENTO_DA":
                                numAndStr += 1;
                                if (queryFrom.IndexOf("DPA_VERSAMENTO VS") < 0)
                                    queryFrom += " , DPA_VERSAMENTO VS";
                                queryWhere += " AND VS.ID_PROFILE=A.SYSTEM_ID ";
                                andStr += "AND VS.DTA_INVIO>" + DocsPaDbManagement.Functions.Functions.ToDate(f.valore + " 00:00:00", true);
                                break;
                            case "DATA_VERSAMENTO_A":
                                numAndStr += 1;
                                if (queryFrom.IndexOf("DPA_VERSAMENTO VS") < 0)
                                    queryFrom += " , DPA_VERSAMENTO VS";
                                if (queryWhere.IndexOf("VS.ID_PROFILE") < 0)
                                    queryWhere += " AND VS.ID_PROFILE=A.SYSTEM_ID ";
                                andStr += " AND VS.DTA_INVIO<" + DocsPaDbManagement.Functions.Functions.ToDate(f.valore + " 23:59:59", true);
                                break;
                            case "DATA_VERSAMENTO_IL":
                                numAndStr += 1;
                                queryFrom += " , DPA_VERSAMENTO VS";
                                queryWhere += " AND VS.ID_PROFILE=A.SYSTEM_ID ";
                                andStr += " AND VS.DTA_INVIO BETWEEN " + DocsPaDbManagement.Functions.Functions.ToDateBetween(f.valore, true) + " AND " + DocsPaDbManagement.Functions.Functions.ToDateBetween(f.valore, false);
                                break;
                            case "POLICY_CODICE":
                                numAndStr += 1;
                                if (queryFrom.IndexOf("DPA_POLICY_PARER POL") < 0)
                                    queryFrom += ", DPA_POLICY_PARER POL";
                                if (queryFrom.IndexOf("DPA_VERSAMENTI_POLICY VP") < 0)
                                    queryFrom += ", DPA_VERSAMENTI_POLICY VP";
                                queryWhere += " AND A.SYSTEM_ID=VP.ID_PROFILE AND VP.ID_POLICY=POL.SYSTEM_ID AND UPPER(POL.VAR_CODICE)='" + f.valore.ToUpper() + "' ";
                                break;
                            case "POLICY_NUM_ESECUZIONE":
                                numAndStr += 1;
                                if (queryFrom.IndexOf("DPA_VERSAMENTI_POLICY VP") < 0)
                                    queryFrom += ", DPA_VERSAMENTI_POLICY VP";
                                queryWhere += " AND A.SYSTEM_ID=VP.ID_PROFILE AND VP.NUM_ESECUZIONE_POLICY=" + f.valore + " ";
                                break;
                            case "DATA_EXEC_POLICY_DA":
                                numAndStr += 1;
                                if (queryFrom.IndexOf("DPA_VERSAMENTI_POLICY VP") < 0)
                                    queryFrom += ", DPA_VERSAMENTI_POLICY VP ";
                                queryWhere += " AND A.SYSTEM_ID=VP.ID_PROFILE AND VP.DATA_ESECUZIONE_POLICY>" + DocsPaDbManagement.Functions.Functions.ToDate(f.valore + "00:00:00", true) + " ";
                                break;
                            case "DATA_EXEC_POLICY_A":
                                numAndStr += 1;
                                if (queryFrom.IndexOf("DPA_VERSAMENTI_POLICY VP") < 0)
                                    queryFrom += ", DPA_VERSAMENTI_POLICY VP ";
                                if (queryWhere.IndexOf("VP.ID_PROFILE") < 0)
                                    queryWhere += " AND A.SYSTEM_ID=VP.ID_PROFILE ";
                                queryWhere += " AND VP.DATA_ESECUZIONE_POLICY<" + DocsPaDbManagement.Functions.Functions.ToDate(f.valore + "23:59:59", true);
                                break;
                            case "DATA_EXEC_POLICY_IL":
                                numAndStr += 1;
                                if (queryFrom.IndexOf("DPA_VERSAMENTI_POLICY VP") < 0)
                                    queryFrom += " ,DPA_VERSAMENTI_POLICY VP ";
                                queryWhere += " AND A.SYSTEM_ID=VP.ID_PROFILE AND VP.DATA_ESECUZIONE_POLICY BETWEEN " + DocsPaDbManagement.Functions.Functions.ToDateBetween(f.valore, true) + " AND " + DocsPaDbManagement.Functions.Functions.ToDateBetween(f.valore, false) + " ";
                                break;
                            // --------------FINE----------------
                        }
                    }
                }
                andStr += " ) ";
                logger.Debug("andStr = " + andStr);
                if (andStr.Length > 4)
                {
                    listaOR.Add(andStr);
                    numAndStr = 0;
                }
            }
            if (listaOR.Count > 0)
            {
                queryWhere += " AND (" + (string)listaOR[0];
                for (int i = 1; i < numAndStr; i++)
                    queryWhere += " OR " + listaOR[i];
                queryWhere += ") ";
            }
            return queryWhere;
        }

        private string GetQueryCondUnionStampaRegistro(DocsPaVO.filtri.FiltroRicerca[][] objQueryList, ref string queryFrom)
        {
            const string BETWEEN_CONDITION = "BETWEEN R.NUM_PROTO_START AND R.NUM_PROTO_END";
            const string BETWEEN_CONDITION_REP = "BETWEEN R.NUM_REP_START AND R.NUM_REP_END";

            string queryWhere = "";
            string andStr = " OR (";
            int numAndStr = 0;
            int numAndOrStampe = 0;
            string orStampe = string.Empty;
            string filtroDataPec = string.Empty;
            string filtroDataPitre = string.Empty;
            ArrayList listaOR = new ArrayList();
            string paramFunzStampa = "A.SYSTEM_ID,@1@,@2@,@3@";
            string paramFunzRegStampa = "A.SYSTEM_ID,@1@";

            for (int i = 0; i < objQueryList.Length; i++)
            {
                numAndStr = 0;
                string filterStringNumProtocollo = string.Empty;

                for (int j = 0; j < objQueryList[i].Length; j++)
                {
                    DocsPaVO.filtri.FiltroRicerca f = objQueryList[i][j];
                    if (f.valore != null && !f.valore.Equals(""))
                    {
                        switch (f.argomento)
                        {
                            case "REGISTRO":
                                if (paramFunzRegStampa.Contains("@1@"))
                                    paramFunzRegStampa = paramFunzRegStampa.Replace("@1@", f.valore);
                                break;
                            case "TIPO":
                                if (f.valore != null)
                                {
                                    if (numAndStr > 0)
                                        andStr += " AND ";
                                    numAndStr += 1;
                                    if (f.valore.Equals("R"))
                                        andStr += "A.CHA_TIPO_PROTO IN ('A','P','I','G','R')";
                                    if (f.valore.Equals("C"))
                                        andStr += "A.CHA_TIPO_PROTO IN ('A','P','I','G','C')";

                                    if (dbType.ToUpper().Equals("ORACLE"))
                                        andStr += " AND nvl(A.CHA_IN_CESTINO,'0')='0'";
                                    else andStr += " AND ISNULL(A.CHA_IN_CESTINO,'0')='0'";
                                }
                                break;
                            case "DATA_STAMPA_REGISTRO":
                                if (numAndStr > 0)
                                    andStr += " AND ";
                                numAndStr += 1;
                                andStr += " R.DTA_STAMPA >=" +
                                    DocsPaDbManagement.Functions.Functions.ToDateBetween(f.valore, true) +
                                    " AND R.DTA_STAMPA <=" + DocsPaDbManagement.Functions.Functions.ToDateBetween(f.valore, false);
                                break;
                            case "DATA_STAMPA_REGISTRO_DAL":
                                if (numAndStr > 0)
                                    andStr += " AND ";
                                numAndStr += 1;
                                andStr += "R.DTA_STAMPA>=" + DocsPaDbManagement.Functions.Functions.ToDateBetween(f.valore, true);
                                break;
                            case "DATA_STAMPA_REGISTRO_AL":
                                if (numAndStr > 0)
                                    andStr += " AND ";
                                numAndStr += 1;
                                andStr += "R.DTA_STAMPA<=" + DocsPaDbManagement.Functions.Functions.ToDateBetween(f.valore, false);
                                break;
                            case "DATA_STAMPA_SC":
                                // data stampa nella settimana corrente
                                if (numAndStr > 0)
                                    andStr += " AND ";
                                numAndStr += 1;
                                if (!dbType.ToUpper().Equals("SQL"))
                                    andStr += "R.DTA_STAMPA>=(select to_date(to_char(sysdate+ (1-to_char(sysdate,'D')))) startdayofweek from dual) AND R.DTA_STAMPA<(select to_date(to_char(sysdate+ (8-to_char(sysdate,'D')))) enddayofweek from dual) ";
                                else
                                    andStr += "R.DTA_STAMPA>=(select DATEADD(DAY,-DATEPART(WEEKDAY,(DATEADD(DAY,7-DATEPART(WEEKDAY,GETDATE()),GETDATE())))+(7-DATEPART(WEEKDAY,GETDATE()))+2 ,GETDATE())) AND R.DTA_STAMPA<=(select DATEADD(DAY , 8-DATEPART(WEEKDAY,GETDATE()),GETDATE())) ";
                                break;
                            case "DATA_STAMPA_MC":
                                // data stampa nel mese corrente
                                if (numAndStr > 0)
                                    andStr += " AND ";
                                numAndStr += 1;
                                if (!dbType.ToUpper().Equals("SQL"))
                                    andStr += "R.DTA_STAMPA>=(select to_date(trunc(sysdate,'MM')) as start_date from dual) AND R.DTA_STAMPA<(select to_date(last_day(sysdate)+1) as DAY from dual) ";
                                else
                                    andStr += "R.DTA_STAMPA>=(SELECT DATEADD(dd,-(DAY(getdate())-1),getdate())) AND R.DTA_STAMPA<=(SELECT DATEADD(dd,-(DAY(DATEADD(mm,1,getdate()))),DATEADD(mm,1,getdate()))) ";
                                break;
                            case "DATA_STAMPA_TODAY":
                                if (numAndStr > 0)
                                    andStr += " AND ";
                                numAndStr += 1;
                                if (!dbType.ToUpper().Equals("SQL"))
                                    andStr += "to_char(R.DTA_STAMPA, 'DD/MM/YYYY') = (select to_char(sysdate, 'DD/MM/YYYY') from dual)";
                                else
                                    //andStr += "R.DTA_STAMPA>=(SELECT getdate()) AND R.DTA_STAMPA<=(SELECT getdate()) ";
                                    andStr += "DATEDIFF(DD, R.DTA_STAMPA, GETDATE()) = 0 ";
                                break;
                            case "ANNO_PROTOCOLLO_STAMPA":
                                if (paramFunzStampa.Contains("@1@"))
                                    paramFunzStampa = paramFunzStampa.Replace("@1@", f.valore);
                                break;
                            case "NUM_PROTOCOLLO_STAMPA":
                                if (paramFunzStampa.Contains("@2@"))
                                    paramFunzStampa = paramFunzStampa.Replace("@2@", f.valore);
                                if (paramFunzStampa.Contains("@3@"))
                                    paramFunzStampa = paramFunzStampa.Replace("@3@", f.valore);
                                break;
                            case "NUM_PROTOCOLLO_STAMPA_DAL":
                                if (paramFunzStampa.Contains("@2@"))
                                    paramFunzStampa = paramFunzStampa.Replace("@2@", f.valore);
                                break;
                            case "NUM_PROTOCOLLO_STAMPA_AL":
                                if (paramFunzStampa.Contains("@3@"))
                                    paramFunzStampa = paramFunzStampa.Replace("@3@", f.valore);
                                break;
                            case "CODICE_DESCRIZIONE_AMMINISTRAZIONE":
                                if (numAndStr > 0)
                                    andStr += " AND ";
                                numAndStr += 1;
                                andStr += "a.system_id  IN ( SELECT /*+ index (f)  index(g) */  f.id_profile FROM dpa_doc_arrivo_par f, dpa_corr_globali g " +
                                         "WHERE F.ID_PROFILE=a.system_id and g.system_id = f.ID_MITT_DEST AND UPPER(g.COD_DESC_INTEROP) LIKE UPPER('%" + DocsPaUtils.Functions.Functions.ReplaceApexes(f.valore) + "%'))";
                                break;
                            case "NUMERO_VERSIONI":
                                if (numAndStr > 0)
                                    andStr += " AND ";
                                numAndStr += 1;
                                andStr += " (select count(z.version_id) from VERSIONS z where a.DOCNUMBER=z.DOCNUMBER) " + f.valore;
                                break;
                            case "NUMERO_ALLEGATI":
                                if (numAndStr > 0)
                                    andStr += " AND ";
                                numAndStr += 1;
                                andStr += " (select count(x.system_id) from profile x where a.DOCNUMBER=x.id_documento_principale) " + f.valore;
                                break;
                            case "CODICE_TIPO_NOTIFICA":
                                if (numAndStr > 0)
                                    andStr += " AND ";
                                numAndStr += 1;
                                if (f.valore.ToLower().Equals("tutti"))
                                {
                                    andStr += "a.docnumber  IN (SELECT unique f.docnumber FROM dpa_notifica f, dpa_tipo_notifica g " +
                                                               "WHERE a.docnumber = f.DOCNUMBER)";

                                }
                                else
                                {

                                    andStr += "a.docnumber  IN (SELECT unique f.docnumber FROM dpa_notifica f " +
                                              "WHERE a.docnumber = f.DOCNUMBER filtroDataPec " +
                                              "and f.ID_TIPO_NOTIFICA in " +
                                              "(select g.SYSTEM_ID from dpa_tipo_notifica g  where " +
                                              "g.var_codice_notifica ='" + f.valore + "'))";
                                }
                                break;

                            //case "DATA_TIPO_NOTIFICA_DA":
                            //    andStr += " AND ";
                            //    andStr += "f.VAR_GIORNO_ORA>=" + DocsPaDbManagement.Functions.Functions.ToDate(f.valore + " 00:00:00");
                            //    break;

                            //case "DATA_TIPO_NOTIFICA_A":
                            //    andStr += " AND ";
                            //    andStr += "f.VAR_GIORNO_ORA<=" + DocsPaDbManagement.Functions.Functions.ToDate(f.valore + " 23:59:59");
                            //    break;
                            //case "DATA_TIPO_NOTIFICA_TODAY":
                            //    andStr += " AND ";
                            //    andStr += "f.VAR_GIORNO_ORA>=" + DocsPaDbManagement.Functions.Functions.ToDate(f.valore + " 00:00:00")
                            //               + " AND f.VAR_GIORNO_ORA<=" + DocsPaDbManagement.Functions.Functions.ToDate(f.valore + " 23:59:59");
                            //    break;
                            //case "DATA_TIPO_NOTIFICA_NESSUNA":
                            //    andStr += f.valore;
                            //    break;
                            case "CODICE_TIPO_NOTIFICA_PITRE":
                                if (numAndStr > 0)
                                    andStr += " AND ";
                                numAndStr += 1;
                                if (f.valore.ToLower().Equals("tutti"))
                                {
                                    andStr += "a.docnumber  IN (SELECT unique f.docnumber FROM dpa_notifica f, dpa_tipo_notifica g " +
                                                               "WHERE a.docnumber = f.DOCNUMBER " +
                                                               " and lower(f.var_mittente) like 'http%' )";
                                }
                                else
                                {
                                    andStr += "a.docnumber  IN (SELECT unique f.docnumber FROM dpa_notifica f " +
                                              "WHERE a.docnumber = f.DOCNUMBER " +
                                              "and lower(f.var_mittente) like 'http%' filtroDataPitre " +
                                              "and f.ID_TIPO_NOTIFICA in " +
                                              "(select g.SYSTEM_ID from dpa_tipo_notifica g  where " +
                                              "g.var_codice_notifica ='" + f.valore + "'))";
                                }
                                break;

                            //case "DATA_TIPO_NOTIFICA_DA_PITRE":
                            //    //andStr += " AND ";
                            //    //andStr += "f.VAR_GIORNO_ORA>=" + DocsPaDbManagement.Functions.Functions.ToDate(f.valore + " 00:00:00");
                            //    filtroDataPitre += " and f.VAR_GIORNO_ORA>=" + DocsPaDbManagement.Functions.Functions.ToDate(f.valore + " 00:00:00");
                            //    break;

                            //case "DATA_TIPO_NOTIFICA_A_PITRE":
                            //    //andStr += " AND ";
                            //    //andStr += "f.VAR_GIORNO_ORA<=" + DocsPaDbManagement.Functions.Functions.ToDate(f.valore + " 23:59:59");
                            //    filtroDataPitre += " and f.VAR_GIORNO_ORA<=" + DocsPaDbManagement.Functions.Functions.ToDate(f.valore + " 23:59:59");
                            //    break;
                            //case "DATA_TIPO_NOTIFICA_TODAY_PITRE":
                            //    //andStr += " AND ";
                            //    //andStr += "f.VAR_GIORNO_ORA>=" + DocsPaDbManagement.Functions.Functions.ToDate(f.valore + " 00:00:00")
                            //    //+ " AND f.VAR_GIORNO_ORA<=" + DocsPaDbManagement.Functions.Functions.ToDate(f.valore + " 23:59:59");
                            //    filtroDataPitre += " and f.VAR_GIORNO_ORA>=" + DocsPaDbManagement.Functions.Functions.ToDate(f.valore + " 00:00:00")
                            //               + " AND f.VAR_GIORNO_ORA<=" + DocsPaDbManagement.Functions.Functions.ToDate(f.valore + " 23:59:59");
                            //    break;
                            //case "DATA_TIPO_NOTIFICA_NESSUNA_PITRE":
                            //    andStr += f.valore;
                            //    break;
                            case "DATA_ULTIMA_MODIFICA_IL":
                                andStr += " AND ";
                                andStr += "A.LAST_EDIT_DATE>=" + DocsPaDbManagement.Functions.Functions.ToDateBetween(f.valore, true) + " AND A.LAST_EDIT_DATE<= " + DocsPaDbManagement.Functions.Functions.ToDateBetween(f.valore, false);
                                break;
                            case "DATA_ULTIMA_MODIFICA_SUCCESSIVA_AL":
                                andStr += " AND ";
                                if (!dbType.ToUpper().Equals("SQL"))
                                    andStr += "A.LAST_EDIT_DATE >= to_date('" + f.valore + "','dd/mm/yyyy HH24:mi:ss') ";
                                else
                                    andStr += "A.LAST_EDIT_DATE >= convert(datetime,'" + f.valore.Replace(".", ":") + "', 103) ";
                                break;
                            case "DATA_ULTIMA_MODIFICA_PRECEDENTE_IL":
                                andStr += " AND ";
                                if (!dbType.ToUpper().Equals("SQL"))
                                    andStr += "A.LAST_EDIT_DATE <= to_date('" + f.valore + "','dd/mm/yyyy HH24:mi:ss') ";
                                else
                                    andStr += "A.LAST_EDIT_DATE <= convert(datetime,'" + f.valore.Replace(".", ":") + "', 103) ";
                                break;
                            case "REP_RF_AOO":
                                if (numAndStr++ > 0)
                                    andStr += " AND ";
                                andStr += "A.ID_REGISTRO IN (" + f.valore + ") ";
                                break;
                            case "REP_FIRMATO":
                                if (numAndStr > 0)
                                    andStr += " AND ";
                                numAndStr += 1;
                                andStr += "A.CHA_FIRMATO='" + f.valore + "'";
                                break;
                            case "NUM_REP_STAMPA":
                                if (numAndStr++ > 0)
                                    andStr += " AND ";
                                andStr += f.valore + " " + BETWEEN_CONDITION_REP;
                                break;
                            case "NUM_REP_STAMPA_DAL":
                                if (numAndStr++ > 0)
                                    andStr += " AND ";
                                andStr += "(" + f.valore + " " + BETWEEN_CONDITION_REP;
                                break;
                            case "NUM_REP_STAMPA_AL":
                                if (numAndStr++ > 0)
                                    andStr += " OR ";
                                andStr += f.valore + " " + BETWEEN_CONDITION_REP + ")";
                                break;
                            case "ANNO_REP_STAMPA":
                                if (numAndStr > 0)
                                    andStr += " AND ";
                                numAndStr += 1;
                                andStr += "R.NUM_ANNO=" + f.valore;
                                break;
                            case "DATA_STAMPA_REP":
                                if (numAndStr > 0)
                                    andStr += " AND ";
                                numAndStr += 1;
                                andStr += " R.DTA_STAMPA >=" +
                                    DocsPaDbManagement.Functions.Functions.ToDateBetween(f.valore, true) +
                                    " AND R.DTA_STAMPA <=" + DocsPaDbManagement.Functions.Functions.ToDateBetween(f.valore, false);
                                break;
                            case "DATA_STAMPA_REP_DAL":
                                if (numAndStr > 0)
                                    andStr += " AND ";
                                numAndStr += 1;
                                andStr += "R.DTA_STAMPA>=" + DocsPaDbManagement.Functions.Functions.ToDateBetween(f.valore, true);
                                break;
                            case "DATA_STAMPA_REP_AL":
                                if (numAndStr > 0)
                                    andStr += " AND ";
                                numAndStr += 1;
                                andStr += "R.DTA_STAMPA<=" + DocsPaDbManagement.Functions.Functions.ToDateBetween(f.valore, false);
                                break;
                            case "ID_REPERTORIO":
                                if (numAndStr > 0)
                                    andStr += " AND ";
                                numAndStr += 1;
                                andStr += "R.ID_REPERTORIO=" + f.valore;
                                break;
                        }
                    }
                }

                string initDBType = string.Empty;
                if (dbType.ToUpper().Equals("SQL"))
                    initDBType = getUserDB() + ".";
                if (!paramFunzStampa.Contains("@1@") && !paramFunzStampa.Contains("@2@") && !paramFunzStampa.Contains("@3@"))
                    andStr += " AND " + initDBType + "getnumProtoStampa(" + paramFunzStampa + ")=1 ";
                else
                {
                    if (paramFunzStampa.Contains("@1@"))
                        paramFunzStampa = paramFunzStampa.Replace("@1@", "null");
                    if (paramFunzStampa.Contains("@2@"))
                        paramFunzStampa = paramFunzStampa.Replace("@2@", "null");
                    if (paramFunzStampa.Contains("@3@"))
                        paramFunzStampa = paramFunzStampa.Replace("@3@", "null");
                    andStr += " AND " + initDBType + "getnumProtoStampa(" + paramFunzStampa + ")=1 ";
                }
                if (!paramFunzRegStampa.Contains("@1@"))
                    andStr += " AND " + initDBType + "getRegistroStampa(" + paramFunzRegStampa + ")=1 ";
                logger.Debug("andStr = " + andStr);
                if (andStr.Length > 5)
                {
                    andStr += ")";
                }
            }
            //if (listaOR.Count > 0)
            //{
            //    queryWhere += " AND (" + (string)listaOR[0];
            //    for (int i = 1; i < numAndStr; i++)
            //        queryWhere += " OR " + listaOR[i];
            //    queryWhere += ") ";
            //}
            return andStr;
        }

        public ArrayList AppendListaStampeRegistro(string idGruppo, string idPeople, ArrayList listaDoc, DocsPaVO.filtri.FiltroRicerca[][] objQueryList)
        {
            logger.Debug("appendListaStampeRegistro");

            //valgono le stesse regole dei documenti grigi
            string query;
            // Inserimento della tabella "DPA_STAMPAREGISTRI" nella clausola from
            string queryFrom = ", DPA_STAMPAREGISTRI R";
            string queryOrd = "A.SYSTEM_ID DESC";

            // Reperimento della stringa di filtro, con l'aggiunta 
            // della condizione di join tra "PROFILE" e "DPA_STAMPAREGISTRI"
            string queryWhere = " AND A.DOCNUMBER=R.DOCNUMBER " +
                            GetQueryCondStampaRegistro(objQueryList, ref queryFrom);

            query = GetQueryProtocollo(idGruppo, idPeople, objQueryList, queryWhere, queryFrom, queryOrd);
            listaDoc = AppendiListaDocumenti(listaDoc, query, false, null);

            return listaDoc;
        }

        #endregion

        private ArrayList AppendiListaDocumenti(ArrayList listaDoc, string query, bool corr, string numRighe)
        {
            // TODO: gestire
            //modifica per ricerca Top N Documenti
            string queryString = string.Empty;
            if ((numRighe == null) || (numRighe.Equals("0")))
            {
                queryString = DocsPaDbManagement.Functions.Functions.SelectTop(query);
            }
            else
            {
                queryString = DocsPaDbManagement.Functions.Functions.SelectTop(query, numRighe);
            }
            //end modifica per ricerca Top N Documenti
            logger.Debug(queryString);
            DataSet dataSet;

            using (DBProvider dbProvider = new DBProvider())
            {
                dbProvider.ExecuteQuery(out dataSet, "DOCUMENTI", queryString);
            }
            

            AppendiListaDocumenti(listaDoc, dataSet, corr);

            return listaDoc;

            //			// TODO: DocsPa_V15_Utils.Logger.log("Dopo query documenti", logLevelTime);
            //			SetTableCorrispondenti(/*ref*/ dataSet);
            //			foreach(DataRow dataRow in dataSet.Tables["DOCUMENTI"].Rows) 
            //			{
            //				listaDoc.Add(GetDatiDocumento(dataSet, dataRow, corr));
            //			}
            //			dataSet.Dispose();
            //			registri.Clear();
            //			return listaDoc;
        }

        //        private ArrayList AppendiListaDocumentiExport(ArrayList listaDoc, string query, bool corr, string numRighe)
        private ArrayList AppendiListaDocumentiExport(ArrayList listaDoc, string query, bool corr, string numRighe, DocsPaVO.utente.InfoUtente infoUtente)
        {
            string queryString = string.Empty;
            if ((numRighe == null) || (numRighe.Equals("0")))
                queryString = DocsPaDbManagement.Functions.Functions.SelectTop(query);
            else
                queryString = DocsPaDbManagement.Functions.Functions.SelectTop(query, numRighe);

            logger.Debug(queryString);
            DataSet dataSet;
            ExecuteQuery(out dataSet, "DOCUMENTI", queryString);

            if (dataSet.Tables["DOCUMENTI"].Rows.Count > 0)
            {
                foreach (DataRow row in dataSet.Tables["DOCUMENTI"].Rows)
                {
                    listaDoc.Add(GetDocumento(row, infoUtente));

                }
            }

            dataSet.Dispose();

            return listaDoc;
        }

        private DocsPaVO.documento.InfoDocumentoExport GetDocumento(DataRow row, DocsPaVO.utente.InfoUtente infoUtente)
        {
            DocsPaVO.documento.InfoDocumentoExport doc = new DocsPaVO.documento.InfoDocumentoExport();
            doc.tipologiaDocumento = row["CHA_TIPO_DOC"].ToString();
            if (doc.tipologiaDocumento == "G")
            {
                doc.idOrNumProt = row["DOCNUMBER"].ToString();
                doc.data = row["DATA_CREAZIONE"].ToString();
                doc.codiceRegistro = "";
            }
            else
            {
                if (doc.tipologiaDocumento == "A" ||
                    doc.tipologiaDocumento == "I" ||
                    doc.tipologiaDocumento == "P"
                    )
                {
                    if (row["NUM_PROTOCOLLO"].ToString() != "")
                    {
                        doc.idOrNumProt = row["NUM_PROTOCOLLO"].ToString();
                        doc.data = row["DATA_PROTOCOLLO"].ToString();
                        doc.codiceRegistro = GetCodRegistro(row["ID_REGISTRO"].ToString());
                    }
                    else
                    {

                        doc.idOrNumProt = row["DOCNUMBER"].ToString();
                        doc.data = row["DATA_CREAZIONE"].ToString();
                        doc.codiceRegistro = GetCodRegistro(row["ID_REGISTRO"].ToString()); // nuovo: richiesta di Bruno in un secondo momento

                    }
                }
            }

            doc.dataAnnullamento = row["DATA_ANNULLAMENTO"].ToString();
            doc.oggetto = row["OGGETTO"].ToString();
            doc.mittentiDestinatari = row["MITT_DEST"].ToString();
            doc.codiceFascicolo = row["COD_FASCICOLI"].ToString();
            if (row["IMMAGINE"].ToString().Equals("1"))
                doc.acquisitaImmagine = "Si";
            else
                doc.acquisitaImmagine = "No";
            if (row["ID_TIPO_ATTO"].ToString() != null && row["ID_TIPO_ATTO"].ToString() != "")
            {
                doc.idTipoAtto = row["ID_TIPO_ATTO"].ToString();
            }
            doc.docNumber = row["DOCNUMBER"].ToString();
            if (row["SYSTEM_ID"].ToString() != null && row["SYSTEM_ID"].ToString() != "")
                doc.systemId = row["SYSTEM_ID"].ToString();
            if (row["IN_CONSERVAZIONE"].ToString() != null && row["IN_CONSERVAZIONE"].ToString() != "")
                doc.inConservazione = row["IN_CONSERVAZIONE"].ToString();
            //doc.idAmm = row["ID_AMM"].ToString();
            doc.noteCestino = row["VAR_NOTE_CESTINO"].ToString();

            // Recupero dell'ultima nota di visibilità generale relativa al documento
            GetUltimaNotaDocumento(doc, infoUtente);

            // Restituiscoil documento appena creato
            return doc;
        }

        /// <summary>
        /// Metodo per la ricrca dell'ultima nota di visibilità generale inserita
        /// </summary>
        /// <param name="doc"></param>
        /// <param name="infoUtente"></param>
        public static void GetUltimaNotaDocumento(DocsPaVO.documento.InfoDocumentoExport doc, DocsPaVO.utente.InfoUtente infoUtente)
        {
            // Creo un nuovo oggetto Note che si occuperà di cercare le ultime note
            // inserite per un certo documento
            Note note = new Note(infoUtente);

            // Creo un nuovo oggetto associazione nota
            DocsPaVO.Note.AssociazioneNota associazione = new DocsPaVO.Note.AssociazioneNota(DocsPaVO.Note.AssociazioneNota.OggettiAssociazioniNotaEnum.Documento, doc.systemId);

            // Ultima nota
            DocsPaVO.Note.InfoNota ultima = note.GetUltimaNota(associazione);

            if (ultima != null)
                doc.ultimaNota = note.GetUltimaNotaAsString(associazione);

        }

        private string GetCodRegistro(string idRegistro)
        {
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_DPAELRegistri4");
            q.setParam("param1", idRegistro);
            string queryString = q.getSQL();
            string codRegistro = string.Empty;
            ExecuteScalar(out codRegistro, queryString);
            return codRegistro;
        }

        private void AppendiListaDocumenti(ArrayList listaDoc, DataSet dataSetDocumenti, bool appendCorrispondenti)
        {
            SetTableCorrispondenti(dataSetDocumenti);

            foreach (DataRow dataRow in dataSetDocumenti.Tables["DOCUMENTI"].Rows)
                listaDoc.Add(GetDatiDocumento(dataSetDocumenti, dataRow, appendCorrispondenti));
        }

        #region paging AppendiListaDocumenti

        /// <summary>
        /// 
        /// </summary>
        /// <param name="listaDoc"></param>
        /// <param name="query"></param>
        /// <param name="corr"></param>
        /// <param name="numPage"></param>
        /// <param name="numTotPage"></param>
        /// <param name="nRec"></param>
        /// <param name="comingPopUp"></param>
        /// <returns></returns>
        private ArrayList AppendiListaDocumentiPaging(ArrayList listaDoc, string query, bool corr, int numPage, out int numTotPage, out int nRec, bool comingPopUp)
        {
            DataSet dataSet;
            if (!comingPopUp)//nelle PopUp erano troppi 20 elementi per pagina
            {
                ExecutePaging(out dataSet, out numTotPage, out nRec, numPage, 20, query, "DOCUMENTI");
            }
            else
            {
                ExecutePaging(out dataSet, out numTotPage, out nRec, numPage, 10, query, "DOCUMENTI");
            }
            dataSet.Tables["PagingTable"].TableName = "DOCUMENTI";
            SetTableCorrispondenti(dataSet);
            foreach (DataRow dataRow in dataSet.Tables["DOCUMENTI"].Rows)
            {
                listaDoc.Add(GetDatiDocumento(dataSet, dataRow, corr));
            }
            dataSet.Dispose();
            registri.Clear();
            return listaDoc;
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="listaDoc"></param>
        /// <param name="query"></param>
        /// <param name="corr"></param>
        private void AppendListaDocumentiPaging(ArrayList listaDoc, string query, bool corr)
        {
            DataSet dataSet;
            if (ExecuteQuery(out dataSet, "DOCUMENTI", query))
            {
                SetTableCorrispondenti(dataSet);

                foreach (DataRow dataRow in dataSet.Tables["DOCUMENTI"].Rows)
                    listaDoc.Add(GetDatiDocumento(dataSet, dataRow, corr));

                dataSet.Dispose();

                registri.Clear();
            }
            else
            {
                logger.Debug("Errore nell'esecuzione della query in 'AppendListaDocumentiPaging'");

                throw new ApplicationException("Errore nell'esecuzione della query in 'AppendListaDocumentiPaging'");
            }
        }

        private void AppendListaDocumentiTrasfDepositoPaging(ArrayList listaDoc, string query, bool corr, int numPage, out int numTotPage, out int nRec)
        //private void AppendListaDocumentiTrasfDepositoPaging(ArrayList listaDoc, string query, bool corr, out int nRec)
        {
            DataSet dataSet;

            if (ExecutePaging(out dataSet, out numTotPage, out nRec, numPage, 10, query, "PROFILE"))
            {
                //creazione della lista oggetti
                dataSet.Tables["PagingTable"].TableName = "DOCUMENTI";

                //if (ExecuteQuery(out dataSet, "DOCUMENTI", query))
                //{
                //nRec = dataSet.Tables["DOCUMENTI"].Rows.Count;
                SetTableCorrispondenti(dataSet);

                foreach (DataRow dataRow in dataSet.Tables["DOCUMENTI"].Rows)
                    listaDoc.Add(GetDatiDocumento(dataSet, dataRow, corr));

                dataSet.Dispose();

                registri.Clear();
            }
            else
            {
                logger.Debug("Errore nell'esecuzione della query in 'AppendListaDocumentiPaging'");

                throw new ApplicationException("Errore nell'esecuzione della query in 'AppendListaDocumentiPaging'");
            }
        }

        private void AppendListaDocumentiTrasfDeposito(ArrayList listaDoc, string query, bool corr)
        {
            DataSet dataSet;


            if (ExecuteQuery(out dataSet, "DOCUMENTI", query))
            {
                //nRec = dataSet.Tables["DOCUMENTI"].Rows.Count;
                SetTableCorrispondenti(dataSet);

                foreach (DataRow dataRow in dataSet.Tables["DOCUMENTI"].Rows)
                    listaDoc.Add(GetDatiDocumento(dataSet, dataRow, corr));

                dataSet.Dispose();

                registri.Clear();
            }
            else
            {
                logger.Debug("Errore nell'esecuzione della query in 'AppendListaDocumentiPaging'");

                throw new ApplicationException("Errore nell'esecuzione della query in 'AppendListaDocumentiPaging'");
            }
        }


        #endregion paging AppendiListaDocumenti

        private void SetTableCorrispondenti(/*ref*/ DataSet dataSet)
        {
            logger.Debug("setTableCorrispondenti");
            ArrayList idProfileList = new ArrayList();
            foreach (DataRow dataRow in dataSet.Tables["DOCUMENTI"].Rows)
            {
                idProfileList.Add(dataRow["SYSTEM_ID"].ToString());
            }
            if (idProfileList.Count > 0)
            {
                string inStr = "(" + (string)idProfileList[0];
                for (int i = 1; i < idProfileList.Count; i++)
                {
                    inStr += ", " + (string)idProfileList[i];
                }
                inStr += ")";
                DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_J_DPA_CORR_GLOBALI__DOC_ARRIVO_PAR");
                q.setParam("param1", "A.SYSTEM_ID, A.VAR_DESC_CORR, B.ID_PROFILE, B.CHA_TIPO_MITT_DEST ");
                q.setParam("param2", "B.ID_PROFILE IN " + inStr);
                string queryString = q.getSQL();

                using (DBProvider dbProvider = new DBProvider())
                {
                    dbProvider.ExecuteQuery(dataSet, "CORRISPONDENTI", queryString);
                }
               
            }
            // TODO: DocsPa_V15_Utils.Logger.log("Fine setTableCorrispondenti", logLevelTime);
        }

        public DocsPaVO.documento.InfoDocumento GetDatiDocumento(DataSet dataSet, DataRow dataRow, bool corr)
        {
            logger.Debug("getDatiDocumento");
            DocsPaVO.documento.InfoDocumento infoDoc = new DocsPaVO.documento.InfoDocumento();
            if (dataRow.Table.Columns.Contains("numSerie") && dataRow["numSerie"] != null)
                infoDoc.numSerie = dataRow["numSerie"].ToString();

            infoDoc.idProfile = dataRow["SYSTEM_ID"].ToString();
            infoDoc.docNumber = dataRow["DOCNUMBER"].ToString();
            infoDoc.tipoProto = dataRow["CHA_TIPO_PROTO"].ToString();
            logger.Debug("Aggiunto tipo proto " + dataRow["CHA_TIPO_PROTO"].ToString());
            if (dataRow["ID_REGISTRO"] != null)
            {
                infoDoc.idRegistro = dataRow["ID_REGISTRO"].ToString();
                infoDoc.codRegistro = GetCodiceRegistro(infoDoc.idRegistro);
            }
            infoDoc.dataApertura = dataRow["CREATION_DATE"].ToString();
            infoDoc.oggetto = dataRow["VAR_DESC_OGGETTO"].ToString();
            infoDoc.oggetto = infoDoc.oggetto.Replace("<", "&lt;");
            infoDoc.oggetto = infoDoc.oggetto.Replace(">", "&gt;");

            if (dataRow.Table.Columns.Contains("AUTHOR") && dataRow["AUTHOR"] != DBNull.Value)
                infoDoc.autore = dataRow["AUTHOR"].ToString();

            if (dataRow.Table.Columns.Contains("VAR_NOTE_CESTINO") && dataRow["VAR_NOTE_CESTINO"] != DBNull.Value)
                infoDoc.noteCestino = dataRow["VAR_NOTE_CESTINO"].ToString();

            if (dataRow["CHA_EVIDENZA"] != null)
                infoDoc.evidenza = dataRow["CHA_EVIDENZA"].ToString();

            if (dataRow.Table.Columns.Contains("CHA_PRIVATO") && dataRow["CHA_PRIVATO"] != DBNull.Value)
                infoDoc.privato = dataRow["CHA_PRIVATO"].ToString();

            if (dataRow.Table.Columns.Contains("CHA_PERSONALE") && dataRow["CHA_PERSONALE"] != DBNull.Value)
                infoDoc.personale = dataRow["CHA_PERSONALE"].ToString();

            logger.DebugFormat("Infodoc {0}", infoDoc == null ? "null" : "pieno");

            infoDoc = GetProtoData(dataSet, dataRow, infoDoc, corr);

            //modifica
            DocsPaVO.Caching.InfoFileCaching infofilecaching = new Caching().getFileCache(dataRow["DOCNUMBER"].ToString());
            if (infofilecaching != null && !string.IsNullOrEmpty(infofilecaching.ext))
                infoDoc.acquisitaImmagine = infofilecaching.ext;
            else
                infoDoc.acquisitaImmagine = dataRow["CHA_IMG"].ToString();
            //fine modifica

            // Data ultima archiviazione del documento in un fascicolo cartaceo
            if (dataRow.Table.Columns.Contains("DATA_ARCHIVIAZIONE"))
            {
                if (dataRow["DATA_ARCHIVIAZIONE"] != DBNull.Value)
                {
                    DateTime dataArchiviazione;
                    if (DateTime.TryParse(dataRow["DATA_ARCHIVIAZIONE"].ToString(), out dataArchiviazione))
                        infoDoc.dataArchiviazione = dataArchiviazione.ToString("dd/MM/yyyy");
                    }
                }

            //custom per ADL Info
            if (dataRow.Table.Columns.Contains("IN_ADL"))
                if (dataRow["IN_ADL"] != DBNull.Value)
                    infoDoc.inADL = dataRow["IN_ADL"].ToString();

            if (dataRow.Table.Columns.Contains("IN_CONSERVAZIONE"))
                if (dataRow["IN_CONSERVAZIONE"] != DBNull.Value)
                    infoDoc.inConservazione = dataRow["IN_CONSERVAZIONE"].ToString();

            if (dataRow.Table.Columns.Contains("CHA_IN_ARCHIVIO"))
                if (dataRow["CHA_IN_ARCHIVIO"] != DBNull.Value)
                    infoDoc.inArchivio = dataRow["CHA_IN_ARCHIVIO"].ToString();

            if (dataRow.Table.Columns.Contains("ID_TIPO_ATTO"))
                infoDoc.idTipoAtto = dataRow["ID_TIPO_ATTO"] != DBNull.Value ? dataRow["ID_TIPO_ATTO"].ToString() : "";

            if (dataRow.Table.Columns.Contains("DESC_TIPO_ATTO") && dataRow["DESC_TIPO_ATTO"] != DBNull.Value)
                infoDoc.tipoAtto = dataRow["DESC_TIPO_ATTO"].ToString();

            if (dataRow.Table.Columns.Contains("isRimovibile"))
                infoDoc.isRimovibile = dataRow["isRimovibile"] != DBNull.Value ? dataRow["isRimovibile"].ToString() : "";
            
            if (dataRow["ID_DOCUMENTO_PRINCIPALE"] != DBNull.Value)
                infoDoc.allegato = (Convert.ToInt32(dataRow["ID_DOCUMENTO_PRINCIPALE"]) > 0);

            if (dataRow.Table.Columns.Contains("CHA_FIRMATO"))
                if (dataRow["CHA_FIRMATO"] != DBNull.Value)
                    infoDoc.cha_firmato = dataRow["CHA_FIRMATO"].ToString();

            //MODIFICA DEL 20/05/2009
            if (dataRow.Table.Columns.Contains("CONTATORE"))
                infoDoc.contatore = dataRow["CONTATORE"].ToString();
            //FINE MODIIFCA DEL 20/05/2009

            //Protocollo titolario
            if (dataRow.Table.Columns.Contains("PROT_TIT"))
                infoDoc.protocolloTitolario = dataRow["PROT_TIT"].ToString();

            if (oggettoCUstom != null
                && oggettoCUstom.Length > 0
                && !string.IsNullOrEmpty(nomeDocumento)
                && !string.IsNullOrEmpty(idAmministrazione)
                && oggettoCustomVisibile)
            {
                int i = 26;
                foreach (DocsPaVO.ProfilazioneDinamica.OggettoCustom oggetto in oggettoCUstom)
                {
                    DocsPaVO.documento.InfoDocumento.CampoProfiloInfoDocumento campoProfilo = new DocsPaVO.documento.InfoDocumento.CampoProfiloInfoDocumento();
                    campoProfilo.NomeCampo = oggetto.DESCRIZIONE;
                    campoProfilo.ValoreCampo = dataRow[i].ToString();
                    infoDoc.CampiProfilati.Add(campoProfilo);
                    i++;
                }
            }

            // Aggiunta nota ultima nota visibile a tutti
            infoDoc.ultimaNota = GetUltimaNotaVisibileTuttiDocumento(infoDoc.idProfile);

            #region Conversion Invalid Character
            
            infoDoc = (DocsPaVO.documento.InfoDocumento)DocsPaUtils.Functions.Functions.XML_Serialization_Deserialization_By_Encode(
                infoDoc, typeof(DocsPaVO.documento.InfoDocumento), null, System.Text.Encoding.UTF8);

            #endregion

            return infoDoc;
        }

        private string GetCodiceRegistro(string idRegistro)
        {
            logger.Debug("getDescrizioneRegistro");
            string codice;
            if (!(idRegistro != null && !idRegistro.Equals("")))
                return null;
            if (registri.ContainsKey(idRegistro))
                codice = (string)registri[idRegistro];
            else
            {
                DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_DPAElRegistri");
                q.setParam("param1", "VAR_CODICE");
                q.setParam("param2", "SYSTEM_ID=" + idRegistro);
                string queryString = q.getSQL();
                ExecuteScalar(out codice, queryString);
                registri.Add(idRegistro, codice);
            }
            // TODO: DocsPa_V15_Utils.Logger.log("fine getDescrizioneRegistro", logLevelTime);
            return codice;
        }

        private DocsPaVO.documento.InfoDocumento GetProtoData(DataSet dataSet, DataRow dataRow, DocsPaVO.documento.InfoDocumento infoDoc, bool corr)
        {
            logger.Debug("getProtoData");
            if (infoDoc == null || !(infoDoc.tipoProto.Equals("A") || infoDoc.tipoProto.Equals("P") || infoDoc.tipoProto.Equals("I")))
                return infoDoc;

            if (dataRow["NUM_PROTO"] != null && !dataRow["NUM_PROTO"].ToString().Equals(""))
            {
                infoDoc.numProt = dataRow["NUM_PROTO"].ToString();
                infoDoc.dataApertura = dataRow["DTA_PROTO"].ToString().Trim();
                infoDoc.segnatura = dataRow["VAR_SEGNATURA"].ToString();
            }
            if (corr)
            {
                //modifica momentanea in attesa di chiarimenti che però risolve il problema
                try
                {
                    List<String> mitt = new List<string>(), dest = new List<string>();
                    infoDoc.mittDest = GetCorrispondenti(dataRow["SYSTEM_ID"].ToString(), dataSet, dataRow["CHA_TIPO_PROTO"].ToString(), out mitt, out dest);
                    infoDoc.Mittenti = mitt;
                    infoDoc.Destinatari = dest;

                    infoDoc.mittDoc = GetCorrMittente(dataRow["SYSTEM_ID"].ToString(), dataSet, dataRow["CHA_TIPO_PROTO"].ToString());
                }
                catch (Exception porking)
                {
                    logger.Error("il corrispondente non esiste. - errore in Docspaws.documenti.getprotodata - errore: " + porking.Message);
                }
            }

            if (dataRow["DTA_ANNULLA"] != null && dataRow["DTA_ANNULLA"].ToString() != "")
                infoDoc.dataAnnullamento = dataRow["DTA_ANNULLA"].ToString();

            return infoDoc;
        }

        private string GetCorrMittente(string idProfile, DataSet dataSet, string tipoProto)
        {
            logger.Debug("GetCorrMittente");
            string mittDoc = "";
            string queryString = "ID_PROFILE='" + idProfile + "'";
            logger.Debug(queryString);
            foreach (DataRow dataRow in dataSet.Tables["CORRISPONDENTI"].Select(queryString))
            {
                if (dataRow["CHA_TIPO_MITT_DEST"].Equals("M"))
                {
                    mittDoc = dataRow["VAR_DESC_CORR"].ToString();
                }
            }
            // TODO: DocsPa_V15_Utils.Logger.log("Fine getCorrispondenti - idProfile=" + idProfile, logLevelTime);
            return mittDoc;
        }

        private ArrayList GetCorrispondenti(string idProfile, DataSet dataSet, string tipoProto, out List<String> mittenti, out List<String> destinatari)
        {
            // Liste dei mittenti, destinatari e destinatari in copia
            List<String> mittList = new List<string>(), destList = new List<string>();

            logger.Debug("getCorrispondenti");
            ArrayList mittDest = new ArrayList();
            string queryString = "ID_PROFILE='" + idProfile + "'";
            logger.Debug(queryString);
            foreach (DataRow dataRow in dataSet.Tables["CORRISPONDENTI"].Select(queryString))
            {
                switch (tipoProto)
                {
                    case "A":
                        if (dataRow["CHA_TIPO_MITT_DEST"].Equals("M") || dataRow["CHA_TIPO_MITT_DEST"].Equals("MD"))
                        {
                            mittDest.Add(dataRow["VAR_DESC_CORR"].ToString());
                            mittList.Add(dataRow["VAR_DESC_CORR"].ToString());
                        }
                        break;

                    case "P":
                        if (dataRow["CHA_TIPO_MITT_DEST"].Equals("D"))
                        {
                            string proto_dest = GetProtoDest(idProfile, dataRow["SYSTEM_ID"].ToString());
                            if (string.IsNullOrEmpty(proto_dest))
                            {
                                mittDest.Add(dataRow["VAR_DESC_CORR"].ToString());
                                destList.Add(dataRow["VAR_DESC_CORR"].ToString());
                            }
                            else
                            {
                                mittDest.Add("(*) " + dataRow["VAR_DESC_CORR"].ToString());
                                destList.Add("(*) " + dataRow["VAR_DESC_CORR"].ToString());
                            }
                        }
                        if (dataRow["CHA_TIPO_MITT_DEST"].Equals("L"))
                        {
                            string commandText = string.Empty;
                            if (dbType.ToUpper().Equals("SQL"))
                                commandText = "SELECT " + getUserDB() + ".DEST_IN_LISTA(" + idProfile + ")";
                            else
                                commandText = "SELECT DEST_IN_LISTA(" + idProfile + ") FROM DUAL";
                            string dest = string.Empty;
                            ExecuteScalar(out dest, commandText);
                            if (!dest.Equals(string.Empty))
                            {
                                mittDest.Add(dest);
                                destList.Add(dest);
                            }
                        }
                        if (dataRow["CHA_TIPO_MITT_DEST"].Equals("F"))
                        {
                            string commandText = string.Empty;
                            if (dbType.ToUpper().Equals("SQL"))
                                commandText = "SELECT " + getUserDB() + ".DEST_IN_RF(" + idProfile + ")";
                            else
                                commandText = "SELECT DEST_IN_RF(" + idProfile + ") FROM DUAL";
                            string dest = string.Empty;
                            ExecuteScalar(out dest, commandText);
                            if (!dest.Equals(string.Empty))
                            {
                                mittDest.Add(dest);
                                destList.Add(dest);
                            }
                        }
                        break;

                    case "I":
                        if (dataRow["CHA_TIPO_MITT_DEST"].Equals("D"))
                        {
                            mittDest.Add(dataRow["VAR_DESC_CORR"].ToString());
                            destList.Add(dataRow["VAR_DESC_CORR"].ToString());
                        }
                        break;

                }

            }
            // TODO: DocsPa_V15_Utils.Logger.log("Fine getCorrispondenti - idProfile=" + idProfile, logLevelTime);
            mittenti = mittList;
            destinatari = destList;
            return mittDest;
        }


        /// <summary>
        /// Creazione oggetto ArrayList di oggetti "InfoDocumento"
        /// </summary>
        /// <param name="tableDocumenti">Tabella documenti (tablename="DOCUMENTI")</param>
        /// <param name="appendCorrispondenti">Determina se aggiungere o meno la tabella dei corrispondenti</param>
        /// <returns></returns>
        public ArrayList GetArrayListDocumenti(DataTable tableDocumenti, bool appendCorrispondenti)
        {
            ArrayList listaDoc = new ArrayList();
            AppendiListaDocumenti(listaDoc, tableDocumenti.DataSet, appendCorrispondenti);
            return listaDoc;
        }

        /// <summary>
        /// Reperimento oggetto InfoDocumento NB. per il paramentro idProfile occorre passare il DocNumber
        /// </summary>
        /// <param name="idGruppo"></param>
        /// <param name="idPeople"></param>
        /// <param name="idProfile"></param>
        /// <param name="corr"></param>
        /// <returns></returns>
        public DocsPaVO.documento.InfoDocumento GetInfoDocumento(string idGruppo, string idPeople, string idProfile, bool corr)
        {
            logger.Info("BEGIN");
            logger.Debug("START : DocsPaDB > Query_DocsPAWS > Documenti > GetInfoDocumento");

            string dbType = System.Configuration.ConfigurationManager.AppSettings["DBType"];
            string chaCestino = string.Empty;

            if (string.IsNullOrEmpty(idProfile))
                return null;

            DocsPaUtils.Query queryDef = null;

            /*   if (!string.IsNullOrEmpty(idGruppo) && !string.IsNullOrEmpty(idPeople))
               {
                   queryDef = DocsPaUtils.InitQuery.getInstance().getQuery("S_GET_INFO_DOCUMENTO");
                   queryDef.setParam("dbUser", getUserDB());
               }
               else
               {*/
            queryDef = DocsPaUtils.InitQuery.getInstance().getQuery("S_GET_INFO_DOCUMENTO_NO_SECURITY");
            // }
            queryDef.setParam("dbUser", getUserDB());
            queryDef.setParam("dtaAnnulla", Functions.ToChar("A.DTA_ANNULLA", false));
            queryDef.setParam("creationDate", Functions.ToChar("A.CREATION_DATE", false));
            queryDef.setParam("dtaProto", Functions.ToChar("A.DTA_PROTO", false));
            queryDef.setParam("idProfile", idProfile);
            queryDef.setParam("idPeople", idPeople);
            queryDef.setParam("idGroup", idGruppo);

            string queryString = queryDef.getSQL();
            logger.Debug(queryString);

            ArrayList listaDoc = new ArrayList();
            logger.Debug("CALL : AppendiListaDocumenti");
            listaDoc = AppendiListaDocumenti(listaDoc, queryString, corr, null);

            logger.Debug("END : DocsPaDB > Query_DocsPAWS > Documenti > GetInfoDocumento");

            logger.Info("END");

            if (listaDoc.Count > 0)
                return (DocsPaVO.documento.InfoDocumento)listaDoc[0];
            else
                return null;
        }

        private bool predisposti(DocsPaVO.filtri.FiltroRicerca[][] objQueryList)
        {
            bool rtn = false;
            for (int i = 0; i < objQueryList.Length; i++)
                for (int j = 0; j < objQueryList[i].Length; j++)
                {
                    DocsPaVO.filtri.FiltroRicerca f = objQueryList[i][j];
                    if (f.argomento.Equals("PREDISPOSTO") && f.valore.ToUpper().Equals("TRUE"))
                        rtn = true;

                }
            return rtn;
        }

        public ArrayList AppendListaDocProtocollati(string idGruppo, string idPeople, ArrayList listaDoc, DocsPaVO.filtri.FiltroRicerca[][] objQueryList)
        {
            logger.Debug("appendListaDocProtocollati");
            string query;
            string queryFrom = "";
            bool daProto = false;
            //string queryWhere = " A.CHA_TIPO_PROTO IN('A', 'P', 'I') ";
            string queryOrd = "A.ID_REGISTRO, A.NUM_PROTO DESC";
            if (predisposti(objQueryList))
            {
                queryOrd = "A.SYSTEM_ID DESC";
                daProto = true;
            }
            string queryWhere = " AND ";
            queryWhere += GetQueryCondProtocollo(idGruppo, idPeople, objQueryList, ref queryFrom, ref queryOrd, daProto);
            query = GetQueryProtocollo(idGruppo, idPeople, objQueryList, queryWhere, queryFrom, queryOrd);
            string numRighe = CercaTopNDocumenti(objQueryList);//per ricerca Top N Documenti
            listaDoc = AppendiListaDocumenti(listaDoc, query, true, numRighe);
            // TODO: DocsPa_V15_Utils.Logger.log("fine appendListaDocProtocollati", logLevelTime);
            return listaDoc;
        }


        /// <summary>
        /// ricerca protocollo attraverso i parametri di ingresso
        /// </summary>
        /// <param name="numProto"></param>
        /// <param name="anno"></param>
        /// <param name="codReg"></param>
        /// <param name="idAmm"></param>
        /// <returns></returns>
        public DocsPaVO.documento.SchedaDocumento ricercaProto(string numProto, string anno, string idReg, DocsPaVO.utente.InfoUtente infoutente)
        {

            IDataReader dr = null;
            try
            {
                DocsPaVO.documento.SchedaDocumento schedaDocumento = null;
                DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_ID_PROFILE");
                string firstParam = "NUM_PROTO=" + numProto + " AND NUM_ANNO_PROTO=" + anno + " AND ID_REGISTRO=" + idReg;
                q.setParam("param1", firstParam);
                string queryString = q.getSQL();
                logger.Debug(queryString);
                dr = ExecuteReader(queryString);
                string idProfile = "";
                string docNumber = "";
                if (dr.FieldCount > 0)
                    while (dr.Read())
                    {
                        idProfile = dr.GetValue(0).ToString();
                        docNumber = "";
                    }
                if (dr != null)
                {
                    dr.Close();
                    dr.Dispose();
                }
                return schedaDocumento = GetDettaglio(infoutente, idProfile, docNumber, true);

            }
            finally
            {
                if (dr != null)
                {
                    dr.Close();
                    dr.Dispose();
                }
            }
        }

        /// <summary>
        /// ricerca protocollo tramite segnatura
        /// </summary>
        /// <param name="segnatura"></param>
        /// <param name="infoutente"></param>
        /// <returns></returns>
        public DocsPaVO.documento.SchedaDocumento ricercaProto(string segnatura, DocsPaVO.utente.InfoUtente infoutente)
        {
            IDataReader dr = null;
            try
            {
                DocsPaVO.documento.SchedaDocumento schedaDocumento = null;
                DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_ID_PROFILE");
                string firstParam = "UPPER(VAR_SEGNATURA)='" + segnatura.ToUpper() + "'";
                q.setParam("param1", firstParam);
                string queryString = q.getSQL();
                logger.Debug(queryString);
                dr = ExecuteReader(queryString);
                string idProfile = "";
                string docNumber = "";
                if (dr.FieldCount > 0)
                    while (dr.Read())
                    {
                        idProfile = dr.GetValue(0).ToString();
                        docNumber = "";
                    }
                if (dr != null)
                {
                    dr.Close();
                    dr.Dispose();
                }
                return schedaDocumento = GetDettaglio(infoutente, idProfile, docNumber, true);
            }
            finally
            {
                if (dr != null)
                {
                    dr.Close();
                    dr.Dispose();
                }
            }
        }

        #region paginazione AppendiListaDocProtocollati

        #endregion AppendiListaDocProtocollati

        private string CercaTopNDocumenti(DocsPaVO.filtri.FiltroRicerca[][] objQueryList)
        {
            /* 
            * se viene trovato questo filtro 
            * Si esegue la Top per un numero 
            * di elementi pari al valore 
            * del filtro stesso 
            */
            for (int i = 0; i < objQueryList.Length; i++)
            {
                for (int j = 0; j < objQueryList[i].Length; j++)
                {
                    DocsPaVO.filtri.FiltroRicerca f = objQueryList[i][j];
                    if (f.argomento.Equals("VISUALIZZA_TOP_N_DOCUMENTI"))
                        return f.valore;
                }
            }
            return null;
        }



        #endregion

        #region Oggettario




        public bool UpdateOggettario(string idAmministrazione, DocsPaVO.documento.Oggetto oggetto)
        {
            bool result = false;
            try
            {
                DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("U_DPAOggettario2");
                q.setParam("param1", oggetto.descrizione.ToUpper().Replace("'", "''"));
                q.setParam("param2", idAmministrazione);
                //ABBATANGELI GIANLUIGI
                if (!string.IsNullOrEmpty(oggetto.systemId))
                    q.setParam("param3", " AND SYSTEM_ID = " + oggetto.systemId);
                else
                    q.setParam("param3", " ");
                string queryString = q.getSQL();
                logger.Debug(queryString);
                ExecuteNonQuery(queryString);
                result = true;
            }
            catch (Exception e)
            {
                logger.Error(e.Message);
                //	CloseConnection();
                logger.Error("Errore nella gestione dei documenti (Query - UpdateOggettario)", e);
                throw new Exception("F_System");
                result = false;
            }
            logger.Debug("END : DocsPaDB > Query_DocsPAWS > Documenti.cs > UpdateOggettario");
            return result;
        }

        public DocsPaVO.documento.Oggetto InsertOggettario(string idAmministrazione, DocsPaVO.documento.Oggetto oggetto, DocsPaVO.utente.Registro registro, ref string errMsg)
        {

            logger.Debug("START : DocsPaDB > Query_DocsPAWS > Documenti.cs > InsertOggettario");
            string id_registro;
            string id_amministrazione;
            if (registro != null && registro.systemId != null)
            {
                id_registro = registro.systemId;
            }
            else
            {
                id_registro = "null";
            }
            id_amministrazione = idAmministrazione;
            logger.Debug("CALL : CheckOggetto");
            string numOggetti = CheckOggetto(oggetto, registro, id_amministrazione);
            if (!numOggetti.Equals("0"))
            {
                logger.Debug("Oggetto già presente");
                errMsg = "Oggetto già presente";
                return null;
            }
            try
            {
                DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("I_DPAOggettario");
                q.setParam("param1", DocsPaDbManagement.Functions.Functions.GetSystemIdColName() + " ID_REGISTRO, ID_AMM, VAR_DESC_OGGETTO, CHA_OCCASIONALE, VAR_COD_OGGETTO");
                q.setParam("param2", DocsPaDbManagement.Functions.Functions.GetSystemIdNextVal("DPA_OGGETTARIO") +
                    id_registro + ", " + id_amministrazione + ", '" + oggetto.descrizione.Replace("'", "''") + "', '0', '" + oggetto.codOggetto.Replace("'", "''") + "'");
                string queryString = q.getSQL();
                logger.Debug(queryString);
                string res;
                InsertLocked(out res, queryString, "DPA_OGGETTARIO");
                oggetto.systemId = res;

                logger.Debug("Inserito nuovo oggetto. SYSTEM_ID = " + res);
                //	CloseConnection();
            }
            catch (Exception e)
            {
                logger.Error(e.Message);
                //	CloseConnection();
                logger.Error("Errore nella gestione dei documenti (Query - InsertOggettario)", e);
                throw new Exception("F_System");
            }
            logger.Debug("END : DocsPaDB > Query_DocsPAWS > Documenti.cs > InsertOggettario");
            return oggetto;
        }

        public string CheckOggetto(DocsPaVO.documento.Oggetto oggetto, DocsPaVO.utente.Registro registro, string id_amministrazione)
        {
            //si verifica se l'oggetto è già presente
            string id_registro;

            if (registro != null)
            {
                id_registro = registro.systemId;
            }
            else
            {
                id_registro = null;
            }

            string selectString;
            //se esiste faccio anche la ricerca per codice oggetto e non solo per descrizione!!!
            if (oggetto.codOggetto != null && !oggetto.codOggetto.Equals(""))
            {
                selectString = "(upper(VAR_DESC_OGGETTO)='" + oggetto.descrizione.ToUpper().Replace("'", "''") + "' OR upper(VAR_COD_OGGETTO)='" + oggetto.codOggetto.ToUpper().Replace("'", "''") + "')";
            }
            else
            {
                selectString = "upper(VAR_DESC_OGGETTO)='" + oggetto.descrizione.ToUpper().Replace("'", "''") + "'";
            }

            if (id_registro != null)
            {
                selectString += " AND (ID_REGISTRO =" + id_registro + " OR ID_REGISTRO IS NULL) ";
            }
            if (id_amministrazione != null && !id_amministrazione.Equals(""))
            {
                selectString += " AND ID_AMM =" + id_amministrazione;
            }
            selectString += " AND CHA_OCCASIONALE='0'";
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_DPAOggettario");
            q.setParam("param1", "COUNT(*)");
            q.setParam("param2", selectString);
            string queryString = q.getSQL();
            string numPar;
            logger.Debug(queryString);
            ExecuteScalar(out numPar, queryString);
            return numPar;
        }


        //public DocsPaVO.documento.Oggetto ModificaOggetto(string id_amministrazione, DocsPaVO.documento.Oggetto oggettoOld, DocsPaVO.documento.Oggetto oggettoNew,ref string errMsg)
        //{ 


        //   try 
        //   {
        //       //controllo univocità codice
        //      string numOggetti = CheckOggetto(oggettoNew, registro, id_amministrazione);
        //      if (!numOggetti.Equals("0"))
        //      {
        //         logger.Debug("Errore nella gestione dei documenti (Query - InsertOggettario)");
        //         errMsg = "Oggetto già presente";
        //         return null;
        //      }
        //      //Update ad occasionale
        //      UpdateOggettario(id_amministrazione, oggettoOld);

        //   }

        //   catch { }

        //}

        #endregion

        #region ParoleManager
        public bool GetParole(string idAmministrazione, ref System.Collections.ArrayList listaParole)
        {
            bool result = true;
            System.Collections.ArrayList lista = new System.Collections.ArrayList();
            try
            {
                string idAmm = idAmministrazione;
                DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_DPAParole2");
                q.setParam("param1", "ID_AMM=" + idAmm);
                string queryString = q.getSQL();
                DataSet dataSet;
                ExecuteQuery(out dataSet, "PAROLE", queryString);
                foreach (DataRow parolaRow in dataSet.Tables["PAROLE"].Rows)
                {
                    DocsPaVO.documento.ParolaChiave parola = new DocsPaVO.documento.ParolaChiave();
                    parola.systemId = parolaRow["SYSTEM_ID"].ToString();
                    parola.descrizione = parolaRow["VAR_DESC_PAROLA"].ToString();
                    parola.idAmministrazione = idAmm;
                    lista.Add(parola);
                }
                listaParole = lista;
                dataSet.Dispose();
                CloseConnection();
            }
            catch (Exception)
            {
                CloseConnection();
                //throw e;
                result = false;
            }
            return result;
        }

        public void InsertParolaChiave(string idAmministrazione, ref DocsPaVO.documento.ParolaChiave parolaC)
        {
            //OpenConnection();	
            string id_amministrazione;
            id_amministrazione = idAmministrazione;
            string numPar;
            CheckParolaChiave(parolaC, id_amministrazione, out numPar);
            if (!numPar.Equals("0"))
            {
                logger.Debug("Errore nella gestione dei documenti (Query - InsertParolaChiave)");
                throw new Exception("Parola chiave già presente");
            }
            try
            {
                string parametro1 = "";
                DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("I_DPAParole");

                if (!string.IsNullOrEmpty(parolaC.idRegistro))
                {
                    q.setParam("param1", DocsPaDbManagement.Functions.Functions.GetSystemIdColName() + " ID_AMM, VAR_DESC_PAROLA , ID_REGISTRO ");
                    q.setParam("param2", DocsPaDbManagement.Functions.Functions.GetSystemIdNextVal("DPA_PAROLE") +
                    id_amministrazione + ", '" + parolaC.descrizione.Replace("'", "''") + "'" + ", '" + parolaC.idRegistro + "'");
                }
                else
                {
                    q.setParam("param1", DocsPaDbManagement.Functions.Functions.GetSystemIdColName() + " ID_AMM, VAR_DESC_PAROLA ");
                    q.setParam("param2", DocsPaDbManagement.Functions.Functions.GetSystemIdNextVal("DPA_PAROLE") +
                    id_amministrazione + ", '" + parolaC.descrizione.Replace("'", "''") + "'");
                }

                string queryString = q.getSQL();
                logger.Debug(queryString);
                string res;
                InsertLocked(out res, queryString, "DPA_PAROLE");
                parolaC.systemId = res;
                //	CloseConnection();
            }
            catch (Exception e)
            {
                logger.Error(e.Message);
                //	CloseConnection();
                logger.Error("Errore nella gestione dei documenti (Query - InsertParolaChiave)", e);
                throw new Exception("F_System");
            }
        }

        public void CheckParolaChiave(DocsPaVO.documento.ParolaChiave parolaC, string id_amministrazione, out string numPar)
        {
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_DPAParole");
            string selectString = "upper(VAR_DESC_PAROLA)='" + DocsPaUtils.Functions.Functions.ReplaceApexes(parolaC.descrizione).ToUpper() + "'";
            if (id_amministrazione != null && !id_amministrazione.Equals(""))
            {
                selectString += " AND ID_AMM =" + id_amministrazione;
            }
            q.setParam("param1", selectString);
            string queryString = q.getSQL();
            ExecuteScalar(out numPar, queryString);
        }

        #endregion

        #region ProtocolloUscitaManager
        // TODO: Questo metodo non serve e può essere eliminato
        public ArrayList GetIdCorrispondentiGruppo(string idCorrispondente)
        {
            ArrayList idCorrispondenti = new ArrayList();
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_DPACorrGruppo");
            q.setParam("param1", "ID_GRUPPO=" + idCorrispondente);
            string queryString = q.getSQL();
            logger.Debug(queryString);
            DataSet dataSet;
            ExecuteQuery(out dataSet, queryString);
            foreach (DataRow row in dataSet.Tables[0].Rows)
            {
                idCorrispondenti.Add(row[0].ToString());
            }
            dataSet.Dispose();
            if (idCorrispondenti.Count == 0)
            {
                idCorrispondenti.Add(idCorrispondente);
            }
            return idCorrispondenti;
        }

        public void GetDatiCorrispondente(ref DocsPaVO.StatoInvio.StatoInvio statoInvio)
        {
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_DPACorrGlobali");
            q.setParam("param1", "VAR_EMAIL, VAR_SMTP, NUM_PORTA_SMTP, CHA_PA, VAR_CODICE_AMM, VAR_CODICE_AOO ");
            q.setParam("param2", "SYSTEM_ID=" + statoInvio.idCorrispondente);
            string queryString = q.getSQL();
            logger.Debug(queryString);
            DataSet dataSet;
            ExecuteQuery(out dataSet, queryString);
            foreach (DataRow row in dataSet.Tables[0].Rows)
            {
                if (row[0] != null)
                {
                    statoInvio.indirizzo = row[0].ToString();
                }
                if (row[1] != null)
                {
                    statoInvio.serverSMTP = row[1].ToString();
                }
                if (row[2] != null)
                {
                    statoInvio.portaSMTP = row[2].ToString();
                }
                if (row[3] != null)
                {
                    statoInvio.interop = row[3].ToString();
                }
                if (row[4] != null)
                {
                    statoInvio.codiceAmm = row[4].ToString();
                }
                if (row[5] != null)
                {
                    statoInvio.codiceAOO = row[5].ToString();
                }
            }
            dataSet.Dispose();
        }

        public void GetDatiCorrispondenteInterno(ref DocsPaVO.StatoInvio.StatoInvio statoInvio)
        {
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_DPACorrGlobali");
            q.setParam("param1", "VAR_EMAIL, VAR_SMTP, NUM_PORTA_SMTP, CHA_PA, VAR_CODICE_AMM, VAR_CODICE_AOO ");
            q.setParam("param2", "SYSTEM_ID=" + statoInvio.idCorrispondente);
            string queryString = q.getSQL();
            logger.Debug(queryString);
            DataSet dataSet;
            ExecuteQuery(out dataSet, queryString);
            foreach (DataRow row in dataSet.Tables[0].Rows)
            {
                if (statoInvio.interop != null && !statoInvio.interop.Equals("1"))//se la Uo non è interoperante allora prendiamo la email del ruolo
                {
                    if (row[0] != null)
                    {
                        statoInvio.indirizzo = row[0].ToString();
                    }
                }
                if (row[1] != null)
                {
                    statoInvio.serverSMTP = row[1].ToString();
                }
                if (row[2] != null)
                {
                    statoInvio.portaSMTP = row[2].ToString();
                }
                //				if(row[3] != null)
                //				{
                //					statoInvio.interop = row[3].ToString();
                //				}
            }
            dataSet.Dispose();
        }

        public DocsPaVO.StatoInvio.StatoInvio GetDettagliCorrispondente(DocsPaVO.StatoInvio.StatoInvio statoInvio)
        {
            if (statoInvio.tipoCanale.Equals("M"))
            {
                return statoInvio;
            }
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_DPADettGlob4");
            q.setParam("param1", "ID_CORR_GLOBALI= " + statoInvio.idCorrispondente);
            string queryString = q.getSQL();
            logger.Debug(queryString);
            DataSet dataSet;
            ExecuteQuery(out dataSet, queryString);
            foreach (DataRow row in dataSet.Tables[0].Rows)
            {
                if (statoInvio.tipoCanale.Equals("F"))
                {
                    statoInvio.indirizzo = row[0].ToString();
                }
                else
                {
                    statoInvio.indirizzo = row[1].ToString();
                    statoInvio.cap = row[2].ToString();
                    statoInvio.provincia = row[3].ToString();
                    statoInvio.citta = row[4].ToString();
                }
            }
            dataSet.Dispose();
            return statoInvio;
        }

        public void GetDatiCanale(ref DocsPaVO.StatoInvio.StatoInvio statoInvio)
        {
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_J_DPA_CANALI_REG__CANALI__DOCUMENTTYPES");
            q.setParam("param1", "B.ID_REGISTRO=" + statoInvio.idRegistro + " AND B.ID_DOCUMENTTYPE = " + statoInvio.typeId);
            string queryString = q.getSQL();
            logger.Debug(queryString);
            DataSet dataSet;
            ExecuteQuery(out dataSet, queryString);
            foreach (DataRow row in dataSet.Tables[0].Rows)
            {
                if (row[0] != null)
                {
                    statoInvio.serverSMTP = row[0].ToString();
                    if (row[1] != null)
                    {
                        statoInvio.portaSMTP = row[1].ToString();
                    }
                    else
                    {
                        statoInvio.portaSMTP = "";
                    }
                }
                statoInvio.tipoCanale = row[2].ToString();
                statoInvio.idCanale = row[3].ToString();
            }
            dataSet.Dispose();
        }

        public void GetDocumentType(ref DocsPaVO.StatoInvio.StatoInvio statoInvio)
        {
            //PFREM -> questa funzione dovrebbe settare statoInvio.typeId all'id del documentType
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_DPATCanaleCorr");
            q.setParam("param1", "CHA_PREFERITO='1' AND ID_CORR_GLOBALE=" + statoInvio.idCorrispondente);
            string queryString = q.getSQL();
            logger.Debug(queryString);
            try
            {
                string res;
                ExecuteScalar(out res, queryString);
                statoInvio.typeId = res.Trim();
            }
            catch (Exception) { }
        }

        public Hashtable InsertStatoInvio(DocsPaVO.utente.Corrispondente corrispondente,
                                            string idDocArrivoPar,
                                            string idRegistro,
                                            string idProfile,
            string mail)
        {
            return InsertStatoInvio(corrispondente, idDocArrivoPar, idRegistro, idProfile, false, mail);
        }

        public Hashtable InsertStatoInvio(DocsPaVO.utente.Corrispondente corrispondente,
                                            string idDocArrivoPar,
                                            string idRegistro,
                                            string idProfile,
                                            bool mailWasNotSend, string mail)
        {
            // HashTable contenente, per chiave, l'id del corrisondente,
            // per valore l'id del record inserito nella tabella "DPA_STATO_INVIO",
            // se l'inserimento è andato a buon fine
            Hashtable retValue = new Hashtable();

            try
            {
                string queryString;
                DocsPaUtils.Query q;
                IDataReader dr = null;
                q = DocsPaUtils.InitQuery.getInstance().getQuery("S_DPA_STATO_INVIO");
                q.setParam("param1", idProfile);
                q.setParam("param2", corrispondente.systemId);
                queryString = q.getSQL();
                logger.Debug(queryString);
                string res = "";
                //			ExecuteScalar(out res, queryString);

                dr = ExecuteReader(queryString);

                if (dr == null)
                {
                    throw new Exception();
                }

                if (dr != null && dr.FieldCount > 0)
                {
                    while (dr.Read())
                    {
                        res = dr.GetValue(0).ToString();
                    }
                }

                if (dr != null && (!dr.IsClosed))
                    dr.Close();

                DocsPaUtils.Query query = null;

                //SE IL RECORD NON è GIà PRESENTE NELLA DPA_STATO_INVIO
                //LO INSERISCO, AGGIORNA LA DATA DI SPEDIZIONE

                // Ho bisogno di un update più potente. Lembo.

                ArrayList idCorrispondenti = GetIdCorrispondentiGruppo(corrispondente.systemId);
                DocsPaVO.StatoInvio.StatoInvio statoInvio;
                for (int i = 0; i < idCorrispondenti.Count; i++)
                {
                    statoInvio = new DocsPaVO.StatoInvio.StatoInvio();
                    statoInvio.idDocArrivoPar = idDocArrivoPar;
                    statoInvio.idRegistro = idRegistro;
                    statoInvio.idProfile = idProfile;
                    statoInvio.idCorrispondente = (string)idCorrispondenti[i];
                    //modifica per gestione - tipo spedizione  -- ATTENZIONE SE SI TRATTA DI UN GRUPPO NON HA MOLTO SENSO UN TIPO SPEDIZIONE VALIDO PER TUTTI I MEMBRI DEL GRUPPO
                    //statoInvio = getDocumentType(db, statoInvio);
                    DataSet ds = new DataSet();
                    // Modifica per corrispondenti occasionali
                    if (corrispondente.tipoCorrispondente == "O")
                    {
                        statoInvio.typeId = getIdMezzoSpedizioneByDesc("MAIL");
                        statoInvio.indirizzo = corrispondente.email;
                        statoInvio.interop = "1";
                    }

                    if (corrispondente.tipoIE == "E") // corrispondente ESTERNO
                    {
                        if (corrispondente.canalePref == null)
                        {
                            GetDocumentType(ref statoInvio);
                            if (statoInvio.typeId != null && statoInvio.typeId != "")
                            {
                                query = DocsPaUtils.InitQuery.getInstance().getQuery("S_DocumentTypes5");
                                query.setParam("param1", statoInvio.typeId);
                                string query5 = query.getSQL();
                                logger.Debug(query5);
                                ExecuteQuery(ds, "TIPO_CAN", query5);
                                string cha_tipo_canale = ds.Tables["TIPO_CAN"].Rows[0]["CHA_TIPO_CANALE"].ToString();
                                statoInvio.tipoCanale = cha_tipo_canale;
                            }
                        }
                        else
                        {
                            statoInvio.typeId = corrispondente.canalePref.systemId;
                        }
                    }
                    if (corrispondente.tipoIE == "I") // corrispondente INTERNO
                    {
                        //Se il corrispondente è interno si presuppone che il canale preferenziale sia mail
                        ds = new DataSet();
                        query = DocsPaUtils.InitQuery.getInstance().getQuery("S_DocumentTypes2");
                        string queryStr = query.getSQL();
                        logger.Debug(queryStr);
                        ExecuteQuery(ds, "ID_MAIL", queryStr);
                        string mailId = ds.Tables["ID_MAIL"].Rows[0]["SYSTEM_ID"].ToString();
                        statoInvio.typeId = mailId;

                        DocsPaVO.utente.UnitaOrganizzativa uo = null;
                        ArrayList ruoliUtente = new ArrayList();
                        DocsPaDB.Query_DocsPAWS.Utenti ut = new DocsPaDB.Query_DocsPAWS.Utenti();
                        if (corrispondente.GetType() == typeof(DocsPaVO.utente.Utente)) // caso UTENTE
                        {
                            ruoliUtente = ut.GetListaRuoliUtente(((DocsPaVO.utente.Utente)corrispondente).idPeople);
                            if (ruoliUtente != null && ruoliUtente.Count > 0)
                            {
                                uo = ((DocsPaVO.utente.Ruolo)ruoliUtente[0]).uo;	// per utenti prendiamo la UO del RUOLO PREFERITO dell'utente	
                            }
                        }
                        if (corrispondente.GetType() == typeof(DocsPaVO.utente.Ruolo)) // caso RUOLO
                        {
                            if (((DocsPaVO.utente.Ruolo)corrispondente).uo != null)
                            {
                                // Si prendono codiceAmm, codiceAOO e canale preferenziale della Uo 
                                //a cui appartiene il ruolo destinatario del protocollo 
                                uo = ((DocsPaVO.utente.Ruolo)corrispondente).uo;
                            }
                        }
                        if (corrispondente.GetType() == typeof(DocsPaVO.utente.UnitaOrganizzativa)) // caso UO
                        {
                            // Si prendono codiceAmm, codiceAOO e canale preferenziale della Uo 
                            // destinataria del protocollo
                            uo = (DocsPaVO.utente.UnitaOrganizzativa)corrispondente;
                        }
                        if (uo != null && uo.codiceAOO != null && uo.codiceAmm != null)
                        {
                            statoInvio.codiceAOO = uo.codiceAOO;
                            statoInvio.codiceAmm = uo.codiceAmm;
                        }

                        if (uo != null && uo.interoperante == true)
                        {
                            statoInvio.interop = "1";
                            statoInvio.indirizzo = uo.email;
                        }
                    }

                    if (statoInvio.typeId != null && !statoInvio.typeId.Equals(""))
                    {
                        if (corrispondente.tipoCorrispondente != "O")
                        {
                            if (corrispondente.tipoIE == "E")
                            {
                                GetDatiCorrispondente(ref statoInvio);
                            }
                            else
                            {
                                GetDatiCorrispondenteInterno(ref statoInvio);
                            }
                        }

                        statoInvio = GetDettagliCorrispondente(statoInvio);

                    }

                    string dataSpedizione = DocsPaDbManagement.Functions.Functions.GetDate();
                    //se occ nessuna spedizione.
                    //if (corrispondente.tipoCorrispondente == "O")
                    //    dataSpedizione = "Null";

                    // Se la mail al destinatario non è stata precedentemente spedita,
                    // viene impostata a Null la data di spedizione
                    //se gira il batch dell'interoperabilità è necessario che la data di spedizione sia sempre settata:
                    string interopNoMail = "";
                    if (System.Configuration.ConfigurationManager.AppSettings["INTEROP_INT_NO_MAIL"] != null &&
                        System.Configuration.ConfigurationManager.AppSettings["INTEROP_INT_NO_MAIL"].ToString() != "0")
                        interopNoMail = "1";
                    else
                        interopNoMail = "0";
                    //todo: da rivedere.
                    if (interopNoMail.Equals("1") && corrispondente.tipoIE != null && corrispondente.tipoIE.Equals("I"))
                        mailWasNotSend = false; //sempre ok;

                    //if (mailWasNotSend)
                    //    dataSpedizione = "Null";
                    if (res.Equals("0"))
                    {
                        // Pec 4 Modifica Maschera Caratteri
                        // Inserimento della maschera caratteri con tutta la 
                        q = DocsPaUtils.InitQuery.getInstance().getQuery("I_DPAStatoinvio");
                        q.setParam("param1", DocsPaDbManagement.Functions.Functions.GetSystemIdColName() +
                            "ID_CORR_GLOBALE, ID_PROFILE, ID_DOC_ARRIVO_PAR, ID_CANALE, " +
                            "VAR_INDIRIZZO, VAR_CAP, VAR_CITTA, CHA_INTEROP, VAR_PROVINCIA, " +
                            "ID_DOCUMENTTYPE, VAR_SERVER_SMTP, NUM_PORTA_SMTP, VAR_CODICE_AOO, VAR_CODICE_AMM,DTA_SPEDIZIONE, STATUS_C_MASK");

                        string param2 = DocsPaDbManagement.Functions.Functions.GetSystemIdNextVal("DPA_STATO_INVIO") +
                            statoInvio.idCorrispondente + "," + statoInvio.idProfile + ",'" +
                            statoInvio.idDocArrivoPar + "','" + statoInvio.idCanale + "','" +
                            mail.Replace("'", "''") + "','" + statoInvio.cap + "','" +
                            //statoInvio.indirizzo.Replace("'", "''") + "','" + statoInvio.cap + "','" +
                            statoInvio.citta.Replace("'", "''") + "','" + statoInvio.interop + "','" +
                            statoInvio.provincia.Replace("'", "''") + "','" + statoInvio.typeId + "','" +
                            statoInvio.serverSMTP.Replace("'", "''") + "','" + statoInvio.portaSMTP + "','" +
                            statoInvio.codiceAOO + "','" + statoInvio.codiceAmm + "', " +
                            dataSpedizione;
                        // PEC4: modifica interoperabilità interna
                        if (!string.IsNullOrEmpty(interopNoMail) && interopNoMail.Equals("1") && corrispondente.tipoIE != null && corrispondente.tipoIE.Equals("I"))
                        {
                            param2 += ", 'ANNAANN'";
                        }
                        else
                        {
                            if (dbType == "ORACLE")
                            {
                                param2 += ", GETSTATOINVIOMASKBYTYPEID(" + statoInvio.typeId + ")";
                            }
                            else if (dbType == "SQL")
                            {
                                param2 += ", " + DocsPaDbManagement.Functions.Functions.GetDbUserSession() + ".GETSTATOINVIOMASKBYTYPEID(" + statoInvio.typeId + ")";// da gestire per sqlserver
                            }
                        }
                        q.setParam("param2", param2);

                        //q.setParam("param2", DocsPaDbManagement.Functions.Functions.GetSystemIdNextVal("DPA_STATO_INVIO") +
                        //    statoInvio.idCorrispondente + "," + statoInvio.idProfile + ",'" +
                        //    statoInvio.idDocArrivoPar + "','" + statoInvio.idCanale + "','" +
                        //    mail.Replace("'", "''") + "','" + statoInvio.cap + "','" +
                        //    //statoInvio.indirizzo.Replace("'", "''") + "','" + statoInvio.cap + "','" +
                        //    statoInvio.citta.Replace("'", "''") + "','" + statoInvio.interop + "','" +
                        //    statoInvio.provincia.Replace("'", "''") + "','" + statoInvio.typeId + "','" +
                        //    statoInvio.serverSMTP.Replace("'", "''") + "','" + statoInvio.portaSMTP + "','" +
                        //    statoInvio.codiceAOO + "','" + statoInvio.codiceAmm + "', " +
                        //    dataSpedizione + ", GETSTATOINVIOMASKBYTYPEID("+statoInvio.typeId+")");

                        queryString = q.getSQL();
                        logger.Debug(queryString);
                        string result;
                        if ((corrispondente.tipoCorrispondente == "O" && !mailWasNotSend) || (corrispondente.tipoIE.Equals("E") && !mailWasNotSend) || (corrispondente.tipoIE.Equals("I") && !mailWasNotSend))
                        {
                            InsertLocked(out result, queryString, "DPA_STATO_INVIO");
                            if (!retValue.ContainsKey(corrispondente.systemId))
                                retValue.Add(corrispondente.systemId, result);
                        }
                        else
                            retValue.Add(corrispondente.systemId, 0);
                    }

                    else
                    {
                        // Aggiornamento della data di spedizione del documento
                        //query = DocsPaUtils.InitQuery.getInstance().getQuery("U_UPDATE_DATA_SPEDIZIONE_DOCUMENTO");

                        //if (mailWasNotSend)
                        //    query.setParam("dtaSpedizione", "DTA_SPEDIZIONE");
                        //else
                        //{
                        //    query.setParam("dtaSpedizione", DocsPaDbManagement.Functions.Functions.GetDate());
                        //    query.setParam("mail", "'" + (!string.IsNullOrEmpty(mail) ? mail : string.Empty) + "'");
                        //}
                        //query.setParam("dbUser", DocsPaDbManagement.Functions.Functions.GetDbUserSession());
                        //query.setParam("idProfile", idProfile);
                        //query.setParam("idDestinatario", corrispondente.systemId);

                        query = DocsPaUtils.InitQuery.getInstance().getQuery("U_DPASTATOINVIO");
                        string updateValues = "";
                        updateValues += "ID_CANALE = '" + statoInvio.idCanale + "',";
                        updateValues += "VAR_INDIRIZZO = '" + mail.Replace("'", "''") + "',";
                        updateValues += "VAR_CAP = '" + statoInvio.cap + "',";
                        updateValues += "VAR_CITTA= '" + statoInvio.citta.Replace("'", "''") + "',";
                        updateValues += "CHA_INTEROP = '" + statoInvio.interop + "',";
                        updateValues += "VAR_PROVINCIA = '" + statoInvio.provincia.Replace("'", "''") + "',";
                        updateValues += "ID_DOCUMENTTYPE = '" + statoInvio.typeId + "',";
                        updateValues += "VAR_SERVER_SMTP = '" + statoInvio.serverSMTP.Replace("'", "''") + "',";
                        updateValues += "NUM_PORTA_SMTP = '" + statoInvio.portaSMTP + "',";
                        updateValues += "VAR_CODICE_AOO = '" + statoInvio.codiceAOO + "',";
                        updateValues += "VAR_CODICE_AMM = '" + statoInvio.codiceAmm + "',";
                        updateValues += "DTA_SPEDIZIONE = " + dataSpedizione + ",";
                        updateValues += "VAR_MOTIVO_ANNULLA = NULL, CHA_ANNULLATO = NULL, VAR_PROTO_DEST = NULL, DTA_PROTO_DEST = NULL,";
                        updateValues += "STATUS_C_MASK = ";
                        // PEC4: modifica interoperabilità interna
                        if (!string.IsNullOrEmpty(interopNoMail) && interopNoMail.Equals("1") && corrispondente.tipoIE != null && corrispondente.tipoIE.Equals("I"))
                        {
                            updateValues += " 'ANNAANN'";
                        }
                        else
                        {
                            if (dbType == "ORACLE")
                            {
                                updateValues += " GETSTATOINVIOMASKBYTYPEID(" + statoInvio.typeId + ")";
                            }
                            else if (dbType == "SQL")
                            {
                                updateValues += " " + DocsPaDbManagement.Functions.Functions.GetDbUserSession() + ".GETSTATOINVIOMASKBYTYPEID(" + statoInvio.typeId + ")";// da gestire per sqlserver
                            }
                        }
                        query.setParam("param1", updateValues);
                        query.setParam("param2", "ID_PROFILE = " + idProfile + " AND ID_CORR_GLOBALE = " + corrispondente.systemId);



                        string commandText = query.getSQL();
                        logger.Debug(commandText);

                        using (DBProvider dbProvider = new DBProvider())
                        {
                            int rowsAffected;
                            dbProvider.ExecuteNonQuery(commandText, out rowsAffected);
                        }
                    }
                }
            }
            catch
            {
                logger.Debug("Errore durante l'inserimento nella DPA_STATO_INVIO");
                retValue = null;
            }
            finally
            {
                CloseConnection();
            }

            return retValue;
        }

        /// <summary>
        /// Verifica se il documento corrente è stato già spedito
        /// </summary>
        /// <param name="idProfile"></param>
        /// <returns></returns>
        public bool verificaSpedizione(string idProfile)
        {
            bool result = false;
            try
            {
                string queryString;
                DocsPaUtils.Query q;
                IDataReader dr = null;
                string res = "";

                q = DocsPaUtils.InitQuery.getInstance().getQuery("S_DPA_STATO_INVIO2");
                q.setParam("param1", idProfile);

                queryString = q.getSQL();
                logger.Debug(queryString);
                dr = ExecuteReader(queryString);

                if (dr == null)
                    throw new Exception();

                if (dr != null && dr.FieldCount > 0)
                {
                    while (dr.Read())
                    {
                        res = dr.GetValue(0).ToString();
                    }
                }

                if (dr != null && (!dr.IsClosed))
                    dr.Close();

                if (res != null && res != "" && !res.Equals("0")) //se il doc è stato spedito RITORNO = TRUE
                {
                    result = true;
                }
            }
            catch (Exception ex)
            {
                logger.Error("Errore durante la verifica dell'utente amministratore", ex);
                result = false;
            }
            finally
            {
                CloseConnection();
            }
            return result;
        }

        public ArrayList GetCorrispondentiGruppo(DocsPaVO.utente.Corrispondente corrispondente)
        {
            ArrayList corrispondenti = new ArrayList();
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_J_DPA_CORR_GLOBALI__DOC_ARRIVO_PAR__CORR_GRUPPO");
            q.setParam("param1", "C.ID_GRUPPO=" + corrispondente.systemId);
            string queryString = q.getSQL();
            logger.Debug(queryString);
            DataSet dataSet;
            ExecuteQuery(out dataSet, queryString);
            foreach (DataRow row in dataSet.Tables[0].Rows)
            {
                DocsPaVO.utente.Corrispondente corr = new DocsPaVO.utente.Corrispondente();
                corr = GetCorrispondente(row);
                if (corr == null)
                {
                    return null;
                }
                else
                {
                    corrispondenti.Add(corr);
                }
            }
            dataSet.Dispose();
            if (corrispondenti.Count == 0)
            {
                corrispondenti.Add(corrispondente);
            }
            return corrispondenti;
        }

        public ArrayList AggiornamentoConferma(string idProfile, DocsPaVO.utente.Corrispondente corr)
        {

            if (idProfile == null)
            {
                return null;
            }
            ArrayList lista = new ArrayList();
            try
            {
                string lastParam = "";
                if (!corr.GetType().Equals(typeof(DocsPaVO.utente.Corrispondente)))
                    lastParam += " AND ID_CORR_GLOBALE=" + corr.systemId;
                else
                    lastParam += GetCondIdGruppo(corr.systemId);
                DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_DPAStatoinvio");
                q.setParam("param1", "SYSTEM_ID,VAR_CODICE_AOO,VAR_CODICE_AMM,VAR_PROTO_DEST," +
                    DocsPaDbManagement.Functions.Functions.ToChar("DTA_SPEDIZIONE", false) + " AS DTA_SPEDIZIONE, " +
                    DocsPaDbManagement.Functions.Functions.ToChar("DTA_PROTO_DEST", false) + " AS DTA_PROTO_DEST, " +
                    "ID_CORR_GLOBALE, ID_DOCUMENTTYPE,CHA_ANNULLATO,VAR_MOTIVO_ANNULLA,VAR_PROVVEDIMENTO," +
                    (base.DBType.ToUpper() == "ORACLE" ? " (decode(substr(var_indirizzo, 1, 5), 'http:', 1, 0)) As IsSimpInterop" :
                    " (Case When substring(var_indirizzo, 1, 5) = 'http:' Then 1 Else 0 End) As IsSimpInterop"));



                q.setParam("param2", "ID_PROFILE=" + idProfile + lastParam);
                string queryString = q.getSQL();
                DataSet dataSet;
                logger.Debug(queryString);

                using (DBProvider dbProvider = new DBProvider())
                {
                    dbProvider.ExecuteQuery(out dataSet, "STATO_INVIO", queryString);
                }

                foreach (DataRow dr in dataSet.Tables["STATO_INVIO"].Rows)
                {
                    DocsPaVO.documento.ProtocolloDestinatario pd = new DocsPaVO.documento.ProtocolloDestinatario();
                    pd.systemId = dr["SYSTEM_ID"].ToString();
                    pd.codiceAOO = dr["VAR_CODICE_AOO"].ToString();
                    pd.codiceAmm = dr["VAR_CODICE_AMM"].ToString();
                    //luluciani ri-inserita dta_spedizione, mancava !?!
                    pd.dta_spedizione = dr["DTA_SPEDIZIONE"].ToString();
                    //18/09/2006
                    pd.protocolloDestinatario = dr["VAR_PROTO_DEST"].ToString();
                    pd.dataProtocolloDestinatario = dr["DTA_PROTO_DEST"].ToString();
                    if (dr["ID_CORR_GLOBALE"].ToString().Equals(corr.systemId))
                        pd.descrizioneCorr = corr.descrizione;
                    else
                    {
                        Utenti ut = new Utenti();
                        pd.descrizioneCorr = ut.GetCorrispondente((dr["ID_CORR_GLOBALE"].ToString()), false).descrizione;
                    }

                    if (dr["IsSimpInterop"].ToString() == "1")
                        pd.descrizioneCorr += String.Format(" ({0})", corr.codiceRubrica);

                    string idDocumentType;
                    if (dr["ID_DOCUMENTTYPE"] != null)
                    {
                        idDocumentType = dr["ID_DOCUMENTTYPE"].ToString();
                        pd.documentType = GetTipoDocumento(idDocumentType);
                    }
                    pd.annullato = dr["CHA_ANNULLATO"].ToString();
                    pd.motivo = dr["VAR_MOTIVO_ANNULLA"].ToString();
                    pd.provvedimento = dr["VAR_PROVVEDIMENTO"].ToString();
                    lista.Add(pd);
                }
                //CloseConnection();
                //db.closeConnection();
            }
            catch (Exception e)
            {
                logger.Error(e.Message);
                //CloseConnection();
                logger.Error("Errore nella gestione dei documenti (Query - AggiornamentoConferma)", e);
                throw new Exception("F_System");
            }
            return lista;
        }


        public string GetTipoDocumento(string idDocumentType)
        {
            string descr;
            string ret;
            if (idDocumentType == null || idDocumentType.Equals(""))
                return "";
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_DocumentTypes");
            q.setParam("param1", "SYSTEM_ID = " + idDocumentType);
            string queryString = q.getSQL();
            logger.Debug(queryString);
            try
            {
                ExecuteScalar(out descr, queryString);
                if (descr != null)
                {
                    ExecuteScalar(out ret, queryString);
                    return ret;
                }
                else
                    return "";
            }
            catch (Exception)
            {
                return "";
            }
        }

        public string GetLabelTipoDocumento(string typeId)
        {
            string descr;
            string ret;
            if (typeId == null || typeId.Equals(""))
                return "";
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_DocumentTypes7");
            q.setParam("param1", typeId);
            string queryString = q.getSQL();
            logger.Debug(queryString);
            try
            {
                ExecuteScalar(out descr, queryString);
                if (descr != null)
                {
                    ExecuteScalar(out ret, queryString);
                    return ret;
                }
                else
                    return "";
            }
            catch (Exception)
            {
                return "";
            }
        }

        public string GetDescrizioneTipoDocumento(string typeId)
        {
            string descr;
            string ret;
            if (typeId == null || typeId.Equals(""))
                return "";
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_DocumentTypes8");
            q.setParam("param1", typeId);
            string queryString = q.getSQL();
            logger.Debug(queryString);
            try
            {
                ExecuteScalar(out descr, queryString);
                if (descr != null)
                {
                    ExecuteScalar(out ret, queryString);
                    return ret;
                }
                else
                    return "";
            }
            catch (Exception)
            {
                return "";
            }
        }

        public void GetDatiSpedizione(ref DocsPaVO.utente.Corrispondente cor, string idProfile)
        {
            ArrayList lista = new ArrayList();
            string idDocumentType = null;
            string queryString = "";
            try
            {
                DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_DPAStatoinvio");
                q.setParam("param1", "ID_DOCUMENTTYPE");
                string lastParam = "";

                if (!cor.GetType().Equals(typeof(DocsPaVO.utente.Corrispondente)))
                    lastParam += " AND ID_CORR_GLOBALE=" + cor.systemId;
                else
                    lastParam += GetCondIdGruppo(cor.systemId);
                q.setParam("param2", "ID_PROFILE=" + idProfile + lastParam);
                queryString = q.getSQL();
                logger.Debug(queryString);
                DataSet dataSet;
                ExecuteQuery(out dataSet, "STATO_INVIO", queryString);
                foreach (DataRow dr in dataSet.Tables["STATO_INVIO"].Rows)
                {
                    idDocumentType = dr["ID_DOCUMENTTYPE"].ToString();
                }
                //CloseConnection();
                //db.closeConnection();
            }
            catch (Exception e)
            {
                logger.Error(e.Message);
                //CloseConnection();
                logger.Error("Errore nella gestione dei documenti (Query - GetDatiSpedizione)", e);
                throw new Exception("F_System");
            }
            if (idDocumentType != null && !idDocumentType.Equals(""))
            {
                cor.canalePref = new DocsPaVO.utente.Canale();
                cor.canalePref.systemId = idDocumentType;
            }
        }

        private string GetCondIdGruppo(string idCorrispondente)
        {
            ArrayList lista = GetIdCorrispondentiGruppo(idCorrispondente);
            if (lista.Count == 0)
                return "";
            string inStr = " AND ID_CORR_GLOBALE IN (" + (string)lista[0];
            for (int i = 1; i < lista.Count; i++)
                inStr += "," + (string)lista[i];
            inStr += ")";
            return inStr;
        }

        public void UpdateTipoSpedizione(DocsPaVO.utente.Corrispondente corr, string idProfile)
        {
            if (corr != null && corr.canalePref != null)
            {
                string typeId;
                if (corr.canalePref.systemId == null)
                {
                    typeId = "NULL";
                }
                else
                {
                    typeId = corr.canalePref.systemId;
                }
                DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("U_DPAStatoinvio");
                q.setParam("param1", "ID_DOCUMENTTYPE = " + typeId);
                q.setParam("param2", "ID_PROFILE=" + idProfile + " AND ID_CORR_GLOBALE = " + corr.systemId);
                string queryString = q.getSQL();
                logger.Debug(queryString);
                ExecuteNonQuery(queryString);
            }
        }

        public void UpdateDtaSpedizione(string idCorrispondente, string idProfile, string sysForUpdate)
        {
            //DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("U_DPAStatoinvio");
            //q.setParam("param1", "DTA_SPEDIZIONE = NULL");
            //if (sysForUpdate.Equals(String.Empty))
            //{
            //    q.setParam("param2", "ID_PROFILE=" + idProfile);
            //}
            //else
            //{
            //    q.setParam("param2", "ID_PROFILE=" + idProfile + " AND ID_CORR_GLOBALE NOT IN (" + idCorrispondente + ")");
            //}
            //string queryString = q.getSQL();
            //logger.Debug(queryString);
            //ExecuteNonQuery(queryString);

            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("U_DPAStatoinvio");
            q.setParam("param1", "DTA_SPEDIZIONE =" + DocsPaDbManagement.Functions.Functions.GetDate());
            q.setParam("param2", "ID_PROFILE=" + idProfile + " AND ID_CORR_GLOBALE  = " + idCorrispondente);
            string queryString = q.getSQL();
            logger.Debug(queryString);
            ExecuteNonQuery(queryString);
        }


        public ArrayList GetIdCorrInStatoInvio(string idProfile)
        {
            logger.Debug("get IdCorr in DPA_STATO_INVIO");
            ArrayList listaIdCorr = new ArrayList();
            //ricerca dei Server Posta
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_DPAStatoinvio");
            q.setParam("param1", "ID_CORR_GLOBALE ");
            q.setParam("param2", "ID_PROFILE=" + idProfile);
            string queryString = q.getSQL();
            logger.Debug(queryString);
            DataSet dataSet;

            using (DBProvider dbProvider = new DBProvider())
            {
                dbProvider.ExecuteQuery(out dataSet, queryString);
            }
            foreach (DataRow row in dataSet.Tables[0].Rows)
            {
                listaIdCorr.Add(row[0].ToString());
            }
            dataSet.Dispose();
            return listaIdCorr;
        }

        #endregion

        #region ProtoManager
        #region InsertOgg OLD
        /// <summary>
        /// inserisce l'oggetto di un documento sulla tabella dpa_oggettario utilizzando il metodo InsertLocked
        /// non utilizzare in metodi che sono sotto transazione. 
        /// </summary>
        /// <param name="idAmministrazione"></param>
        /// <param name="schedaDoc"></param>
        public void InsertOggLocked(string idAmministrazione, ref DocsPaVO.documento.SchedaDocumento schedaDoc)
        {
            logger.Debug("addOggetto");
            // verifico se è un oggetto occasionale
            string idOggetto = schedaDoc.oggetto.systemId;
            logger.Debug("idOggetto = " + idOggetto);
            string idRegistro = "null";
            if (schedaDoc.registro != null)
            {
                idRegistro = schedaDoc.registro.systemId;
            }
            if (!(idOggetto != null && !idOggetto.Equals("")))
            {
                // inserisco nella tabella DPA_OGGETTARIO
                DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("I_DPAOggettario");
                q.setParam("param1", DocsPaDbManagement.Functions.Functions.GetSystemIdColName() + " ID_REGISTRO, ID_AMM, VAR_DESC_OGGETTO, CHA_OCCASIONALE");
                q.setParam("param2", DocsPaDbManagement.Functions.Functions.GetSystemIdNextVal("DPA_OGGETTARIO") +
                    idRegistro + ", " + idAmministrazione + ", '" + schedaDoc.oggetto.descrizione.Replace("'", "''") + "', '1'");
                string queryString = q.getSQL();
                logger.Debug(queryString);
                string res;
                BeginTransaction();
                if (InsertLocked(out res, queryString, "DPA_OGGETTARIO") == false)
                {
                    RollbackTransaction();
                    throw new Exception("Errore Inserimento Oggetto");

                }
                schedaDoc.oggetto.systemId = res;
                CommitTransaction();
            }
        }
        #endregion
        public void InsertOgg(string idAmministrazione, ref DocsPaVO.documento.SchedaDocumento schedaDoc)
        {
            logger.Info("BEGIN");
            logger.Debug("addOggetto");

            string dbType = System.Configuration.ConfigurationManager.AppSettings["DBType"];
            // verifico se è un oggetto occasionale
            string idOggetto = schedaDoc.oggetto.systemId;
            logger.Debug("idOggetto = " + idOggetto);
            string idRegistro = "null";
            if (schedaDoc.registro != null)
            {
                idRegistro = schedaDoc.registro.systemId;
            }
            if (!(idOggetto != null && !idOggetto.Equals("")))
            {
                // inserisco nella tabella DPA_OGGETTARIO
                DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("I_DPAOggettario");
                q.setParam("param1", DocsPaDbManagement.Functions.Functions.GetSystemIdColName() + " ID_REGISTRO, ID_AMM, VAR_DESC_OGGETTO, CHA_OCCASIONALE");

                if (String.IsNullOrEmpty(idAmministrazione) && !String.IsNullOrEmpty(schedaDoc.registro.idAmministrazione))
                {
                    idAmministrazione = schedaDoc.registro.idAmministrazione;
                    
                }

                q.setParam("param2", DocsPaDbManagement.Functions.Functions.GetSystemIdNextVal("DPA_OGGETTARIO") +
                idRegistro + ", " + idAmministrazione + ", '" + schedaDoc.oggetto.descrizione.Replace("'", "''").Replace("°", Functions.convertDegre()) + "', '1'");

                string queryString = q.getSQL();
                logger.Debug(queryString);
                string res;

                if (!ExecuteNonQuery(queryString))
                {
                    throw new Exception("Errore Inserimento Oggetto");
                }
                else
                {
                    queryString = DocsPaDbManagement.Functions.Functions.GetQueryLastSystemIdInserted();

                    logger.Debug(queryString);
                    if (!ExecuteScalar(out res, queryString))
                        throw new Exception("Errore Inserimento Oggetto");
                }

                schedaDoc.oggetto.systemId = res;
            }
            logger.Info("END");
        }

        public System.Collections.ArrayList GetListaOggetti(DocsPaVO.documento.QueryOggetto objQueryOggetto)
        {

            // Creo l'oggetto che dovrà essere popolato dalla funzione
            System.Collections.ArrayList listaObj = new System.Collections.ArrayList();

            //MODIFICATA IL 13 MARZO 2008 PER INSERIMENTO ID_REGISTRO E CODICE REGISTRO COME PROPRIETà DELL'OGGETTO 
            //DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_DPA_OGGETTARIO_EL_REGISTRI");
            // Query sul database
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_DPAOggettario2");
            q.setParam("param1", "A.SYSTEM_ID, A.VAR_DESC_OGGETTO, A.ID_REGISTRO, A.VAR_COD_OGGETTO, B.VAR_CODICE");

            String lastParam = " A.CHA_OCCASIONALE='0' ";
            //condizioni sul registro		
            for (int i = 0; i < objQueryOggetto.idRegistri.Count; i++)
            {
                if (i == 0)
                {
                    lastParam = lastParam + " AND (";
                }

                DocsPaVO.utente.Registro reg = new DocsPaVO.utente.Registro();
                if (objQueryOggetto.idRegistri[i].ToString() != string.Empty)
                {
                    lastParam = lastParam + "A.ID_REGISTRO='" + objQueryOggetto.idRegistri[i].ToString() + "' ";
                    reg = GetRegistro(objQueryOggetto.idRegistri[i].ToString());
                }
                else
                {
                    //se nella lista objQueryOggetto.idRegistri ha valore = ""
                    // ==> ho selezionato la condizione TUTTI sul combo del registro.
                    lastParam = lastParam + " A.ID_REGISTRO IS NULL ";
                }

                if (i < objQueryOggetto.idRegistri.Count - 1)
                {
                    lastParam = lastParam + " OR ";
                }
                else
                {
                    if (reg != null && reg.chaRF != null && reg.chaRF != "1")
                        lastParam = lastParam + " OR A.ID_REGISTRO IS NULL) ";
                    else
                        lastParam = lastParam + " ) ";
                }
            }
            lastParam = lastParam + " AND A.ID_AMM='" + objQueryOggetto.idAmministrazione + "'";
            if (objQueryOggetto.queryDescrizione != null && !objQueryOggetto.queryDescrizione.Equals(""))
            {
                lastParam = lastParam + " AND UPPER(A.VAR_DESC_OGGETTO) LIKE '%" + objQueryOggetto.queryDescrizione.Replace("'", "''").ToUpper() + "%'";
            }
            //Aggiunta nella query della ricerca per codice oggetto
            if (objQueryOggetto.queryCodice != null && !objQueryOggetto.queryCodice.Equals(""))
            {
                //Nel caso del pop-up oggettario è necessario eseguire la ricerca con il like per questo
                //viene utilizzata la sequenza di caratteri speciali $@ .
                if (objQueryOggetto.queryCodice.StartsWith("$@"))
                {
                    //rimuovo i caratteri speciali prima di comporre la query!!!
                    objQueryOggetto.queryCodice = objQueryOggetto.queryCodice.Remove(0, 2);
                    lastParam = lastParam + " AND UPPER(A.VAR_COD_OGGETTO) LIKE '%" + objQueryOggetto.queryCodice.Replace("'", "''").ToUpper() + "%'";
                }
                else
                {
                    lastParam = lastParam + " AND UPPER(A.VAR_COD_OGGETTO)=UPPER('" + objQueryOggetto.queryCodice.Replace("'", "''").ToUpper() + "')";
                }
            }
            lastParam += " ORDER BY A.ID_REGISTRO, A.VAR_DESC_OGGETTO";
            q.setParam("param2", lastParam);
            string queryString = q.getSQL();
            logger.Debug("Ricerca oggetti: " + queryString);
            System.Data.DataSet dataSet;
            ExecuteQuery(out dataSet, "DPA_OGGETTARIO", queryString);
            //creazione della lista oggetti
            foreach (System.Data.DataRow dataRow in dataSet.Tables["DPA_OGGETTARIO"].Rows)
            {
                Utenti utente = new Utenti();

                //listaObj.Add(new DocsPaVO.documento.Oggetto(dataRow["SYSTEM_ID"].ToString(), dataRow["VAR_DESC_OGGETTO"].ToString(), dataRow["VAR_CODICE"].ToString(), dataRow["ID_REGISTRO"].ToString()));
                listaObj.Add(new DocsPaVO.documento.Oggetto(dataRow["SYSTEM_ID"].ToString(), dataRow["VAR_DESC_OGGETTO"].ToString(), dataRow["VAR_CODICE"].ToString(), dataRow["ID_REGISTRO"].ToString(), dataRow["VAR_COD_OGGETTO"].ToString()));
            }
            dataSet.Dispose();

            return listaObj;
        }

        public bool annullaPredisposizione(DocsPaVO.utente.InfoUtente infoUt, SchedaDocumento schedaDoc)
        {
            bool result = false;
            int affectedRows;
            try
            {
                DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("U_PROFILE_ANNULLA_PRED");
                q.setParam("param1", schedaDoc.docNumber);
                string queryString = q.getSQL();
                logger.Debug(queryString);
                ExecuteNonQuery(queryString, out affectedRows);
                if (affectedRows == 1)
                {
                    q = DocsPaUtils.InitQuery.getInstance().getQuery("D_DPA_DOC_ARRIVO_PAR");
                    q.setParam("param1", "SELECT SYSTEM_ID FROM PROFILE WHERE DOCNUMBER =" + schedaDoc.docNumber);
                    queryString = q.getSQL();
                    logger.Debug(queryString);
                    ExecuteNonQuery(queryString, out affectedRows);
                    if (affectedRows > 0)
                    {
                        result = true;

                    }
                }

                // se il documento è stato ricevuto via mail, controllo se è stato mantenuto pendente.
                // Se si, estendo la visibilità.
                // Per gestione pendenti tramite PEC
                if (result && (schedaDoc.typeId == "MAIL" || schedaDoc.typeId == "INTEROPERABILITA"))
                {
                    Documentale documentale = new Documentale();
                    bool isDocPECPendente = false;
                    using (Interoperabilita dbI = new Interoperabilita())
                    {
                        isDocPECPendente = dbI.getDocPECPendente(schedaDoc.systemId);
                    }

                    if (isDocPECPendente && schedaDoc.privato == "0")
                    {
                        // Logging dell'azione di estenzione della visibilità
                        logger.DebugFormat("Interoperabilità PEC 4 - Documento non privato, dopo annullamento si procede all'estensione dei diritti per il documento {0}", schedaDoc.systemId);

                        // Recupero dei ruoli che vedono il documento
                        //15-09-2016 INC000000821327: commentato ed estendo la visibilta ai superiori solamente del ruolo protocollatore(se diverso da IS)
                        //List<String> roles = GetRuoliConVisibilitaSuDocumento(schedaDoc.systemId);
                        string role = GetRuoloProtocollatore(schedaDoc, null);
                        if(!string.IsNullOrEmpty(role))
                        {
                            documentale.ExtendVisibilityByQuery(
                                infoUt.idAmministrazione,
                                role,
                                schedaDoc.systemId);
                        }

                        q = DocsPaUtils.InitQuery.getInstance().getQuery("U_PROFILE");
                        q.setParam("param1", "CHA_PRIVATO = '0'");
                        q.setParam("param2", "SYSTEM_ID = " + schedaDoc.systemId);
                        queryString = q.getSQL();
                        logger.Debug(queryString);
                        ExecuteNonQuery(queryString);
                    }
                }
            }
            catch (Exception e)
            {
                result = false;
            }
            return result;
        }

        public bool AnnullaProtocollo(string idPeople, string idProfile, ref DocsPaVO.documento.ProtocolloAnnullato protAnn)
        {
            bool result = true;
            try
            {
                //OpenConnection();
                //costruzione della query
                string noteAnnulla = protAnn.autorizzazione;
                DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("U_Profile");
                //controllo per il registro di emergenza
                string dataAnnullamento;
                dataAnnullamento = protAnn.dataAnnullamento;
                string firstParam = firstParam = "ID_ANNULLATORE='" + idPeople + "', DTA_ANNULLA=" + DocsPaDbManagement.Functions.Functions.ToDate(dataAnnullamento);
                if (dataAnnullamento == null || dataAnnullamento.Equals(""))
                {
                    dataAnnullamento = DocsPaDbManagement.Functions.Functions.GetDate();
                    firstParam = "ID_ANNULLATORE='" + idPeople + "', DTA_ANNULLA=" + dataAnnullamento;
                }

                if (noteAnnulla != null)
                {
                    firstParam = firstParam + ", VAR_AUT_ANNULLA='" + noteAnnulla.Replace("'", "''") + "'";
                }
                q.setParam("param1", firstParam);
                q.setParam("param2", "SYSTEM_ID=" + idProfile);
                string queryString = q.getSQL();
                logger.Debug(queryString);
                ExecuteNonQuery(queryString);
                logger.Debug("Estrazione data annullamento");
                q = DocsPaUtils.InitQuery.getInstance().getQuery("S_Profile0");
                q.setParam("param1", DocsPaDbManagement.Functions.Functions.ToChar("DTA_ANNULLA", true));
                q.setParam("param2", "SYSTEM_ID=" + idProfile);
                string queryData = q.getSQL();
                logger.Debug(queryData);
                string dataString;
                ExecuteScalar(out dataString, queryData);
                logger.Debug(dataString);
                protAnn.dataAnnullamento = DocsPaDbManagement.Functions.Functions.ToDbDate(dataString.TrimEnd());


                //CloseConnection();
            }
            catch (Exception)
            {
                //db.closeConnection();
                //CloseConnection();
                //throw e;
                result = false;
            }
            return result;
        }

        public void GetStatoRegistri(out string result, string systemId)
        {
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_DPAElRegistri");
            q.setParam("param1", "CHA_STATO");
            q.setParam("param2", "SYSTEM_ID=" + systemId);
            string queryString = q.getSQL();
            logger.Debug(queryString);

            using (DBProvider dbProvider = new DBProvider())
            {
                dbProvider.ExecuteScalar(out result, queryString);
            }
            
        }

        public void GetNumRegistri(out string res, string systemId, string date)
        {
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_DPAElRegistri");
            q.setParam("param1", "COUNT(*)");
            q.setParam("param2", "SYSTEM_ID = " + systemId + " AND DTA_ULTIMO_PROTO > " + date);
            string queryString = q.getSQL();
            logger.Debug(queryString);

            using (DBProvider dbProvider = new DBProvider())
            {

                dbProvider.ExecuteScalar(out res, queryString);
            }
        }

        /// <summary>
        /// Verifica se l'amministrazione passata come parametro ha la protocollazione interna
        /// </summary>
        /// <param name="idAmm"></param>
        /// <returns></returns>
        public bool IsEnabledProtoInt(string idAmm)
        {
            bool result = false;

            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_DPAAmministra3");
            q.setParam("param1", "CHA_PROTOINT");
            q.setParam("param2", "WHERE SYSTEM_ID = " + idAmm);
            string queryString = q.getSQL();
            logger.Debug(queryString);
            string res = "";
            ExecuteScalar(out res, queryString);

            if (res.Equals("1"))
            {
                result = true;
            }
            return result;
        }

        /// <summary>
        /// Aggiornamento versione
        /// </summary>
        /// <param name="fileRequest"></param>
        public void UpdateVersion(DocsPaVO.documento.FileRequest fileRequest)
        {
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("U_Versions");

            string daInviare = string.Empty;
            if (fileRequest.subVersion == "!")
                daInviare = "1";
            else
                daInviare = "0";

            q.setParam("param1", string.Format("SUBVERSION = '{0}', CHA_DA_INVIARE = '{1}'", fileRequest.subVersion, daInviare));
            q.setParam("param2", string.Format("VERSION_ID = {0}", fileRequest.versionId));

            string queryString = q.getSQL();
            logger.Debug(queryString);
            if (!ExecuteNonQuery(queryString)) throw new Exception();
        }

        public void UpdateVersions(string firstParam, string docNumber)
        {
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("U_Versions");
            q.setParam("param1", firstParam);
            q.setParam("param2", "DOCNUMBER=" + docNumber);
            string queryString = q.getSQL();
            logger.Debug(queryString);

            using (DBProvider dbProvider = new DBProvider())
            {
                if (!dbProvider.ExecuteNonQuery(queryString)) throw new Exception();
            }

            
            //ExecuteNonQuery(queryString);
        }

        public void UpdateRispostaProtocollo(string idParent, string docNumber)
        {
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("U_RispProt");
            q.setParam("param1", idParent);
            q.setParam("param2", docNumber);
            string queryString = q.getSQL();
            logger.Debug(queryString);

            using (DBProvider dbProvider = new DBProvider())
            {
                dbProvider.ExecuteNonQuery(queryString);
            }
            
        }

        /// <summary>
        /// Reperimento oggetto "InfoDocumento" contenente i dati del protocollo mittente
        /// </summary>
        /// <param name="idGruppo"></param>
        /// <param name="idPeople"></param>
        /// <param name="docNumber"></param>
        /// <param name="tipoDocumento"></param>
        /// <returns></returns>
        public DocsPaVO.documento.InfoDocumento GetDocumentoMittente(string idGruppo, string idPeople, string docNumber, string tipoDocumento)
        {
            DocsPaVO.documento.InfoDocumento retValue = null;

            DocsPaUtils.Query queryDef = DocsPaUtils.InitQuery.getInstance().getQuery("S_CATENE_DOC_GET_DOCUMENTO_MITTENTE");
            queryDef.setParam("idGruppo", idGruppo);
            queryDef.setParam("idPeople", idPeople);
            queryDef.setParam("docNumber", docNumber);
            queryDef.setParam("tipoDocumento", tipoDocumento);

            string commandText = queryDef.getSQL();
            logger.Debug(commandText);

            DataSet ds;
            if (ExecuteQuery(out ds, "DOCUMENTI", commandText))
            {
                if (ds.Tables["DOCUMENTI"].Rows.Count == 1)
                {
                    SetTableCorrispondenti(ds);

                    retValue = GetDatiDocumento(ds, ds.Tables["DOCUMENTI"].Rows[0], true);
                }
            }
            else
            {
                throw new ApplicationException("Errore nel reperimento dei dati del documento mittente");
            }

            return retValue;
        }

        public DocsPaVO.documento.SchedaDocumento SetDocTrustees(DocsPaVO.documento.SchedaDocumento schedaDoc, DocsPaVO.utente.Ruolo objRuolo, out DocsPaVO.utente.Ruolo[] ruoliSuperiori, DocsPaVO.utente.InfoUtente delegato)
        {
            ruoliSuperiori = new DocsPaVO.utente.Ruolo[0];

            logger.Debug("setDocTrustees");
            string idProfile = schedaDoc.systemId;
            string idGruppoTrasm = objRuolo.idGruppo;

            UpdateInsertSecurity(idProfile, schedaDoc.idPeople, idGruppoTrasm, false);
            if (delegato != null)
            {
                InsertSecurityDelegato(idProfile, delegato.idPeople, delegato.idGruppo);
            }
            string tipoUt = "";
            if (schedaDoc.protocollo != null)
            {
                #region PROTOCOLLO IN USCITA
                // caso del PROTOCOLLO IN USCITA
                if ((schedaDoc.protocollo.GetType() == typeof(DocsPaVO.documento.ProtocolloUscita)))
                {
                    // verifico la chiave del web config che abilita o meno l'ereditarietà
                    // del doc per il mittente
                    if (System.Configuration.ConfigurationManager.AppSettings["NON_EREDITA_MITTENTE_USCITA"] == null ||
                        System.Configuration.ConfigurationManager.AppSettings["NON_EREDITA_MITTENTE_USCITA"].ToString() != "1")
                    {
                        //Poichè il mittente in un protocollo in uscita non è obbligatorio
                        if (((DocsPaVO.documento.ProtocolloUscita)schedaDoc.protocollo).mittente != null)
                        {
                            DocsPaVO.documento.ProtocolloUscita pu = (DocsPaVO.documento.ProtocolloUscita)schedaDoc.protocollo;
                            //Caso in cui il mittente del protocollo in uscita è una PERSONA
                            if (pu.mittente.GetType().Equals(typeof(DocsPaVO.utente.Utente)))
                            {
                                DocsPaVO.utente.Utente mittente = (DocsPaVO.utente.Utente)pu.mittente;
                                /* Se il mittente del protocollo coincide con l'utente
                                 *  che crea il protocollo allora non inserisco nulla nella SECURITY */
                                if (schedaDoc.idPeople != mittente.idPeople)
                                {
                                    tipoUt = "P";
                                    InsertSecurityMittProtocollo(idProfile, mittente.idPeople, tipoUt, objRuolo.idGruppo);
                                }
                            }
                            //Caso in cui il mittente del protocollo in uscita è un RUOLO
                            else if (pu.mittente.GetType().Equals(typeof(DocsPaVO.utente.Ruolo)))
                            {
                                DocsPaVO.utente.Ruolo mittente = (DocsPaVO.utente.Ruolo)pu.mittente;
                                /* Se il RUOLO mittente del protocollo coincide con il ruolo dell'utente
                                 * che crea il protocollo allora non inserisco nulla nella SECURITY */
                                if (objRuolo.systemId != mittente.systemId)
                                {
                                    tipoUt = "R";
                                    InsertSecurityMittProtocollo(idProfile, mittente.idGruppo, tipoUt, objRuolo.idGruppo);
                                }
                            }
                            else if (pu.mittente.GetType().Equals(typeof(DocsPaVO.utente.UnitaOrganizzativa)))
                            {
                                DocsPaVO.utente.UnitaOrganizzativa mittente = (DocsPaVO.utente.UnitaOrganizzativa)pu.mittente;
                                ArrayList listaRuoli = GetRuoliRiferimento(pu.mittente.systemId, schedaDoc.registro.systemId);
                                if (listaRuoli != null && listaRuoli.Count > 0)
                                {
                                    tipoUt = "R";
                                    for (int i = 0; i < listaRuoli.Count; i++)
                                    {
                                        if (!listaRuoli[i].Equals(objRuolo.idGruppo))
                                        {
                                            InsertSecurityMittProtocollo(idProfile, (string)listaRuoli[i], tipoUt, objRuolo.idGruppo);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                #endregion

                #region PROTOCOLLO INTERNO
                // caso del PROTOCOLLO INTERNO
                else if (schedaDoc.protocollo.GetType() == typeof(DocsPaVO.documento.ProtocolloInterno))
                {
                    // verifico la chiave del web config che abilita o meno l'ereditarietà
                    // del doc per il mittente
                    if (System.Configuration.ConfigurationManager.AppSettings["NON_EREDITA_MITTENTE_USCITA"] == null ||
                        System.Configuration.ConfigurationManager.AppSettings["NON_EREDITA_MITTENTE_USCITA"].ToString() != "1")
                    {
                        DocsPaVO.documento.ProtocolloInterno pi = (DocsPaVO.documento.ProtocolloInterno)schedaDoc.protocollo;
                        //Caso in cui il mittente del protocollo interno è una PERSONA
                        if (pi.mittente.GetType().Equals(typeof(DocsPaVO.utente.Utente)))
                        {
                            DocsPaVO.utente.Utente mittente = (DocsPaVO.utente.Utente)pi.mittente;
                            /* Se il mittente del protocollo coincide con l'utente
                                 *  che crea il protocollo allora non inserisco nulla nella SECURITY */
                            if (schedaDoc.idPeople != mittente.idPeople)
                            {
                                tipoUt = "P";
                                InsertSecurityMittProtocollo(idProfile, mittente.idPeople, tipoUt, objRuolo.idGruppo);
                            }
                        }
                        //Caso in cui il mittente del protocollo interno è un RUOLO
                        else if (pi.mittente.GetType().Equals(typeof(DocsPaVO.utente.Ruolo)))
                        {
                            DocsPaVO.utente.Ruolo mittente = (DocsPaVO.utente.Ruolo)pi.mittente;
                            /* Se il RUOLO mittente del protocollo coincide con il ruolo dell'utente
                                 * che crea il protocollo allora non inserisco nulla nella SECURITY */
                            if (objRuolo.systemId != mittente.systemId)
                            {
                                tipoUt = "R";
                                InsertSecurityMittProtocollo(idProfile, mittente.idGruppo, tipoUt, objRuolo.idGruppo);
                            }
                        }
                        else if (pi.mittente.GetType().Equals(typeof(DocsPaVO.utente.UnitaOrganizzativa)))
                        {
                            DocsPaVO.utente.UnitaOrganizzativa mittente = (DocsPaVO.utente.UnitaOrganizzativa)pi.mittente;
                            ArrayList listaRuoli = GetRuoliRiferimento(pi.mittente.systemId, schedaDoc.registro.systemId);
                            if (listaRuoli != null && listaRuoli.Count > 0)
                            {
                                tipoUt = "R";
                                for (int i = 0; i < listaRuoli.Count; i++)
                                {
                                    if (!listaRuoli[i].Equals(objRuolo.idGruppo))
                                    {
                                        InsertSecurityMittProtocollo(idProfile, (string)listaRuoli[i], tipoUt, objRuolo.idGruppo);
                                    }
                                }
                            }
                        }
                    }
                }
                #endregion
            }
            // i superiori non hanno vista sul documento se è marcato come privato
            if (schedaDoc.privato != null && schedaDoc.privato.Equals("1"))
            {
                return schedaDoc;
            }
            string idRegistro = null;
            if (schedaDoc.registro != null)
            {
                idRegistro = schedaDoc.registro.systemId;
            }

            // Reperimento dei ruoli gerarchicamente superiori
            // cui assegnare i diritti di visibilità sul documento / protocollo creato
            DocsPaDB.Utils.Gerarchia gerarchia = new DocsPaDB.Utils.Gerarchia();
            ArrayList listaRuoliSup = gerarchia.getGerarchiaSup(objRuolo, idRegistro, null, DocsPaVO.trasmissione.TipoOggetto.DOCUMENTO);
            for (int i = 0; i < listaRuoliSup.Count; i++)
            {
                DocsPaVO.utente.Ruolo ruoloSup = (DocsPaVO.utente.Ruolo)listaRuoliSup[i];
                InsertSecurity(idProfile, ruoloSup.idGruppo, idGruppoTrasm);
            }
            ruoliSuperiori = (DocsPaVO.utente.Ruolo[])listaRuoliSup.ToArray(typeof(DocsPaVO.utente.Ruolo));
            schedaDoc.accessRights = "255";

            return schedaDoc;
        }

        #region per Settare la visibilità considerando la transazione

        public DocsPaVO.documento.SchedaDocumento TransactionSetDocTrustees(DocsPaVO.documento.SchedaDocumento schedaDoc, DocsPaVO.utente.Ruolo objRuolo, DocsPaDB.DBProvider dbProvider, out DocsPaVO.utente.Ruolo[] ruoliSuperiori, DocsPaVO.utente.InfoUtente delegato)
        {
            try
            {
                ruoliSuperiori = new DocsPaVO.utente.Ruolo[0];

                logger.Debug("TransactionSetDocTrustees");
                ArrayList listaRuoli = new ArrayList();
                string idProfile = schedaDoc.systemId;
                string idGruppoTrasm = objRuolo.idGruppo;
                //Insert in Security dell'utente proprietario del documento
                //Veronica per gestione documento grigio personale
                bool isPersonale = false;
                if ((schedaDoc.personale != null) && (schedaDoc.personale == "1"))
                {
                    isPersonale = true;
                }
                if (UpdateInsertSecurity(idProfile, schedaDoc.idPeople, idGruppoTrasm, isPersonale))
                {
                    if (delegato != null)
                    {
                        InsertSecurityDelegato(idProfile, delegato.idPeople, delegato.idGruppo);
                    }
                    string tipoUt = "";
                    if (schedaDoc.protocollo != null)
                    {
                        #region PROTOCOLLO IN USCITA
                        // caso del PROTOCOLLO IN USCITA
                        if ((schedaDoc.protocollo.GetType() == typeof(DocsPaVO.documento.ProtocolloUscita)))
                        {
                            // verifico la chiave del web config che abilita o meno l'ereditarietà
                            // del doc per il mittente
                            if (System.Configuration.ConfigurationManager.AppSettings["NON_EREDITA_MITTENTE_USCITA"] == null ||
                                System.Configuration.ConfigurationManager.AppSettings["NON_EREDITA_MITTENTE_USCITA"].ToString() != "1")
                            {
                                //Poichè il mittente in un prototcollo in uscita non è obbligatorio
                                if (((DocsPaVO.documento.ProtocolloUscita)schedaDoc.protocollo).mittente != null)
                                {
                                    DocsPaVO.documento.ProtocolloUscita pu = (DocsPaVO.documento.ProtocolloUscita)schedaDoc.protocollo;
                                    //Caso in cui il mittente del protocollo in uscita è una PERSONA
                                    if (pu.mittente.GetType().Equals(typeof(DocsPaVO.utente.Utente)))
                                    {
                                        DocsPaVO.utente.Utente mittente = (DocsPaVO.utente.Utente)pu.mittente;
                                        /* Se il mittente del protocollo coincide con l'utente
                                         *  che crea il protocollo allora non inserisco nulla nella SECURITY */
                                        //if ((schedaDoc.idPeople != mittente.idPeople) && (schedaDoc.privato != null) && (schedaDoc.privato.Equals("0")))
                                        if (schedaDoc.idPeople != mittente.idPeople)
                                        {
                                            tipoUt = "P";
                                            InsertSecurityMittProtocollo(idProfile, mittente.idPeople, tipoUt, objRuolo.idGruppo);
                                        }
                                        //else return schedaDoc;
                                    }
                                    //Caso in cui il mittente del protocollo in uscita è un RUOLO
                                    else if (pu.mittente.GetType().Equals(typeof(DocsPaVO.utente.Ruolo)))
                                    {
                                        DocsPaVO.utente.Ruolo mittente = (DocsPaVO.utente.Ruolo)pu.mittente;
                                        /* Se il RUOLO mittente del protocollo coincide con il ruolo dell'utente
                                         * che crea il protocollo allora non inserisco nulla nella SECURITY */
                                        //if ((objRuolo.systemId != mittente.systemId) && (schedaDoc.privato != null) && (schedaDoc.privato.Equals("0")))
                                        if (objRuolo.systemId != mittente.systemId)
                                        {
                                            tipoUt = "R";
                                            InsertSecurityMittProtocollo(idProfile, mittente.idGruppo, tipoUt, objRuolo.idGruppo);
                                            listaRuoli.Add(mittente.idGruppo);
                                        }
                                        //else return schedaDoc;
                                    }
                                    else if (pu.mittente.GetType().Equals(typeof(DocsPaVO.utente.UnitaOrganizzativa)))
                                    {
                                        // se il documento è privato permetto la visibilità solo al ruolo, non ai superiori
                                        /*if ((schedaDoc.privato != null) && (schedaDoc.privato.Equals("1")))
                                        {
                                            return schedaDoc;
                                        }
                                        else
                                        {*/
                                        DocsPaVO.utente.UnitaOrganizzativa mittente = (DocsPaVO.utente.UnitaOrganizzativa)pu.mittente;

                                        //OLD 02 feb 2007 - commentato perchè prendeva anche i ruoli di firerimento disabilitati
                                        //quindi la visibilità alla Uo mittente del protocollo viene data in maniera sbagliata.
                                        //Un ruolo disabilitato non deve ereditare nulla.
                                        //ArrayList listaRuoli = GetRuoliRiferimento(pu.mittente.systemId, schedaDoc.registro.systemId);

                                        //ABBATANGELI - 09/03/2020 - Non deve pubblicare a ruolo di riferimento se privato o personale
                                        if ((schedaDoc.privato == null || schedaDoc.privato.Equals("0")) && (schedaDoc.personale == null || schedaDoc.personale.Equals("0")))
                                            listaRuoli = GetListaRuoliAbilitati(pu.mittente.systemId, schedaDoc.registro.systemId);
                                        //
                                        if (listaRuoli != null && listaRuoli.Count > 0)
                                        {
                                            tipoUt = "R";
                                            for (int i = 0; i < listaRuoli.Count; i++)
                                            {
                                                if (!listaRuoli[i].Equals(objRuolo.idGruppo))
                                                {
                                                    InsertSecurityMittProtocollo(idProfile, (string)listaRuoli[i], tipoUt, objRuolo.idGruppo);
                                                    //										if(!listaRuoli.Contains(listaRuoli[i].ToString()))
                                                    //										{
                                                    //											listaRuoli.Add(listaRuoli[i].ToString());
                                                    //										}
                                                }
                                            }
                                        }
                                        //}
                                    }
                                }
                            }
                        }
                        #endregion

                        #region PROTOCOLLO INTERNO
                        // caso del PROTOCOLLO INTERNO
                        else if (schedaDoc.protocollo.GetType() == typeof(DocsPaVO.documento.ProtocolloInterno))
                        {
                            // verifico la chiave del web config che abilita o meno l'ereditarietà
                            // del doc per il mittente
                            if (System.Configuration.ConfigurationManager.AppSettings["NON_EREDITA_MITTENTE_USCITA"] == null ||
                               System.Configuration.ConfigurationManager.AppSettings["NON_EREDITA_MITTENTE_USCITA"].ToString() != "1")
                            {
                                DocsPaVO.documento.ProtocolloInterno pi = (DocsPaVO.documento.ProtocolloInterno)schedaDoc.protocollo;
                                //Caso in cui il mittente del protocollo interno è una PERSONA
                                if (pi.mittente.GetType().Equals(typeof(DocsPaVO.utente.Utente)))
                                {
                                    DocsPaVO.utente.Utente mittente = (DocsPaVO.utente.Utente)pi.mittente;
                                    /* Se il mittente del protocollo coincide con l'utente
                                         *  che crea il protocollo allora non inserisco nulla nella SECURITY */
                                    //if ((schedaDoc.idPeople != mittente.idPeople) && (schedaDoc.privato != null) && (schedaDoc.privato.Equals("0")))
                                    if (schedaDoc.idPeople != mittente.idPeople)
                                    {
                                        tipoUt = "P";
                                        InsertSecurityMittProtocollo(idProfile, mittente.idPeople, tipoUt, objRuolo.idGruppo);
                                    }
                                    //else return schedaDoc;
                                }
                                //Caso in cui il mittente del protocollo interno è un RUOLO
                                else if (pi.mittente.GetType().Equals(typeof(DocsPaVO.utente.Ruolo)))
                                {
                                    DocsPaVO.utente.Ruolo mittente = (DocsPaVO.utente.Ruolo)pi.mittente;
                                    /* Se il RUOLO mittente del protocollo coincide con il ruolo dell'utente
                                         * che crea il protocollo allora non inserisco nulla nella SECURITY */
                                    //if ((objRuolo.systemId != mittente.systemId) && (schedaDoc.privato != null) && (schedaDoc.privato.Equals("0")))
                                    if (objRuolo.systemId != mittente.systemId)
                                    {
                                        tipoUt = "R";
                                        InsertSecurityMittProtocollo(idProfile, mittente.idGruppo, tipoUt, objRuolo.idGruppo);
                                        listaRuoli.Add(mittente.idGruppo);
                                    }
                                    //else return schedaDoc;
                                }
                                else if (pi.mittente.GetType().Equals(typeof(DocsPaVO.utente.UnitaOrganizzativa)))
                                {
                                    // se il documento è privato permetto la visibilità solo al ruolo, non ai superiori
                                    /*if ((schedaDoc.privato != null) && (schedaDoc.privato.Equals("1")))
                                    {
                                        return schedaDoc;
                                    }
                                    else
                                    {*/
                                    DocsPaVO.utente.UnitaOrganizzativa mittente = (DocsPaVO.utente.UnitaOrganizzativa)pi.mittente;
                                    //OLD 02 feb 2007 - commentato perchè prendeva anche i ruoli di firerimento disabilitati
                                    //quindi la visibilità alla Uo destinataria del protocollo interno viene data in maniera sbagliata.
                                    //Un ruolo disabilitato non deve ereditare nulla.
                                    //ArrayList listaRuoli = GetRuoliRiferimento(pi.mittente.systemId, schedaDoc.registro.systemId);

                                    //new 02 feb 2007
                                    listaRuoli = GetListaRuoliAbilitati(pi.mittente.systemId, schedaDoc.registro.systemId);

                                    if (listaRuoli != null && listaRuoli.Count > 0)
                                    {
                                        tipoUt = "R";
                                        for (int i = 0; i < listaRuoli.Count; i++)
                                        {
                                            if (!listaRuoli[i].Equals(objRuolo.idGruppo))
                                            {
                                                InsertSecurityMittProtocollo(idProfile, (string)listaRuoli[i], tipoUt, objRuolo.idGruppo);
                                                //listaRuoli.Add(listaRuoli[i].ToString());
                                            }
                                        }
                                    }
                                    //}
                                }
                            }
                        }
                        #endregion
                    }

                    // i superiori non hanno vista sul documento se è marcato privato o personale
                    if ((schedaDoc.privato != null && schedaDoc.privato.Equals("1")) || (schedaDoc.personale != null && schedaDoc.personale.Equals("1")))
                    {
                        schedaDoc.accessRights = "255";
                        return schedaDoc;
                    }
                    string idRegistro = null;
                    if (schedaDoc.registro != null)
                    {
                        idRegistro = schedaDoc.registro.systemId;
                    }

                    // Reperimento dei ruoli gerarchicamente superiori
                    // cui assegnare i diritti di visibilità sul documento / protocollo creato
                    DocsPaDB.Utils.Gerarchia gerarchia = new DocsPaDB.Utils.Gerarchia();
                    ArrayList listaRuoliSup = gerarchia.getGerarchiaSup(objRuolo, idRegistro, null, DocsPaVO.trasmissione.TipoOggetto.DOCUMENTO, this);

                    for (int i = 0; i < listaRuoliSup.Count; i++)
                    {
                        DocsPaVO.utente.Ruolo ruoloSup = (DocsPaVO.utente.Ruolo)listaRuoliSup[i];
                        if (!listaRuoli.Contains(ruoloSup.idGruppo))
                        {
                            // Inserimento della ACL
                            InsertSecurity(idProfile, ruoloSup.idGruppo, idGruppoTrasm);
                        }
                    }

                    ruoliSuperiori = (DocsPaVO.utente.Ruolo[])listaRuoliSup.ToArray(typeof(DocsPaVO.utente.Ruolo));

                    schedaDoc.accessRights = "255";
                }
                else
                {
                    throw new Exception();
                }
            }

            catch (Exception ex)
            {
                logger.Error("Errore durante l'estensione della visibilità sul documento: " + ex.Message);
                throw new Exception("Errore durante l'estensione della visibilità sul documento");
            }
            return schedaDoc;
        }
        #endregion
        public void InsertSecurityMittProtocollo(string idProfile, string idMitt, string tipoUtente, string gruppoMitt)
        {
            DocsPaUtils.Query q;
            string queryString;
            if (idMitt != null)
            {
                q = DocsPaUtils.InitQuery.getInstance().getQuery("I_Security");
                if (tipoUtente.Equals("R"))
                {
                    q.setParam("param1", idProfile + "," + idMitt + ",255," + gruppoMitt + ",'A', NULL");
                }
                if (tipoUtente.Equals("P"))
                {
                    q.setParam("param1", idProfile + "," + idMitt + ",255," + gruppoMitt + ",'A', NULL");
                }
                queryString = q.getSQL();
                logger.Debug(queryString);
                ExecuteNonQuery(queryString);
            }
        }


        //ruoli di riferimento
        public ArrayList GetRuoliRiferimento(string idUO, string idRegistro)
        {
            logger.Debug("GetRuoliRiferimento");
            ArrayList lista = new ArrayList();
            try
            {
                //OpenConnection();					
                DataSet dataSet;
                /*string queryString = "SELECT ID_GRUPPO FROM DPA_CORR_GLOBALI WHERE "+
                                "CHA_TIPO_URP='R' AND CHA_TIPO_IE='I' AND CHA_RIFERIMENTO='1' AND ID_UO ="+ idUO;*/
                DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("GET_RUOLI_RIF_REGISTRO");
                q.setParam("param1", "A.ID_UO = " + idUO);
                q.setParam("param2", "B.ID_REGISTRO = " + idRegistro);
                string queryString = q.getSQL();
                logger.Debug(queryString);
                ExecuteQuery(out dataSet, "RUOLO_RIF", queryString);

                foreach (DataRow dataRow in dataSet.Tables["RUOLO_RIF"].Rows)
                {
                    lista.Add(dataRow["ID_GRUPPO"].ToString());
                }
                dataSet.Dispose();
                //CloseConnection();
            }
            catch (Exception e)
            {
                logger.Error(e.Message);
                //CloseConnection();
                logger.Error("Errore nella gestione dei documenti (Query - GetListaRuoliRif)", e);
                throw new Exception("F_System");
            }
            return lista;
        }

        /// <summary>
        /// Lista dei ruoli NON DISABILITATI della Uo passata in ingresso.
        /// Utilizzato principalmente nella trasmissione di un protocollo, poichè al mittente del protocollo
        /// in uscita ad esempio non deve essere effettuata la trasmissione a ruoli di riferimento disabilitati
        /// </summary>
        /// <param name="idUO"></param>
        /// <param name="idRegistro"></param>
        /// <returns></returns>
        public ArrayList GetListaRuoliAbilitati(string idUO, string idRegistro)
        {
            logger.Debug("GetRuoliRiferimento");
            ArrayList lista = new ArrayList();
            try
            {

                DataSet dataSet;
                DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("GET_RUOLI_RIF_REGISTRO");
                q.setParam("param1", "A.ID_UO = " + idUO);
                q.setParam("param2", "B.ID_REGISTRO = " + idRegistro);
                string queryString = q.getSQL();
                queryString = queryString + " AND A.DTA_FINE IS NULL";
                logger.Debug(queryString);
                ExecuteQuery(out dataSet, "RUOLO_RIF", queryString);

                foreach (DataRow dataRow in dataSet.Tables["RUOLO_RIF"].Rows)
                {
                    lista.Add(dataRow["ID_GRUPPO"].ToString());
                }
                dataSet.Dispose();

            }
            catch (Exception e)
            {
                logger.Error(e.Message);
                //CloseConnection();
                logger.Error("Errore nella gestione dei documenti (Query - GetListaRuoliRif)", e);
                throw new Exception("F_System");
            }
            return lista;
        }

        //E' stato aggiunto il parametro isPersonale per poter gestire i documenti grigi personali, se isPersonale è true
        //non viene data la visibilità del documento al ruolo, ma solo all'utente. Veronica
        public bool UpdateInsertSecurity(string idProfile, string idPeople, string idGruppoTrasm, bool isPersonale)
        {
            DocsPaUtils.Query q;
            bool retValue = false;
            int affectedRows;
            string queryString;
            q = DocsPaUtils.InitQuery.getInstance().getQuery("U_Security");
            q.setParam("param1", "THING=" + idProfile + " AND PERSONORGROUP=" + idPeople);
            queryString = q.getSQL();
            logger.Debug(queryString);
            //ExecuteNonQuery(queryString);
            ExecuteNonQuery(queryString, out affectedRows);
            if (affectedRows > 0)
            {
                retValue = true;
            }
            if (!isPersonale)
            {
                if (idProfile != null && idGruppoTrasm != null)
                {
                    q = DocsPaUtils.InitQuery.getInstance().getQuery("I_Security");
                    q.setParam("param1", idProfile + "," + idGruppoTrasm + ",255," + idGruppoTrasm + ",'P',NULL");
                    queryString = q.getSQL();
                    logger.Debug(queryString);
                    ExecuteNonQuery(queryString, out affectedRows);
                    if (affectedRows == 0)
                    {
                        retValue = false;
                    }
                }
            }
            else
            {
                if (idProfile != null && idPeople != null)
                {
                    q = DocsPaUtils.InitQuery.getInstance().getQuery("U_SecurityXml");
                    q.setParam("param1", idProfile);
                    q.setParam("param2", idPeople);
                    //q.setParam("param1", idProfile + "," + idPeople + ",255," + idPeople + ",'P'");
                    queryString = q.getSQL();
                    logger.Debug(queryString);
                    ExecuteNonQuery(queryString, out affectedRows);
                    if (affectedRows == 0)
                    {
                        retValue = false;
                    }
                }
            }
            return retValue;
        }


        //Quando un documento viene portato da privato a personale viene aggiunta alla
        //security l'informazione del ruolo di appartenenza dell'utente.
        public bool InsertSecurityPersonalePrivato(string idProfile, string idGruppoTrasm)
        {
            DocsPaUtils.Query q;
            bool retValue = false;
            int affectedRows;
            string queryString;
            q = DocsPaUtils.InitQuery.getInstance().getQuery("I_Security");
            q.setParam("param1", idProfile + "," + idGruppoTrasm + ",255," + idGruppoTrasm + ",'P', NULL");
            queryString = q.getSQL();
            logger.Debug(queryString);
            ExecuteNonQuery(queryString, out affectedRows);
            if (affectedRows > 0)
            {
                retValue = true;
            }
            return retValue;
        }

        public void InsertSecurity(string idProfile, string idGruppo, string idGruppoTrasm)
        {
            DocsPaVO.HMDiritti.HMdiritti HMD = new DocsPaVO.HMDiritti.HMdiritti();
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("I_Security");
            q.setParam("param1", idProfile + "," + idGruppo + "," + HMD.HMdiritti_Write + "," + idGruppoTrasm + ",'A', NULL");
            string queryString = q.getSQL();
            logger.Debug(queryString);
            ExecuteNonQuery(queryString);
        }

        public void InsertSecurityDelegato(string idProfile, string idPeople, string idGruppo)
        {
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("I_Security");
            q.setParam("param1", idProfile + "," + idPeople + "," + 255 + "," + idGruppo + ",'D', NULL");
            string queryString = q.getSQL();
            logger.Debug(queryString);
            ExecuteNonQuery(queryString);
        }
        /* massimo digregorio 
         * add: x gestione in profile dei dati del Protocollatore
         */

        internal void SalvaProtocollatore(DocsPaVO.documento.SchedaDocumento schedaDoc)
        {
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("U_Profile");
            //UPDATE PROFILE SET @param1@ WHERE @param2@
            q.setParam("param2", " DOCNUMBER = " + schedaDoc.docNumber);
            q.setParam("param1",
                String.Format(" [ID_PEOPLE_PROT] = {0}, [ID_RUOLO_PROT] = {1}, [ID_UO_PROT]= {2} ",
                schedaDoc.protocollatore.utente_idPeople,
                schedaDoc.protocollatore.ruolo_idCorrGlobali,
                schedaDoc.protocollatore.uo_idCorrGlobali));

            string queryString = q.getSQL();
            logger.Debug(queryString);
            ExecuteNonQuery(queryString);

        }

        internal DocsPaVO.documento.Protocollatore GetProtocollatore(DataRow dataRow)
        {
            DocsPaVO.documento.Protocollatore objProtocollatore = new DocsPaVO.documento.Protocollatore();
            objProtocollatore.utente_idPeople = dataRow["ID_PEOPLE_PROT"].ToString();
            objProtocollatore.ruolo_idCorrGlobali = dataRow["ID_RUOLO_PROT"].ToString();
            objProtocollatore.uo_idCorrGlobali = dataRow["ID_UO_PROT"].ToString();
            if (string.Compare(objProtocollatore.uo_idCorrGlobali.Trim(), string.Empty, true) != 0)
            {
                DocsPaDB.Query_DocsPAWS.Documentale documentale = new DocsPaDB.Query_DocsPAWS.Documentale();
                objProtocollatore.uo_codiceCorrGlobali = documentale.DOC_GetUoById(objProtocollatore.uo_idCorrGlobali); //recupera il nome della UO
            }
            return objProtocollatore;
        }

        internal DocsPaVO.documento.CreatoreDocumento GetCreatoreDocumento(DataRow dataRow)
        {
            DocsPaVO.documento.CreatoreDocumento objCreatore = new DocsPaVO.documento.CreatoreDocumento();
            objCreatore.idPeople = dataRow["AUTHOR"].ToString();
            objCreatore.idCorrGlob_Ruolo = dataRow["ID_RUOLO_CREATORE"].ToString();
            objCreatore.idCorrGlob_UO = dataRow["ID_UO_CREATORE"].ToString();
            if (dataRow["ID_PEOPLE_DELEGATO"] != null)
                objCreatore.idPeopleDelegato = dataRow["id_people_delegato"].ToString();
            if (string.Compare(objCreatore.idCorrGlob_UO.Trim(), string.Empty, true) != 0)
            {
                DocsPaDB.Query_DocsPAWS.Documentale documentale = new DocsPaDB.Query_DocsPAWS.Documentale();
                objCreatore.uo_codiceCorrGlobali = documentale.DOC_GetUoById(objCreatore.idCorrGlob_UO); //recupera il nome della UO
            }

            return objCreatore;
        }

        /* ABBATANGELI GIANLUIGI
         * Modificato la funzione in private dopo aver estratto dal metodo
         * il salvataggio nel db del prossimo numero di protocollo (nuova funzione UpdateNextProtocolNumber) */
        private bool GetNumeroProtocollo(ref DocsPaVO.documento.SchedaDocumento schedaDoc, DocsPaVO.utente.Ruolo ruolo)
        {
            /* ABBATANGELI GIANLUIGI
             * prende il prossimo numero disponibile e lo assegna al doc
             * Deve rimanere come prima operazione della transazione */

            bool retValue = false;
            try
            {
                DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_DPARegProtoForUpdate");
                q.setParam("param1", "ID_REGISTRO=" + schedaDoc.registro.systemId);
                string queryString = q.getSQL();
                logger.Debug(queryString);
                string result;
                ExecuteScalar(out result, queryString);

                int numeroProtocollo = Int32.Parse(result);
                schedaDoc.protocollo.numero = numeroProtocollo.ToString();

                /* ABBATANGELI GIANLUIGI
                 * Calcola la segnatura in base al numero sopra ottenuto
                 * e lo assegna al doc */
                schedaDoc.protocollo.segnatura = CalcolaSegnatura(schedaDoc, ruolo);

                retValue = true;
            }
            catch (Exception ex)
            {
                logger.Error(ex.Message);
                retValue = false;
            }

            return retValue;
        }

        /* ABBATANGELI GIANLUIGI
                * Esegue l'update del prossimo numero di protocollo disponibile (tab DPA_REG_PROTO)
                * Da eseguire come ultima operazione della transazione cosi che si faccia il commit
                * solo se va a buon fine altrimenti mantengo la numerazione precedente con rolback */
        private bool UpdateNextProtocolNumber(DocsPaVO.documento.SchedaDocumento schedaDoc)
        {
            Boolean retValue = false;
            try
            {
                /* ABBATANGELI GIANLUIGI - Commentato per il rilascio 3.21
                 * utilizzando la stessa transaction fallisce il controllo del numero doc 
                 * (non è null perchè ha già fatto update schedaDocumento)
                 * da modificare e riabilitare dopo il rilascio
                if (!CheckNuovoProto(schedaDoc))
                    throw new SystemException("Il documento [" + schedaDoc.docNumber + "] è già protocollato!");
                 */

                DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_DPARegProtoForUpdate");

                int numeroProtocollo = Int32.Parse(schedaDoc.protocollo.numero) + 1;

                q = DocsPaUtils.InitQuery.getInstance().getQuery("U_DPARegproto");
                q.setParam("param1", "NUM_RIF=" + numeroProtocollo.ToString());
                q.setParam("param2", "ID_REGISTRO=" + schedaDoc.registro.systemId);
                string queryString = q.getSQL();


                logger.Debug(queryString);
                int outValue;
                if (ExecuteNonQuery(queryString, out outValue))
                {
                    if (outValue == 1)
                    {
                        retValue = true;
                    }
                }
            }
            catch (Exception ex)
            {
                logger.Error(ex.Message);
                retValue = false;

            }

            return retValue;
        }

        /* ABBATANGELI GIANLUIGI
         * Verifica che nel db non esista lo stesso documento (numero documento)
         * con numero protocollo già assegnato */
        private bool CheckNuovoProto(DocsPaVO.documento.SchedaDocumento schedaDoc)
        {
            bool retValue = true;
            IDataReader dr = null;
            try
            {
                DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_Profile0");
                q.setParam("param1", "NUM_PROTO");
                q.setParam("param2", "DOCNUMBER=" + schedaDoc.docNumber);
                string queryString = q.getSQL();
                logger.Debug(queryString);
                string numProto = null;


                dr = ExecuteReader(queryString); //09.03.2006 - ExecuteScalar(out numProto, queryString);
                if (dr != null && dr.FieldCount > 0)
                {
                    while (dr.Read())
                    {
                        numProto = dr.GetValue(0).ToString();
                        // il ciclo è solo per una volta...
                    }
                    if (numProto != null)
                    {
                        if (!numProto.ToString().Equals(""))
                        {
                            logger.Debug("Errore nella gestione dei documenti (Query - CheckProto). Tentativo di aggiornare il numero di protocollo fallito! Protocollo = " + numProto.ToString());
                            //throw new Exception("Tentativo di aggiornare il numero di protocollo fallito! Protocollo = " + numProto.ToString());
                            retValue = false;
                        }
                    }
                }
                else
                {
                    retValue = false;
                }
            }
            catch
            {
                retValue = false;
            }
            finally
            {
                dr.Close();
                dr.Dispose();
            }

            return retValue;
        }

        public bool UpdateNumeroProtocolloWSPIA(DocsPaVO.documento.SchedaDocumento schedaDoc, DocsPaVO.utente.Ruolo ruolo)
        {
            bool retValue = false;
            string queryString = string.Empty;

            /* MEV 3765 Gestione selettiva integrazione WSPIA
             * Modifica MCaropreso:
             * Calcola successivo numero di protocollo disponibile
             */
            int numeroProtocollo = Int32.Parse(schedaDoc.protocollo.numero.ToString());
            numeroProtocollo += 1;

            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("U_DPARegproto");
            q.setParam("param1", "NUM_RIF=" + numeroProtocollo.ToString());
            q.setParam("param2", "ID_REGISTRO=" + schedaDoc.registro.systemId);
            queryString = q.getSQL();
            logger.Debug(queryString);
            int outValue;
            if (ExecuteNonQuery(queryString, out outValue))
            {
                if (outValue == 1)
                {
                    retValue = true;
                }
                else
                    throw new Exception("Errore durante l'aggiornamento della DPA_REG_PROTO");
            }

            return retValue;
        }


        private string CalcolaSegnatura(DocsPaVO.documento.SchedaDocumento schedaDoc, DocsPaVO.utente.Ruolo ruolo)
        {
            logger.Debug("calcolaSegnatura");
            //CALCOLO ETICHETTE SEGNATURA
            DocsPaVO.utente.InfoUtente temput = new DocsPaVO.utente.InfoUtente();
            DocsPaVO.documento.EtichettaInfo[] eti = getLettereDocumento(temput, ruolo.idAmministrazione);
            int MAX_LENGTH = 7;
            string zeroes = "";
            string idAmm = schedaDoc.registro.idAmministrazione;
            string numProto = schedaDoc.protocollo.numero;
            for (int ind = 1; ind <= MAX_LENGTH - numProto.Length; ind++)
            {
                zeroes = zeroes + "0";
            }
            numProto = zeroes + numProto;
            string data = schedaDoc.protocollo.dataProtocollazione.TrimEnd();
            string codReg = schedaDoc.registro.codRegistro;
            string codAmm = DocsPaDB.Utils.Personalization.getInstance(schedaDoc.registro.idAmministrazione).getCodiceAmministrazione();
            string arrPart = "";

            if (schedaDoc.protocollo.GetType() == typeof(DocsPaVO.documento.ProtocolloEntrata))
            {
                // arrPart = "A";
                arrPart = eti[0].Descrizione;
            }
            else if (schedaDoc.protocollo.GetType() == typeof(DocsPaVO.documento.ProtocolloUscita))
            {
                // arrPart = "P";
                arrPart = eti[1].Descrizione;
            }
            else if (schedaDoc.protocollo.GetType() == typeof(DocsPaVO.documento.ProtocolloInterno))
            {
                // arrPart = "I";
                arrPart = eti[2].Descrizione;
            }
            string codice = DocsPaDB.Utils.Personalization.getInstance(idAmm).FormatoSegnatura;
            if (codice == null)
            {
                //in alcuni casi, l'oggetto Personalization non è not null, ma il formato segnatura è null!!
                //per evitare il blocco della protocollazione a meno di un iisreset inserisco questo codice.
                logger.Debug("Ricalcolo Personalization");
                DocsPaDB.Utils.Personalization.Reset();
                codice = DocsPaDB.Utils.Personalization.getInstance(idAmm).FormatoSegnatura;
            }
            string separatore = DocsPaDB.Utils.Personalization.getInstance(idAmm).getSepSegnatura();
            codice = codice.Replace("NUM_PROTO", numProto);
            codice = codice.Replace("COD_UO", ruolo.uo.codice);
            codice = codice.Replace("DATA_ANNO", schedaDoc.protocollo.anno.Trim());
            codice = codice.Replace("DATA_COMP", data);
            codice = codice.Replace("COD_REG", codReg);
            codice = codice.Replace("COD_AMM", codAmm);
            codice = codice.Replace("IN_OUT", arrPart);

            //aggiunta dell'ora di protocollazione nella segnatura
            string ora = schedaDoc.oraCreazione;
            if ((ora != null) && (ora != ""))
            {
                //se l'ora è nel formato comprensivo dei secondi devo rimuovere i secondi prima di inserire l'ora!
                if (ora.Length > 5)
                {
                    ora = ora.Remove((ora.Length - 3), 3);
                }
                codice = codice.Replace("ORA", ora);
            }
            else
            {
                if (codice.Contains("ORA"))
                {
                    //in caso di proto in giallo l'ora è null dunque nella segnatura appare un doppio separatore
                    codice = codice.Remove(codice.IndexOf("ORA") - 1, 4);
                    //codice = codice.Replace("ORA", "");
                }
            }

            if (codice.Contains("COD_RF_PROT"))
            {
                if (!string.IsNullOrEmpty(schedaDoc.cod_rf_prot))
                {
                    if (schedaDoc.cod_rf_prot.Equals(schedaDoc.registro.codRegistro))
                    {
                        if (codice.IndexOf("COD_RF_PROT") == 0)
                        {
                            codice = codice.Replace("COD_RF_PROT", "");
                            codice = codice.Substring(1);
                        }
                        else
                        {
                            codice = codice.Substring(0, codice.IndexOf("COD_RF_PROT") - 1) + codice.Substring(codice.IndexOf("COD_RF_PROT"));
                            codice = codice.Replace("COD_RF_PROT", "");
                        }
                    }
                    else
                        codice = codice.Replace("COD_RF_PROT", schedaDoc.cod_rf_prot);
                }
                else
                {
                    if (codice.IndexOf("COD_RF_PROT") == 0)
                    {
                        codice = codice.Replace("COD_RF_PROT", "");
                        codice = codice.Substring(1);
                    }
                    else
                    {
                        codice = codice.Substring(0, codice.IndexOf("COD_RF_PROT") - 1) + codice.Substring(codice.IndexOf("COD_RF_PROT"));
                        codice = codice.Replace("COD_RF_PROT", "");
                    }
                }
            }

            //ABBATANGELI - CODICE DISGUSTOSO IMPOSTO DAL GRUPPO PANZERA-LUCIANI
            if (codice.ToUpper().StartsWith("MIBAC|MIBAC_"))
            {
                codice = codice.Substring(0, 6) + codice.Substring(12);
            }

            return codice;
        }


        /// <summary>
        /// Questo metodo verifica se per il documento corrente un file è stato già
        /// acquisito
        /// </summary>
        /// <param name="docnumber"></param>
        /// <param name="versionId"></param>
        /// <returns></returns>
        public bool CheckAcquisizioneFile(string docnumber, string versionId)
        {
            bool result = true;
            string version_id = String.Empty;
            string impronta = String.Empty;

            try
            {
                IDataReader dr = null;

                DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_DOCACQUISITO");
                q.setParam("param1", docnumber);
                q.setParam("param2", versionId);
                string queryString = q.getSQL();
                logger.Debug(queryString);

                using (dr = ExecuteReader(queryString))
                {
                    if (dr == null)
                    {
                        throw new Exception("Errore in CheckAcquisizioneFile");
                    }
                    if (dr != null && dr.FieldCount > 0)
                    {
                        while (dr.Read())
                        {
                            impronta = dr.GetValue(0).ToString();
                            version_id = dr.GetValue(1).ToString();
                        }
                    }
                }

                if (dr != null && (!dr.IsClosed))
                    dr.Close();

                if ((impronta != null && impronta == "") && (version_id != null && version_id != ""))
                    result = false;
            }
            catch (Exception ex)
            {
                logger.Error(ex.Message);
                result = false;
            }
            finally
            {
                CloseConnection();
            }
            return result;
        }

        public void GetProfile(DocsPaVO.utente.InfoUtente infoUtente, ref DocsPaVO.documento.SchedaDocumento schedaDoc)
        {
            logger.Info("BEGIN");
            DataSet dataSet;
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_J_PROFILE__DOCUMENTTYPES");
            q.setParam("param1", "A.DOCNUMBER = " + schedaDoc.docNumber);
            string queryString = q.getSQL();
            logger.Debug(queryString);
            ExecuteQuery(out dataSet, "PROFILE", queryString);
            //dovrebbe tornare una e una sola riga
            if (dataSet.Tables["PROFILE"].Rows.Count > 0)
            {
                DataRow dataRow = dataSet.Tables["PROFILE"].Rows[0];
                schedaDoc.systemId = dataRow["SYSTEM_ID"].ToString();
                logger.Debug("idProfile=" + schedaDoc.systemId);

                schedaDoc.dataCreazione = dataRow["CREATION_TIME"].ToString();

                // Documenti
                schedaDoc.documenti = GetDocumenti(infoUtente, dataRow);
            }
            dataSet.Dispose();
            logger.Info("END");
        }

        public bool UpdateCollegamenti(DocsPaVO.documento.SchedaDocumento schedaDoc)
        {
            bool res = true;
            logger.Debug("updateCollegamenti");
            string idRoot;
            try
            {
                DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_DPADocCollegamenti");
                q.setParam("param1", "ID_ROOT");
                q.setParam("param2", "ID_DOCUMENTO=" + schedaDoc.rispostaDocumento.idProfile);
                string queryString = q.getSQL();
                logger.Debug(queryString);
                string result;
                ExecuteScalar(out result, queryString);
                if (result != null)
                {
                    ExecuteScalar(out idRoot, queryString);
                }
                else
                {
                    idRoot = schedaDoc.rispostaDocumento.idProfile;
                }
                logger.Debug("idRoot=" + idRoot);
                q = DocsPaUtils.InitQuery.getInstance().getQuery("I_DPADoccollegamenti");
                q.setParam("param1", schedaDoc.systemId + "," + schedaDoc.rispostaDocumento.idProfile + ",1," + idRoot);
                queryString = q.getSQL();
                logger.Debug(queryString);
                ExecuteNonQuery(queryString);
            }
            catch (Exception)
            {
                //throw e;
                res = false;
            }
            return res;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="schedaDoc"></param>
        /// <param name="sede"></param>
        /// <param name="forwardingSource">Id del documento sorgente dell'inoltro. Utilizzato dalla funzionalità di inoltro massivo per tenere traccia della catena di inoltro</param>
        /// <returns></returns>
        public bool UpdateProfile(DocsPaVO.documento.SchedaDocumento schedaDoc, string sede, String forwardingSource)
        {
            logger.Info("BEGIN");
            bool retValue = false;

            try
            {
                if (schedaDoc.documenti.Count < 1)
                {
                    return false;
                }
                string img = "0";
                if (!((DocsPaVO.documento.Documento)schedaDoc.documenti[0]).fileSize.Equals("0"))
                {
                    img = "1";
                }
                string assegnato = "0";
                if (schedaDoc.assegnato != null && !schedaDoc.assegnato.Equals(""))
                {
                    assegnato = schedaDoc.assegnato;
                }
                string fascicolato = "0";
                if (schedaDoc.fascicolato != null && !schedaDoc.fascicolato.Equals(""))
                {
                    fascicolato = schedaDoc.fascicolato;
                }
                string privato = "0";
                if (schedaDoc.privato != null && !schedaDoc.privato.Equals(""))
                {
                    privato = schedaDoc.privato;
                }
                string personale = "0";
                if (schedaDoc.personale != null && !schedaDoc.personale.Equals(""))
                {
                    personale = schedaDoc.personale;
                }
                string evidenza = "0";
                if (schedaDoc.evidenza != null && !schedaDoc.evidenza.Equals(""))
                {
                    evidenza = schedaDoc.evidenza;
                }

                if (schedaDoc.oggetto.descrizione.Contains("°"))
                    schedaDoc.oggetto.descrizione.Replace("°", "&ordm;");

                //per interoperabilità
                //string interop = "0";
                string interop = null;

                if (schedaDoc.interop != null && !schedaDoc.interop.Equals(""))
                {
                    interop = schedaDoc.interop;
                }
                DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("U_Profile");
                string firstParam = "";
                if (schedaDoc.protocollatore != null)
                {
                    firstParam = "ID_OGGETTO = " + schedaDoc.oggetto.systemId +
                        ", VAR_PROF_OGGETTO = '" + schedaDoc.oggetto.descrizione.Replace("'", "''").Replace("°", Functions.convertDegre()) + "'" +
                        ", CHA_MOD_OGGETTO = '0' " +
                        ", CHA_IMG = '" + img + "'" +
                        ", CHA_ASSEGNATO = '" + assegnato + "'" +
                        ", CHA_FASCICOLATO = '" + fascicolato + "'" +
                        ", CHA_PRIVATO = '" + privato + "'" +
                        ", CHA_PERSONALE = '" + personale + "'" +
                        ", CHA_EVIDENZA = '" + evidenza + "'" +
                        ", VAR_SEDE = '" + sede + "'" +
                        //dati interop
                        //", CHA_INTEROP = '" + interop + "'" + 
                        //dati protocollatore:
                        ", ID_RUOLO_PROT =" + schedaDoc.protocollatore.ruolo_idCorrGlobali +
                        ", ID_PEOPLE_PROT =" + schedaDoc.protocollatore.utente_idPeople +
                        ", ID_UO_PROT =" + schedaDoc.protocollatore.uo_idCorrGlobali +
                        //dati creatore (l'ID_PEOPLE è il campo AUTHOR)
                        ", ID_RUOLO_CREATORE =" + schedaDoc.creatoreDocumento.idCorrGlob_Ruolo +
                        ", ID_UO_CREATORE =" + schedaDoc.creatoreDocumento.idCorrGlob_UO;

                    if (interop == null)
                    {
                        firstParam = firstParam + " , CHA_INTEROP = NULL";
                    }
                    else
                    {
                        firstParam = firstParam + ", CHA_INTEROP = '" + interop + "'";
                    }
                }
                else
                {
                    firstParam = "ID_OGGETTO = " + schedaDoc.oggetto.systemId +
                        ", VAR_PROF_OGGETTO = '" + schedaDoc.oggetto.descrizione.Replace("'", "''").Replace("°", Functions.convertDegre()) + "'" +
                        ", CHA_MOD_OGGETTO = '0' " +
                        ", CHA_IMG = '" + img + "'" +
                        ", CHA_ASSEGNATO = '" + assegnato + "'" +
                        ", CHA_FASCICOLATO = '" + fascicolato + "'" +
                        ", CHA_PRIVATO = '" + privato + "'" +
                        ", CHA_PERSONALE = '" + personale + "'" +
                        ", CHA_EVIDENZA = '" + evidenza + "'" +
                        ", VAR_SEDE = '" + sede + "'";
                }

                //ABBATANGELI GIANLUIGI - Gestione applicazioni esterne
                if (!string.IsNullOrEmpty(schedaDoc.codiceApplicazione))
                    firstParam += ", COD_EXT_APP = '" + schedaDoc.codiceApplicazione + "'";

                if (!string.IsNullOrEmpty(schedaDoc.documento_da_pec))
                    firstParam += ", CHA_DOCUMENTO_DA_PEC = '" + schedaDoc.documento_da_pec + "'";

                string tipoProto = "G";
                string daProtocollare = "0";
                //oraCreazione o protocollazione
                //string oraCreazione =DocsPaDbManagement.Functions.Functions.GetDate(); //schedaDoc.oraCreazione;
                if (schedaDoc.protocollo != null)
                {
                    if (schedaDoc.protocollo.GetType() == typeof(DocsPaVO.documento.ProtocolloEntrata))
                    {
                        tipoProto = "A";
                    }
                    else if (schedaDoc.protocollo.GetType() == typeof(DocsPaVO.documento.ProtocolloUscita))
                    {
                        tipoProto = "P";
                    }
                    else if (schedaDoc.protocollo.GetType() == typeof(DocsPaVO.documento.ProtocolloInterno))
                    {
                        tipoProto = "I";
                    }
                    if (schedaDoc.protocollo.daProtocollare != null && !schedaDoc.protocollo.daProtocollare.Equals(""))
                    {
                        daProtocollare = schedaDoc.protocollo.daProtocollare;

                        if (schedaDoc.protocollo.numero != null && !schedaDoc.protocollo.numero.Equals(""))
                        {
                            daProtocollare = "0";
                            schedaDoc.protocollo.daProtocollare = "0";
                        }
                    }
                    string idParent = "0";
                    //if (schedaDoc.protocollo.rispostaProtocollo != null && schedaDoc.protocollo.rispostaProtocollo.idProfile != null)
                    //{
                    //    idParent = schedaDoc.protocollo.rispostaProtocollo.idProfile;
                    //}
                    if (schedaDoc.rispostaDocumento != null && schedaDoc.rispostaDocumento.idProfile != null)
                    {
                        idParent = schedaDoc.rispostaDocumento.idProfile;
                    }

                    string invioConferma = schedaDoc.protocollo.invioConferma;
                    if (invioConferma == null)
                    {
                        invioConferma = "0";
                    }
                    string modMittDest = "0";
                    if (schedaDoc.protocollo.modMittDest != null && !schedaDoc.protocollo.modMittDest.Equals(""))
                    {
                        modMittDest = schedaDoc.protocollo.modMittDest;
                    }
                    string modMittInt = "0";
                    if (schedaDoc.protocollo.modMittInt != null && !schedaDoc.protocollo.modMittInt.Equals(""))
                    {
                        modMittInt = schedaDoc.protocollo.modMittInt;
                    }
                    if (schedaDoc.registro == null)
                        firstParam +=
                        ", CHA_MOD_MITT_DEST = '" + modMittDest + "'" +
                        ", CHA_MOD_MITT_INT = '" + modMittInt + "'" +
                        ", ID_PARENT = " + idParent +
                        ", CHA_INVIO_CONFERMA = '" + invioConferma + "'";
                    else
                        firstParam +=
                            ", ID_REGISTRO = " + schedaDoc.registro.systemId +
                            ", CHA_MOD_MITT_DEST = '" + modMittDest + "'" +
                            ", CHA_MOD_MITT_INT = '" + modMittInt + "'" +
                            ", ID_PARENT = " + idParent +
                            ", CHA_INVIO_CONFERMA = '" + invioConferma + "'";

                    // Protocollo Mittente
                    if (schedaDoc.protocollo.GetType() == typeof(DocsPaVO.documento.ProtocolloEntrata))
                    {
                        DocsPaVO.documento.ProtocolloEntrata pe = (DocsPaVO.documento.ProtocolloEntrata)schedaDoc.protocollo;
                        if (pe.descrizioneProtocolloMittente != null && !pe.descrizioneProtocolloMittente.Equals(""))
                        {
                            firstParam += ", VAR_PROTO_IN = '" + pe.descrizioneProtocolloMittente.Replace("'", "''") + "'";
                        }
                        if (pe.dataProtocolloMittente != null && !pe.dataProtocolloMittente.Equals(""))
                        {
                            firstParam += ", DTA_PROTO_IN = " + DocsPaDbManagement.Functions.Functions.ToDate(pe.dataProtocolloMittente);
                        }
                        //UFFICIO REFERENTE PER IL PROTOCOLLO IN ENTRATA
                        if (pe.ufficioReferente != null)
                        {
                            firstParam += " , ID_UO_REF = " + pe.ufficioReferente.systemId;
                        }
                    }
                    //UFFICIO REFERENTE PER IL PROTOCOLLO IN USCITA
                    if (schedaDoc.protocollo.GetType() == typeof(DocsPaVO.documento.ProtocolloUscita))
                    {
                        DocsPaVO.documento.ProtocolloUscita pu = (DocsPaVO.documento.ProtocolloUscita)schedaDoc.protocollo;
                        if (pu.ufficioReferente != null)
                        {
                            firstParam += " , ID_UO_REF = " + pu.ufficioReferente.systemId;
                        }
                    }
                    //UFFICIO REFERENTE PER IL PROTOCOLLO INTERNO
                    if (schedaDoc.protocollo.GetType() == typeof(DocsPaVO.documento.ProtocolloInterno))
                    {
                        DocsPaVO.documento.ProtocolloInterno pi = (DocsPaVO.documento.ProtocolloInterno)schedaDoc.protocollo;
                        if (pi.ufficioReferente != null)
                        {
                            firstParam += " , ID_UO_REF = " + pi.ufficioReferente.systemId;
                        }
                    }

                    // Il documento è protocollato
                    if (schedaDoc.protocollo.segnatura != null && !schedaDoc.protocollo.segnatura.Equals(""))
                    {
                        if (!CheckProto(schedaDoc))
                            return false;

                        // set oraCreazione
                        firstParam +=
                            ", VAR_CHIAVE_PROTO = " + CalcolaChiaveProto(schedaDoc) +
                            ", NUM_PROTO = " + schedaDoc.protocollo.numero +
                            ", VAR_SEGNATURA = '" + schedaDoc.protocollo.segnatura + "'" +
                             ", DTA_PROTO = " + DocsPaDbManagement.Functions.Functions.GetDate() +
                            //", DTA_PROTO = " + DocsPaDbManagement.Functions.Functions.ToDate(schedaDoc.protocollo.dataProtocollazione + " " + schedaDoc.oraCreazione, true) +
                            ", NUM_ANNO_PROTO = " + schedaDoc.protocollo.anno + ", DOCNAME = '" + schedaDoc.protocollo.segnatura + "'";

                        //					firstParam +=					
                        //						", VAR_CHIAVE_PROTO = " + CalcolaChiaveProto(schedaDoc) +		
                        //						", NUM_PROTO = " + schedaDoc.protocollo.numero +
                        //						", VAR_SEGNATURA = '" + schedaDoc.protocollo.segnatura + "'" +
                        //						", DTA_PROTO = " + DocsPaDbManagement.Functions.Functions.ToDate(schedaDoc.protocollo.dataProtocollazione,false) + 
                        //						", NUM_ANNO_PROTO = " + schedaDoc.protocollo.anno + ", DOCNAME = '" + schedaDoc.protocollo.segnatura + "'";

                    }
                }
                else //grigio
                {

                    //Risposta DOCUMENTI GRIGI
                    string idParent = "0";
                    if (schedaDoc.rispostaDocumento != null && schedaDoc.rispostaDocumento.docNumber != null)
                    {
                        idParent = schedaDoc.rispostaDocumento.docNumber;
                    }

                    //schedaDoc.oraCreazione=oraCreazione;

                    firstParam += ", DOCNAME = '" + schedaDoc.docNumber + "'" +
                                   ", ID_PARENT = " + idParent;
                }

                // DatiEmergenza
                if (schedaDoc.datiEmergenza != null)
                {
                    firstParam += ", VAR_PROTO_EME = '" + schedaDoc.datiEmergenza.protocolloEmergenza.Replace("'", "''") + "'";
                    firstParam += ", DTA_PROTO_EME = " + DocsPaDbManagement.Functions.Functions.ToDate(schedaDoc.datiEmergenza.dataProtocollazioneEmergenza);
                    if (schedaDoc.datiEmergenza.cognomeProtocollatoreEmergenza != null)
                        firstParam += ", VAR_COGNOME_EME = '" + schedaDoc.datiEmergenza.cognomeProtocollatoreEmergenza.Replace("'", "''") + "'";
                    if (schedaDoc.datiEmergenza.nomeProtocollatoreEmergenza != null)
                        firstParam += ", VAR_NOME_EME = '" + schedaDoc.datiEmergenza.nomeProtocollatoreEmergenza.Replace("'", "''") + "'";
                }

                // TipologiaAtto
                string idTipoAtto = null;
                if (schedaDoc.tipologiaAtto != null)
                {
                    idTipoAtto = schedaDoc.tipologiaAtto.systemId;
                }
                if (idTipoAtto != null && !idTipoAtto.Equals(""))
                {
                    firstParam += ", ID_TIPO_ATTO = " + idTipoAtto;
                }
                firstParam +=
                    ", CHA_TIPO_PROTO = '" + tipoProto + "'" +
                    ", CHA_DA_PROTO = '" + daProtocollare + "'";

                //Riferimento Mittente
                firstParam += ", CHA_RIFF_MITT = '" + schedaDoc.riferimentoMittente.Replace("'", "''") + "'";

                // Identificativo del documento origine dell'inoltro
                if (!String.IsNullOrEmpty(forwardingSource))
                    firstParam += String.Format(", FORWARDING_SOURCE = {0}", forwardingSource);

                q.setParam("param1", firstParam);
                q.setParam("param2", "DOCNUMBER = " + schedaDoc.docNumber);
                string queryString = q.getSQL();

                //				if (schedaDoc!=null && schedaDoc.protocollo!= null && schedaDoc.protocollo.daProtocollare.Equals("1") && (schedaDoc.protocollo.segnatura!=null || schedaDoc.protocollo.segnatura!=string.Empty))
                //				{
                //					System.Diagnostics.StackTrace st = new System.Diagnostics.StackTrace();				
                //					System.IO.StreamWriter s=new System.IO.StreamWriter(@"c:\temp\StackTrace_DocsPA.txt",true);
                //					s.WriteLine(st.ToString());
                //					s.Flush();
                //					s.Close();
                //					s=null;
                //				}

                //Profilazione dinamica
                if (schedaDoc.template != null)
                {
                    Model model = new Model();
                    model.salvaInserimentoUtenteProfDim(schedaDoc.template, schedaDoc.docNumber);

                    // Se la tipologia ha un contatore di repertorio, viene assegnata la visibilità del documento repertoriato
                    // all'eventuale responsabile di repertorio
                    OggettoCustom oggCustom = ((OggettoCustom[])schedaDoc.template.ELENCO_OGGETTI.ToArray(typeof(OggettoCustom))).Where(oc => oc.TIPO.DESCRIZIONE_TIPO.ToLower() == "contatore" && oc.REPERTORIO == "1").FirstOrDefault();

                    logger.DebugFormat("Registri di repertorio - Ricerca repertorio per la tipologia {0} - {1}. Repertorio trovato: {2}", schedaDoc.template.ID_TIPO_ATTO, schedaDoc.template.DESCRIZIONE, oggCustom != null);

                    if (oggCustom != null)
                    {
                        logger.DebugFormat("Registri di repertorio - Assegnazione visibilità al responsabile");
                        RegistriRepertorioPrintManager printer = new RegistriRepertorioPrintManager();
                        bool ass = printer.AssignRepertorioVisibilityToResponsableRole(oggCustom.TIPO_CONTATORE, null, schedaDoc.docNumber, oggCustom.SYSTEM_ID.ToString(), oggCustom.ID_AOO_RF);
                        logger.DebugFormat("Registri di repertorio - Risultato assegnazione visibilità: {0}", ass.ToString());
                    }

                }

                //string res = "";

                //ExecuteScalar(out  res, "select count(*) from profile WHERE DOCNUMBER =" + schedaDoc.docNumber.ToString());
                //logger.Debug("select count(*) from profile WHERE DOCNUMBER =" + schedaDoc.docNumber + "=> " + res);

                //res = "";
                //ExecuteScalar(out  res, "select DOCNUMBER from profile WHERE VAR_CHIAVE_PROTO = " + CalcolaChiaveProto(schedaDoc));



                logger.Debug("UpdateProfile=>" + queryString);


                int rowsAffected = 0;
                //ExecuteNonQuery("update profile set VAR_PROF_OGGETTO = 'xxxxx' WHERE DOCNUMBER =" + schedaDoc.docNumber, out rowsAffected);

                using (DBProvider dbProvider = new DBProvider())
                {
                    dbProvider.ExecuteNonQuery(queryString, out rowsAffected);
                }
                

                logger.Debug("righe modificate=>" + rowsAffected);

                if (rowsAffected == 1)
                {
                    retValue = true;
                }
                else
                {
                    throw new Exception("Nessuna riga aggiornata sulla Profile");
                }
            }
            catch (Exception ex)
            {
                logger.Error(ex.Message);
                retValue = false;
            }
            logger.Info("END");
            return retValue;
        }


        public string addZeroToDate(string s)
        {
            string rtn = s;
            if (s != null && s.Length == 1)
                rtn = "0" + s;
            return rtn;
        }
        public bool CheckProto(DocsPaVO.documento.SchedaDocumento schedaDoc)
        {
            bool retValue = true;
            IDataReader dr = null;
            try
            {
                DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_Profile0");
                q.setParam("param1", "NUM_PROTO");
                q.setParam("param2", "DOCNUMBER=" + schedaDoc.docNumber);
                string queryString = q.getSQL();
                logger.Debug(queryString);
                string numProto = null;


                using (DBProvider dbProvider = new DBProvider())
                {
                    dr = dbProvider.ExecuteReader(queryString); //09.03.2006 - ExecuteScalar(out numProto, queryString);
                    if (dr != null && dr.FieldCount > 0)
                    {
                        while (dr.Read())
                        {
                            numProto = dr.GetValue(0).ToString();
                            // il ciclo è solo per una volta...
                        }
                        if (numProto != null && !numProto.ToString().Equals("") && !numProto.ToString().Equals(schedaDoc.protocollo.numero))
                        {
                            logger.Debug("Errore nella gestione dei documenti (Query - CheckProto). Tentativo di aggiornare il numero di protocollo fallito! Protocollo = " + numProto.ToString());
                            //throw new Exception("Tentativo di aggiornare il numero di protocollo fallito! Protocollo = " + numProto.ToString());
                            retValue = false;
                        }
                    }
                    else
                    {
                        retValue = false;
                    }
                }
                
            }
            catch
            {
                retValue = false;
            }
            finally
            {
                dr.Close();
                dr.Dispose();
            }

            return retValue;
        }

        private string CalcolaChiaveProto(DocsPaVO.documento.SchedaDocumento schedaDocumento)
        {
            // Il documento è protocollato
            if (schedaDocumento.protocollo != null)
            {
                if (schedaDocumento.protocollo.numero != null && !schedaDocumento.protocollo.numero.Equals(""))
                {
                    return "'" + schedaDocumento.protocollo.numero + "_" + schedaDocumento.protocollo.anno + "_" + schedaDocumento.registro.systemId + "'";
                }
            }
            return DateTime.Now.Ticks.ToString();

        }
        public bool GetCorrOcc(string descCorr, out DataSet ds)
        {
            bool rtn = false;
            DocsPaUtils.Query q = new DocsPaUtils.Query("SELECT SYSTEM_ID,VAR_COD_RUBRICA FROM DPA_CORR_GLOBALI WHERE UPPER(VAR_DESC_CORR)='" + descCorr.ToUpper() + "' AND CHA_TIPO_CORR='O'");
            string sql = q.getSQL();
            logger.Debug(sql);
            rtn = ExecuteQuery(out ds, sql);
            return rtn;



        }

        private DocsPaUtils.Data.ParameterSP CreateParameter(string name, object value)
        {
            return new DocsPaUtils.Data.ParameterSP(name, value);
        }



        public string InsertCorrispondenti(DocsPaVO.documento.SchedaDocumento schedaDoc, DocsPaVO.utente.Corrispondente corrispondente)
        {
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("I_DPACorrglobali");
            q.setParam("param1", DocsPaDbManagement.Functions.Functions.GetSystemIdColName() +
                "ID_REGISTRO, ID_AMM, VAR_COD_RUBRICA, VAR_DESC_CORR, " +
                "DTA_INIZIO, CHA_TIPO_CORR, CHA_DETTAGLI, ID_PARENT, ID_OLD");
            q.setParam("param2", DocsPaDbManagement.Functions.Functions.GetSystemIdNextVal("DPA_CORR_GLOBALI") + "'" +
                schedaDoc.registro.systemId +
                "','" + schedaDoc.registro.idAmministrazione + "', null,'" +
                corrispondente.descrizione.Replace("'", "''") +
                "'," + DocsPaDbManagement.Functions.Functions.GetDate() + ",'O','0','0','0'");
            string queryString = q.getSQL();
            logger.Debug(queryString);
            string idCorrispondente;

            using (DBProvider dbProvider = new DBProvider())
            {
                dbProvider.InsertLocked(out idCorrispondente, queryString, "DPA_CORR_GLOBALI");
            }
            
            return idCorrispondente;
        }
        public string InsertCorrispondentiSP(DocsPaVO.documento.SchedaDocumento schedaDoc, DocsPaVO.utente.Corrispondente corrispondente)
        {
            string idCorrispondente = string.Empty;
            string prefix = System.Configuration.ConfigurationManager.AppSettings["prefissoCorrOccasionale"];
            //DocsPaDB.DBProvider db=new DBProvider();
            // Creazione parametri SP
            ArrayList sp_params = new ArrayList();
            DocsPaUtils.Data.ParameterSP res;

            res = new DocsPaUtils.Data.ParameterSP("RESULT", new Int32(), 10, DocsPaUtils.Data.DirectionParameter.ParamOutput, System.Data.DbType.Int32);

            // ID_REG
            if (corrispondente.idRegistro != null)
                sp_params.Add(new DocsPaUtils.Data.ParameterSP("ID_REG", Int32.Parse(corrispondente.idRegistro)));
            else
                sp_params.Add(new DocsPaUtils.Data.ParameterSP("ID_REG", 0));

            //IDAMM Modifica eff. da gadamo su indicazioni di luluciani (per far funzionare RDE)
            if (corrispondente.idAmministrazione != null)
                sp_params.Add(new DocsPaUtils.Data.ParameterSP("IDAMM", Int32.Parse(corrispondente.idAmministrazione)));
            else if (schedaDoc.registro.idAmministrazione != null)
                sp_params.Add(new DocsPaUtils.Data.ParameterSP("IDAMM", Int32.Parse(schedaDoc.registro.idAmministrazione)));
            else
                sp_params.Add(new DocsPaUtils.Data.ParameterSP("IDAMM", 0));

            //sp_params.Add (new DocsPaUtils.Data.ParameterSP("IDAMM",Int32.Parse(corrispondente.idAmministrazione)));
            sp_params.Add(new DocsPaUtils.Data.ParameterSP("Prefix_cod_rub", prefix));
            sp_params.Add(new DocsPaUtils.Data.ParameterSP("DESC_CORR", corrispondente.descrizione));
            sp_params.Add(new DocsPaUtils.Data.ParameterSP("CHA_DETTAGLI", "0"));
            sp_params.Add(new DocsPaUtils.Data.ParameterSP("ID_CORR_GLOBALI", 0));
            // modifica per l'email dell corrispondente occasionale
            if (!string.IsNullOrEmpty(corrispondente.email))
            {
                sp_params.Add(new DocsPaUtils.Data.ParameterSP("EMAIL", corrispondente.email));
            }
            else
            {
                sp_params.Add(new DocsPaUtils.Data.ParameterSP("EMAIL", DBNull.Value));
            }
            sp_params.Add(res);
            //BeginTransaction();
            // modifica per l'email dell corrispondente occasionale
            int resultStore = 0;

            using (DBProvider dbProvider = new DBProvider())
            {
                resultStore = dbProvider.ExecuteStoredProcedure("INS_OCC_2", sp_params, null);
            }

            if (res.Valore != null && res.Valore.ToString() != "" && resultStore != -1 && resultStore != 0)
            {
                idCorrispondente = res.Valore.ToString();
                //CommitTransaction();
                // modifica per l'email dell corrispondente occasionale
                if (corrispondente.email != null)
                {
                    try
                    {
                        bool resemail = false;
                        System.Text.StringBuilder recordInsert = new System.Text.StringBuilder();
                        DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("I_DPA_MAIL_CORR_ESTERNO");
                        recordInsert.Append("(\n");
                        recordInsert.Append(
                            ((DBType.ToUpper().Equals("ORACLE")) ? DocsPaDbManagement.Functions.Functions.GetSystemIdNextVal("DPA_MAIL_CORR_ESTERNI") + "\n" : "\n") +
                             idCorrispondente + ",\n" +
                            "'" + corrispondente.email.Trim() + "',\n " +
                            "'1',\n" +
                            "''");
                        recordInsert.Append(")");
                        q.setParam("value", recordInsert.ToString());

                        using (DBProvider dbProvider = new DBProvider())
                        {
                            resemail = dbProvider.ExecuteNonQuery(q.getSQL());
                        }
                        
                    }
                    catch (Exception ex)
                    {

                    }

                }
            }
            else
            {
                throw new Exception();
            }
            //else RollbackTransaction();
            return idCorrispondente;
        }


        public string AddDocArrivoPar(DocsPaVO.documento.SchedaDocumento schedaDoc, DocsPaVO.utente.Corrispondente corrispondente, string tipoCorr)
        {

            string queryString;
            DocsPaUtils.Query q;
            //un solo mittente
            if (tipoCorr == "M")
            {
                q = DocsPaUtils.InitQuery.getInstance().getQuery("D_DPADocArrivo");
                q.setParam("param1", "CHA_TIPO_MITT_DEST='" + tipoCorr + "' AND ID_PROFILE =" + schedaDoc.systemId);
                queryString = q.getSQL();
                logger.Debug(queryString);

                using (DocsPaDB.DBProvider dbProvider = new DBProvider())
                    dbProvider.ExecuteNonQuery(queryString);
            }
            else
            {
                q = DocsPaUtils.InitQuery.getInstance().getQuery("S_DPADocArrivoPar");
                q.setParam("param1", "ID_PROFILE=" + schedaDoc.systemId + " AND ID_MITT_DEST=" +
                    corrispondente.systemId + " AND CHA_TIPO_MITT_DEST='" + tipoCorr + "'");
                queryString = q.getSQL();
                logger.Debug(queryString);
                string res;

                using (DocsPaDB.DBProvider dbProvider = new DBProvider())
                    dbProvider.ExecuteScalar(out res, queryString);

                if (!res.Equals("0"))
                {
                    return "";
                }
            }
            //inserisco il corrispondente nella tabella DPA_DOC_ARRIVO_PAR
            q = DocsPaUtils.InitQuery.getInstance().getQuery("I_DPADocarrivopar");
            q.setParam("param1", DocsPaDbManagement.Functions.Functions.GetSystemIdColName() +
                "ID_PROFILE, ID_MITT_DEST,CHA_TIPO_MITT_DEST,ID_DOCUMENTTYPES");
            string idDocumenttypes = "0";
            if (schedaDoc != null && schedaDoc.protocollo != null)
            {
                if (schedaDoc.protocollo.GetType() == typeof(DocsPaVO.documento.ProtocolloEntrata))
                {
                    if (schedaDoc.mezzoSpedizione != null)
                        idDocumenttypes = schedaDoc.mezzoSpedizione.ToString();
                }
                else
                {
                    if (corrispondente.canalePref != null)
                        idDocumenttypes = corrispondente.canalePref.systemId;
                }
            }
            // Modifica per corrispondente occasionale
            if (tipoCorr == "O")
            {
                q.setParam("param2", DocsPaDbManagement.Functions.Functions.GetSystemIdNextVal("DPA_DOC_ARRIVO_PAR") +
                    schedaDoc.systemId + "," + corrispondente.systemId + ",'D'," + getIdMezzoSpedizioneByDesc("MAIL"));
            }
            else
            {
                q.setParam("param2", DocsPaDbManagement.Functions.Functions.GetSystemIdNextVal("DPA_DOC_ARRIVO_PAR") +
                   schedaDoc.systemId + "," + corrispondente.systemId + ",'" + tipoCorr + "'," + Convert.ToInt32(idDocumenttypes));

            }
            queryString = q.getSQL();
            logger.Debug(queryString);
            string idDocArrivoPar;

            // 03.02.2006 - gadamo: modifica 
            //InsertLocked(out idDocArrivoPar, queryString, "DPA_DOC_ARRIVO_PAR");  - - - commentata perchè esegue una CommitTransaction()

            bool rtn = false;
            using (DBProvider dbProvider = new DBProvider())
            {
                rtn = dbProvider.ExecuteNonQuery(queryString);
            }
            
            if (!rtn)
                throw new Exception("Tentativo di inserimento di id_mitt_dest errato nella dpa_doc_arrivo_par");

            using (DocsPaDB.DBProvider dbProvider = new DBProvider())
                dbProvider.ExecuteScalar(out idDocArrivoPar, DocsPaDbManagement.Functions.Functions.GetQueryLastSystemIdInserted());
            // fine modifica 
            logger.Debug("idDocArrivoPar = " + idDocArrivoPar);
            return idDocArrivoPar;

        }

        public string GetIdDocArrivoPar(string idProfile, DocsPaVO.utente.Corrispondente corrispondente, string tipoCorr)
        {
            string queryString;
            DocsPaUtils.Query q;
            q = DocsPaUtils.InitQuery.getInstance().getQuery("S_DPADocArrivoPar2");
            q.setParam("param1", "ID_PROFILE=" + idProfile + " AND ID_MITT_DEST=" +
                corrispondente.systemId + " AND CHA_TIPO_MITT_DEST IN (" + tipoCorr + ")");
            queryString = q.getSQL();
            logger.Debug(queryString);
            string res;
            ExecuteScalar(out res, queryString);

            logger.Debug("idDocArrivoPar = " + res);
            return res;
        }

        public void AddParolaChiave(string idProfile, ArrayList paroleChiave)
        {
            logger.Debug("addParoleChiave");
            string idParola;
            string queryString;
            if (paroleChiave == null)
                return;
            DocsPaUtils.Query q;
            //inserisco la parole chiave nella tabella DPA_PROF_PAROLE
            for (int i = 0; i < paroleChiave.Count; i++)
            {
                idParola = ((DocsPaVO.documento.ParolaChiave)paroleChiave[i]).systemId;
                q = DocsPaUtils.InitQuery.getInstance().getQuery("I_DPAProfparole");
                q.setParam("param2", DocsPaDbManagement.Functions.Functions.GetSystemIdColName());
                q.setParam("param1", DocsPaDbManagement.Functions.Functions.GetSystemIdNextVal("DPA_PROF_PAROLE") + idProfile + "," + idParola);
                queryString = q.getSQL();
                logger.Debug(queryString);

                using (DBProvider dbProvider = new DBProvider())
                {
                    dbProvider.ExecuteNonQuery(queryString);
                }
                
            }
        }

        public void SetDataUltimoProtocollo(ref DocsPaVO.documento.SchedaDocumento schedaDoc)
        {
            logger.Debug("setDataUltimoProtocollo");
            string newDate = schedaDoc.protocollo.dataProtocollazione.Substring(0, 10);
            logger.Debug("newDate=" + newDate);
            string oldDate = "";
            if (schedaDoc.registro.dataUltimoProtocollo != null && schedaDoc.registro.dataUltimoProtocollo != "")
            {
                oldDate = schedaDoc.registro.dataUltimoProtocollo.Substring(0, 10);
            }
            if (!oldDate.Equals(newDate))
            {
                DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("U_DPAElregistri");
                q.setParam("param1", "DTA_ULTIMO_PROTO=" +
                    DocsPaDbManagement.Functions.Functions.ToDate(schedaDoc.protocollo.dataProtocollazione));
                q.setParam("param2", "SYSTEM_ID=" + schedaDoc.registro.systemId);
                string queryString = q.getSQL();
                logger.Debug(queryString);
                ExecuteNonQuery(queryString);

                schedaDoc.registro.dataUltimoProtocollo = schedaDoc.protocollo.dataProtocollazione;
            }
        }

        public DocsPaVO.documento.RicercaDuplicati.EsitoRicercaDuplicatiEnum CercaDuplicati(DocsPaVO.documento.SchedaDocumento schedaDoc, string cercaDuplicati2,
                            out DocsPaVO.documento.InfoProtocolloDuplicato[] datiProtDupl)
        {
            datiProtDupl = new DocsPaVO.documento.InfoProtocolloDuplicato[0];

            logger.Debug("cercaDuplicati");
            ArrayList lista = new ArrayList();
            bool dta_Proto_in = false;
            bool var_Proto_in = false;
            // gestione dei mittenti/destinatari
            if (schedaDoc.protocollo == null)
            {
                //return true;
                return DocsPaVO.documento.RicercaDuplicati.EsitoRicercaDuplicatiEnum.ProtocolloNullo;
            }
            if (!schedaDoc.protocollo.GetType().Equals(typeof(DocsPaVO.documento.ProtocolloEntrata)))
            {
                //return false;
                return DocsPaVO.documento.RicercaDuplicati.EsitoRicercaDuplicatiEnum.NoProtocolloIngresso;
            }
            DocsPaVO.documento.ProtocolloEntrata pe = (DocsPaVO.documento.ProtocolloEntrata)schedaDoc.protocollo;

            //se non si specifica una descrizione Protocollo Mittente
            if (!(pe.mittente.descrizione != null && !pe.mittente.descrizione.Equals("")))
            {
                //return false;
                //if(!cercaDuplicati2.Equals("1"))
                return DocsPaVO.documento.RicercaDuplicati.EsitoRicercaDuplicatiEnum.NoMittente;
            }

            string img = "";
            if (dbType.ToUpper() == "SQL")
                img = "@dbuser@.getchaimg(DOCNUMBER) AS CHA_IMG ";
            else
                img = "getchaimg(DOCNUMBER) AS CHA_IMG ";


            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_Profile0");
            q.setParam("param1", "VAR_SEGNATURA,DTA_PROTO,ID_UO_PROT,SYSTEM_ID,NUM_PROTO, " + img);

            string lastParam = "SYSTEM_ID IN " +
                "(SELECT ID_PROFILE FROM DPA_DOC_ARRIVO_PAR WHERE ID_MITT_DEST IN (" +
                GetIdDestinatario(pe.mittente) +
                ") AND CHA_TIPO_MITT_DEST IN ('M', 'D')) AND CHA_DA_PROTO ='0' AND CHA_TIPO_PROTO = 'A' ";


            if (pe.descrizioneProtocolloMittente != null && !pe.descrizioneProtocolloMittente.Equals(""))
            {
                lastParam = lastParam + "AND UPPER(VAR_PROTO_IN) = '";
                lastParam += pe.descrizioneProtocolloMittente.ToUpper().Replace("'", "''");
                lastParam = lastParam + "'";
                var_Proto_in = true;
            }
            else
                lastParam = lastParam + "AND VAR_PROTO_IN IS NULL";

            if (!(pe.dataProtocolloMittente != null && !pe.dataProtocolloMittente.Equals("")))
                lastParam = lastParam + " AND DTA_PROTO_IN IS NULL ";
            else
            {
                lastParam = lastParam + " AND DTA_PROTO_IN = " + DocsPaDbManagement.Functions.Functions.ToDate(pe.dataProtocolloMittente);
                dta_Proto_in = true;
            }
            ////controllo sull'oggetto
            //if (pe.descrizioneProtocolloMittente == null && schedaDoc.oggetto.descrizione != null)
            //    lastParam += " AND VAR_PROF_OGGETTO = '" + schedaDoc.oggetto.descrizione + "'";

            //controllo sul registro utilizzato

            DocsPaDB.Query_Utils.Utils obj = new DocsPaDB.Query_Utils.Utils();
            if (!obj.isFiltroAooEnabled())
                lastParam += " AND ID_REGISTRO = " + schedaDoc.registro.systemId;

            if (schedaDoc.systemId != null && !schedaDoc.systemId.Equals(""))
                lastParam += " AND SYSTEM_ID != " + schedaDoc.systemId;

            lastParam += " ORDER BY SYSTEM_ID DESC";
            q.setParam("param2", lastParam);
            string dbuser = DocsPaDbManagement.Functions.Functions.GetDbUserSession();
            q.setParam("dbuser", dbuser);

            string queryString = q.getSQL();

            logger.Debug(queryString);

            DataSet ds = null;
            if (var_Proto_in || dta_Proto_in)
            {
                ds = new DataSet();
                ExecuteQuery(ds, "TableProtDuplicati", queryString);
            }

            if (ds != null && ds.Tables["TableProtDuplicati"].Rows.Count != 0)
            {
                // Caricamento array "datiProtDupl" in base ai risultati della query
                datiProtDupl = new DocsPaVO.documento.InfoProtocolloDuplicato[ds.Tables["TableProtDuplicati"].Rows.Count];
                int index = 0;
                string descUo = string.Empty;
                foreach (DataRow row in ds.Tables["TableProtDuplicati"].Rows)
                {
                    DocsPaVO.documento.InfoProtocolloDuplicato prot = new DocsPaVO.documento.InfoProtocolloDuplicato();
                    prot.segnaturaProtocollo = row["VAR_SEGNATURA"].ToString();
                    prot.dataProtocollo = row["DTA_PROTO"].ToString();
                    prot.docAcquisito = row["CHA_IMG"].ToString();
                    if (row["ID_UO_PROT"].ToString() != string.Empty)
                    {
                        q = DocsPaUtils.InitQuery.getInstance().getQuery("S_DPACorrGlobali");
                        q.setParam("param1", "A.VAR_DESC_CORR");
                        q.setParam("param2", "A.SYSTEM_ID = " + row["ID_UO_PROT"].ToString());
                        queryString = q.getSQL();
                        ExecuteScalar(out descUo, queryString);
                        if (descUo != null && descUo != string.Empty)
                            prot.uoProtocollatore = descUo;
                    }
                    prot.idProfile = row["SYSTEM_ID"].ToString();
                    prot.numProto = row["NUM_PROTO"].ToString();
                    datiProtDupl[index] = prot;
                    index++;
                }

                //il messaggio da restituire è di proto mittente duplicato solo nel caso in cui questo non sia vuoto altrimenti si tratta di stessa data e stesso mittente duplicati
                if (!string.IsNullOrEmpty(pe.descrizioneProtocolloMittente))
                {
                    //return (datiProtDupl.Length > 0);
                    if (pe.mittente.descrizione != null && !pe.mittente.descrizione.Equals(""))
                        return DocsPaVO.documento.RicercaDuplicati.EsitoRicercaDuplicatiEnum.DuplicatiMittenteProtocollo;
                    else
                        return DocsPaVO.documento.RicercaDuplicati.EsitoRicercaDuplicatiEnum.DuplicatiMittenteOggetto;
                }
                else
                    return DocsPaVO.documento.RicercaDuplicati.EsitoRicercaDuplicatiEnum.DuplicatiMittenteData;
            }
            else
            {
                if (cercaDuplicati2.Equals("1"))
                {
                    q = DocsPaUtils.InitQuery.getInstance().getQuery("S_Profile0");
                    q.setParam("param1", "VAR_SEGNATURA,DTA_PROTO,ID_UO_PROT,SYSTEM_ID,NUM_PROTO,VAR_PROF_OGGETTO, " + img);

                    lastParam = "SYSTEM_ID IN " +
                        "(SELECT ID_PROFILE FROM DPA_DOC_ARRIVO_PAR WHERE ID_MITT_DEST IN (" +
                        GetIdDestinatario(pe.mittente) +
                        ") AND CHA_TIPO_MITT_DEST IN ('M', 'D')) AND CHA_DA_PROTO ='0' AND CHA_TIPO_PROTO = 'A' ";

                    if (pe.descrizioneProtocolloMittente != null)
                    {
                        lastParam = lastParam + "AND UPPER(VAR_PROTO_IN) = '";
                        lastParam += pe.descrizioneProtocolloMittente.ToUpper().Replace("'", "''");
                        lastParam = lastParam + "'";
                    }

                    if (pe.dataProtocolloMittente != null && !pe.dataProtocolloMittente.Equals(""))
                        lastParam = lastParam + " AND DTA_PROTO_IN = " + DocsPaDbManagement.Functions.Functions.ToDate(pe.dataProtocolloMittente);

                    if (dbType.ToUpper().Equals("SQL"))
                        lastParam += " AND convert(datetime,CONVERT(CHAR(11),DTA_PROTO,103),103) = convert(datetime,convert(char(11)," + DocsPaDbManagement.Functions.Functions.GetDate() + ", 103), 103)";
                    else
                        lastParam += " AND to_date(to_char(DTA_PROTO,'dd/mm/yyyy'),'dd/mm/yyyy') = to_date(to_char(" + DocsPaDbManagement.Functions.Functions.GetDate() + ", 'dd/mm/yyyy'), 'dd/mm/yyyy')";
                    //to_date(to_char(dta_proto ,'dd/mm/yyyy'),'dd/mm/yyyy')= to_date(to_char(sysdate,'dd/mm/yyyy'),'dd/mm/yyyy')

                    //controllo sul registro utilizzato
                    lastParam += " AND ID_REGISTRO = " + schedaDoc.registro.systemId;

                    //controllo sull'oggetto
                    lastParam += " AND UPPER(VAR_PROF_OGGETTO) = '" + schedaDoc.oggetto.descrizione.ToUpper().Replace("'", "''") + "'";

                    if (schedaDoc.systemId != null && !schedaDoc.systemId.Equals(""))
                        lastParam += " AND SYSTEM_ID != " + schedaDoc.systemId;

                    lastParam += " ORDER BY SYSTEM_ID DESC";
                    q.setParam("param2", lastParam);
                    dbuser = DocsPaDbManagement.Functions.Functions.GetDbUserSession();
                    q.setParam("dbuser", dbuser);
                    queryString = q.getSQL();
                    logger.Debug(queryString);

                    ds = new DataSet();
                    ExecuteQuery(ds, "TableProtDuplicati2", queryString);

                    if (ds.Tables["TableProtDuplicati2"].Rows.Count != 0)
                    {
                        datiProtDupl = new DocsPaVO.documento.InfoProtocolloDuplicato[ds.Tables["TableProtDuplicati2"].Rows.Count];
                        int index = 0;
                        string descUo = string.Empty;
                        foreach (DataRow row in ds.Tables["TableProtDuplicati2"].Rows)
                        {
                            DocsPaVO.documento.InfoProtocolloDuplicato prot = new DocsPaVO.documento.InfoProtocolloDuplicato();
                            prot.segnaturaProtocollo = row["VAR_SEGNATURA"].ToString();
                            prot.dataProtocollo = row["DTA_PROTO"].ToString();
                            prot.docAcquisito = row["CHA_IMG"].ToString();
                            if (row["ID_UO_PROT"].ToString() != string.Empty)
                            {
                                q = DocsPaUtils.InitQuery.getInstance().getQuery("S_DPACorrGlobali");
                                q.setParam("param1", "A.VAR_DESC_CORR");
                                q.setParam("param2", "A.SYSTEM_ID = " + row["ID_UO_PROT"].ToString());
                                queryString = q.getSQL();
                                ExecuteScalar(out descUo, queryString);
                                if (descUo != null && descUo != string.Empty)
                                    prot.uoProtocollatore = descUo;
                            }
                            prot.idProfile = row["SYSTEM_ID"].ToString();
                            prot.numProto = row["NUM_PROTO"].ToString();
                            datiProtDupl[index] = prot;
                            index++;
                        }

                        //return (datiProtDupl.Length > 0);
                        return DocsPaVO.documento.RicercaDuplicati.EsitoRicercaDuplicatiEnum.DuplicatiMittenteOggetto;
                    }
                    else
                        return DocsPaVO.documento.RicercaDuplicati.EsitoRicercaDuplicatiEnum.NessunDuplicato;
                }
                else
                    return DocsPaVO.documento.RicercaDuplicati.EsitoRicercaDuplicatiEnum.NessunDuplicato;
            }
        }



        /// <summary>
        /// inserimento nella tabella dpa_coll_mspediz_documento
        /// </summary>
        /// <param name="idAmm"></param>
        /// <param name="idRuolo"></param>
        /// <param name="idUtente"></param>
        /// <param name="idDocumentTypes"></param>
        /// <param name="idCorrGlobali"></param>
        /// <returns></returns>
        public bool collegaMezzoSpedizioneDocumento(DocsPaVO.utente.InfoUtente info, string idDocumentTypes, string idProfile)
        {
            bool retValue = false;

            try
            {
                //BeginTransaction();

                DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("I_COLL_MSPEDIZ_DOCUMENTO");
                string dbType = System.Configuration.ConfigurationManager.AppSettings["DBType"].ToUpper();
                if (!dbType.ToUpper().Equals("SQL"))
                {
                    string nextVal = DocsPaDbManagement.Functions.Functions.GetSystemIdNextVal("");
                    nextVal = nextVal.Substring(0, nextVal.Length - 2);
                    q.setParam("id", nextVal);
                }
                q.setParam("idAmm", info.idAmministrazione);
                //q.setParam("idRuolo", info.idGruppo);
                //q.setParam("idUtente", info.idPeople);
                q.setParam("idDocumenttypes", idDocumentTypes);
                q.setParam("idProfile", idProfile);
                string commandText = q.getSQL();
                logger.Debug(commandText);

                int rowsAffected;


                using (DBProvider dbProvider = new DBProvider())
                {
                    if (ExecuteNonQuery(commandText, out rowsAffected))
                        retValue = (rowsAffected == 1);
                }

                //if (retValue)
                //    CommitTransaction();
                //else
                //    RollbackTransaction();
            }
            catch
            {
                //RollbackTransaction();
                retValue = false;
            }
            finally
            {
            }

            return retValue;
        }

        /// <summary>
        /// update nella tabella dpa_coll_mspediz_documento
        /// </summary>
        /// <param name="idAmm"></param>
        /// <param name="idRuolo"></param>
        /// <param name="idUtente"></param>
        /// <param name="idDocumentTypes"></param>
        /// <param name="idCorrGlobali"></param>
        /// <returns></returns>
        public bool updateMezzoSpedizioneDocumento(DocsPaVO.utente.InfoUtente info, string oldDocumentTypes, string idDocumentTypes, string idProfile)
        {
            bool retValue = false;

            try
            {
                string commandText = string.Empty;
                BeginTransaction();
                string verificaMS = "Select id_documenttypes from dpa_coll_mspediz_documento where idamm = ";
                verificaMS += info.idAmministrazione;
                verificaMS += " and id_profile = ";
                verificaMS += idProfile;
                string idDT = string.Empty;
                ExecuteScalar(out idDT, verificaMS);
                if (idDT != null)
                {
                    DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("U_COLL_MSPEDIZ_DOCUMENTO");
                    q.setParam("idAmm", info.idAmministrazione);
                    //q.setParam("idRuolo", info.idGruppo);
                    //q.setParam("idUtente", info.idPeople);
                    q.setParam("oldDocumenttypes", oldDocumentTypes);
                    q.setParam("idDocumenttypes", idDocumentTypes);
                    q.setParam("idProfile", idProfile);
                    commandText = q.getSQL();
                }
                else
                {
                    DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("I_COLL_MSPEDIZ_DOCUMENTO");
                    string dbType = System.Configuration.ConfigurationManager.AppSettings["DBType"].ToUpper();
                    if (!dbType.ToUpper().Equals("SQL"))
                    {
                        string nextVal = DocsPaDbManagement.Functions.Functions.GetSystemIdNextVal("");
                        nextVal = nextVal.Substring(0, nextVal.Length - 2);
                        q.setParam("id", nextVal);
                    }
                    q.setParam("idAmm", info.idAmministrazione);
                    q.setParam("idDocumenttypes", idDocumentTypes);
                    q.setParam("idProfile", idProfile);
                    commandText = q.getSQL();
                }
                logger.Debug(commandText);

                int rowsAffected = 0;

                if (ExecuteNonQuery(commandText, out rowsAffected))
                    retValue = (rowsAffected != 0);

                if (retValue)
                {
                    try
                    {
                        DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("U_MSPEDIZ_DOC_ARRIVO_PAR");
                        q.setParam("idDocumenttypes", idDocumentTypes);
                        q.setParam("idProfile", idProfile);
                        q.setParam("param1", " AND CHA_TIPO_MITT_DEST ='M' ");
                        commandText = q.getSQL();
                        logger.Debug("U_MSPEDIZ_DOC_ARRIVO_PAR: " + commandText);
                        ExecuteNonQuery(commandText);
                    }
                    catch (Exception ex1)
                    {
                        logger.Error(ex1.Message);
                    }

                }

                if (retValue)
                    CommitTransaction();
                else
                    RollbackTransaction();
            }
            catch
            {
                RollbackTransaction();
                retValue = false;
            }
            finally
            {
            }

            return retValue;
        }

        /// <summary>
        /// cancellazione nella tabella dpa_coll_mspediz_documento
        /// </summary>
        /// <param name="idAmm"></param>
        /// <param name="idRuolo"></param>
        /// <param name="idUtente"></param>
        /// <param name="idDocumentTypes"></param>
        /// <param name="idCorrGlobali"></param>
        /// <returns></returns>
        public bool deleteMezzoSpedizioneDocumento(DocsPaVO.utente.InfoUtente info, string idProfile)
        {
            bool retValue = false;

            try
            {
                BeginTransaction();

                DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("D_COLL_MSPEDIZ_DOCUMENTO");
                q.setParam("idAmm", info.idAmministrazione);
                //q.setParam("idRuolo", info.idGruppo);
                //q.setParam("idUtente", info.idPeople);
                q.setParam("idProfile", idProfile);
                string commandText = q.getSQL();
                logger.Debug(commandText);

                int rowsAffected;

                if (ExecuteNonQuery(commandText, out rowsAffected))
                    retValue = (rowsAffected == 1);

                if (retValue)
                    CommitTransaction();
                else
                    RollbackTransaction();
            }
            catch
            {
                RollbackTransaction();
                retValue = false;
            }
            finally
            {
            }

            return retValue;
        }

        /// <summary>
        /// aggiunge i dettagli ad un corr. occasionale
        /// </summary>
        /// <param name="corrispondente"></param>
        public static void addDettagliCorrOcc(DocsPaVO.utente.Corrispondente corrispondente)
        {
            if (corrispondente.tipoCorrispondente != null
                && corrispondente.tipoCorrispondente.Equals("O")
                && corrispondente.info != null)
            {
                Utenti ut = new Utenti();
                DocsPaVO.addressbook.DettagliCorrispondente dettagliCorrispondente = new DocsPaVO.addressbook.DettagliCorrispondente();
                DocsPaUtils.Data.TypedDataSetManager.MakeTyped(corrispondente.info, dettagliCorrispondente.Corrispondente.DataSet);
                if (!ut.CheckExistDettagliCorr(corrispondente.systemId))
                    ut.InsertDettagli(corrispondente.systemId, dettagliCorrispondente);
                ut.Dispose();
            }

        }

        /// <summary>
        /// CERCA I PROTOCOLLI GIà FATTI IN PRECEDENZA
        /// </summary>
        /// <param name="schedaDoc"></param>
        /// <returns></returns>
        public bool CercaDuplicati(DocsPaVO.documento.SchedaDocumento schedaDoc)
        {
            logger.Debug("cercaDuplicati");
            ArrayList lista = new ArrayList();

            // gestione dei mittenti/destinatari
            if (schedaDoc.protocollo == null)
            {
                return true;
            }
            if (!schedaDoc.protocollo.GetType().Equals(typeof(DocsPaVO.documento.ProtocolloEntrata)))
            {
                return false;
            }
            DocsPaVO.documento.ProtocolloEntrata pe = (DocsPaVO.documento.ProtocolloEntrata)schedaDoc.protocollo;

            //se non si specifica una descrizione Protocollo Mittente
            if (!(pe.descrizioneProtocolloMittente != null && !pe.descrizioneProtocolloMittente.Equals("")))
            {
                return false;
            }
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_Profile0");
            q.setParam("param1", "COUNT(SYSTEM_ID)");

            string lastParam = "SYSTEM_ID IN " +
                "(SELECT ID_PROFILE FROM DPA_DOC_ARRIVO_PAR WHERE ID_MITT_DEST IN (" +
                GetIdDestinatario(pe.mittente) +
                ") AND CHA_TIPO_MITT_DEST IN ('M', 'D')) AND CHA_TIPO_PROTO = 'A' ";
            if (pe.descrizioneProtocolloMittente != null)
            {
                lastParam = lastParam + "AND UPPER(VAR_PROTO_IN) = '";
                lastParam += pe.descrizioneProtocolloMittente.ToUpper().Replace("'", "''");
                lastParam = lastParam + "'";
            }
            else
            {
                lastParam = lastParam + "AND VAR_PROTO_IN IS NULL";
            }

            if (!(pe.dataProtocolloMittente != null && !pe.dataProtocolloMittente.Equals("")))
            {
                lastParam = lastParam + " AND DTA_PROTO_IN IS NULL ";
            }
            else
            {
                lastParam = lastParam + " AND DTA_PROTO_IN = " + DocsPaDbManagement.Functions.Functions.ToDate(pe.dataProtocolloMittente);
            }

            //controllo sul registro utilizzato
            lastParam += " AND ID_REGISTRO = " + schedaDoc.registro.systemId;

            if (schedaDoc.systemId != null && !schedaDoc.systemId.Equals(""))
            {
                lastParam += " AND SYSTEM_ID != " + schedaDoc.systemId;
            }
            q.setParam("param2", lastParam);
            string queryString = q.getSQL();
            logger.Debug(queryString);
            string numRes;
            ExecuteScalar(out numRes, queryString);

            if (numRes.Equals("0"))
            {
                return false;
            }
            else
            {
                return true;
            }
        }

        public string GetIdDestinatario(DocsPaVO.utente.Corrispondente corr)
        {
            if (corr.systemId != null && !corr.systemId.Equals(""))
                return corr.systemId;
            else
            {
                DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_DPACorrGlobali");
                q.setParam("param1", "SYSTEM_ID");
                q.setParam("param2", " UPPER(VAR_DESC_CORR)='" + corr.descrizione.ToUpper().Replace("'", "''") + "'");
                string queryString = q.getSQL();
                return queryString;
            }
        }

        protected bool UtenteAbilitatoAImportazionePregressi(DocsPaVO.utente.Ruolo objRuolo)
        {

            //SANDALI
            ArrayList funz = objRuolo.funzioni;
            foreach (DocsPaVO.utente.Funzione f in funz)//verifico se attiva la microfunz IMP_DOC_MASSIVA_PREG
            {
                if (f.codice.Equals("IMP_DOC_MASSIVA_PREG"))
                    return true;
            }
            return false;
        }

        public void ProtocollaDocProntoProtocollazione_SEM(DocsPaVO.utente.InfoUtente infoUtente, DocsPaVO.utente.Ruolo objRuolo, ref DocsPaVO.documento.SchedaDocumento schedaDoc)
        {
            try
            {
                semProtPronto.WaitOne();

                // Inizio transazione sul db
                BeginTransaction();
                bool forceProtocollazioneLibera = false;
                // verifico i dati di ingresso
                if (UtenteAbilitatoAImportazionePregressi(objRuolo))
                    forceProtocollazioneLibera = true;

                CheckInputData(infoUtente.idAmministrazione, schedaDoc, forceProtocollazioneLibera);
                logger.Debug("nomeUtente=" + schedaDoc.userId);

                //protocollazione libera il numero di protocollo viene già passato e quindi non calcolato
                bool protocollazioneLibera = false;
                if (!string.IsNullOrEmpty(ConfigurationSettings.AppSettings["PROTOCOLLAZIONE_LIBERA"]) &&
                    ConfigurationSettings.AppSettings["PROTOCOLLAZIONE_LIBERA"].ToUpper().Equals("TRUE"))
                    protocollazioneLibera = bool.Parse(ConfigurationSettings.AppSettings["PROTOCOLLAZIONE_LIBERA"].ToLower());

                /* MEV 3765 Gestione selettiva integrazione WSPIA
                 * Modifica MCaropreso:
                 * Effettua controllo sul flag associato al registro
                 */
                bool flagWSPIA = false;
                if (schedaDoc != null && schedaDoc.registro.FlagWspia != null &&
                    schedaDoc.registro.FlagWspia.Equals("1")
                    ) flagWSPIA = true;
                else
                    flagWSPIA = false;

                if (forceProtocollazioneLibera)
                    protocollazioneLibera = true;

                if (protocollazioneLibera || flagWSPIA)
                {
                    if (schedaDoc != null &&
                        schedaDoc.protocollo != null &&
                        !string.IsNullOrEmpty(schedaDoc.protocollo.anno) &&
                        !string.IsNullOrEmpty(schedaDoc.protocollo.numero) &&
                        !string.IsNullOrEmpty(schedaDoc.protocollo.dataProtocollazione))
                    {
                        schedaDoc.protocollo.segnatura = CalcolaSegnatura(schedaDoc, objRuolo);
                        if (string.IsNullOrEmpty(schedaDoc.protocollo.segnatura))
                        {
                            logger.Debug("errore durante la creazione della segnatura");
                            throw new Exception("Errore durante la creazione della segnatura");
                        }

                    }
                    else
                    {
                        if (!GetNumeroProtocollo(ref schedaDoc, objRuolo))
                        {
                            throw new Exception("Errore durante l'aggiornamento della DPA_REG_PROTO");
                        }
                    }

                }
                else
                {
                    // leggo il numero di protocollo
                    if (!GetNumeroProtocollo(ref schedaDoc, objRuolo))
                    {
                        throw new Exception("Errore durante l'aggiornamento della DPA_REG_PROTO");
                    }
                }

                //add massimo digregorio:
                aggiornaADL(ref schedaDoc);



                // aggiorno la tabella PROFILE
                schedaDoc.protocollo.daProtocollare = "0";

                //ABBATANGELI GIANLUIGI - Eseguo la commit solo se sono riuscito ad aggiornare schedaDoc
                Boolean is_committable = false;
                if (UpdateProfile(schedaDoc, infoUtente.sede, String.Empty))
                {
                    // Gabriele Melini 26-02-2014
                    // salvo le parole chiave, se esistono
                    if (schedaDoc.paroleChiave != null && schedaDoc.paroleChiave.Count > 0)
                    {
                        //schedaDoc.daAggiornareParoleChiave = true;
                        SalvaParoleChiave(ref schedaDoc);
                    }

                    if (UpdateNextProtocolNumber(schedaDoc))
                    {
                        //TODO:  
                        //14-09-2016    INC000000821327: commentato e aggiunto in basso per evitare che vengano estese le visibilità ai ruoli superiori del responsabile di registro
                        //SetSecurityResponsabileReg(schedaDoc);

                        // Se il documento è stato ricevuto per interoperabilità semplificata e 
                        // per il registro su cui è stato creato il predisposto, è attiva la gestione
                        // del documento pendente, si procede con l'estensione della visibilità
                        // ai superiori dei ruoli che vedono il documento
                        if (schedaDoc.typeId == InteroperabilitaSemplificata.SimplifiedInteroperabilityId)
                        {
                            Documentale documentale = new Documentale();
                            bool keepPrivate = false;
                            DocsPaVO.Interoperabilita.Semplificata.InteroperabilitySettings loadedData = null;
                            using (InteroperabilitaSemplificata dbIs = new InteroperabilitaSemplificata())
                            {
                                loadedData = dbIs.LoadSettings(schedaDoc.registro.systemId);
                                keepPrivate = loadedData.KeepPrivate;
                            }

                            if (keepPrivate && schedaDoc.privato == "0")
                            {
                                // Logging dell'azione di estenzione della visibilità
                                logger.DebugFormat("IS - Documento non privato, si procede all'estensione dei diritti per il documento {0}", schedaDoc.systemId);

                                // Recupero dei ruoli che vedono il documento
                                //15-09-2016 INC000000821327: commentato ed estendo la visibilta ai superiori solamente del ruolo protocollatore(se diverso da IS)
                                //List<String> roles = GetRuoliConVisibilitaSuDocumento(schedaDoc.systemId);
                                string role = GetRuoloProtocollatore(schedaDoc, loadedData);
                                if(!string.IsNullOrEmpty(role))
                                {
                                    documentale.ExtendVisibilityByQuery(
                                        infoUtente.idAmministrazione,
                                        role,
                                        schedaDoc.systemId);
                                }
                            }
                        }

                        // se il documento è stato ricevuto via mail, controllo se è stato mantenuto pendente.
                        // Se si, estendo la visibilità.
                        // Per gestione pendenti tramite PEC
                        if (schedaDoc.typeId == "MAIL" || schedaDoc.typeId == "INTEROPERABILITA")
                        {
                            Documentale documentale = new Documentale();
                            bool isDocPECPendente = false;
                            using (Interoperabilita dbI = new Interoperabilita())
                            {
                                isDocPECPendente = dbI.getDocPECPendente(schedaDoc.systemId);
                            }

                            if (isDocPECPendente && schedaDoc.privato == "0")
                            {
                                // Logging dell'azione di estenzione della visibilità
                                logger.DebugFormat("Interoperabilità PEC 4 - Documento non privato, si procede all'estensione dei diritti per il documento {0}", schedaDoc.systemId);

                                // Recupero dei ruoli che vedono il documento
                                //15-09-2016 INC000000821327: commentato ed estendo la visibilta ai superiori solamente del ruolo protocollatore(se diverso da IS)
                                //List<String> roles = GetRuoliConVisibilitaSuDocumento(schedaDoc.systemId);
                                string role = GetRuoloProtocollatore(schedaDoc, null);
                                if(!string.IsNullOrEmpty(role))
                                {
                                    documentale.ExtendVisibilityByQuery(
                                        infoUtente.idAmministrazione,
                                        role,
                                        schedaDoc.systemId);
                                }
                            }
                        }
                        SetSecurityResponsabileReg(schedaDoc);

                        CommitTransaction();
                        is_committable = true;
                    }
                }

                if (!is_committable)
                {
                    RollbackTransaction();
                    //protocollo non effettuato.
                    if (schedaDoc.protocollo != null)
                    {
                        schedaDoc.protocollo.numero = "";
                        schedaDoc.protocollo.dataProtocollazione = "";
                        schedaDoc.protocollo.segnatura = "";
                    }

                    throw new Exception();
                }

            }
            catch (Exception e)
            {
                RollbackTransaction();
                //protocollo non effettuato.
                if (schedaDoc.protocollo != null)
                {
                    schedaDoc.protocollo.numero = "";
                    schedaDoc.protocollo.dataProtocollazione = "";
                    schedaDoc.protocollo.segnatura = "";
                }
                logger.Error(e.Message);
                throw new Exception();
            }
            finally
            {
                semProtPronto.ReleaseMutex();
            }
        }

        public void ProtocollaDocProntoProtocollazione(DocsPaVO.utente.InfoUtente infoUtente, DocsPaVO.utente.Ruolo objRuolo, ref DocsPaVO.documento.SchedaDocumento schedaDoc)
        {
            try
            {
                // Inizio transazione sul db
                BeginTransaction();

                // verifico i dati di ingresso
                CheckInputData(infoUtente.idAmministrazione, schedaDoc);

                // leggo il numero di protocollo
                if (!GetNumeroProtocollo(ref schedaDoc, objRuolo))
                {
                    throw new Exception("Errore durante l'aggiornamento della DPA_REG_PROTO");
                }

                //add massimo digregorio set dati protocollatore
                //viene fatto anche per grigi e nella update profile finale detta=UpdateProfile(schedaDoc, sede);
                //SalvaProtocollatore(schedaDoc);

                //add massimo digregorio:
                aggiornaADL(ref schedaDoc);

                // aggiorno la tabella PROFILE
                schedaDoc.protocollo.daProtocollare = "0";

                //ABBATANGELI GIANLUIGI - Eseguo la commit solo se sono riuscito ad aggiornare schedaDoc
                Boolean is_committable = false;
                if (UpdateProfile(schedaDoc, infoUtente.sede, String.Empty))
                {
                    if (UpdateNextProtocolNumber(schedaDoc))
                    {
                        is_committable = true;
                    }
                }

                if (is_committable)
                {
                    CommitTransaction();
                }
                else
                {
                    RollbackTransaction();
                }
                #region codice commentato
                //se è risposta ad un protocollo, si aggiorna la tabella dei collegamenti
                //				if(schedaDoc.protocollo.rispostaProtocollo!=null&&schedaDoc.protocollo.rispostaProtocollo.idProfile!=null)
                //				{
                //					UpdateCollegamenti(schedaDoc);
                //				}

                //db.closeConnection();
                // TODO: gestire i messaggi di invio conferma
                #endregion
            }
            catch (Exception e)
            {
                RollbackTransaction();
                logger.Error(e.Message);
            }
        }

        //Emanuela 02/07/2014: aggiunto infoUtente nella firma del metodo per aggiungere lo storico del mittente nel caso in cui sia da aggiornare
        public bool AddCorrispondenti(DocsPaVO.documento.SchedaDocumento schedaDoc, DocsPaVO.utente.InfoUtente infoUtente)
        {
            bool result = true;
            string idDocArrivoPar = "";
            DocsPaVO.utente.Corrispondente corrispondente;

            if (schedaDoc.protocollo.GetType() == typeof(DocsPaVO.documento.ProtocolloEntrata))
            {
                //Mittente
                if (((DocsPaVO.documento.ProtocolloEntrata)schedaDoc.protocollo).daAggiornareMittente)
                {
                    schedaDoc.protocollo.modMittDest = "1";
                    DeleteDocArrivoPar(infoUtente.idPeople, infoUtente.idCorrGlobali, schedaDoc.systemId, "M");
                }
                logger.Debug("AddCorrispondenti: protocollo in entrata");
                corrispondente = ((DocsPaVO.documento.ProtocolloEntrata)schedaDoc.protocollo).mittente;
                if (!AddCorrispondente(schedaDoc, ref corrispondente, infoUtente.idAmministrazione))
                {
                    result = false;
                }
                idDocArrivoPar = AddDocArrivoPar(schedaDoc, corrispondente, "M");
                ((DocsPaVO.documento.ProtocolloEntrata)schedaDoc.protocollo).mittente = corrispondente;
                addDettagliCorrOcc(corrispondente);

                //Mittente intermedio
                if (((DocsPaVO.documento.ProtocolloEntrata)schedaDoc.protocollo).mittenteIntermedio != null)
                {
                    if (((DocsPaVO.documento.ProtocolloEntrata)schedaDoc.protocollo).daAggiornareMittenteIntermedio)
                    {
                        schedaDoc.protocollo.modMittInt = "1";
                        DeleteDocArrivoPar(infoUtente.idPeople, infoUtente.idCorrGlobali, schedaDoc.systemId, "I");
                    }
                    corrispondente = ((DocsPaVO.documento.ProtocolloEntrata)schedaDoc.protocollo).mittenteIntermedio;
                    if (!AddCorrispondente(schedaDoc, ref corrispondente, infoUtente.idAmministrazione))
                    {
                        result = false;
                    }
                    idDocArrivoPar = AddDocArrivoPar(schedaDoc, corrispondente, "I");
                    ((DocsPaVO.documento.ProtocolloEntrata)schedaDoc.protocollo).mittenteIntermedio = corrispondente;

                    addDettagliCorrOcc(corrispondente);

                }

                //Mittenti Multipli
                if (((DocsPaVO.documento.ProtocolloEntrata)schedaDoc.protocollo).mittenti != null)
                {
                    if (((DocsPaVO.documento.ProtocolloEntrata)schedaDoc.protocollo).daAggiornareMittentiMultipli)
                    {
                        DeleteDocArrivoPar(infoUtente.idPeople, infoUtente.idCorrGlobali, schedaDoc.systemId, "MD");
                    }
                    for (int i = 0; i < ((DocsPaVO.documento.ProtocolloEntrata)schedaDoc.protocollo).mittenti.Count; i++)
                    {
                        DocsPaVO.utente.Corrispondente corr = (DocsPaVO.utente.Corrispondente)((DocsPaVO.documento.ProtocolloEntrata)schedaDoc.protocollo).mittenti[i];
                        if (!AddCorrispondente(schedaDoc, ref corr, infoUtente.idAmministrazione))
                            result = false;
                        AddDocArrivoPar(schedaDoc, corr, "MD");
                        addDettagliCorrOcc(corr);
                    }
                }
            }
            else if (schedaDoc.protocollo.GetType() == typeof(DocsPaVO.documento.ProtocolloUscita) ||
                schedaDoc.protocollo.GetType() == typeof(DocsPaVO.documento.ProtocolloInterno))
            {

                // Destinatari
                logger.Debug("AddCorrispondenti: protocollo in uscita / interno");
                ArrayList listaCorripondenti = ((DocsPaVO.documento.ProtocolloUscita)schedaDoc.protocollo).destinatari;

                for (int i = 0; listaCorripondenti != null && i < listaCorripondenti.Count; i++)
                {
                    corrispondente = (DocsPaVO.utente.Corrispondente)listaCorripondenti[i];
                    if (!AddCorrispondente(schedaDoc, ref corrispondente, infoUtente.idAmministrazione))
                    {
                        result = false;
                    }
                    if (!string.IsNullOrEmpty(corrispondente.tipoCorrispondente) && corrispondente.tipoCorrispondente.Equals("O") && !string.IsNullOrEmpty(corrispondente.email))
                    {
                        // Modifica per corrispondente occasionale
                        idDocArrivoPar = AddDocArrivoPar(schedaDoc, corrispondente, "O");
                    }
                    else if (!string.IsNullOrEmpty(corrispondente.tipoCorrispondente) && (corrispondente.tipoCorrispondente.Equals("F") || corrispondente.tipoCorrispondente.Equals("L")))
                        idDocArrivoPar = AddDocArrivoPar(schedaDoc, corrispondente, corrispondente.tipoCorrispondente);
                    else
                        idDocArrivoPar = AddDocArrivoPar(schedaDoc, corrispondente, "D");
                    //					if(schedaDoc.protocollo.GetType() != typeof(DocsPaVO.documento.ProtocolloInterno))
                    //					{
                    //						InsertStatoInvio(corrispondente, idDocArrivoPar, schedaDoc.registro.systemId, schedaDoc.systemId);
                    //					}
                    ((DocsPaVO.documento.ProtocolloUscita)schedaDoc.protocollo).destinatari[i] = corrispondente;

                    addDettagliCorrOcc(corrispondente);
                }

                // Destinatari per conoscenza
                listaCorripondenti = ((DocsPaVO.documento.ProtocolloUscita)schedaDoc.protocollo).destinatariConoscenza;

                for (int i = 0; listaCorripondenti != null && i < listaCorripondenti.Count; i++)
                {
                    corrispondente = (DocsPaVO.utente.Corrispondente)listaCorripondenti[i];
                    if (!AddCorrispondente(schedaDoc, ref corrispondente, infoUtente.idAmministrazione))
                    {
                        result = false;
                    }
                    idDocArrivoPar = AddDocArrivoPar(schedaDoc, corrispondente, "C");
                    //					if(schedaDoc.protocollo.GetType() != typeof(DocsPaVO.documento.ProtocolloInterno))
                    //					{
                    //						InsertStatoInvio(corrispondente, idDocArrivoPar, schedaDoc.registro.systemId, schedaDoc.systemId);
                    //					}
                    ((DocsPaVO.documento.ProtocolloUscita)schedaDoc.protocollo).destinatariConoscenza[i] = corrispondente;
                    addDettagliCorrOcc(corrispondente);
                }
            }

            if ((schedaDoc.protocollo.GetType() == typeof(DocsPaVO.documento.ProtocolloUscita) && ((DocsPaVO.documento.ProtocolloUscita)schedaDoc.protocollo).mittente != null))
            {
                //Mittente nel caso del protocollo in uscita
                logger.Debug("AddCorrispondenti: mittente per protocollo in uscita");
                corrispondente = ((DocsPaVO.documento.ProtocolloUscita)schedaDoc.protocollo).mittente;
                if (!AddCorrispondente(schedaDoc, ref corrispondente, infoUtente.idAmministrazione))
                {
                    result = false;
                }
                idDocArrivoPar = AddDocArrivoPar(schedaDoc, corrispondente, "M");
                ((DocsPaVO.documento.ProtocolloUscita)schedaDoc.protocollo).mittente = corrispondente;
            }
            if ((schedaDoc.protocollo.GetType() == typeof(DocsPaVO.documento.ProtocolloInterno)))
            {
                //Mittente nel caso del protocollo interno
                logger.Debug("AddCorrispondenti: mittente per protocollo interno");
                corrispondente = ((DocsPaVO.documento.ProtocolloInterno)schedaDoc.protocollo).mittente;
                if (!AddCorrispondente(schedaDoc, ref corrispondente, infoUtente.idAmministrazione))
                {
                    result = false;
                }
                idDocArrivoPar = AddDocArrivoPar(schedaDoc, corrispondente, "M");
                ((DocsPaVO.documento.ProtocolloInterno)schedaDoc.protocollo).mittente = corrispondente;

            }
            return result;
        }

        public void findCorrOcc(ref DocsPaVO.utente.Corrispondente corr)
        {
            bool rtn = false;
            DataSet ds;
            if (!(corr.systemId != null && corr.systemId != ""))
            {
                rtn = GetCorrOcc(corr.descrizione, out ds);
                if (!rtn)
                {
                    if (ds != null && ds.Tables[0].Rows.Count > 0)
                    {
                        corr.systemId = ds.Tables[0].Rows[0][0].ToString();
                        corr.codiceRubrica = ds.Tables[0].Rows[0][1].ToString();
                    }
                }


            }

        }
        public bool AddCorrispondente(DocsPaVO.documento.SchedaDocumento schedaDoc, ref DocsPaVO.utente.Corrispondente corrispondente, string idAmm)
        {
            bool exec = true;
            string idCorrispondente = "";
            idCorrispondente = corrispondente.systemId;

            if (string.IsNullOrEmpty(idCorrispondente))
            {
                if (corrispondente.inRubricaComune)
                {
                    // Se il corrispondente proviene da rubrica comune, viene inserito come corrispondente in docspa
                    DocsPaVO.utente.Corrispondente corrInserted = null;

                    using (Utenti utentiDb = new Utenti())
                        exec = utentiDb.InsertCorrispondente(corrispondente, null, idAmm, ref corrInserted);

                    if (exec)
                        corrispondente = corrInserted;
                }
                else
                {
                    if (corrispondente != null &&
                   corrispondente.tipoCorrispondente == null
                   && corrispondente.tipoIE == null)
                        // errore da RDE, non dovremmo passare i dati così, però per compatibilità metto 
                        //OCCASIANALE
                        corrispondente.tipoCorrispondente = "O";

                    if (corrispondente.tipoCorrispondente.Equals("F"))
                    {
                        DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_SYSTEM_ID_DPA_CORR_GLOBALI");
                        bool retValue = false;
                        q.setParam("param1", corrispondente.codiceRubrica.ToUpper());
                        string queryString = q.getSQL();
                        logger.Debug(queryString);
                        string result;

                        using (DBProvider dbProvider = new DBProvider())
                        {
                            dbProvider.ExecuteScalar(out result, queryString);
                        }
                        
                        if (!string.IsNullOrEmpty(result))
                            corrispondente.systemId = result;
                    }
                    else
                    {
                        // Inserimento corrispondente come corrispondente occasionale
                        if (corrispondente.tipoCorrispondente.Equals("O"))
                            idCorrispondente = InsertCorrispondentiSP(schedaDoc, corrispondente);
                        else
                            idCorrispondente = InsertCorrispondenti(schedaDoc, corrispondente);

                        if (idCorrispondente != null && idCorrispondente != String.Empty)
                        {
                            //aggiorno il codice rubrica
                            string prefix = System.Configuration.ConfigurationManager.AppSettings["prefissoCorrOccasionale"];

                            corrispondente.systemId = idCorrispondente;
                            corrispondente.codiceRubrica = prefix + idCorrispondente;

                            logger.Debug("idCorrispondente = " + idCorrispondente);
                        }
                        else
                        {
                            exec = false;
                        }
                    }
                }
            }
            return exec;
        }

        public DocsPaVO.documento.ResultProtocollazione CheckInputData(string idAmministrazione, DocsPaVO.documento.SchedaDocumento schedaDoc)
        {
            return CheckInputData(idAmministrazione, schedaDoc, null);
        }


        public DocsPaVO.documento.ResultProtocollazione CheckInputData(string idAmministrazione, DocsPaVO.documento.SchedaDocumento schedaDoc, bool? forceProtollazioneLibera)
        {
            // metodo modificato il 07/12/2005 - gadamo

            DocsPaVO.documento.ResultProtocollazione risultatoProtocollazione = DocsPaVO.documento.ResultProtocollazione.OK;

            try
            {

                if (idAmministrazione != null && idAmministrazione != string.Empty)
                {
                    logger.Debug("idAmministrazione = " + idAmministrazione);

                    // se è una PROTOCOLLAZIONE-----------------------------------------------
                    if (schedaDoc.protocollo != null)
                    {
                        //controllo presenza del formato della stringa di segnatura
                        string codice = DocsPaDB.Utils.Personalization.getInstance(idAmministrazione).FormatoSegnatura;
                        if (codice == null || codice.Equals(""))
                        {
                            if (codice == null || codice.Equals(""))
                            {
                                //in alcuni casi, l'oggetto Personalization non è not null, ma il formato segnatura è null!!
                                //per evitare il blocco della protocollazione a meno di un iisreset inserisco questo codice.
                                logger.Debug("Ricalcolo Personalization");
                                DocsPaDB.Utils.Personalization.Reset();
                                codice = DocsPaDB.Utils.Personalization.getInstance(idAmministrazione).FormatoSegnatura;
                            }

                            if (codice == null || codice.Equals(""))
                            {
                                risultatoProtocollazione = DocsPaVO.documento.ResultProtocollazione.FORMATO_SEGNATURA_MANCANTE;
                                throw new Exception("Formato della segnatura non impostato. Contattare l'Amministratore");
                            }
                        }

                        // ...verifica la DATA DI PROTOCOLLAZIONE-----------------------------------------------
                        if (schedaDoc.protocollo.dataProtocollazione != null)
                        {
                            //AGGIUNGERE CONTROLLO REGISTRO (DA SchedaDoc)??
                            bool protocollazioneLibera = false;
                            if (!string.IsNullOrEmpty(ConfigurationSettings.AppSettings["PROTOCOLLAZIONE_LIBERA"]) &&
                    ConfigurationSettings.AppSettings["PROTOCOLLAZIONE_LIBERA"].ToUpper().Equals("TRUE"))
                                protocollazioneLibera = bool.Parse(ConfigurationSettings.AppSettings["PROTOCOLLAZIONE_LIBERA"].ToLower());

                            /* MEV 3765 Gestione selettiva integrazione WSPIA
                             * Modifica MCaropreso:
                             * Effettua controllo sul flag associato al registro
                             */
                            bool flagWSPIA = false;
                            if (schedaDoc != null &&
                                schedaDoc.registro.FlagWspia.Equals("1")
                                ) flagWSPIA = true;
                            else
                                flagWSPIA = false;

                            //Import Pregressi
                            protocollazioneLibera = schedaDoc.pregresso;

                            if (forceProtollazioneLibera != null)
                                if (forceProtollazioneLibera.Value)
                                    protocollazioneLibera = true;

                            if (protocollazioneLibera || flagWSPIA)
                            {
                                if (schedaDoc != null &&
                                    schedaDoc.protocollo != null &&
                                    !string.IsNullOrEmpty(schedaDoc.protocollo.anno) &&
                                    !string.IsNullOrEmpty(schedaDoc.protocollo.numero) &&
                                    !string.IsNullOrEmpty(schedaDoc.protocollo.dataProtocollazione))
                                { }
                                else
                                {
                                    string res;
                                    string date = DocsPaDbManagement.Functions.Functions.ToDate(schedaDoc.protocollo.dataProtocollazione);
                                    GetNumRegistri(out res, schedaDoc.registro.systemId, date);

                                    if (!res.Equals("0"))
                                    {
                                        risultatoProtocollazione = DocsPaVO.documento.ResultProtocollazione.DATA_ERRATA;
                                        throw new Exception("La data di protocollazione non è valida");
                                    }

                                    if (DateTime.Now < DocsPaUtils.Functions.Functions.ToDate(schedaDoc.protocollo.dataProtocollazione))
                                    {
                                        risultatoProtocollazione = DocsPaVO.documento.ResultProtocollazione.DATA_SUCCESSIVA_ATTUALE;
                                        throw new Exception("La data di protocollazione è successiva a quella attuale");
                                    }
                                }
                            }
                            //modifica effettuata per evitare i controlli seguenti in caso di chiamata da TRANSFER INPS(in cui flagWSpia = 0)
                            //16/06/2011 AF 
                            else
                            {
                                string res;
                                string date = DocsPaDbManagement.Functions.Functions.ToDate(schedaDoc.protocollo.dataProtocollazione);
                                GetNumRegistri(out res, schedaDoc.registro.systemId, date);

                                if (!res.Equals("0"))
                                {
                                    risultatoProtocollazione = DocsPaVO.documento.ResultProtocollazione.DATA_ERRATA;
                                    throw new Exception("La data di protocollazione non è valida");
                                }

                                if (DateTime.Now < DocsPaUtils.Functions.Functions.ToDate(schedaDoc.protocollo.dataProtocollazione))
                                {
                                    risultatoProtocollazione = DocsPaVO.documento.ResultProtocollazione.DATA_SUCCESSIVA_ATTUALE;
                                    throw new Exception("La data di protocollazione è successiva a quella attuale");
                                }
                            }
                        }


                        // ...verifica il REGISTRO--------------------------------------------------------------
                        if (schedaDoc.registro == null)
                        {
                            risultatoProtocollazione = DocsPaVO.documento.ResultProtocollazione.REGISTRO_MANCANTE;
                            throw new Exception("Il registro è obbligatorio");
                        }
                        else
                        {
                            if (!schedaDoc.pregresso)
                            {
                                string result;
                                GetStatoRegistri(out result, schedaDoc.registro.systemId);

                                if (!result.Equals("A"))
                                {
                                    risultatoProtocollazione = DocsPaVO.documento.ResultProtocollazione.REGISTRO_CHIUSO;
                                    throw new Exception("Il registro non è aperto");
                                }
                            }
                        }

                        // ...verifica il TIPO DI PROTOCOLLAZIONE-----------------------------------------------

                        // in ENTRATA...
                        if (schedaDoc.protocollo.GetType() == typeof(DocsPaVO.documento.ProtocolloEntrata))
                        {
                            // esiste il mittente?...
                            if (((DocsPaVO.documento.ProtocolloEntrata)schedaDoc.protocollo).mittente == null)
                            {
                                risultatoProtocollazione = DocsPaVO.documento.ResultProtocollazione.MITTENTE_MANCANTE;
                                throw new Exception("Il mittente è obbligatorio");
                            }
                        }

                        // in USCITA...
                        if (schedaDoc.protocollo.GetType() == typeof(DocsPaVO.documento.ProtocolloUscita))
                        {
                            // esiste il destinatario?...
                            if (((DocsPaVO.documento.ProtocolloUscita)schedaDoc.protocollo).destinatari.Count == 0)
                            {
                                risultatoProtocollazione = DocsPaVO.documento.ResultProtocollazione.DESTINATARIO_MANCANTE;
                                throw new Exception("Il destinatario è obbligatorio");
                            }
                        }

                        // INTERNO...
                        if (schedaDoc.protocollo.GetType() == typeof(DocsPaVO.documento.ProtocolloInterno))
                        {
                            // esiste il mittente?...
                            if (((DocsPaVO.documento.ProtocolloInterno)schedaDoc.protocollo).mittente.descrizione == null
                                || (((DocsPaVO.documento.ProtocolloInterno)schedaDoc.protocollo).mittente.descrizione.Length == 0))
                            {
                                risultatoProtocollazione = DocsPaVO.documento.ResultProtocollazione.MITTENTE_MANCANTE;
                                throw new Exception("Il mitttente è obbligatorio");
                            }
                        }
                    }

                    // ...verifica il campo oggetto (sia per il protocollo sia per i doc. grigi) ----------------
                    if (!(schedaDoc.oggetto != null && schedaDoc.oggetto.descrizione != null && !schedaDoc.oggetto.descrizione.Equals("")))
                    {
                        risultatoProtocollazione = DocsPaVO.documento.ResultProtocollazione.OGGETTO_MANCANTE;
                        throw new Exception("L'oggetto è obbligatorio");
                    }

                }
                else
                {
                    risultatoProtocollazione = DocsPaVO.documento.ResultProtocollazione.AMMINISTRAZIONE_MANCANTE;
                    throw new Exception("idAmministrazione non trovata");
                }
            }
            catch (Exception exception)
            {
                logger.Error("Errore (gestito) nella validazione dei dati di input.", exception);
            }

            return risultatoProtocollazione;
        }


        /// <summary>
        /// Creazione dell'allegato
        /// </summary>
        /// <param name="schedaDocumento"></param>
        /// <param name="forwardingSource">Id del documento sorgente dell'inoltro.</param>
        /// <returns></returns>
        public void CreateAllegato(DocsPaVO.utente.InfoUtente infoUtente, DocsPaVO.documento.SchedaDocumento schedaDocumento, string commentoVersione, int numeroPagineVersione, String forwardingSource, out int versionId)
        {
            versionId = 0;

            try
            {
                ArrayList parameters = new ArrayList();

                parameters.Add(CreateParameter("idDocumentoPrincipale", schedaDocumento.documentoPrincipale.idProfile));
                parameters.Add(CreateParameter("idPeople", schedaDocumento.idPeople));
                parameters.Add(CreateParameter("comments", commentoVersione));
                parameters.Add(CreateParameter("numeroPagine", numeroPagineVersione));
                string delegato = "0";
                if (infoUtente.delegato != null)
                    delegato = infoUtente.delegato.idPeople;
                parameters.Add(CreateParameter("idPeopleDelegato", delegato));
                DocsPaUtils.Data.ParameterSP idProfileParam = new DocsPaUtils.Data.ParameterSP("idProfile", 0, 0, DocsPaUtils.Data.DirectionParameter.ParamOutput, System.Data.DbType.Int32);
                parameters.Add(idProfileParam);

                DocsPaUtils.Data.ParameterSP versionIdParam = new DocsPaUtils.Data.ParameterSP("versionId", 0, 0, DocsPaUtils.Data.DirectionParameter.ParamOutput, System.Data.DbType.Int32);
                parameters.Add(versionIdParam);

                using (DBProvider dbProvider = new DBProvider())
                {
                    dbProvider.ExecuteStoredProcedure("createAllegato", parameters, null);
                }
                

                if (idProfileParam.Valore != null)
                {
                    schedaDocumento.systemId = idProfileParam.Valore.ToString();
                    schedaDocumento.docNumber = schedaDocumento.systemId;
                }

                if (versionIdParam.Valore != null)
                    versionId = Convert.ToInt32(versionIdParam.Valore);


                if (string.IsNullOrEmpty(schedaDocumento.systemId))
                    throw new ApplicationException("Errore nell'esecuzione della procedura 'createAllegato'");
                else
                {
                    //Aggiorno LAST_EDIT_DATE del documento principale
                    UpdateLastEditDateProfile(schedaDocumento.systemId);

                    // leggo le informazioni sul documento dalla profile
                    GetProfile(infoUtente, ref schedaDocumento);

                    // Inserimento oggetto
                    InsertOgg(infoUtente.idAmministrazione, ref schedaDocumento);

                    // Inserimento parole chiave
                    if (schedaDocumento.paroleChiave != null && schedaDocumento.paroleChiave.Count > 0)
                    {
                        schedaDocumento.daAggiornareParoleChiave = true;

                        SalvaParoleChiave(ref schedaDocumento);
                    }

                    UpdateProfile(schedaDocumento, infoUtente.sede, forwardingSource);

                    // Inserimento delle note dell'allegato
                    UpdateNoteDocumento(infoUtente, schedaDocumento);
                }
            }
            catch (Exception ex)
            {
                throw new ApplicationException(string.Format("Errore nella creazione dell'allegato: {0}", ex.Message));
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="idAmministrazione"></param>
        /// <param name="schedaDoc"></param>
        /// <param name="infoUtente"></param>
        /// <param name="objRuolo"></param>
        /// <param name="ruoliSuperiori"></param>
        /// <returns></returns>
        public bool AddDocGrigia(string idAmministrazione, ref DocsPaVO.documento.SchedaDocumento schedaDoc, DocsPaVO.utente.InfoUtente infoUtente, DocsPaVO.utente.Ruolo objRuolo, out DocsPaVO.utente.Ruolo[] ruoliSuperiori)
        {
            logger.Info("BEGIN");
            bool result = true; // Presume successo
            ruoliSuperiori = null;

            try
            {

                // Inizio transazione sul db
                BeginTransaction();

                // leggo le informazioni sul documento dalla profile
                GetProfile(infoUtente, ref schedaDoc);

                // Setto i permessi per i superiori dell'utente
                //schedaDoc = SetDocTrustees(schedaDoc, objRuolo);	
                schedaDoc = TransactionSetDocTrustees(schedaDoc, objRuolo, this, out ruoliSuperiori, infoUtente.delegato);

                // oggetto
                InsertOgg(idAmministrazione, ref schedaDoc);

                // parole chiave
                schedaDoc.daAggiornareParoleChiave = true;
                SalvaParoleChiave(ref schedaDoc);
                logger.Debug("Aggiunto tipoProto G");
                schedaDoc.tipoProto = "G";

                // aggiorno la tabella PROFILE
                if (UpdateProfile(schedaDoc, infoUtente.sede, String.Empty))
                {
                    UpdateNoteDocumento(infoUtente, schedaDoc);

                    CommitTransaction();
                }
                else
                {
                    RollbackTransaction();
                    result = false;
                }

                CloseConnection();
            }
            catch (Exception e)
            {
                RollbackTransaction();

                logger.Error("Errore nella gestione dei documenti (Query - AddDocGrigia) ", e);
                //throwException("F_System");

                result = false;
            }
            logger.Info("END");
            return result;
        }

        /// <summary>
        /// </summary>
        /// <param name="schedaDoc"></param>
        /// <param name="objSicurezza"></param>
        /// <param name="objRuolo"></param>
        /// <param name="documento"></param>
        /// <returns></returns>
        public bool ProtocollaDocNuovo(ref DocsPaVO.documento.SchedaDocumento schedaDoc, DocsPaVO.utente.InfoUtente infoUtente, DocsPaVO.utente.Ruolo objRuolo, out DocsPaVO.utente.Ruolo[] ruoliSuperiori)
        {
            bool result = true;
            ruoliSuperiori = null;

            try
            {
                //TODO: 


                // Inizio transazione sul db
                BeginTransaction();

                // leggo le informazioni sul documento dalla profile
                GetProfile(infoUtente, ref schedaDoc);

                // Setto i permessi per i superiori dell'utente
                schedaDoc = SetDocTrustees(schedaDoc, objRuolo, out ruoliSuperiori, infoUtente.delegato);

                // oggetto
                InsertOgg(infoUtente.idAmministrazione, ref schedaDoc);

                // leggo il numero di protocollo
                if (!GetNumeroProtocollo(ref schedaDoc, objRuolo))
                {
                    throw new Exception("Errore durante l'aggiornamento della DPA_REG_PROTO");
                }

                //add massimo digregorio set dati protocollatore
                //viene fatto anche per grigi e nella update profile finale detta=UpdateProfile(schedaDoc, sede);
                //SalvaProtocollatore(schedaDoc);

                // aggiorno la tabella PROFILE
                schedaDoc.protocollo.daProtocollare = "0";

                if (UpdateProfile(schedaDoc, infoUtente.sede, String.Empty))
                {
                    // corrispondenti
                    if (AddCorrispondenti(schedaDoc, infoUtente))
                    {
                        //data ultimo protocollo
                        SetDataUltimoProtocollo(ref schedaDoc);

                        // Aggiornamento note del documento
                        UpdateNoteDocumento(infoUtente, schedaDoc);

                        //ABBATANGELI GIANLUIGI - Eseguo la commit solo se sono riuscito ad aggiornare schedaDoc
                        if (UpdateNextProtocolNumber(schedaDoc))
                        {
                            CommitTransaction();
                            logger.Debug("-------------------- FINE TRANSAZIONE DI PROTOCOLLAZIONE ---------------------");
                        }
                        else
                        {
                            RollbackTransaction();
                            result = false;
                            logger.Debug("-------FINE TRANSAZIONE DI PROTOCOLLAZIONE --- ERRORE NUOVO NUM PROTOCOLLO---");
                        }
                    }
                    else
                    {
                        RollbackTransaction();
                        result = false;
                    }
                }
                else
                {
                    RollbackTransaction();
                    result = false;
                }

                #region codice commentato
                //se è risposta ad un protocollo, si aggiorna la tabella dei collegamenti
                //				if(schedaDoc.protocollo.rispostaProtocollo!=null&&schedaDoc.protocollo.rispostaProtocollo.idProfile!=null)
                //				{
                //					UpdateCollegamenti(schedaDoc);
                //				}
                #endregion


                //CloseConnection();
            }
            catch (Exception e)
            {
                RollbackTransaction();

                logger.Error("Errore nella gestione dei documenti (Query - ProtocollaDocNuovo) ", e);
                //throwException("F_System");

                result = false;
            }

            return result;
        }

        //		public bool ProtocollaDocNuovo_SEM(string idAmministrazione, ref DocsPaVO.documento.SchedaDocumento schedaDoc, DocsPaVO.utente.Ruolo objRuolo, string sede)
        //		{
        //			bool result = true;
        //			bool inSemaforo=false;
        //			try 
        //			{		
        //
        //				// leggo le informazioni sul documento dalla profile
        //				GetProfile(ref schedaDoc);
        //				
        //				// Setto i permessi per i superiori dell'utente
        //				schedaDoc = SetDocTrustees(schedaDoc, objRuolo);
        //				
        //				// oggetto
        //				InsertOgg(idAmministrazione, ref schedaDoc);
        //				
        //				//modifica PF - gestione semaforo - INIZIO
        //				//gestione del semaforo
        //				System.Random rnd=new System.Random();
        //				int ms;
        //				int tryCounter=0;
        //				bool semaforo;
        //				string stringaStato;
        //				string sqlString;
        //				string updateString;
        //
        //				//ciclo con ritardi random per attesa sblocco semaforo
        //				do	
        //				{
        //					//attesa da 0.5 a 1.5 secondi
        //					ms=rnd.Next(1000)+500;	
        //					System.Threading.Thread.Sleep(ms);
        //					//legge lo stato del semaforo
        //					sqlString = "SELECT NUM_STATO FROM DPA_LOCK WHERE VAR_SEMAFORO='PROTOCOLLO'";
        //					ExecuteScalar(out stringaStato,sqlString);
        //					logger.Debug(stringaStato);
        //					semaforo=(Int32.Parse(stringaStato)!=0);
        //					//alla fine, semaforo è true se il semaforo è attivo, false se non è attivo
        //					tryCounter++;
        //					logger.Debug(" *** ATTESA NUM PROTOCOLLO: " + tryCounter.ToString() + " UTENTE: " + schedaDoc.userId );
        //				} while(semaforo && tryCounter<300);	//ripete se il semaforo è attivo, massimo 300 volte
        //
        //				//se meno di 300 tentativi, il semaforo è sbloccato
        //				if(tryCounter<300)	
        //				{
        //					//blocca il semaforo
        //					logger.Debug("*** SEMAFORO BLOCCATO DALL'UTENTE: " + schedaDoc.userId);
        //					updateString = "UPDATE DPA_LOCK SET NUM_STATO=1 WHERE VAR_SEMAFORO='PROTOCOLLO'";
        //					ExecuteNonQuery(updateString);
        //					inSemaforo=true;
        //				}
        //				else
        //				{
        //					logger.Debug("ERRORE!!! Il semaforo è bloccato!!!");
        //				}
        //
        //				//modifica PF - gestione semaforo - FINE
        //
        //				// Inizio transazione sul db
        //				BeginTransaction();
        //				
        //				// leggo il numero di protocollo
        //				GetNumeroProtocollo(ref schedaDoc, objRuolo);
        //
        //					//add massimo digregorio set dati protocollatore
        //viene fatto anche per grigi e nella update profile finale detta=UpdateProfile(schedaDoc, sede);
        //SalvaProtocollatore(schedaDoc);

        //				// aggiorno la tabella PROFILE
        //				schedaDoc.protocollo.daProtocollare = "0";
        //				UpdateProfile(schedaDoc, sede);
        //				
        //				//se è risposta ad un protocollo, si aggiorna la tabella dei collegamenti
        //				if(schedaDoc.protocollo.rispostaProtocollo!=null&&schedaDoc.protocollo.rispostaProtocollo.idProfile!=null)
        //				{
        //					UpdateCollegamenti(schedaDoc);
        //				}
        //				
        //				// corrispondenti
        //				if (!AddCorrispondenti(schedaDoc))
        //				{
        //					result = false;
        //				}
        //				
        //				//data ultimo protocollo
        //				SetDataUltimoProtocollo(ref schedaDoc);
        //				CommitTransaction();
        //
        //				//modifica PF - gestione semaforo - INIZIO
        //
        //				//attende l'esecuzione della commit
        //				int countNumProto=0;
        //				string currVal="";
        //				int numProtoInc;
        //				//ciclo di letture ripetute sulla tabelle DPA_REG_PROTO per verificare l'esecuzione
        //				//della update sul numero di protocollo
        //				do 
        //				{
        //					System.Threading.Thread.Sleep(1000);
        //					countNumProto++;
        //					sqlString = "SELECT NUM_RIF FROM DPA_REG_PROTO WHERE ID_REGISTRO=" + schedaDoc.registro.systemId;
        //					ExecuteScalar(out currVal,sqlString);				
        //					logger.Debug("*** NUM_PROTO - " + currVal + " - CONTATORE: " + countNumProto.ToString());
        //					numProtoInc = Int32.Parse(schedaDoc.protocollo.numero)+1;
        //				} while (numProtoInc!=Int32.Parse(currVal)	&& countNumProto <300);
        //
        //				if(countNumProto>=300)
        //				{
        //					logger.Debug("ERRORE!!! UPDATE NUM_RIF su DPA_REG_PROTO non eseguita!!!!");
        //				}
        //
        //				//sblocca il semaforo
        //				updateString = "UPDATE DPA_LOCK SET NUM_STATO=0 WHERE VAR_SEMAFORO='PROTOCOLLO'";
        //				ExecuteNonQuery(updateString);
        //				logger.Debug("*** SEMAFORO SBLOCCATO " + schedaDoc.userId);
        //				inSemaforo=false;
        //
        //				//modifica PF - gestione semaforo - FINE
        //
        //				CloseConnection();
        //			} 
        //			catch (Exception e) 
        //			{
        //				RollbackTransaction();
        //				logger.Debug (e.Message);
        //				if(inSemaforo)
        //				{
        //					//sblocca il semaforo
        //					string updateString = "UPDATE DPA_LOCK SET NUM_STATO=0 WHERE VAR_SEMAFORO='PROTOCOLLO'";
        //					ExecuteNonQuery(updateString);
        //					logger.Debug("*** SEMAFORO SBLOCCATO " + schedaDoc.userId);
        //				}
        //				logger.Debug("Errore nella gestione dei documenti (Query - ProtocollaDocNuovo_SEM)",e);
        //				throwException("F_System");
        //
        //				result = false;
        //			}
        //
        //			return result;
        //		}
        //

        public bool ProtocollaDocNuovo_SEM(ref DocsPaVO.documento.SchedaDocumento schedaDoc, DocsPaVO.utente.InfoUtente infoUtente, DocsPaVO.utente.Ruolo objRuolo, out DocsPaVO.utente.Ruolo[] ruoliSuperiori)
        {
            logger.Info("BEGIN");
            bool result = true;
            ruoliSuperiori = null;

            try
            {
                // leggo le informazioni sul documento dalla profile
                GetProfile(infoUtente, ref schedaDoc);

                // Inizio transazione sul db
                BeginTransaction();
                logger.Debug("-------------------- INIZIO TRANSAZIONE DI PROTOCOLLAZIONE ---------------------");

                // Setto i permessi per i superiori dell'utente
                //schedaDoc = SetDocTrustees(schedaDoc, objRuolo);
                schedaDoc = TransactionSetDocTrustees(schedaDoc, objRuolo, this, out ruoliSuperiori, infoUtente.delegato);

                // oggetto
                InsertOgg(infoUtente.idAmministrazione, ref schedaDoc);

                //CONTROLLO REGISTRO??

                //protocollazione libera il numero di protocollo viene già passato e quindi non calcolato
                bool protocollazioneLibera = false;

                protocollazioneLibera = schedaDoc.pregresso;

                if (!string.IsNullOrEmpty(ConfigurationManager.AppSettings["PROTOCOLLAZIONE_LIBERA"]) &&
                    ConfigurationManager.AppSettings["PROTOCOLLAZIONE_LIBERA"].ToUpper().Equals("TRUE"))
                    protocollazioneLibera = bool.Parse(ConfigurationManager.AppSettings["PROTOCOLLAZIONE_LIBERA"].ToLower());

                /* MEV 3765 Gestione selettiva integrazione WSPIA
                 * Modifica MCaropreso:
                 * Effettua controllo sul flag associato al registro
                 */
                bool flagWSPIA = false;
                if (schedaDoc != null &&
                    schedaDoc.registro.FlagWspia.Equals("1")
                    ) flagWSPIA = true;
                else
                    flagWSPIA = false;

                if (protocollazioneLibera || flagWSPIA)
                {
                    if (schedaDoc != null &&
                        schedaDoc.protocollo != null &&
                        !string.IsNullOrEmpty(schedaDoc.protocollo.anno) &&
                        !string.IsNullOrEmpty(schedaDoc.protocollo.numero) &&
                        !string.IsNullOrEmpty(schedaDoc.protocollo.dataProtocollazione))
                    {
                        schedaDoc.protocollo.segnatura = CalcolaSegnatura(schedaDoc, objRuolo);
                        if (string.IsNullOrEmpty(schedaDoc.protocollo.segnatura))
                        {
                            logger.Debug("errore durante la creazione della segnatura");
                            throw new Exception("Errore durante la creazione della segnatura");
                        }

                    }
                    else
                    {
                        if (!GetNumeroProtocollo(ref schedaDoc, objRuolo))
                        {
                            throw new Exception("Errore durante l'aggiornamento della DPA_REG_PROTO");
                        }
                    }

                }
                else
                {
                    //calcolo del numero di protocollo
                    // leggo il numero di protocollo
                    if (!GetNumeroProtocollo(ref schedaDoc, objRuolo))
                    {
                        throw new Exception("Errore durante l'aggiornamento della DPA_REG_PROTO");
                    }
                }
                // aggiorno la tabella PROFILE
                schedaDoc.protocollo.daProtocollare = "0";

                if (UpdateProfile(schedaDoc, infoUtente.sede, String.Empty))
                {
                    // corrispondenti
                    if (AddCorrispondenti(schedaDoc, infoUtente))
                    {
                        //data ultimo protocollo
                        SetDataUltimoProtocollo(ref schedaDoc);

                        // Aggiornamento note documento
                        UpdateNoteDocumento(infoUtente, schedaDoc);

                        //Parola chiave inserita in protocollazione
                        SalvaParoleChiave(ref schedaDoc);

                        //TODO:
                        SetSecurityResponsabileReg(schedaDoc);

                        //ABBATANGELI GIANLUIGI - Eseguo la commit solo se sono riuscito ad aggiornare schedaDoc
                        if (UpdateNextProtocolNumber(schedaDoc))
                        {
                            CommitTransaction();
                            logger.Debug("-------------------- FINE TRANSAZIONE DI PROTOCOLLAZIONE ---------------------");
                        }
                        else
                        {
                            RollbackTransaction();
                            result = false;
                            logger.Debug("-------FINE TRANSAZIONE DI PROTOCOLLAZIONE --- ERRORE NUOVO NUM PROTOCOLLO---");
                        }
                    }
                    else
                    {
                        RollbackTransaction();
                        result = false;
                    }
                }
                else
                {
                    RollbackTransaction();
                    result = false;
                }

                #region codice commentato
                //se è risposta ad un protocollo, si aggiorna la tabella dei collegamenti
                //				if(schedaDoc.protocollo.rispostaProtocollo!=null&&schedaDoc.protocollo.rispostaProtocollo.idProfile!=null)
                //				{
                //					UpdateCollegamenti(schedaDoc);
                //				}
                #endregion

                CloseConnection();
            }
            catch (Exception e)
            {
                RollbackTransaction();
                logger.Error("-------------------- ESEGUITA ROLLBACK DELLA TRANSAZIONE DI PROTOCOLLAZIONE ---------------------");

                logger.Error("Errore nella protocollazione: metodo ProtocollaDocNuovo_SEM : ", e);
                //throwException("F_System");

                result = false;
            }
            logger.Info("END");
            return result;
        }

        public void ResetSemaforo()
        {

            //sblocca il semaforo
            string updateString = "UPDATE DPA_LOCK SET NUM_STATO=0 WHERE VAR_SEMAFORO='PROTOCOLLO'";
            ExecuteNonQuery(updateString);
            logger.Debug("*** SEMAFORO SBLOCCATO");

        }


        /// <summary>
        /// </summary>
        /// <param name="documento"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public Exception throwException(string msg)
        {
            logger.Debug(msg);
            RollbackTransaction();
            CloseConnection();

            return new Exception(msg);
        }

        #endregion

        #region DOCUMENTI RIMOSSI-CESTINATI
        public string VerificaDirittiCestinaDocumento(string idPeople, DocsPaVO.documento.SchedaDocumento schedaDoc)
        {
            string result = "Del";
            DocsPaUtils.Query q;
            string queryString = string.Empty;
            string valore = string.Empty;
            DataSet dataSet = new DataSet();

            //Documento protocollato --> non si può cestinare
            if (schedaDoc != null)
            {
                //TODO: controllo su db se protocollato
                q = DocsPaUtils.InitQuery.getInstance().getQuery("S_IS_PROTOCOLLATO");
                q.setParam("idprofile", schedaDoc.docNumber);
                queryString = q.getSQL();
                logger.Debug(queryString);
                ExecuteScalar(out valore, queryString);
                if (valore != "0")
                {
                    result = "Non è possibile rimuovere documenti protocollati";
                    return result;
                }
            }

            //Documento trasmesso con ragione interoperabilita?
            //Il documento può essere rimosso dal proprietario 
            //con qualsiasi trasmissione annessa, se il paramentro ENABLE_CANC_DOC_TRASMESSI =1
            if (schedaDoc.creatoreDocumento.idPeople.Equals(idPeople)
               && !Cfg_Enable_canc_doc_trasm)//se il parametro è abilitato cancello senza problemi, se non abilitato allora devo fare il controllo
            //se trasmesso non lo posso rimuovere neanche se proprietario.
            {

                //TOODO: aggiungere in join la profile e controllare se predisposto and numproto = null

                q = DocsPaUtils.InitQuery.getInstance().getQuery("S_DPA_TRASMISSIONE__DPA_TRASM_SING__DPA_TRASM_UTENTE__DPA_RAGIONE_TRASM");
                q.setParam("idProfile", schedaDoc.docNumber);
                q.setParam("ragione", "and upper(rag.var_desc_ragione) <> upper('INTEROPERABILITA')");
                queryString = q.getSQL();
                logger.Debug(queryString);
                ExecuteQuery(dataSet, "TRASM", queryString);
                if (dataSet.Tables["TRASM"].Rows.Count != 0)
                {
                    result = "Non è possibile rimuovere un documento trasmesso.";
                    return result;
                }
            }

            //Se l'utente che vuole rimuovere il documento non è il proprietario 
            //allora lo può rimuovere solo se gli è stato trasmesso con ragione interoperabilità
            if (!schedaDoc.creatoreDocumento.idPeople.Equals(idPeople))
            {
                q = DocsPaUtils.InitQuery.getInstance().getQuery("S_DPA_TRASMISSIONE__DPA_TRASM_SING__DPA_TRASM_UTENTE__DPA_RAGIONE_TRASM");
                q.setParam("ragione", "and upper(rag.var_desc_ragione) = upper('INTEROPERABILITA')");
                q.setParam("idProfile", schedaDoc.docNumber);
                queryString = q.getSQL();
                logger.Debug(queryString);
                ExecuteQuery(dataSet, "TRASM", queryString);
                if (dataSet.Tables["TRASM"].Rows.Count == 0)
                {
                    result = "Non si possiedono i diritti necessari per rimuovere il documento.";
                    return result;
                }



                /*    q = DocsPaUtils.InitQuery.getInstance().getQuery("S_IS_RUOLO_PRAU");
                q.setParam("id_ruolo_creatore", schedaDoc.creatoreDocumento.idCorrGlob_Ruolo);

                queryString = q.getSQL();
                Debugger.Write(queryString);
                ExecuteQuery(dataSet, "PRAU", queryString);
                if (dataSet.Tables["PRAU"].Rows.Count == 0)
                {
                    result = "Non si possiedono i diritti necessari per rimuovere il documento.";
                    return result;
                }
             * */
            }

            //Verifica se il documento è repertoriato
            Model model = new Model();
            bool isRepertoriato = false;
            if (schedaDoc.tipologiaAtto != null)
                isRepertoriato = model.isDocRepertoriato(schedaDoc.docNumber, schedaDoc.tipologiaAtto.systemId);
            if (isRepertoriato)
            {
                result = "Non è possibile rimuovere un documento repertoriato.";
                return result;
            }


            return result;
        }
        public static bool Cfg_Enable_canc_doc_trasm
        {
            get
            {
                string eme = System.Configuration.ConfigurationManager.AppSettings["ENABLE_CANC_DOC_TRASMESSI"];
                return (eme != null && eme == "1") ? true : false;
            }
        }
        //Mette un documento nello stato cestino
        public bool CestinaDocumento(string idPeople, string idProfile, string note)
        {
            bool result = true;

            try
            {
                int retValue = 0;

                using (DocsPaDB.DBProvider dbProvider = new DBProvider())
                {
                    //si può cestinare il documento --> si imposta il campo CHA_IN_CESTINO a "1"
                    DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("U_PROFILE__CHA_IN_CESTINO");


                    if (!string.IsNullOrEmpty(note))
                        q.setParam("valore", "'1' , VAR_NOTE_CESTINO = '" + DocsPaUtils.Functions.Functions.ReplaceApexes(note) + "'");
                    else
                        q.setParam("valore", "1");

                    q.setParam("param1", idProfile);

                    string queryString = q.getSQL();
                    logger.Debug(queryString);

                    if (dbProvider.ExecuteNonQuery(queryString))
                    {
                        // elimino la catena documentale se esiste
                        DocsPaUtils.Query q1 = DocsPaUtils.InitQuery.getInstance().getQuery("PROFILE_RIMUOVI_CATENA");
                        q1.setParam("param1", idProfile);
                        string queryString1 = q1.getSQL();
                        logger.Debug(queryString1);
                        dbProvider.ExecuteNonQuery(queryString1);


                        DocsPaUtils.Data.ParameterSP res = new DocsPaUtils.Data.ParameterSP("returnvalue", new Int32(), 10, DocsPaUtils.Data.DirectionParameter.ParamOutput, System.Data.DbType.Int32);

                        ArrayList sp_params = new ArrayList();
                        sp_params.Add(new DocsPaUtils.Data.ParameterSP("idprofile", Int32.Parse(idProfile)));
                        sp_params.Add(res);

                        retValue = dbProvider.ExecuteStoredProcedure("dpa_upd_todolist_doc_cestino", sp_params, null);

                        if (retValue > 0)
                        {
                            if (dbProvider.ExecuteNonQuery("DELETE FROM DPA_AREA_LAVORO WHERE ID_PROFILE=" + idProfile))
                            {
                                result = true;
                            }
                            else
                            {
                                result = false;

                                throw new Exception("Errore nella SP Cestina documento: cestina AdL documento");
                            }

                            DocsPaUtils.Query queryRemoveNotification = DocsPaUtils.InitQuery.getInstance().getQuery("D_DPA_NOTIFY_BY_ID_PROFILE");
                            queryRemoveNotification.setParam("idProfile", idProfile);
                            string queryStringRemoveNotification = queryRemoveNotification.getSQL();
                            logger.Debug(queryStringRemoveNotification);
                            if (dbProvider.ExecuteNonQuery(queryStringRemoveNotification))
                            {
                                result = true;
                            }
                            else
                            {
                                throw new Exception("Errore nella SP Cestina documento: cestina notifica");
                            }
                            
                        }
                        else
                        {
                            result = false;

                            throw new Exception("Errore nella SP Cestina documento: Cestina todolist documento rimosso");
                        }
                    }
                    else
                    {
                        throw new Exception("Errore nella SP Cestina documento.");
                    }
                }
            }
            catch (Exception)
            {
                result = false;
            }

            return result;
        }

        //Restituisce la lista dei documenti in cestino
        public System.Collections.ArrayList GetListaDocInCestino(DocsPaVO.utente.InfoUtente infoUtente, DocsPaVO.filtri.FiltroRicerca[][] filtriRicerca)
        {
            logger.Debug("GetListaDocInCestino");
            ArrayList lista = new ArrayList();
            try
            {
                string queryString;
                string registri = "";
                DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_DPA_EL_REGISTRI");
                q.setParam("idAmm", infoUtente.idAmministrazione);
                queryString = q.getSQL();
                logger.Debug(queryString);
                IDataReader dr = null;
                using (dr = ExecuteReader(queryString))
                {
                    if (dr == null)
                    {
                        throw new Exception("Errore in GetListaDocInCestino");
                    }
                    if (dr != null && dr.FieldCount > 0)
                    {
                        while (dr.Read())
                        {
                            registri += dr.GetValue(0).ToString() + ",";
                        }
                    }
                }
                if (registri != "")
                    registri = registri.Substring(0, registri.Length - 1);

                string enable = "0";
                if (System.Configuration.ConfigurationManager.AppSettings["ENABLE_CANC_DOC_TRASMESSI"] != null)
                {
                    enable = System.Configuration.ConfigurationManager.AppSettings["ENABLE_CANC_DOC_TRASMESSI"];
                }
                DataSet dataSet;
                q = DocsPaUtils.InitQuery.getInstance().getQuery("S_RICERCA_DOCUMENTI_IN_CESTINO");
                q.setParam("idGruppo", infoUtente.idGruppo);
                q.setParam("idPeople", infoUtente.idPeople);
                q.setParam("registri", registri);
                q.setParam("idAmm", infoUtente.idAmministrazione);
                //q.setParam("Cfg_Enable_canc_doc_trasm", enable);

                if (dbType.ToUpper() == "SQL")
                {
                    q.setParam("dbuser", getUserDB());
                }
                //filtri
                if (filtriRicerca != null)
                {
                    string queryFrom = string.Empty;
                    //string sqlFilter = GetFilterStringQueryDocumentiInFascicolo(filtriRicerca, ref queryFrom);
                    string sqlFilter = GetFilterStringQueryDocumentiInCestino(filtriRicerca, ref queryFrom);
                    q.setParam("param2", sqlFilter);
                    q.setParam("param1", queryFrom);
                }

                string sql = q.getSQL();
                logger.Debug(sql);
                ExecuteQuery(out dataSet, "DOCUMENTI", sql);
                SetTableCorrispondenti(dataSet);
                foreach (DataRow dataRow in dataSet.Tables["DOCUMENTI"].Rows)
                {
                    lista.Add(GetDatiDocumento(dataSet, dataRow, true));
                    //lista.Add(schedaDoc);
                }
                dataSet.Dispose();
            }
            catch (Exception e)
            {
                logger.Error(e.Message);
                //CloseConnection();
                logger.Error("Errore nella gestione dei documenti (Query - GetListaDocInCestino)", e);
                throw new Exception("F_System");
            }
            return lista;
        }

        //Reimposta il campo CHA_IN_CESTINO a 0, il documento diventa attivo
        public bool RiattivaDocumento(string numDoc)
        {
            bool result = false;
            try
            {
                using (DocsPaDB.DBProvider dbProvider = new DBProvider())
                {
                    DocsPaUtils.Query q;
                    string queryString;
                    q = DocsPaUtils.InitQuery.getInstance().getQuery("U_PROFILE__CHA_IN_CESTINO");
                    q.setParam("param1", numDoc);
                    q.setParam("valore", "'0' , VAR_NOTE_CESTINO = ''");
                    queryString = q.getSQL();
                    result = dbProvider.ExecuteNonQuery(queryString);
                }
            }
            catch (Exception)
            {
                result = false;
            }
            return result;
        }

        //Elimina fisicamente un singolo documento
        private bool EliminaDocumento(DocsPaVO.utente.InfoUtente infoUtente, DocsPaVO.documento.InfoDocumento infoDoc, DBProvider dbProvider)
        {
            bool result = false;
            try
            {
                ArrayList parameters = new ArrayList();
                parameters.Add(CreateParameter("idProfile", Convert.ToInt32(infoDoc.docNumber)));


                //Return value
                //DocsPaUtils.Data.ParameterSP res;
                //res = new DocsPaUtils.Data.ParameterSP("ReturnValue", new Int32(), 10, DocsPaUtils.Data.DirectionParameter.ParamOutput, System.Data.DbType.Int32);
                //parameters.Add(res);

                int resultSP = dbProvider.ExecuteStoreProcedure("SP_RIMUOVI_DOCUMENTI", parameters);
                result = Convert.ToBoolean(resultSP);

                logger.Debug("Chiamata SP 'SP_RIMUOVI_DOCUMENTI'. Esito: " + Convert.ToString(result));

                if (result)
                {
                    logger.Debug("Eseguita Commit alla Stored Procedure: SP_RIMUOVI_DOCUMENTI");
                }
                else
                {
                    logger.Debug("Eseguita Rollback alla Stored Procedure: SP_RIMUOVI_DOCUMENTI");
                }

            }
            catch (Exception e)
            {
                result = false;
            }
            return result;

            ////FINE STOREPROCEDURE

            #region CANCELLAZIONE SENZA STORE
            /*
            using (DocsPaDB.DBProvider dbProvider = new DBProvider())
            {
                DocsPaUtils.Query q;
                string queryString;
                string result = "Del";
                
                //a questo punto possiamo comporre le query per la transazione
                
                //eliminazione trasmissioni 
                DataSet dsTrasm = new DataSet();
                q = DocsPaUtils.InitQuery.getInstance().getQuery("S_GET_SYSTEMID_TRASMISSIONI_DOCUMENTO");
                q.setParam("idProfile", infoDoc.docNumber);
                queryString = q.getSQL();
                ExecuteQuery(dsTrasm, queryString);
                if (dsTrasm.Tables[0].Rows.Count != 0)
                {
                    foreach (DataRow trasm in dsTrasm.Tables[0].Rows)
                    {
                        DataSet dsTrasmSing = new DataSet();
                        q = DocsPaUtils.InitQuery.getInstance().getQuery("S_DPA_TRASM_SINGOLA");
                        q.setParam("param1", "system_id");
                        q.setParam("param2", "id_trasmissione = " + trasm["system_id"].ToString());
                        queryString = q.getSQL();
                        ExecuteQuery(dsTrasmSing, queryString);
                        if (dsTrasmSing.Tables[0].Rows.Count != 0)
                        {
                            foreach (DataRow trasmSing in dsTrasmSing.Tables[0].Rows)
                            {
                                //cancella la trasmissione singola
                                q = DocsPaUtils.InitQuery.getInstance().getQuery("D_DPA_TRASM_SINGOLA_SYSTEM_ID");
                                q.setParam("param1", trasmSing["system_id"].ToString());
                                queryString = q.getSQL();
                                ExecuteNonQuery(queryString);
                            }
                        }
                        //Cancella trasmissione 
                        q = DocsPaUtils.InitQuery.getInstance().getQuery("D_DPA_TRASMISSIONE_WHERE_SYSTEMID");
                        q.setParam("param1", trasm["system_id"].ToString());
                        queryString = q.getSQL();
                        ExecuteNonQuery(queryString);
                    }
                }

                System.Collections.ArrayList queryDelete = new System.Collections.ArrayList();

                q = DocsPaUtils.InitQuery.getInstance().getQuery("D_Versions");
                q.setParam("param1", "DOCNUMBER=" + infoDoc.docNumber);
                queryString = q.getSQL();
                queryDelete.Add(queryString);

                q = DocsPaUtils.InitQuery.getInstance().getQuery("D_Components");
                q.setParam("param1", "DOCNUMBER=" + infoDoc.docNumber);
                queryString = q.getSQL();
                queryDelete.Add(queryString);

                q = DocsPaUtils.InitQuery.getInstance().getQuery("D_DPAAreaLavoro");
                q.setParam("param1", "ID_PROFILE=" + infoDoc.docNumber);
                queryString = q.getSQL();
                queryDelete.Add(queryString);

                q = DocsPaUtils.InitQuery.getInstance().getQuery("D_DPAProfParole");
                q.setParam("param1", "ID_PROFILE=" + infoDoc.docNumber);
                queryString = q.getSQL();
                queryDelete.Add(queryString);

                q = DocsPaUtils.InitQuery.getInstance().getQuery("D_Profile");
                q.setParam("param1", "DOCNUMBER=" + infoDoc.docNumber);
                queryString = q.getSQL();
                queryDelete.Add(queryString);

                q = DocsPaUtils.InitQuery.getInstance().getQuery("D_Security");
                q.setParam("param1", "THING =" + infoDoc.docNumber);
                queryString = q.getSQL();
                queryDelete.Add(queryString);

                //TODOLIST
                q = DocsPaUtils.InitQuery.getInstance().getQuery("DELETE_TODOLIST");
                q.setParam("idprofile", infoDoc.docNumber);
                queryString = q.getSQL();
                queryDelete.Add(queryString);

                //ora si inizia la transazione
                logger.Debug("Inizio transazione");
                for (int k = 0; k < queryDelete.Count; k++)
                {
                    ExecuteNonQuery(queryDelete[k].ToString());
                    logger.Debug("Eseguita query " + queryDelete[k]);
                }

                //Rimozione del doc dalla profilazione dinamica
                DataSet ds = new DataSet();
                q = DocsPaUtils.InitQuery.getInstance().getQuery("PD_IS_DOC_PROFILATO");
                q.setParam("docNumber", infoDoc.docNumber);
                string query7 = q.getSQL();
                ExecuteQuery(ds, query7);

                if (ds.Tables[0].Rows.Count != 0)
                {
                    q = DocsPaUtils.InitQuery.getInstance().getQuery("PD_REMOVE_DOC");
                    q.setParam("doc_number", infoDoc.docNumber);
                    string query8 = q.getSQL();
                    ExecuteNonQuery(query8);
                }
                logger.Debug("Fine transazione");
                dbProvider.CommitTransaction();
                return result;
            }
             * */
            #endregion
        }

        //Elimina un documento fisicamente
        public bool EliminaDoc(DocsPaVO.utente.InfoUtente infoUtente, DocsPaVO.documento.InfoDocumento infoDoc)
        {
            bool result = false;
            DocsPaUtils.Query q;
            try
            {
                using (DocsPaDB.DBProvider dbProvider = new DBProvider())
                {
                    result = EliminaDocumento(infoUtente, infoDoc, dbProvider);
                }
            }
            catch
            {
                logger.Debug("Errore nella gestione dei documenti (Query - EliminaDoc)");
                throw new Exception("F_System");
            }
            return result;
        }

        //Memorizza in un array tutte le path fisiche associate al documento
        public string[] GetFileDaRimuovere(DocsPaVO.documento.InfoDocumento infoDoc)
        {
            List<string> list = new List<string>();

            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_PATH__COMPONENTS__VERSIONS");
            q.setParam("docNumber", infoDoc.docNumber);
            string queryString = q.getSQL();
            DataSet dataSet = new DataSet();

            using (DBProvider dbProvider = new DBProvider())
            {
                dbProvider.ExecuteQuery(out dataSet, queryString);
            }
           

            foreach (DataRow row in dataSet.Tables[0].Rows)
            {
                string path = row["path"].ToString();
                if (!string.IsNullOrEmpty(path))
                    list.Add(path);
            }

            return list.ToArray();
        }

        //Vecchio metodeo per la rimozione fisica dei documenti
        public string ExecRimuoviSchedaMethod(string idPeople, DocsPaVO.documento.SchedaDocumento schedaDoc)
        {
            //bool result = true;
            string result = "Del";
            DataSet dataSet = new DataSet();
            try
            {
                DocsPaUtils.Query q;
                //OpenConnection();
                string queryString;

                //Documento creato da un'altra persona  (SIMEST - da controllare)
                q = DocsPaUtils.InitQuery.getInstance().getQuery("S_Profile0");
                q.setParam("param1", "SYSTEM_ID");
                q.setParam("param2", "SYSTEM_ID=" + schedaDoc.systemId + " AND AUTHOR =" + idPeople);
                queryString = q.getSQL();
                ExecuteQuery(dataSet, "PROTO_AUTORE", queryString);
                if (dataSet.Tables["PROTO_AUTORE"].Rows.Count == 0)
                {
                    result = "Rimozione non avvenuta. L'operazione è consentita solo all'autore del documento";
                    return result;
                }

                //Documento protocollato?
                q = DocsPaUtils.InitQuery.getInstance().getQuery("S_Profile0");
                q.setParam("param1", "SYSTEM_ID");
                q.setParam("param2", "SYSTEM_ID=" + schedaDoc.systemId + " AND (NUM_PROTO IS NULL OR CHA_DA_PROTO='0')");
                queryString = q.getSQL();
                ExecuteQuery(dataSet, "PROTO", queryString);
                if (dataSet.Tables["PROTO"].Rows.Count == 0)
                {
                    result = "Rimozione non avvenuta. Non è possibile rimuovere documenti protocollati";
                    return result;
                }
                //Documento non trasmesso?
                q = DocsPaUtils.InitQuery.getInstance().getQuery("S_DPATrasmissione");
                q.setParam("param1", "ID_PROFILE=" + schedaDoc.systemId);
                queryString = q.getSQL();
                ExecuteQuery(dataSet, "TRASM", queryString);
                if (dataSet.Tables["TRASM"].Rows.Count > 0)
                {
                    result = "Rimozione non avvenuta. Non è possibile rimuovere documenti già trasmessi";
                    return result;
                }
                //Documento non presente in altre aree di lavoro?
                q = DocsPaUtils.InitQuery.getInstance().getQuery("S_DPAAreaLavoro");
                q.setParam("param1", "SYSTEM_ID");
                q.setParam("param2", "ID_PROFILE=" + schedaDoc.systemId + " AND ID_PEOPLE!=" + idPeople);
                queryString = q.getSQL();
                ExecuteQuery(dataSet, "AREA_LAV", queryString);
                if (dataSet.Tables["AREA_LAV"].Rows.Count > 0)
                {
                    result = "Rimozione non avvenuta. Non è possibile rimuovere documenti aggiunti ad aree di lavoro";
                    return result;
                }

                //a questo punto possiamo comporre le query per la transazione
                System.Collections.ArrayList queryDelete = new System.Collections.ArrayList();

                q = DocsPaUtils.InitQuery.getInstance().getQuery("D_Versions");
                q.setParam("param1", "DOCNUMBER=" + schedaDoc.docNumber);
                string query1 = q.getSQL();
                queryDelete.Add(query1);

                q = DocsPaUtils.InitQuery.getInstance().getQuery("D_Components");
                q.setParam("param1", "DOCNUMBER=" + schedaDoc.docNumber);
                string query2 = q.getSQL();
                queryDelete.Add(query2);

                /*q = DocsPaUtils.InitQuery.getInstance().getQuery("D_ActivityLog");
                q.setParam("param1","DOCNUMBER="+schedaDoc.docNumber);
                string query3 = q.getSQL();
                queryDelete.Add(query3);*/

                q = DocsPaUtils.InitQuery.getInstance().getQuery("D_DPAAreaLavoro");
                q.setParam("param1", "ID_PROFILE=" + schedaDoc.systemId);
                string query4 = q.getSQL();
                queryDelete.Add(query4);

                q = DocsPaUtils.InitQuery.getInstance().getQuery("D_DPAProfParole");
                q.setParam("param1", "ID_PROFILE=" + schedaDoc.systemId);
                string query5 = q.getSQL();
                queryDelete.Add(query5);

                q = DocsPaUtils.InitQuery.getInstance().getQuery("D_Profile");
                q.setParam("param1", "DOCNUMBER=" + schedaDoc.docNumber);
                string query6 = q.getSQL();
                queryDelete.Add(query6);

                q = DocsPaUtils.InitQuery.getInstance().getQuery("D_Security");
                q.setParam("param1", "THING =" + schedaDoc.systemId);
                string query9 = q.getSQL();
                queryDelete.Add(query9);

                //ora si inizia la transazione
                logger.Debug("Inizio transazione");
                BeginTransaction();
                for (int k = 0; k < queryDelete.Count; k++)
                {
                    ExecuteNonQuery(queryDelete[k].ToString());
                    logger.Debug("Eseguita query " + queryDelete[k]);
                }


                //Rimozione del doc dalla profilazione dinamica
                DataSet ds = new DataSet();
                q = DocsPaUtils.InitQuery.getInstance().getQuery("PD_IS_DOC_PROFILATO");
                q.setParam("docNumber", schedaDoc.docNumber);
                string query7 = q.getSQL();
                ExecuteQuery(ds, query7);

                if (ds.Tables[0].Rows.Count != 0)
                {
                    q = DocsPaUtils.InitQuery.getInstance().getQuery("PD_REMOVE_DOC");
                    q.setParam("doc_number", schedaDoc.docNumber);
                    string query8 = q.getSQL();
                    ExecuteNonQuery(query8);
                }

                CommitTransaction();
                logger.Debug("Fine transazione");
                //CloseConnection();
            }
            catch (Exception)
            {
                RollbackTransaction();
                //CloseConnection();
                //throw e;
                result = "";
            }
            return result;
        }

        //Restituisce i parametri per la query in base al filtro impostato
        private string GetFilterStringQueryDocumentiInCestino(DocsPaVO.filtri.FiltroRicerca[][] objQueryList, ref string queryFrom)
        {
            //string returnVal = "";
            string queryWhere = "";
            string andStr;
            int numAndStr = 0;
            System.Collections.ArrayList listaOR = new System.Collections.ArrayList();

            for (int i = 0; i < objQueryList.Length; i++)
            {
                andStr = " (";
                numAndStr = 0;
                for (int j = 0; j < objQueryList[i].Length; j++)
                {
                    DocsPaVO.filtri.FiltroRicerca f = objQueryList[i][j];

                    if (f.valore != null && !f.valore.Equals(""))
                    {
                        switch (f.argomento)
                        {
                            case "TIPO":
                                if (numAndStr++ > 0)
                                    andStr += " AND ";
                                if (f.valore.Equals("T"))
                                    andStr += "A.CHA_TIPO_PROTO IN ('A', 'P', 'I', 'G')";
                                else
                                    andStr += "A.CHA_TIPO_PROTO='" + f.valore + "'";
                                break;

                            case "TIPO_ATTO":
                                if (numAndStr++ > 0)
                                    andStr += " AND ";
                                andStr += "A.ID_TIPO_ATTO=" + f.valore;
                                break;

                            case "PROFILAZIONE_DINAMICA":
                                DocsPaDB.Query_DocsPAWS.Model model = new Model();
                                andStr += model.getSeriePerRicercaProfilazione(f.template, "");
                                if (f.template != null && !string.IsNullOrEmpty(f.template.SYSTEM_ID.ToString()))
                                    tipo_contatore = tipoContatoreTemplates(f.template.SYSTEM_ID.ToString());
                                break;

                            case "NUM_PROTOCOLLO":
                                if (numAndStr++ > 0)
                                    andStr += " AND ";
                                andStr += "A.NUM_PROTO=" + f.valore;
                                break;

                            case "NUM_PROTOCOLLO_AL":
                                if (numAndStr++ > 0)
                                    andStr += " AND ";
                                andStr += "A.NUM_PROTO<=" + f.valore;
                                break;

                            case "NUM_PROTOCOLLO_DAL":
                                if (numAndStr > 0)
                                    andStr += " AND ";
                                numAndStr += 1;
                                andStr += "A.NUM_PROTO>=" + f.valore;
                                break;

                            case "DATA_PROT_IL":
                                if (numAndStr > 0)
                                    andStr += " AND ";
                                numAndStr += 1;
                                andStr += "A.DTA_PROTO>=" + DocsPaDbManagement.Functions.Functions.ToDateBetween(f.valore, true) + " AND " +
                                          "A.DTA_PROTO<=" + DocsPaDbManagement.Functions.Functions.ToDateBetween(f.valore, false);
                                break;

                            case "DATA_PROT_SUCCESSIVA_AL":
                                if (numAndStr > 0)
                                    andStr += " AND ";
                                numAndStr += 1;
                                andStr += "A.DTA_PROTO>=" + DocsPaDbManagement.Functions.Functions.ToDateBetween(f.valore, true);
                                break;

                            case "DATA_PROT_PRECEDENTE_IL":
                                if (numAndStr > 0)
                                    andStr += " AND ";
                                numAndStr += 1;
                                andStr += "A.DTA_PROTO<=" + DocsPaDbManagement.Functions.Functions.ToDateBetween(f.valore, false);
                                break;

                            case "ANNO_PROTOCOLLO":
                                if (!string.IsNullOrEmpty(f.valore))
                                {
                                    if (numAndStr > 0)
                                        andStr += " AND ";
                                    numAndStr += 1;
                                    andStr += "A.NUM_ANNO_PROTO=" + f.valore;
                                }
                                break;

                            case "DOCNUMBER":
                                if (numAndStr++ > 0)
                                    andStr += " AND ";
                                andStr += "A.DOCNUMBER=" + f.valore;
                                break;

                            case "DOCNUMBER_DAL":
                                if (numAndStr > 0)
                                    andStr += " AND ";
                                numAndStr += 1;
                                andStr += "A.DOCNUMBER>=" + f.valore;
                                break;

                            case "DOCNUMBER_AL":
                                if (numAndStr++ > 0)
                                    andStr += " AND ";
                                andStr += "A.DOCNUMBER<=" + f.valore;
                                break;

                            case "DATA_CREAZIONE_IL":
                                if (numAndStr > 0)
                                    andStr += " AND ";
                                numAndStr += 1;
                                andStr += "A.CREATION_DATE>=" + DocsPaDbManagement.Functions.Functions.ToDateBetween(f.valore, true) + " AND " +
                                          "A.CREATION_DATE<=" + DocsPaDbManagement.Functions.Functions.ToDateBetween(f.valore, false);
                                break;

                            case "DATA_CREAZIONE_SUCCESSIVA_AL":
                                if (numAndStr > 0)
                                    andStr += " AND ";
                                numAndStr += 1;
                                andStr += "A.CREATION_DATE>=" + DocsPaDbManagement.Functions.Functions.ToDateBetween(f.valore, true);
                                break;

                            case "DATA_CREAZIONE_PRECEDENTE_IL":
                                if (numAndStr > 0)
                                    andStr += " AND ";
                                numAndStr += 1;
                                andStr += "A.CREATION_DATE<=" + DocsPaDbManagement.Functions.Functions.ToDateBetween(f.valore, false);
                                break;

                            case "OGGETTO":
                                if (numAndStr > 0)
                                    andStr += " AND ";
                                numAndStr += 1;
                                //andStr += "UPPER(A.VAR_PROF_OGGETTO) LIKE '%" + DocsPaUtils.Functions.Functions.ReplaceApexes(f.valore).ToUpper() + "%'";				
                                // La stringa di testo contenuta nel campo oggetto è messa in
                                // AND utilizzando come separatore la stringa fissa '&&'
                                System.Text.RegularExpressions.Regex regex = new System.Text.RegularExpressions.Regex("&&");
                                string[] lista = regex.Split(f.valore);
                                andStr += "UPPER(A.VAR_PROF_OGGETTO) LIKE '%" + lista[0].ToUpper().Replace("'", "''") + "%'";
                                for (int k = 1; k < lista.Length; k++)
                                    andStr += " AND UPPER(A.VAR_PROF_OGGETTO) LIKE '%" + lista[k].ToUpper().Replace("'", "''") + "%'";
                                break;


                            case "ID_MITT_DEST":
                                queryWhere += "AND F.ID_PROFILE=A.SYSTEM_ID ";
                                queryFrom += ", DPA_DOC_ARRIVO_PAR F";
                                if (numAndStr > 0)
                                    andStr += " AND ";
                                numAndStr += 1;
                                andStr += "F.ID_MITT_DEST=" + f.valore + " AND CHA_TIPO_MITT_DEST='M'";
                                break;

                            case "COD_MITT_DEST":
                                if (numAndStr++ > 0)
                                    andStr += " AND ";

                                string codiceRubrica = DocsPaUtils.Functions.Functions.ReplaceApexes(f.valore).ToUpper();

                                andStr += " A.SYSTEM_ID IN (SELECT F.ID_PROFILE FROM DPA_DOC_ARRIVO_PAR F ,DPA_CORR_GLOBALI G  where F.ID_PROFILE=a.system_id and  G.SYSTEM_ID=F.ID_MITT_DEST AND (UPPER(G.VAR_COD_RUBRICA) = '" + codiceRubrica + "'";

                                if (RicercaPerMittentiDestinatariStoricizzati(objQueryList[i]))
                                {
                                    // Ricerca i documenti con i mittenti / destinatari storicizzati
                                    if (!dbType.ToUpper().Equals("SQL"))
                                        andStr += " OR UPPER(G.VAR_COD_RUBRICA) = ('" + codiceRubrica + "_' || G.SYSTEM_ID))";
                                    else
                                        andStr += " OR UPPER(G.VAR_COD_RUBRICA) = ('" + codiceRubrica + "_' + Convert(varchar(100),G.SYSTEM_ID)))";
                                }

                                andStr += ")";

                                break;

                            case "MITT_DEST":
                                queryWhere += "AND F.ID_PROFILE=A.SYSTEM_ID AND G.SYSTEM_ID=F.ID_MITT_DEST ";
                                if (queryFrom.IndexOf(" ,DPA_DOC_ARRIVO_PAR F ,DPA_CORR_GLOBALI G ") < 0) queryFrom += " ,DPA_DOC_ARRIVO_PAR F ,DPA_CORR_GLOBALI G ";
                                if (numAndStr++ > 0)
                                    andStr += " AND ";
                                andStr += "UPPER(G.VAR_DESC_CORR) LIKE '%" + DocsPaUtils.Functions.Functions.ReplaceApexes(f.valore).ToUpper() + "%' AND CHA_TIPO_MITT_DEST='M'";
                                break;

                            case "ID_DESTINATARIO":
                                queryWhere += "AND F.ID_PROFILE=A.SYSTEM_ID ";
                                queryFrom += ", DPA_DOC_ARRIVO_PAR F";
                                if (numAndStr > 0)
                                    andStr += " AND ";
                                numAndStr += 1;
                                andStr += "F.ID_MITT_DEST=" + f.valore + " AND CHA_TIPO_MITT_DEST='D'";
                                break;

                            case "ID_DESCR_DESTINATARIO":
                                queryWhere += "AND F.ID_PROFILE=A.SYSTEM_ID AND G.SYSTEM_ID=F.ID_MITT_DEST ";
                                if (queryFrom.IndexOf(" ,DPA_DOC_ARRIVO_PAR F ,DPA_CORR_GLOBALI G ") < 0) queryFrom += " ,DPA_DOC_ARRIVO_PAR F ,DPA_CORR_GLOBALI G ";
                                if (numAndStr++ > 0)
                                    andStr += " AND ";
                                andStr += "UPPER(G.VAR_DESC_CORR) LIKE '%" + DocsPaUtils.Functions.Functions.ReplaceApexes(f.valore).ToUpper() + "%' AND CHA_TIPO_MITT_DEST='D'";
                                break;
                            case "FIRMATO":
                                andStr += " AND ";
                                numAndStr += 1;
                                if (f.valore == "1")
                                {
                                    if (dbType.ToUpper() == "SQL")
                                        andStr += getUserDB() + ".getchafirmato(A.DOCNUMBER) = '1'";
                                    else
                                    {
                                        //OLD
                                        //andStr += " exists (";
                                        //andStr += "SELECT /*+index ( components )*/   'x'";
                                        //andStr += " FROM components";
                                        //andStr += " WHERE docnumber = a.docnumber AND version_id = getmaxver(docnumber) and  cha_firmato='1') ";

                                        andStr += " exists   ( SELECT /*+index ( c1 )*/ ";
                                        andStr += "  'x' ";
                                        andStr += " FROM components c1 ";
                                        andStr += " WHERE     c1.docnumber = a.docnumber ";
                                        andStr += "     AND version_id = ";
                                        andStr += "          (SELECT /*+index (c) index (v1)*/ ";
                                        andStr += "             MAX (v1.version_id) ";
                                        andStr += "          FROM VERSIONS v1, components c ";
                                        andStr += "       WHERE     v1.docnumber = ";
                                        andStr += "                    a.docnumber ";
                                        andStr += "             AND v1.version_id = ";
                                        andStr += "                     c.version_id ";
                                        andStr += "              AND c.file_size > 0) ";
                                        andStr += "    AND cha_firmato = '1') ";

                                    }
                                }
                                else
                                    if (f.valore == "0")
                                    {
                                        if (dbType.ToUpper() == "SQL")
                                            andStr += getUserDB() + ".getchafirmato(A.DOCNUMBER) = '0'";
                                        else
                                        {
                                            //OLD
                                            //andStr += " exists (";
                                            //andStr += "SELECT /*+index ( components )*/   'x'";
                                            //andStr += " FROM components";
                                            //andStr += " WHERE docnumber = a.docnumber AND version_id = getmaxver(docnumber) and  cha_firmato='0') ";

                                            andStr += " exists   ( SELECT /*+index ( c1 )*/ ";
                                            andStr += "  'x' ";
                                            andStr += " FROM components c1 ";
                                            andStr += " WHERE     c1.docnumber = a.docnumber ";
                                            andStr += "     AND version_id = ";
                                            andStr += "          (SELECT /*+index (c) index (v1)*/ ";
                                            andStr += "             MAX (v1.version_id) ";
                                            andStr += "          FROM VERSIONS v1, components c ";
                                            andStr += "       WHERE     v1.docnumber = ";
                                            andStr += "                    a.docnumber ";
                                            andStr += "             AND v1.version_id = ";
                                            andStr += "                     c.version_id ";
                                            andStr += "              AND c.file_size > 0) ";
                                            andStr += "    AND cha_firmato = '0') ";
                                        }
                                    }
                                    else
                                    {
                                        if (dbType.ToUpper() == "SQL")
                                        {
                                            andStr += getUserDB() + ".getchaimg(A.SYSTEM_ID)<>'0'";
                                        }
                                        else
                                        {
                                            andStr += "getchaimg(A.SYSTEM_ID)<>'0'";
                                        }
                                    }
                                break;

                            case "TIPO_FILE_ACQUISITO":
                                queryWhere += "AND A.DOCNUMBER=COMPONENTS.DOCNUMBER ";
                                if (queryFrom.IndexOf(" ,COMPONENTS") < 0)
                                    queryFrom += " ,COMPONENTS";

                                // if (numAndStr > 0)
                                andStr += " AND ";
                                numAndStr += 1;
                                andStr += "UPPER(COMPONENTS.EXT)='" + f.valore.ToUpper() + "' AND COMPONENTS.VERSION_ID=(select max(versions.version_id)  from versions, components where" +
                                " versions.version_id=components.version_id AND versions.docnumber=A.DOCNUMBER)";
                                break;
                        }
                    }
                }
                andStr += ") ";
                if (andStr.Length > 4)
                {
                    listaOR.Add(andStr);
                    numAndStr = 0;
                }
            }
            if (listaOR.Count > 0)
            {
                queryWhere += " AND (" + (string)listaOR[0];
                for (int i = 1; i < numAndStr; i++)
                    queryWhere += " OR " + listaOR[i];
                queryWhere += ") ";

            }
            return queryWhere;
        }

        //Verifica se un dato documento è nello stato in cestino
        public int VerificaDocInCestino(int numDoc)
        {
            int result = -1;
            using (DocsPaDB.DBProvider dbProvider = new DBProvider())
            {
                string queryString = "";
                DocsPaUtils.Query q;
                q = DocsPaUtils.InitQuery.getInstance().getQuery("S_COUNT__PROFILE__CHA_IN_CESTINO");
                q.setParam("idProfile", numDoc.ToString());
                queryString = q.getSQL();
                logger.Debug(queryString);
                string deleted;
                dbProvider.ExecuteScalar(out deleted, queryString);
                result = Convert.ToInt32(deleted);
            }
            return result;
        }

        #endregion

        #region StoricoManager
        public ArrayList GetListaStoriciOggetto(string idProfile)
        {
            logger.Debug("getStoricoOggetto");
            ArrayList lista = new ArrayList();
            try
            {
                //OpenConnection();					
                DataSet dataSet;
                DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_J_DPA_OGGETTI_STO__OGGETTARIO");
                q.setParam("param1", "A.SYSTEM_ID, A.ID_PEOPLE, A.ID_RUOLO_IN_UO, " +
                    DocsPaDbManagement.Functions.Functions.ToChar("A.DTA_MODIFICA", false) + " AS DTA_MODIFICA, " +
                    "B.VAR_DESC_OGGETTO, B.CHA_OCCASIONALE ");
                q.setParam("param2", "A.ID_PROFILE=" + idProfile);
                string queryString = q.getSQL();
                logger.Debug(queryString);
                ExecuteQuery(out dataSet, "STORICO", queryString);
                // TODO: DocsPaWS.Utils.Logger.log("Dopo query storico", logLevelTime);	
                foreach (DataRow dataRow in dataSet.Tables["STORICO"].Rows)
                {
                    lista.Add(GetStoricoOggetto(dataRow));
                }
                dataSet.Dispose();
                //CloseConnection();
            }
            catch (Exception e)
            {
                logger.Error(e.Message);
                //CloseConnection();
                logger.Error("Errore nella gestione dei documenti (Query - GetListaStoriciOggetto)", e);
                throw new Exception("F_System");
            }
            return lista;
        }

        public ArrayList GetListaStoricoDtaArrivo(string docnumber)
        {
            logger.Debug("getStoricoOggetto");
            ArrayList lista = new ArrayList();
            try
            {
                //OpenConnection();					
                DataSet dataSet;
                DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_STORICO_DTA_ARRIVO");
                q.setParam("param1", docnumber);
                string queryString = q.getSQL();
                ExecuteQuery(out dataSet, "STORICO", queryString);

                foreach (DataRow dataRow in dataSet.Tables["STORICO"].Rows)
                {
                    lista.Add(GetStoricoDataArrivo(dataRow));
                }
                dataSet.Dispose();
            }
            catch (Exception e)
            {
                logger.Error(e.Message);
                //CloseConnection();
                logger.Error("Errore nella gestione dei documenti (Query - GetListaStoricoDtaArrivo)", e);
                throw new Exception("F_System");
            }
            return lista;

        }

        private DocsPaVO.documento.DocumentoStoricoDataArrivo GetStoricoDataArrivo(DataRow dataRow)
        {
            DocsPaVO.documento.DocumentoStoricoDataArrivo storico = new DocsPaVO.documento.DocumentoStoricoDataArrivo();
            storico.systemId = dataRow["SYSTEM_ID"].ToString();
            Utenti ut = new Utenti();
            storico.utente = ut.GetUtente(dataRow["ID_PEOPLE"].ToString());
            storico.ruolo = ut.GetRuoloByIdGruppo(dataRow["ID_GROUP"].ToString());
            storico.dta_arrivo = dataRow["DTA_ARRIVO"].ToString();
            storico.dataModifica = dataRow["DTA_MODIFICA"].ToString();
            return storico;

        }

        public bool GetSeDocFascicolato(string idDocumento)
        {
            bool result = false;
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_COUNT_DOC_FASCICOLATO");
            q.setParam("param1", idDocumento);
            string sql = q.getSQL();
            logger.Debug(sql);
            string appAll;
            ExecuteScalar(out appAll, sql);

            if (Convert.ToInt32(appAll) > 0)
                result = true;
            return result;
        }

        /// <summary>
        /// Verifica se il Documento con idDocumento è fascicolato nel fascicolo con ID_FASCICOLO = idFascicolo
        /// </summary>
        /// <param name="idDocumento">id del documento che si vuole verificare</param>
        /// <param name="idFascicolo">id fascicolo della project</param>
        /// <returns></returns>
        public bool GetSeDocFascicolato(string idDocumento, string idFascicolo)
        {
            bool result = false;
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_COUNT_DOC_FASCICOLATO_2");
            q.setParam("id_documento", idDocumento);
            q.setParam("id_fascicolo", idFascicolo);
            string sql = q.getSQL();
            logger.Debug(sql);
            string appAll;
            ExecuteScalar(out appAll, sql);

            if (!string.IsNullOrEmpty(appAll))
            {
                if (appAll.Equals("0"))
                {
                    result = false;
                }
                else
                {
                    result = true;
                }
            }
            return result;
        }

        private DocsPaVO.documento.StoricoOggetto GetStoricoOggetto(DataRow dataRow)
        {
            DocsPaVO.documento.StoricoOggetto storico = new DocsPaVO.documento.StoricoOggetto();
            storico.systemId = dataRow["SYSTEM_ID"].ToString();
            storico.dataModifica = dataRow["DTA_MODIFICA"].ToString();
            if (dataRow["CHA_OCCASIONALE"] != null)
            {
                storico.occasionale = dataRow["CHA_OCCASIONALE"].ToString();
            }
            storico.descrizione = dataRow["VAR_DESC_OGGETTO"].ToString();
            Utenti ut = new Utenti();
            storico.utente = ut.GetUtente(dataRow["ID_PEOPLE"].ToString());
            storico.ruolo = ut.GetRuolo(dataRow["ID_RUOLO_IN_UO"].ToString());
            return storico;
        }

        #endregion

        #region storico Log
        public ArrayList getListaLog(string idOggetto, string varOggetto)
        {
            ArrayList lista = new ArrayList();
            string sql = "";
            if (varOggetto.Equals("DOCUMENTO") || varOggetto.Equals("ALLEGATO"))
            {
                DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_LOG_DOC");
                if (dbType.ToUpper() == "SQL")
                {
                    string userDb = DocsPaDbManagement.Functions.Functions.GetDbUserSession();
                    q.setParam("docsadm", userDb);
                }
                q.setParam("param1", idOggetto);
                q.setParam("param2", varOggetto);
                if (!varOggetto.Equals("DOCUMENTO"))
                    q.setParam("param4", " OR A.VAR_OGGETTO = 'DOCUMENTO' ");
                sql = q.getSQL();
            }
            else
            {
                DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_LOG_FASC");
                q.setParam("param1", idOggetto);
                //q.setParam("param2", varOggetto);
                //per sql
                if (dbType.ToUpper() == "SQL")
                {
                    q.setParam("dbuser", getUserDB());
                }
                sql = q.getSQL();
            }
            logger.Debug(sql);
            try
            {
                DataSet dataSet = new DataSet();
                ExecuteQuery(out dataSet, "LOG", sql);
                foreach (DataRow dataRow in dataSet.Tables["LOG"].Rows)
                {
                    lista.Add(getLog(dataRow));
                }
                dataSet.Dispose();
            }
            catch (Exception e)
            {
                throw (e);
            }
            return lista;
        }

        protected DocsPaVO.documento.LogDocumento getLog(DataRow dataRow)
        {
            DocsPaVO.documento.LogDocumento log = new DocsPaVO.documento.LogDocumento();

            log.chaEsito = dataRow["CHA_ESITO"].ToString();
            log.codAzione = dataRow["VAR_COD_AZIONE"].ToString();
            log.dataAzione = dataRow["DTA_AZIONE"].ToString();
            log.descrOggetto = dataRow["VAR_DESC_OGGETTO"].ToString();
            log.idAmm = dataRow["ID_AMM"].ToString();
            //log.idGruppoOperatore = dataRow["ID_GRUPPO_OPERATORE"].ToString();
            log.idPeopleOPeratore = dataRow["ID_PEOPLE_OPERATORE"].ToString();
            //log.userIdOperatore = dataRow["USERID_OPERATORE"].ToString();

            // Utenti ut = new Utenti();
            log.userIdOperatore = dataRow["PEOPLE_DESC"].ToString();// ut.GetUtente(dataRow["ID_PEOPLE_OPERATORE"].ToString()).descrizione;
            log.idGruppoOperatore = dataRow["RUOLO_DESC"].ToString();// ut.GetRuoloByIdGruppo(dataRow["ID_GRUPPO_OPERATORE"].ToString()).descrizione;
            string desc = dataRow["VAR_DESC_AZIONE"].ToString();
            if (!string.IsNullOrEmpty(desc) && desc.Contains("(delegato"))
            {
                int start = desc.IndexOf("(delegato");
                int end = desc.LastIndexOf(")");
                desc = desc.Substring(start, end - start + 1);
            }
            log.descProduttore = dataRow.Table.Columns.Contains("DESC_PRODUCER") && !string.IsNullOrEmpty(dataRow["DESC_PRODUCER"].ToString()) ? dataRow["DESC_PRODUCER"].ToString() : string.Empty;
            //log.userIdOperatore += " " + desc;
            return log;
        }

        public ArrayList getListaLogFilter(string idOggetto, string idFolder, string varOggetto, DocsPaVO.filtri.FilterVisibility[] filters)
        {
            string filtro = string.Empty;

            if (filters != null && filters.Length > 0)
            {
                foreach (FilterVisibility filter in filters)
                {
                    switch (filter.Type)
                    {
                        case DocsPaVO.filtri.TypeFilterVisibility.DATE:
                            {
                                filtro = " AND A.DTA_AZIONE >=" + DocsPaDbManagement.Functions.Functions.ToDate(filter.Value + " 00:00:00") +
                                       " AND A.DTA_AZIONE <=" + DocsPaDbManagement.Functions.Functions.ToDate(filter.Value + " 23:59:59");

                                break;
                            }
                        case DocsPaVO.filtri.TypeFilterVisibility.DATE_FROM:
                            {
                                filtro += " AND A.DTA_AZIONE >=" + DocsPaDbManagement.Functions.Functions.ToDate(filter.Value + " 00:00:00");
                                break;
                            }
                        case DocsPaVO.filtri.TypeFilterVisibility.DATE_TO:
                            {
                                filtro += " AND A.DTA_AZIONE <=" + DocsPaDbManagement.Functions.Functions.ToDate(filter.Value + " 23:59:59");
                                break;
                            }
                        case DocsPaVO.filtri.TypeFilterVisibility.DATE_WEEK:
                            {
                                if (!dbType.ToUpper().Equals("SQL"))
                                {
                                    filtro = " AND A.DTA_AZIONE >= (select to_date(to_char(sysdate+ (1-to_char(sysdate,'D')))) startdayofweek from dual) AND A.DTA_AZIONE<(select to_date(to_char(sysdate+ (8-to_char(sysdate,'D')))) enddayofweek from dual) ";

                                }
                                else
                                {
                                    filtro = " and A.DTA_AZIONE between trunc(sysdate,'WW') and sysdate ";

                                }
                                break;
                            }
                        case DocsPaVO.filtri.TypeFilterVisibility.DATE_MONTH:
                            {
                                filtro = " and A.DTA_AZIONE between trunc(sysdate,'MM') and sysdate ";
                                break;
                            }
                        case DocsPaVO.filtri.TypeFilterVisibility.USER:
                            {
                                filtro += "AND A.ID_PEOPLE_OPERATORE IN (SELECT id_people FROM dpa_corr_globali WHERE system_id = " + filter.Value + " )";
                                break;
                            }
                        case DocsPaVO.filtri.TypeFilterVisibility.ROLE:
                            {
                                filtro += "AND A.ID_GRUPPO_OPERATORE IN (SELECT id_GRUPPO FROM dpa_corr_globali WHERE system_id = " + filter.Value + " )";
                                break;
                            }
                        case DocsPaVO.filtri.TypeFilterVisibility.CAUSE:
                            {
                                filtro += "AND A.VAR_COD_AZIONE = '" + filter.Value + "'";
                                break;
                            }
                    }
                }
            }
            ArrayList lista = new ArrayList();
            string sql = "";
            if (varOggetto.Equals("DOCUMENTO") || varOggetto.Equals("ALLEGATO"))
            {
                DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_LOG_DOC_FILTER");
                if (dbType.ToUpper() == "SQL")
                {
                    string userDb = DocsPaDbManagement.Functions.Functions.GetDbUserSession();
                    q.setParam("docsadm", userDb);
                }
                q.setParam("param1", idOggetto);
                q.setParam("param2", varOggetto);
                if (!varOggetto.Equals("DOCUMENTO"))
                    q.setParam("param4", " OR A.VAR_OGGETTO = 'DOCUMENTO' ");
                q.setParam("param3", filtro);
                sql = q.getSQL();
            }
            else
            {
                DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_LOG_FASC_FILTER");
                q.setParam("param1", " (A.ID_OGGETTO ='" + idOggetto + "' or A.ID_OGGETTO ='" + idFolder + "')");
                q.setParam("param3", filtro);
                //per sql
                if (dbType.ToUpper() == "SQL")
                {
                    q.setParam("dbuser", getUserDB());
                }
                sql = q.getSQL();
            }
            logger.Debug(sql);
            try
            {
                DataSet dataSet = new DataSet();
                ExecuteQuery(out dataSet, "LOG", sql);
                foreach (DataRow dataRow in dataSet.Tables["LOG"].Rows)
                {
                    lista.Add(getLog(dataRow));
                }
                dataSet.Dispose();
            }
            catch (Exception e)
            {
                throw (e);
            }
            return lista;
        }

        # endregion


        #region VerificaFirma
        public bool UpdateFirmatari(DocsPaVO.documento.FileRequest fileReq)
        {
            bool resultError = true;
            System.Data.DataSet ds;
            DocsPaUtils.Query q;
            string queryString;
            bool openTrans = false;
            try
            {
                q = DocsPaUtils.InitQuery.getInstance().getQuery("S_DPAFirmatari");
                string param = "VAR_COD_FISCALE IN (";

                //Ci sonon firmatari
                if (fileReq.firmatari != null && fileReq.firmatari.Count != 0)
                {
                    for (int i = 0; i < fileReq.firmatari.Count; i++)
                    {
                        param = param + "'" + ((DocsPaVO.documento.Firmatario)fileReq.firmatari[i]).codiceFiscale + "'";
                        if (i < fileReq.firmatari.Count - 1)
                        {
                            param = param + ",";
                        }
                    }
                }

                //Non ci sono firmatari
                if (fileReq.firmatari == null || fileReq.firmatari.Count == 0)
                {
                    param = param + "'0'";//nono esiste serve solo per non far schiantare la Query.
                }

                param = param + ")";
                q.setParam("param1", param);
                queryString = q.getSQL();
                logger.Debug(queryString);
                ExecuteQuery(out ds, "FIRMATARIO", queryString);
                BeginTransaction();
                openTrans = true;
                if (fileReq.firmatari != null)
                {
                    for (int j = 0; j < fileReq.firmatari.Count; j++)
                    {
                        DocsPaVO.documento.Firmatario objFirm = (DocsPaVO.documento.Firmatario)fileReq.firmatari[j];
                        string firmId;
                        System.Data.DataRow[] dr = ds.Tables["FIRMATARIO"].Select("VAR_COD_FISCALE='" + objFirm.codiceFiscale + "'");
                        if (dr.Length > 0)
                        {
                            firmId = dr[0]["SYSTEM_ID"].ToString();
                        }
                        else
                        {
                            q = DocsPaUtils.InitQuery.getInstance().getQuery("I_DPAFirmatari");
                            q.setParam("param1", DocsPaDbManagement.Functions.Functions.GetSystemIdColName() +
                                "VAR_NOME,VAR_COGNOME,VAR_COD_FISCALE,VAR_TITOLARE");
                            q.setParam("param2", DocsPaDbManagement.Functions.Functions.GetSystemIdNextVal("DPA_FIRMATARI") +
                                "'" + objFirm.nome + "'," + "'" + objFirm.cognome + "'," + "'" + objFirm.codiceFiscale + "'," + "'" + objFirm.identificativoCA + "'");
                            queryString = q.getSQL();
                            logger.Debug(queryString);
                            string res;
                            InsertLocked(out res, queryString, "DPA_FIRMATARI");
                            firmId = res;
                        }
                        //si inserisce il firmatario nella tabella VERSIONI
                        q = DocsPaUtils.InitQuery.getInstance().getQuery("I_DPAFirmavers");
                        q.setParam("param1", DocsPaDbManagement.Functions.Functions.GetSystemIdColName() + "ID_FIRMATARIO,ID_VERSIONE,NUM_LIVELLO");
                        q.setParam("param2", DocsPaDbManagement.Functions.Functions.GetSystemIdNextVal("") + firmId + "," + fileReq.versionId + "," + objFirm.livello);
                        queryString = q.getSQL();
                        logger.Debug(queryString);
                        string result;
                        InsertLocked(out result, queryString, "DPA_FIRMA_VERS");
                    }
                }
                CommitTransaction();
            }
            catch (Exception)
            {
                if (openTrans)
                {
                    RollbackTransaction();
                }
                //throw e;
                resultError = false;
            }
            return resultError;
        }
        #endregion

        #region VersioniManager
        public void SetCompVersions(string versionId, string docNumber, out System.Data.DataSet ds)
        {
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_J_COMPONENTS__VERSIONS3");
            q.setParam("param1", "A.PATH, B.VERSION, B.LASTEDITDATE, B.SUBVERSION, B.VERSION_LABEL, " +
                DocsPaDbManagement.Functions.Functions.ToChar("B.DTA_CREAZIONE", true) + " AS DTA_CREAZIONE");
            q.setParam("param2", "WHERE B.VERSION_ID=A.VERSION_ID AND A.VERSION_ID=" + versionId + " AND A.DOCNUMBER=" + docNumber);
            string queryString = q.getSQL();
            logger.Debug(queryString);

            using (DBProvider dbProvider = new DBProvider())
            {
                dbProvider.ExecuteQuery(out ds, "VERS", queryString);
            }
            
        }


        public void UpdateComponentIdPeopleDelegato(string versionId, string idPeopleDelegato)
        {
            try
            {
                DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("U_COMPONENTS_PEOPLE_DELEGATO");
                q.setParam("param1", idPeopleDelegato);
                q.setParam("param2", versionId);
                string sql = q.getSQL();
                logger.Debug(sql);
                if (!ExecuteNonQuery(sql))
                    throw new Exception();
            }
            catch (Exception e)
            {
                logger.Debug("Errore in UpdateVersionsIdPeopleDelegato ", e);
            }
        }

        public void UpdateLastEditDateProfile(string docnumber)
        {
            try
            {
                DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("U_PROFILE_LAST_EDIT_DATE");
                q.setParam("docnumber", docnumber);
                string sql = q.getSQL();
                logger.Debug(sql);
                /*
                using (DBProvider dbProvider = new DBProvider())
                {
                    if (!dbProvider.ExecuteNonQuery(sql))
                        throw new Exception();
                }
                */
                
            }
            catch (Exception e)
            {
                logger.Debug("Errore in UpdateVersionsIdPeopleDelegato ", e);
            }
        }


        public void UpdateDaInviare(string versionId, bool daInviare)
        {
            //aggiorna flag daInviare
            string val = "0";
            if (daInviare)
            {
                val = "1";
            }
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("U_Versions");
            q.setParam("param1", "CHA_DA_INVIARE = '" + val + "'");
            q.setParam("param2", "VERSION_ID=" + versionId);
            string queryString = q.getSQL();
            logger.Debug(queryString);
            ExecuteNonQuery(queryString);
        }

        public void UpdateVersionManager(DocsPaVO.documento.FileRequest fr, bool daInviare)
        {
            logger.Info("BEGIN");
            logger.Debug("updateVersion");
            //aggiorna flag daInviare
            string val = "0";
            if (daInviare)
            {
                val = "1";
            }
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("U_Versions");
            string firstParam = "CHA_DA_INVIARE = '" + val + "'";
            if (fr.GetType().Equals(typeof(DocsPaVO.documento.Documento)))
            {
                logger.Debug("aggiornamento della data arrivo");
                if (((DocsPaVO.documento.Documento)fr).dataArrivo != null && !((DocsPaVO.documento.Documento)fr).dataArrivo.Equals(""))
                {
                    firstParam += ", DTA_ARRIVO =" + DocsPaDbManagement.Functions.Functions.ToDate(((DocsPaVO.documento.Documento)fr).dataArrivo);
                }
            }
            //DTA_CREAZIONE
            if (fr != null)
            {
                logger.Debug("inserimento data creazione versione");
                if (fr.dataInserimento != null && fr.dataInserimento != "")
                {
                    firstParam += ", DTA_CREAZIONE =" + DocsPaDbManagement.Functions.Functions.ToDate(fr.dataInserimento);
                }
                else
                {
                    fr.dataInserimento = System.DateTime.Now.ToShortDateString();
                    firstParam += ", DTA_CREAZIONE =" + DocsPaDbManagement.Functions.Functions.ToDate(fr.dataInserimento);
                }
                if (!string.IsNullOrEmpty(fr.descrizione))
                {
                    firstParam += ", COMMENTS='" + fr.descrizione.Replace("'", "''") + "'";
                }
                if (!string.IsNullOrEmpty(fr.idPeopleDelegato))
                {
                    firstParam += ", ID_PEOPLE_DELEGATO = "+ fr.idPeopleDelegato;
                }
            }
            q.setParam("param1", firstParam);
            q.setParam("param2", "VERSION_ID=" + fr.versionId);
            string queryString = q.getSQL();
            logger.Debug(queryString);

            using (DBProvider dbProvider = new DBProvider())
            {
                dbProvider.ExecuteNonQuery(queryString);
            }
            
            UpdateExtensionIntoProfile(fr);
            logger.Info("END");
        }

        /// <summary>
        /// Aggiorna a null il campo EXT in profile poichè è stata aggiunta una nuova versione
        /// </summary>
        private void UpdateExtensionIntoProfile(DocsPaVO.documento.FileRequest fr)
        {
            logger.Info("BEGIN");
            logger.Debug("ResetExtensionIntoProfile");
            string queryString  = string.Empty;
            try
            {
                string ext = string.IsNullOrEmpty(fr.fileName) ? "null" : ext = "'" + Path.GetExtension(fr.fileName) + "'";
                DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("U_PROFILE_EXT");
                q.setParam("docnumber", fr.docNumber);
                q.setParam("ext", ext);
                queryString = q.getSQL();

                using (DBProvider dbProvider = new DBProvider())
                {
                    dbProvider.ExecuteNonQuery(queryString);
                }
                
            }
            catch (Exception ex)
            {
                logger.Error(ex.Message);
                logger.Error("Errore durante l'aggiornamento del campo ext nella profile (Query - U_PROFILE_EXT)", ex);
                logger.Error(queryString);
            }
            logger.Info("END");
        }

        public void UpdateApplication(string appId, string docNumber)
        {
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("U_Profile");
            q.setParam("param1", "APPLICATION=" + appId);
            q.setParam("param2", "APPLICATION != " + appId + " AND DOCNUMBER=" + docNumber);
            string queryString = q.getSQL();
            logger.Debug(queryString);

            using (DBProvider dbProvider = new DBProvider())
            {
                dbProvider.ExecuteNonQuery(queryString);
            }
            
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="versionId"></param>
        /// <param name="dbProvider"></param>
        /// <returns></returns>
        private DataRow GetDatiScambiaAllegato(string versionId, DBProvider dbProvider)
        {
            DataRow row = null;

            DocsPaUtils.Query queryDef = DocsPaUtils.InitQuery.getInstance().getQuery("S_SELECT_DATA_SCAMBIA_ALLEGATO");
            queryDef.setParam("versionId", versionId);

            string commandText = queryDef.getSQL();
            logger.Debug(commandText);

            DataSet ds;
            if (dbProvider.ExecuteQuery(out ds, commandText))
                row = ds.Tables[0].Rows[0];

            return row;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="value"></param>
        /// <param name="addApex"></param>
        /// <returns></returns>
        private string GetStringParamValue(object value, bool addApex)
        {
            string retValue = string.Empty;

            if (value != null)
            {
                retValue = value.ToString().Replace("'", "''");

                if (addApex)
                    retValue = string.Format("'{0}'", retValue);
            }
            else
                retValue = "Null";

            return retValue;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="versionId"></param>
        /// <param name="subVersion"></param>
        /// <param name="cartaceo"></param>
        /// <param name="scartaFascCartacea"></param>
        /// <param name="dbProvider"></param>
        /// <returns></returns>
        private bool UpdateVersionScambiaAllegato(string versionId, string subVersion, string cartaceo, string scartaFascCartacea, DBProvider dbProvider)
        {
            DocsPaUtils.Query queryDef = DocsPaUtils.InitQuery.getInstance().getQuery("U_UPDATE_VERSION_SCAMBIA_ALLEGATO");

            queryDef.setParam("versionId", versionId);
            queryDef.setParam("subVersion", GetStringParamValue(subVersion, true));
            queryDef.setParam("cartaceo", (string.IsNullOrEmpty(cartaceo) ? "null" : cartaceo));
            queryDef.setParam("scartaFascCartacea", (string.IsNullOrEmpty(scartaFascCartacea) ? "null" : scartaFascCartacea));

            string commandText = queryDef.getSQL();
            logger.Debug(commandText);

            int rowsAffected;
            dbProvider.ExecuteNonQuery(commandText, out rowsAffected);

            return (rowsAffected > 0);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="versionId"></param>
        /// <param name="path"></param>
        /// <param name="fileSize"></param>
        /// <param name="impronta"></param>
        /// <param name="dbProvider"></param>
        /// <returns></returns>
        private bool UpdateComponentsScambiaAllegato(string versionId, string path, string fileSize, string impronta, string estensione, string firmato, string nomeOriginale, string fileInfo, string authorFile, string dataAcquisizione, string idPeopleDelegatoPutfile, DBProvider dbProvider)
        {
            DocsPaUtils.Query queryDef = DocsPaUtils.InitQuery.getInstance().getQuery("U_UPDATE_COMPONENTS_SCAMBIA_ALLEGATO");

            queryDef.setParam("versionId", versionId);
            queryDef.setParam("path", GetStringParamValue(path, true));
            queryDef.setParam("fileSize", (string.IsNullOrEmpty(fileSize) ? "0" : fileSize));
            queryDef.setParam("impronta", GetStringParamValue(impronta, true));
            queryDef.setParam("estensione", estensione);
            queryDef.setParam("firmato", (string.IsNullOrEmpty(firmato) ? "0" : firmato));
            queryDef.setParam("nomeOriginale", nomeOriginale.Replace("'", "''"));
            queryDef.setParam("fileInfo", fileInfo);
            queryDef.setParam("idPeoplePutfile", string.IsNullOrEmpty(authorFile) ? "null" : authorFile);
            queryDef.setParam("idPeopleDelegatoPutfile", string.IsNullOrEmpty(idPeopleDelegatoPutfile) ? "null" : idPeopleDelegatoPutfile);
            queryDef.setParam("dtaFileAcquired", DocsPaDbManagement.Functions.Functions.ToDate(dataAcquisizione));
            string commandText = queryDef.getSQL();
            logger.Debug(commandText);

            int rowsAffected;
            dbProvider.ExecuteNonQuery(commandText, out rowsAffected);

            return (rowsAffected > 0);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="versionId"></param>
        /// <param name="docnumber"></param>
        /// <param name="timeStampSystemId"></param>
        /// <param name="impronta"></param>
        /// <param name="estensione"></param>
        /// <param name="firmato"></param>
        /// <param name="nomeOriginale"></param>
        /// <param name="dbProvider"></param>
        /// <returns></returns>
        private bool UpdateTimestampScambiaAllegato(string docnumber, string versionId, string timeStampSystemId, DBProvider dbProvider)
        {
            DocsPaUtils.Query queryDef = DocsPaUtils.InitQuery.getInstance().getQuery("U_UPDATE_TIMESTAMP_SCAMBIA_ALLEGATO");

            queryDef.setParam("versionId", versionId);
            queryDef.setParam("docnumber", docnumber);
            queryDef.setParam("systemId", timeStampSystemId);
            string commandText = queryDef.getSQL();
            logger.Debug(commandText);

            int rowsAffected;
            dbProvider.ExecuteNonQuery(commandText, out rowsAffected);

            return (rowsAffected > 0);
        }

        /// <summary>
        /// Scambia il file associato ad un allegato con il file associato ad un documento 
        /// </summary>
        /// <param name="infoUtente"></param>
        /// <param name="allegato"></param>
        /// <param name="documento"></param>
        /// <returns></returns>
        public bool ScambiaAllegatoDocumento(DocsPaVO.utente.InfoUtente infoUtente, DocsPaVO.documento.Allegato allegato, DocsPaVO.documento.Documento documento)
        {
            bool retValue = false;

            using (DBProvider dbProvider = new DBProvider())
            {
                DataRow rowDocumento = GetDatiScambiaAllegato(documento.versionId, dbProvider);
                DataRow rowAllegato = GetDatiScambiaAllegato(allegato.versionId, dbProvider);

                // Aggiornamento record VERSIONS per l'allegato con i dati del documento
                retValue = UpdateVersionScambiaAllegato(allegato.versionId,
                                    DocsPaUtils.Data.DataReaderHelper.GetValue<object>(rowDocumento, "SUBVERSION", false).ToString(),
                                    DocsPaUtils.Data.DataReaderHelper.GetValue<object>(rowDocumento, "CARTACEO", true, string.Empty).ToString(),
                                    DocsPaUtils.Data.DataReaderHelper.GetValue<object>(rowDocumento, "SCARTA_FASC_CARTACEA", true, string.Empty).ToString(),
                                    dbProvider);

                if (retValue)
                {
                    // Aggiornamento record VERSIONS per il documento con i dati dell'allegato
                    retValue = UpdateVersionScambiaAllegato(documento.versionId,
                                    DocsPaUtils.Data.DataReaderHelper.GetValue<object>(rowAllegato, "SUBVERSION", false).ToString(),
                                    DocsPaUtils.Data.DataReaderHelper.GetValue<object>(rowAllegato, "CARTACEO", true, string.Empty).ToString(),
                                    DocsPaUtils.Data.DataReaderHelper.GetValue<object>(rowAllegato, "SCARTA_FASC_CARTACEA", true, string.Empty).ToString(),
                                    dbProvider);
                }

                if (retValue)
                {
                    // Aggiornamento record COMPONENTS per l'allegato con i dati del documento
                    retValue = UpdateComponentsScambiaAllegato(allegato.versionId,
                            DocsPaUtils.Data.DataReaderHelper.GetValue<object>(rowDocumento, "PATH", true, string.Empty).ToString(),
                            DocsPaUtils.Data.DataReaderHelper.GetValue<object>(rowDocumento, "FILE_SIZE", true, string.Empty).ToString(),
                            DocsPaUtils.Data.DataReaderHelper.GetValue<object>(rowDocumento, "VAR_IMPRONTA", true, string.Empty).ToString(),
                            DocsPaUtils.Data.DataReaderHelper.GetValue<object>(rowDocumento, "EXT", true, string.Empty).ToString(),
                            DocsPaUtils.Data.DataReaderHelper.GetValue<object>(rowDocumento, "CHA_FIRMATO", true, string.Empty).ToString(),
                            DocsPaUtils.Data.DataReaderHelper.GetValue<object>(rowDocumento, "VAR_NOMEORIGINALE", true, string.Empty).ToString(),
                            DocsPaUtils.Data.DataReaderHelper.GetValue<object>(rowDocumento, "FILE_INFO", true, string.Empty).ToString(),
                            DocsPaUtils.Data.DataReaderHelper.GetValue<object>(rowDocumento, "ID_PEOPLE_PUTFILE", true, string.Empty).ToString(),
                            DocsPaUtils.Data.DataReaderHelper.GetValue<object>(rowDocumento, "DTA_FILE_ACQUIRED", true, string.Empty).ToString(),
                            DocsPaUtils.Data.DataReaderHelper.GetValue<object>(rowDocumento, "ID_PEOPLE_DELEGATO_PUTFILE", true, string.Empty).ToString(),
                            dbProvider);

                    if (retValue)
                    {
                        // Aggiornamento record COMPONENTS per il documento con i dati dell'allegato
                        retValue = UpdateComponentsScambiaAllegato(documento.versionId,
                            DocsPaUtils.Data.DataReaderHelper.GetValue<object>(rowAllegato, "PATH", true, string.Empty).ToString(),
                            DocsPaUtils.Data.DataReaderHelper.GetValue<object>(rowAllegato, "FILE_SIZE", true, string.Empty).ToString(),
                            DocsPaUtils.Data.DataReaderHelper.GetValue<object>(rowAllegato, "VAR_IMPRONTA", true, string.Empty).ToString(),
                            DocsPaUtils.Data.DataReaderHelper.GetValue<object>(rowAllegato, "EXT", true, string.Empty).ToString(),
                            DocsPaUtils.Data.DataReaderHelper.GetValue<object>(rowAllegato, "CHA_FIRMATO", true, string.Empty).ToString(),
                            DocsPaUtils.Data.DataReaderHelper.GetValue<object>(rowAllegato, "VAR_NOMEORIGINALE", true, string.Empty).ToString(),
                            DocsPaUtils.Data.DataReaderHelper.GetValue<object>(rowAllegato, "FILE_INFO", true, string.Empty).ToString(),
                            DocsPaUtils.Data.DataReaderHelper.GetValue<object>(rowAllegato, "ID_PEOPLE_PUTFILE", true, string.Empty).ToString(),
                            DocsPaUtils.Data.DataReaderHelper.GetValue<object>(rowAllegato, "DTA_FILE_ACQUIRED", true, string.Empty).ToString(),
                            DocsPaUtils.Data.DataReaderHelper.GetValue<object>(rowAllegato, "ID_PEOPLE_DELEGATO_PUTFILE", true, string.Empty).ToString(),
                            dbProvider);
                    }
                }
                ScambiaTimeStamp(documento, allegato, dbProvider);
                ScambiaChaImg(documento, allegato, dbProvider);
            }

            return retValue;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="doc"></param>
        /// <param name="all"></param>
        public void ScambiaChaImg(DocsPaVO.documento.Documento doc, DocsPaVO.documento.Allegato all, DBProvider dbProvider)
        {
            ArrayList parameters = new ArrayList();
            int retProc;

            DocsPaUtils.Data.ParameterSP par = CreateParameter("p_idprincipale", Convert.ToInt32(doc.docNumber));
            par.Tipo = DbType.Int32;
            parameters.Add(par);

            par = CreateParameter("p_idallegato", Convert.ToInt32(all.docNumber));
            par.Tipo = DbType.Int32;
            parameters.Add(par);

            retProc = ExecuteStoreProcedure("SCAMBIACHAIMG", parameters);
            logger.Debug("Valore di ritorno della stored procedure SCAMBIACHAIMG = " + retProc);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="doc"></param>
        /// <param name="all"></param>
        public void ScambiaTimeStamp(DocsPaVO.documento.Documento doc, DocsPaVO.documento.Allegato all, DBProvider dbProvider)
        {
            TimestampDoc tsd = new TimestampDoc();
            List<DocsPaVO.documento.TimestampDoc> tsdoc = tsd.getTimestampsDoc(null, new FileRequest { docNumber = doc.docNumber, versionId = doc.versionId }).Cast<DocsPaVO.documento.TimestampDoc>().ToList();
            List<DocsPaVO.documento.TimestampDoc> tsAll = tsd.getTimestampsDoc(null, new FileRequest { docNumber = all.docNumber, versionId = all.versionId }).Cast<DocsPaVO.documento.TimestampDoc>().ToList();
            List<string> idsDocPrincipale = (from a in tsdoc select a.SYSTEM_ID).ToList<string>();
            List<string> idsAllegato = (from a in tsAll select a.SYSTEM_ID).ToList<string>();

            foreach (string systemID in idsDocPrincipale)
                UpdateTimestampScambiaAllegato(all.docNumber, all.versionId, systemID, dbProvider);

            foreach (string systemID in idsAllegato)
                UpdateTimestampScambiaAllegato(doc.docNumber, doc.versionId, systemID, dbProvider);


        }

        public void ScambiaVersioni(DocsPaVO.documento.Documento doc, DocsPaVO.documento.Allegato all)
        {
            DocsPaUtils.Query q;
            try
            {
                //OpenConnection();
                //si ricava l'applicazione dell'allegato
                string extension = all.fileName.Substring(all.fileName.IndexOf(".") + 1).ToUpper();
                q = DocsPaUtils.InitQuery.getInstance().getQuery("S_Apps");
                q.setParam("param1", "SYSTEM_ID");
                q.setParam("param2", "WHERE DEFAULT_EXTENSION='" + extension + "'");
                string queryString = q.getSQL();
                logger.Debug(queryString);
                string appAll;
                ExecuteScalar(out appAll, queryString);
                BeginTransaction();
                //l'allegato diventa documento...
                q = DocsPaUtils.InitQuery.getInstance().getQuery("U_Versions");
                string firstParam = " VERSION=" + doc.version + ", VERSION_LABEL='" + all.versionId + "'";
                if (doc.subVersion != null)
                {
                    firstParam = firstParam + ", SUBVERSION='" + doc.subVersion + "'";
                }
                else
                {
                    firstParam = firstParam + ", SUBVERSION=null";
                }
                firstParam = firstParam + ", COMMENTS='" + doc.descrizione.Replace("'", "''") + "'";
                if (doc.dataInserimento != null)
                {
                    firstParam = firstParam + ", DTA_CREAZIONE=" + DocsPaDbManagement.Functions.Functions.ToDate(doc.dataInserimento);
                    //firstParam = firstParam+", DTA_CREAZIONE='"+doc.dataInserimento+"'" ;
                }
                else
                {
                    firstParam = firstParam + ", DTA_CREAZIONE=null";
                }
                //firstParam = firstParam;
                q.setParam("param1", firstParam);
                q.setParam("param2", "VERSION_ID=" + all.versionId + " AND DOCNUMBER=" + all.docNumber);
                queryString = q.getSQL();
                logger.Debug(queryString);
                ExecuteNonQuery(queryString);
                //il documento diventa allegato...
                q = DocsPaUtils.InitQuery.getInstance().getQuery("U_Versions");
                firstParam = " VERSION=" + all.version + ", VERSION_LABEL='" + all.versionLabel + "'";
                if (all.subVersion != null)
                {
                    firstParam = firstParam + ", SUBVERSION='" + all.subVersion + "'";
                }
                else
                {
                    firstParam = firstParam + ", SUBVERSION=null";
                }
                firstParam = firstParam + ", NUM_PAG_ALLEGATI=" + all.numeroPagine;
                firstParam = firstParam + ", COMMENTS='" + all.descrizione.Replace("'", "''") + "'";
                if (all.dataInserimento != null)
                {
                    firstParam = firstParam + ", DTA_CREAZIONE=" + DocsPaDbManagement.Functions.Functions.ToDate(all.dataInserimento);
                }
                else
                {
                    firstParam = firstParam + ", DTA_CREAZIONE=null";
                }
                q.setParam("param1", firstParam);
                q.setParam("param2", "VERSION_ID=" + doc.versionId + " AND DOCNUMBER=" + doc.docNumber);

                queryString = q.getSQL();
                logger.Debug(queryString);
                ExecuteNonQuery(queryString);
                //si aggiorna la version label 
                q = DocsPaUtils.InitQuery.getInstance().getQuery("U_Versions");
                q.setParam("param1", "VERSION_LABEL='" + doc.versionLabel + "'");
                q.setParam("param2", "VERSION_ID=" + all.versionId + " AND DOCNUMBER=" + all.docNumber);
                queryString = q.getSQL();
                logger.Debug(queryString);
                ExecuteNonQuery(queryString);
                //si aggiorna la tabella apps con la nuova applicazione
                q = DocsPaUtils.InitQuery.getInstance().getQuery("U_Profile");
                q.setParam("param1", "APPLICATION=" + appAll);
                q.setParam("param2", "DOCNUMBER=" + doc.docNumber);
                queryString = q.getSQL();
                logger.Debug(queryString);
                ExecuteNonQuery(queryString);
                CommitTransaction();
                CloseConnection();
            }
            catch (Exception e)
            {
                RollbackTransaction();
                //CloseConnection();
                logger.Error(e.ToString());
                logger.Error("Errore nella gestione dei documenti (Query - ScambiaVersioni)", e);
                throw new Exception("F_System");
            }
        }

        public void ModificaVersione(DocsPaVO.documento.FileRequest fileReq)
        {
            logger.Debug("modificaVersione");
            try
            {
                //OpenConnection();
                DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("U_Versions");
                q.setParam("param1", "VERSION_LABEL='" + fileReq.versionLabel + "', COMMENTS='" + fileReq.descrizione.Replace("'", "''") + "'");
                q.setParam("param2", "VERSION_ID=" + fileReq.versionId);
                string queryString = q.getSQL();
                ExecuteNonQuery(queryString);
                //CloseConnection();
            }
            catch (Exception e)
            {
                logger.Error(e.Message);
                //CloseConnection();
                logger.Error("Errore nella gestione dei documenti (Query - ModificaVersione)", e);
                throw new Exception("F_System");
            }
        }

        public bool ModifyVersionSegnatura(string versionId)
        {
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("U_Versions");
            q.setParam("param1", "cha_segnatura='1'");
            q.setParam("param2", "VERSION_ID=" + versionId);
            string queryString = q.getSQL();
            return ExecuteNonQuery(queryString);
        }

        /// <summary>
        /// Restituisce true se alla versione con versionId è associato un file con impressa la segnatura
        /// </summary>
        /// <param name="versionId"></param>
        /// <returns></returns>
        public bool IsVersionWithSegnature(string versionId)
        {
            string res = string.Empty, queryString = string.Empty;
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_Versions");
            q.setParam("param1", "COALESCE(CHA_SEGNATURA,'0') as segnatura");
            q.setParam("param2", "VERSION_ID=" + versionId);
            queryString = q.getSQL();
            try
            {
                if (string.IsNullOrEmpty(versionId))
                    return false;
                
                ExecuteScalar(out res, queryString);
                return res.Equals("1");
            }
            catch (Exception ex)
            {
                logger.Error("Errore durante la lettura del campo cha_segnatura in Versions (Query - S_Versions)", ex);
                throw;
            }
        }

        #endregion

        #region Query per Filenet

        public void F_UpdateVersion(DocsPaVO.documento.FileRequest filereq, string tipofile)
        {
            logger.Debug("F_UpdateVersion");
            string numPag = "0";
            if (filereq.GetType() == typeof(DocsPaVO.documento.Allegato))
                numPag = ((DocsPaVO.documento.Allegato)filereq).numeroPagine.ToString();

            try
            {
                string setparam1, setparam2;
                DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("FILENET_U_VERSION");
                setparam1 = "V_COMMENT='" + filereq.descrizione + "'";
                //setparam1 += ",NUM_PAG_ALLEGATI='"+ numPag+"'";
                //if (filereq.GetType()==typeof(DocsPaVO.documento.Documento))
                //{
                //	setparam1 += ",DTA_ARRIVO="+DocsPaDbManagement.Functions.Functions.ToDate(((DocsPaVO.documento.Documento) filereq).dataArrivo);
                //	setparam1 += ",CHA_DA_INVIARE='"+((DocsPaVO.documento.Documento)filereq).daInviare+"'";
                //}
                //setparam1 += ",VAR_CODICE='"+filereq.versionLabel+"'";
                //setparam1 += ",NUM_VERSIONE='"+filereq.version+"'";
                //setparam1 += ",CHA_ALLEGATO='"+tipofile+"'";
                //setparam1 += ",ID_APPLICAZIONE='"+"NULL"+"'";
                //setparam1 += ",NUM_STATO='"+"1"+"'";

                setparam2 = "V_NAME + V_E_NAME='" + filereq.versionId + "'";

                q.setParam("param1", setparam1);
                q.setParam("param2", setparam2);
                string queryString = q.getSQL();
                ExecuteNonQuery(queryString);

            }
            catch (Exception ex)
            {
                logger.Error(ex.Message);
                logger.Error("Errore durante l'aggiornamento della versione (Query - FILENET_U_VERSION)", ex);
                throw new Exception(ex.Message);
            }
        }

        public string F_GetNumVersione(string docnumber, string allegato)
        {
            string numversione = "";
            logger.Debug("F_GetNumVersione");
            try
            {
                DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("FILENET_S_GET_NUM_VERSIONE");

                q.setParam("param1", docnumber);
                q.setParam("param2", allegato);
                string queryString = q.getSQL();
                ExecuteScalar(out numversione, queryString);
                return numversione;
            }
            catch (Exception ex)
            {
                logger.Error(ex.Message);
                logger.Error("Errore durante la lettura del numero di versione (Query - FILENET_S_GET_NUM_VERSIONE)", ex);
                throw new Exception(ex.Message);
            }
        }

        public string F_GetNumVersione(string docnumber, string version, bool var)
        {
            string numversione = "";

            logger.Debug("F_GetNumVersione");
            try
            {
                DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("FILENET_S_GET_NUM_VERSIONE_2");

                q.setParam("param1", docnumber);
                q.setParam("param2", version);
                string queryString = q.getSQL();
                ExecuteScalar(out numversione, queryString);
                return numversione;
            }
            catch (Exception ex)
            {
                logger.Error(ex.Message);
                logger.Error("Errore durante la lettura del numero di versione (Query - FILENET_S_GET_NUM_VERSIONE_2)", ex);
                throw new Exception(ex.Message);
            }
        }

        public string F_GetFilenetNumVersione(string docnumber, string version)
        {
            string numversione = "";

            logger.Debug("F_GetFilenetNumVersione");
            try
            {
                DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("FILENET_S_GET_NUM_VERSIONE_3");

                q.setParam("param1", docnumber);
                q.setParam("param2", version);
                string queryString = q.getSQL();
                ExecuteScalar(out numversione, queryString);
                return numversione;
            }
            catch (Exception ex)
            {
                logger.Error(ex.Message);
                logger.Error("Errore durante la lettura del numero di versione (Query - FILENET_S_GET_NUM_VERSIONE_3)", ex);
                throw new Exception(ex.Message);
            }
        }

        public bool F_DeleteVersion(string versionId)
        {
            int rowAffected;
            logger.Debug("F_DeleteVersion");

            try
            {
                DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("FILENET_D_VERSION");
                q.setParam("param1", versionId);
                string queryString = q.getSQL();
                ExecuteNonQuery(queryString, out rowAffected);
            }
            catch (Exception ex)
            {
                logger.Error(ex.Message);
                logger.Error("Errore durante la eliminazione della versione (Query - FILENET_D_VERSION)", ex);
                throw new Exception(ex.Message);
            }

            if (rowAffected > 0) return true; else return false;
        }

        public bool F_VersioneISAcquisito(string docnumber, string versionid)
        {
            logger.Debug("F_VersioneISAcquisito");

            try
            {
                DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("FILENET_VERSION_IS_ACQUISITO");
                q.setParam("param1", docnumber);
                q.setParam("param2", versionid);
                string queryString = q.getSQL();
                string var_impronta;
                ExecuteScalar(out var_impronta, queryString);
                if (var_impronta != null && var_impronta.Length > 0)
                    return true;
                else
                    return false;
            }
            catch (Exception ex)
            {
                logger.Error(ex.Message);
                logger.Error("Errore durante l'esecuzione della query FILENET_VERSION_IS_ACQUISITO", ex);
                throw new Exception(ex.Message);
            }
        }

        public void F_UpdateVersions(string v_e_name, string docNumber, string version)
        {
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("FILENET_U_VERSIONS");
            q.setParam("param1", "V_NAME_FN='" + v_e_name + "'");
            q.setParam("param2", "DOCNUMBER=" + docNumber + " AND VERSION='" + version + "' AND VERSION_ID = ( SELECT MAX(VERSION_ID) FROM VERSIONS WHERE DOCNUMBER=" + docNumber + " AND VERSION='" + version + "' )");
            string queryString = q.getSQL();
            logger.Debug(queryString);
            ExecuteNonQuery(queryString);
        }

        public DataSet F_GetVersionData(string docNumber, string version)
        {
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("FILENET_S_VERSION");
            q.setParam("param1", docNumber);
            q.setParam("param2", version);
            string queryString = q.getSQL();
            logger.Debug(queryString);
            DataSet ds = new DataSet();
            ExecuteQuery(out ds, "ELEMENT", queryString);
            return ds;
        }

        public string F_GetStack(string stackid)
        {
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("FILENET_S_STACK");
            q.setParam("param1", stackid);
            string queryString = q.getSQL();
            logger.Debug(queryString);
            DataSet ds = new DataSet();
            ExecuteQuery(out ds, "STACK", queryString);
            if (ds.Tables.Count == 0) return "";
            if (ds.Tables["STACK"].Rows.Count == 0) return "";
            return ds.Tables["STACK"].Rows[0]["ST_NODE"].ToString() + @"\" +
                ds.Tables["STACK"].Rows[0]["ST_PATH"].ToString();
        }

        public string F_GetVersionID(string docnumber, string v_name)
        {
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("FILENET_GET_VERSIONID");
            q.setParam("param1", docnumber);
            q.setParam("param2", v_name);
            string queryString = q.getSQL();
            logger.Debug(queryString);
            string versionid = "";
            ExecuteScalar(out versionid, queryString);
            return versionid;
        }

        public bool F_UpdateComponents(string docnumber, string versionid, string path)
        {
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("FILENET_UPDATE_COMPONENTS");
            q.setParam("param1", path);
            q.setParam("param2", docnumber);
            q.setParam("param3", versionid);
            string queryString = q.getSQL();
            logger.Debug(queryString);
            int nrec;
            ExecuteNonQuery(queryString, out nrec);
            return nrec > 0 ? true : false;
        }

        public string F_GetOriginalFileName(string v_e_name, string v_name)
        {
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("FILENET_GET_ORIGINAL_FILE_NAME");
            q.setParam("param1", v_e_name);
            q.setParam("param2", v_name);
            string queryString = q.getSQL();
            logger.Debug(queryString);
            string filenName = "";
            ExecuteScalar(out filenName, queryString);
            return filenName;
        }

        #endregion

        #region Pezza Arlecchino per MILANO
        public string do_switchQuery(DocsPaVO.filtri.FiltroRicerca[] listaFiltri)
        {
            string nomeQuery = "";
            //Ricerca Completamento
            if (listaFiltri.Length == 3)
            {
                switch (listaFiltri[0].argomento)
                {
                    case "DA_PROTOCOLLARE":
                        nomeQuery = "S_J_PROFILE__SECURITY__DAPROT";
                        break;

                    case "MANCANZA_IMMAGINE":
                        nomeQuery = "S_J_PROFILE__SECURITY__MIMG";
                        break;

                    case "MANCANZA_ASSEGNAZIONE":
                        nomeQuery = "S_J_PROFILE__SECURITY__MASS";
                        break;

                    case "MANCANZA_FASCICOLAZIONE":
                        nomeQuery = "S_J_PROFILE__SECURITY__MFASC";
                        break;
                }
            }
            //Ricerca Doc Grigi
            if (listaFiltri.Length == 2)
            {
                switch (listaFiltri[1].argomento)
                {
                    case "MANCANZA_IMMAGINE":
                        nomeQuery = "S_J_PROFILE__SECURITY__MIMG";
                        break;

                    case "MANCANZA_ASSEGNAZIONE":
                        nomeQuery = "S_J_PROFILE__SECURITY__MASS";
                        break;

                    case "MANCANZA_FASCICOLAZIONE":
                        nomeQuery = "S_J_PROFILE__SECURITY__MFASC";
                        break;
                }
            }
            return nomeQuery;
        }
        #endregion


        #region Gestione paginazione server per i documenti

        /// <summary>
        /// 
        /// </summary>
        /// <param name="objQueryList"></param>
        /// <returns></returns>
        private string GetQueryTop(string query, DocsPaVO.filtri.FiltroRicerca[][] objQueryList)
        {
            string commandText = string.Empty;

            string rownumber = GetRowNum(objQueryList);

            if (!string.IsNullOrEmpty(rownumber))
            {
                // visualizza tanti record quanti presenti sul db 
                commandText = DocsPaDbManagement.Functions.Functions.SelectTop(query, rownumber);
            }
            else
            {
                // legge il valore di default dal Web.config "numeroMaxRisultatiQuery"
                commandText = DocsPaDbManagement.Functions.Functions.SelectTop(query);
            }

            return commandText;
        }


        /// <summary>
        /// 
        /// </summary>
        /// <param name="idGruppo"></param>
        /// <param name="idPeople"></param>
        /// <param name="objQueryList"></param>
        /// <param name="selectColumns"></param>
        /// <param name="queryFrom"></param>
        /// <param name="queryWhere"></param>
        /// <param name="queryOrd"></param>
        /// <returns></returns>
        public string GetQueryProtocollo(string idGruppo,
                                        string idPeople,
                                        DocsPaVO.filtri.FiltroRicerca[][] objQueryList,
                                        string selectColumns,
                                        string queryFrom,
                                        string queryWhere,
                                        string queryOrd)
        {
            DocsPaUtils.Query q;
            if (idGruppo != null && idPeople != null)
            {
                string nomeQuery = do_switchQuery(objQueryList[0]);
                if (nomeQuery.Equals(""))
                {
                    q = DocsPaUtils.InitQuery.getInstance().getQuery("S_J_PROFILE__SECURITY__OGGETTARIO2");


                }
                else
                {
                    q = DocsPaUtils.InitQuery.getInstance().getQuery(nomeQuery);
                }

                q.setParam("param1", selectColumns);
                q.setParam("param2", queryFrom);
                q.setParam("idGruppo", idGruppo);
                q.setParam("idPeople", idPeople);
                string idAmm = "0";
                if (!string.IsNullOrEmpty(idPeople))
                {
                    DocsPaDB.Query_DocsPAWS.Utenti u = new Utenti();
                    idAmm = u.GetIdAmm(idPeople);
                }
                string idRuoloPubblico = DocsPaUtils.Configuration.InitConfigurationKeys.GetValue(idAmm, "ENABLE_FASCICOLO_PUBBLICO");
                q.setParam("idRuoloPubblico", !string.IsNullOrEmpty(idRuoloPubblico) ? idRuoloPubblico : "0");

                if (queryWhere.StartsWith(" AND"))
                {
                    queryWhere = queryWhere.Substring(4, (queryWhere.Length - 4));
                }
                q.setParam("param3", queryWhere);
                q.setParam("param4", queryOrd);
            }
            else
            {
                q = DocsPaUtils.InitQuery.getInstance().getQuery("S_J_PROFILE__DPA_OGGETTARIO4");
                q.setParam("param1", selectColumns);
                q.setParam("param2", queryFrom);
                q.setParam("param3", queryWhere);
                q.setParam("param4", queryOrd);
            }
            String queryString = q.getSQL();
            logger.Debug("GetQueryProtocollo > queryString = " + queryString);
            return queryString;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="comingPopUp"></param>
        /// <returns></returns>
        private int GetDocumentPageSize(bool comingPopUp)
        {
            if (comingPopUp)
                return 10;
            else
                return 20;
        }
        public static bool Cfg_ARCHIVIO_DEPOSITO
        {
            get
            {
                //MODIFICATO DA SAB per gestione chiave da DB  15/05/2013
                //string eme = System.Configuration.ConfigurationManager.AppSettings["ARCHIVIO_DEPOSITO"];
                //return (eme != null && eme != "" && eme.ToLower() == "true") ? true : false;

                string eme = DocsPaUtils.Configuration.InitConfigurationKeys.GetValue("0", "ARCHIVIO_DEPOSITO");
                if (eme == null || !eme.Equals("1"))
                    return false;

                return true;
            }
        }
        /// <summary>
        /// Reperimento del numero totale di documenti estratti nella query paginata
        /// </summary>
        /// <param name="idGruppo"></param>
        /// <param name="idPeople"></param>
        /// <param name="objQueryList"></param>
        /// <param name="getIdProfilesList">True se si desidera ricevere anche la lista dei system id dei documenti restituiti dalla ricerca</param>
        /// <param name="idProfileList">Lista dei system id dei documenti restituiti dalla ricerca</param>
        /// <returns></returns>
        private int GetCountDocumenti(string idGruppo,
                                        string idPeople,
                                        bool ricercaVeloce,
                                        int maxRisultatiQuery,
                                        string fromTables,
                                        string filterString,
                                        bool unionStampeReg,
                                        string filters_stampe,
                                        bool security,
                                        bool getIdProfilesList,
                                        out List<SearchResultInfo> idProfileList)
        {
            // Lista degli id profile restituiti dalla ricerca
            List<SearchResultInfo> idProfiles = null;
            // Il dataset in cui memorizzarre il risultato della query
            DataSet dataSet;

            int retValue = 0;

            string queryName = string.Empty;
            if (ricercaVeloce)
                queryName = "S_GET_COUNT_ROWS_RICERCA_DOCUMENTI_VELOCE";
            else
                if (getIdProfilesList)
                    queryName = "S_GET_COUNT_ROWS_RICERCA_DOCUMENTI_MASSIVE_OPERATIONS";
                else
                    queryName = "S_GET_COUNT_ROWS_RICERCA_DOCUMENTI";

            DocsPaUtils.Query queryDef = DocsPaUtils.InitQuery.getInstance().getQuery(queryName);

            string queryFrom = string.Empty;
            string queryOrd = string.Empty;
            string verSecurity = " A.SYSTEM_ID = A.SYSTEM_ID ";

            // Parametri specifici per query oracle
            string preferedIndex = "/*+index (a)*/";
            if ((filterString.IndexOf("A.VAR_PROF_OGGETTO") > -1 ||
                filterString.IndexOf("G.VAR_DESC_CORR") > -1) && Cfg_USE_TEXT_INDEX != "0")
            // Impostazione indice da utilizzare
            {
                if (filterString.ToUpper().IndexOf("CONTAINS(A.VAR_PROF_OGGETTO") > -1)
                    preferedIndex = "/*+index (a indx_ogg_text)*/";
                //////TODO se var_desc_corr
            }

            if (ricercaVeloce)
                queryDef.setParam("dataInizioAnno", "01/01/" + DateTime.Now.Year.ToString() + " 00:00:00");

            string idAmm = "0";
            if (!string.IsNullOrEmpty(idPeople))
            {
                DocsPaDB.Query_DocsPAWS.Utenti u = new Utenti();
                idAmm = u.GetIdAmm(idPeople);
            }
            string idRuoloPubblico = DocsPaUtils.Configuration.InitConfigurationKeys.GetValue(idAmm, "ENABLE_FASCICOLO_PUBBLICO");
            if(string.IsNullOrEmpty(idRuoloPubblico))
                idRuoloPubblico = "0";

            if (security)
            {

                bool IS_ARCHIVISTA_DEPOSITO;
                DocsPaDB.Query_DocsPAWS.Utenti ut = new Utenti();
                IS_ARCHIVISTA_DEPOSITO = ut.isUtArchivistaDeposito(idPeople, idGruppo);
                if (filterString.ToUpper().IndexOf("AND id_documento_principale IS NOT NULL".ToUpper()) > -1 ||
            (filterString.IndexOf("NOT A.ID_DOCUMENTO_PRINCIPALE IS NULL") > -1) ||
                IS_ARCHIVISTA_DEPOSITO)
                {
                    if (dbType.ToUpper().Equals("SQL"))
                        verSecurity = "(" + this.getUserDB() + ".checkSecurityDocumento(A.SYSTEM_ID, " + idPeople + ", " + idGruppo + ", " + idRuoloPubblico + ",'D') > 0)";
                    else
                        verSecurity = "(checkSecurityDocumento(A.SYSTEM_ID, " + idPeople + ", " + idGruppo + ", " + idRuoloPubblico + ",'D') > 0)";
                }
                else
                {
                    if (IndexSecurity())
                        verSecurity = " EXISTS (select /*+INDEX(e) */  'x' from security e where a.system_id=e.thing and e.PERSONORGROUP in (@idPeople@, @idGruppo@, @idRuoloPubblico@) and e.ACCESSRIGHTS>0) ";
                    else
                        verSecurity = " EXISTS (select 'x' from security e where a.system_id=e.thing and e.PERSONORGROUP in (@idPeople@, @idGruppo@, @idRuoloPubblico@) and e.ACCESSRIGHTS>0) ";
                }
            }

            if (verSecurity == string.Empty)
                verSecurity = " A.SYSTEM_ID = A.SYSTEM_ID ";

            queryDef.setParam("security", verSecurity);
            queryDef.setParam("index", preferedIndex);
            queryDef.setParam("rowCount", maxRisultatiQuery.ToString());
            queryDef.setParam("idGruppo", idGruppo);
            queryDef.setParam("idPeople", idPeople);

            queryDef.setParam("idRuoloPubblico", idRuoloPubblico);

            // Il flag indica se includere nella ricerca anche i documenti di tipo allegato
            queryDef.setParam("from", fromTables);
            queryDef.setParam("filters", filterString);
            queryDef.setParam("dbuser", DocsPaDbManagement.Functions.Functions.GetDbUserSession());

            queryDef.setParam("from", fromTables);
            queryDef.setParam("filters", filterString);

            // aggiungo in union i risultati della ricerca stampe registro (se richiesta)
            string unionStampe = string.Empty;
            if (unionStampeReg)
            {
                unionStampe += " UNION ";
                if (dbType.ToUpper().Equals("SQL"))
                {
                    unionStampe += "SELECT top " + maxRisultatiQuery.ToString() +
                        "A.SYSTEM_ID, (CASE WHEN a.num_proto IS NOT NULL THEN a.num_proto WHEN a.num_proto IS NULL THEN a.docnumber END) AS codice FROM PROFILE a, DPA_STAMPAREGISTRI R " +
                        "WHERE (" + DocsPaDbManagement.Functions.Functions.GetDbUserSession() + ".checkSecurityDocumento(A.SYSTEM_ID, " + idPeople + ", " + idGruppo + ", " + idRuoloPubblico + ",'D') > 0) ";
                    if (!string.IsNullOrEmpty(filters_stampe))
                        unionStampe += filters_stampe;
                    else
                        unionStampe += " AND A.DOCNUMBER = R.DOCNUMBER";
                }
                else
                {
                    unionStampe += "SELECT A.SYSTEM_ID, (CASE WHEN A.num_proto IS NOT NULL THEN A.num_proto WHEN A.num_proto IS NULL THEN A.docnumber END) AS codice FROM PROFILE A, DPA_STAMPAREGISTRI R WHERE " +
                       " (checkSecurityDocumento(A.SYSTEM_ID, " + idPeople + ", " + idGruppo + ", " + idRuoloPubblico + ",'D') > 0) ";
                    if (!string.IsNullOrEmpty(filters_stampe))
                        unionStampe += filters_stampe;
                    else
                        unionStampe += " AND A.DOCNUMBER = R.DOCNUMBER";
                }
            }
            else
                unionStampe = "";
            queryDef.setParam("unionStampe", unionStampe);

            string commandText = queryDef.getSQL();
            logger.Debug(commandText);

            // Se è richiesta la lista dei system id dei risultati restituiti dalla ricerca,
            // viene compilata la lista altrimenti viene restituito il numero di documenti
            // trovati
            if (getIdProfilesList)
            {
                // Creazione della lista di idProfile
                idProfiles = new List<SearchResultInfo>();

                // Esecuzione query
                ExecuteQuery(out dataSet, commandText);

                // Analisi del risultato e compilazione della lista di systemId
                if (dataSet != null)
                    foreach (DataRow dataRow in dataSet.Tables[0].Rows)
                    {
                        SearchResultInfo temp = new SearchResultInfo();
                        temp.Id = dataRow["SYSTEM_ID"].ToString();
                        temp.Codice = dataRow["CODICE"].ToString();
                        idProfiles.Add(temp);
                    }

                // Calcolo del numero di documenti individuati
                retValue = idProfiles.Count;

            }
            else
            {
                ExecuteQuery(out dataSet, commandText);

                if (ricercaVeloce)
                {
                    if (dataSet != null && dataSet.Tables != null && dataSet.Tables[0] != null && dataSet.Tables[0].Rows != null)
                    {
                        retValue = dataSet.Tables[0].Rows.Count;
                    }
                    else
                    {
                        retValue = 0;
                    }
                }
                else
                {
                    string field;
                    if (ExecuteScalar(out field, commandText))
                        Int32.TryParse(field, out retValue);
                }

            }

            idProfileList = idProfiles;

            // Restituzione valore
            return retValue;
        }

        /// <summary>
        /// Reperimento documenti per stampe registro
        /// </summary>
        /// <param name="idGruppo"></param>
        /// <param name="idPeople"></param>
        /// <param name="listaDoc"></param>
        /// <param name="objQueryList"></param>
        /// <param name="numPage"></param>
        /// <param name="numTotPage"></param>
        /// <param name="nRec"></param>
        /// <returns></returns>
        public ArrayList AppendListaStampeRegistroPaging(string idGruppo, string idPeople, ArrayList listaDoc, DocsPaVO.filtri.FiltroRicerca[][] objQueryList, int numPage, int pageSize, bool security, out int numTotPage, out int nRec, bool getIdProfilesList, out List<SearchResultInfo> idProfileList)
        {
            logger.Debug("appendListaStampeRegistroPaging");

            List<SearchResultInfo> toSet = new List<SearchResultInfo>();

            int maxRisultatiQuery = GetMaxRisultatiQuery(objQueryList);

            // Inserimento della tabella "DPA_STAMPAREGISTRI" nella clausola from
            string queryFrom = ", DPA_STAMPAREGISTRI R";
            string order = "A.SYSTEM_ID DESC";
            string reverseOrder = "A.SYSTEM_ID ASC";

            // Reperimento della stringa di filtro, con l'aggiunta 
            // della condizione di join tra "PROFILE" e "DPA_STAMPAREGISTRI"
            string filters = " AND A.DOCNUMBER=R.DOCNUMBER " + GetQueryCondStampaRegistro(objQueryList, ref queryFrom);

            AppendListaDocumentiPaging(idGruppo, idPeople, listaDoc,
                                            false,
                                            maxRisultatiQuery,
                                            queryFrom,
                                            filters,
                                            order,
                                            reverseOrder,
                                            numPage,
                                            pageSize,
                                            security,
                                            out numTotPage,
                                            out nRec,
                                            getIdProfilesList,
                                            out toSet);

            idProfileList = toSet;
            return listaDoc;
        }

        /// <summary>
        /// Ricerca documenti grigi
        /// </summary>
        /// <param name="idGruppo"></param>
        /// <param name="idPeople"></param>
        /// <param name="listaDoc"></param>
        /// <param name="objQueryList"></param>
        /// <param name="numPage"></param>
        /// <param name="numTotPage"></param>
        /// <param name="nRec"></param>
        /// <param name="comingPopUp"></param>
        /// <returns></returns>
        public ArrayList AppendListaDocGrigiPaging(string idGruppo, string idPeople, ArrayList listaDoc, DocsPaVO.filtri.FiltroRicerca[][] objQueryList, int numPage, int pageSize, bool security, out int numTotPage, out int nRec, bool getIdProfilesList, out List<SearchResultInfo> idProfilesList)
        {
            logger.Debug("AppendListaDocGrigiPaging");

            int maxRisultatiQuery = GetMaxRisultatiQuery(objQueryList);

            string queryFrom = string.Empty;
            string queryOrd = "A.SYSTEM_ID DESC";
            string reverseOrder = "A.SYSTEM_ID ASC";

            string filters = GetQueryCondDocGrigia(idGruppo, idPeople, objQueryList, ref queryFrom);

            AppendListaDocumentiPaging(idGruppo, idPeople, listaDoc,
                    false, maxRisultatiQuery, queryFrom, filters,
                    queryOrd, reverseOrder, numPage, pageSize, security,
                    out numTotPage, out nRec, getIdProfilesList, out idProfilesList);

            return listaDoc;
        }


        public int GetNumDocInRisposta(string idGruppo, string idPeople, DocsPaVO.filtri.FiltroRicerca[][] objQueryList, bool security)
        {
            logger.Debug("GetNumDocInRisposta");
            int numDocInRisposta = 0; ;
            string queryFrom = string.Empty;
            string filters = GetQueryCondDocGrigia(idGruppo, idPeople, objQueryList, ref queryFrom);
            //numDocInRisposta = GetCountDocumenti(idGruppo, idPeople, ricercaVeloce, maxRisultatiQuery, fromTables, filters, false, null, security);

            string queryName = string.Empty;
            queryName = "S_GET_COUNT_ROWS_RICERCA_DOCUMENTI";

            DocsPaUtils.Query queryDef = DocsPaUtils.InitQuery.getInstance().getQuery(queryName);

            string verSecurity = " A.SYSTEM_ID = A.SYSTEM_ID ";

            // Parametri specifici per query oracle
            string preferedIndex = string.Empty;
            if (filters.IndexOf("A.VAR_PROF_OGGETTO") > -1 ||
                filters.IndexOf("G.VAR_DESC_CORR") > -1)
            // Impostazione indice da utilizzare
            {
                if (filters.ToUpper().IndexOf("NVL(A.DTA_PROTO") > -1)
                    preferedIndex = " ";
                else
                    if (filters.IndexOf("A.CREATION_") > -1)
                        preferedIndex = "/*+index (a)*/";     //"/*+index (a indx_profile_time)*/"
                    else if (filters.IndexOf("A.DTA_PROTO") > -1)
                        preferedIndex = "/*+index (a indx_profile6)*/";
            }
            string idAmm = "0";
            if (!string.IsNullOrEmpty(idPeople))
            {
                DocsPaDB.Query_DocsPAWS.Utenti u = new Utenti();
                idAmm = u.GetIdAmm(idPeople);
            }
            string idRuoloPubblico = DocsPaUtils.Configuration.InitConfigurationKeys.GetValue(idAmm, "ENABLE_FASCICOLO_PUBBLICO");
            if (string.IsNullOrEmpty(idRuoloPubblico))
                idRuoloPubblico = "0";
            if (security)
            {
                bool IS_ARCHIVISTA_DEPOSITO;
                DocsPaDB.Query_DocsPAWS.Utenti ut = new Utenti();
                IS_ARCHIVISTA_DEPOSITO = ut.isUtArchivistaDeposito(idPeople, idGruppo);
                if (filters.ToUpper().IndexOf("AND id_documento_principale IS NOT NULL".ToUpper()) > -1 ||
            (filters.IndexOf("NOT A.ID_DOCUMENTO_PRINCIPALE IS NULL") > -1) ||
                IS_ARCHIVISTA_DEPOSITO)
                {
                    if (dbType.ToUpper().Equals("SQL"))
                        verSecurity = "(" + this.getUserDB() + ".checkSecurityDocumento(A.SYSTEM_ID, " + idPeople + ", " + idGruppo + ", " + idRuoloPubblico + ",'D') > 0)";
                    else
                        verSecurity = "(checkSecurityDocumento(A.SYSTEM_ID, " + idPeople + ", " + idGruppo + ", " + idRuoloPubblico + ",'D') > 0)";
                }
                else
                {
                    if (IndexSecurity())
                        verSecurity = " EXISTS (select /*+INDEX(e) */  'x' from security e where a.system_id=e.thing and e.PERSONORGROUP in (@idPeople@, @idGruppo@, @idRuoloPubblico@) and e.ACCESSRIGHTS>0) ";
                    else
                        verSecurity = " EXISTS (select 'x' from security e where a.system_id=e.thing and e.PERSONORGROUP in (@idPeople@, @idGruppo@, @idRuoloPubblico@) and e.ACCESSRIGHTS>0) ";
                }
            }

            if (verSecurity == string.Empty)
                verSecurity = " A.SYSTEM_ID = A.SYSTEM_ID ";

            queryDef.setParam("security", verSecurity);
            queryDef.setParam("index", preferedIndex);
            queryDef.setParam("rowCount", "100000");
            queryDef.setParam("idGruppo", idGruppo);
            queryDef.setParam("idPeople", idPeople);
            queryDef.setParam("idRuoloPubblico", idRuoloPubblico);
            // Il flag indica se includere nella ricerca anche i documenti di tipo allegato
            queryDef.setParam("from", "");
            queryDef.setParam("unionStampe", "");
            queryDef.setParam("filters", filters);
            queryDef.setParam("dbuser", DocsPaDbManagement.Functions.Functions.GetDbUserSession());



            string commandText = queryDef.getSQL();
            logger.Debug(commandText);

            string field;
            if (ExecuteScalar(out field, commandText))
                Int32.TryParse(field, out numDocInRisposta);
            return numDocInRisposta;
        }


        /// <summary>
        /// Ricerca documenti grigi
        /// </summary>
        /// <param name="idGruppo"></param>
        /// <param name="idPeople"></param>
        /// <param name="listaDoc"></param>
        /// <param name="objQueryList"></param>
        /// <param name="numPage"></param>
        /// <param name="numTotPage"></param>
        /// <param name="nRec"></param>
        /// <param name="comingPopUp"></param>
        /// <returns></returns>
        //public ArrayList AppendListaDocGrigiPagingTotali(string idGruppo, string idPeople, ArrayList listaDoc, DocsPaVO.filtri.FiltroRicerca[][] objQueryList, bool security, out int nRec)
        //{
        //    logger.Debug("AppendListaDocGrigiPagingTotali");

        //    int maxRisultatiQuery = GetMaxRisultatiQuery(objQueryList);

        //    string queryFrom = string.Empty;
        //    string queryOrd = "A.SYSTEM_ID DESC";
        //    string reverseOrder = "A.SYSTEM_ID ASC";

        //    string filters = GetQueryCondDocGrigia(idGruppo, idPeople, objQueryList, ref queryFrom);

        //    AppendListaDocumentiPaging(idGruppo, idPeople, listaDoc,
        //            false, maxRisultatiQuery, queryFrom, filters,
        //            queryOrd, reverseOrder, numPage, pageSize, security,
        //            out numTotPage, out nRec);

        //    return listaDoc;
        //}

        /// <summary>
        /// Ricerca protocolli
        /// </summary>
        /// <param name="listaDoc"></param>
        /// <param name="objQueryList"></param>
        /// <param name="objSicurezza"></param>
        /// <returns></returns>
        public ArrayList AppendListaDocProtocollatiPaging(string idGruppo, string idPeople, ArrayList listaDoc, DocsPaVO.filtri.FiltroRicerca[][] objQueryList, int numPage, int pageSize, out int numTotPage, out int nRec, bool comingPopUp, bool getIdProfilesList, List<SearchResultInfo> idProfilesList)
        {
            logger.Debug("appendListaDocProtocollati");

            int maxRisultatiQuery = GetMaxRisultatiQuery(objQueryList);

            string queryFrom = string.Empty;
            string order = string.Empty;
            string reverseOrder = string.Empty;
            string filters = GetQueryCondProtocollo(idGruppo, idPeople, objQueryList, ref queryFrom, ref order, false);

            // Determina se effettuare la ricerca veloce dei protocolli
            bool ricercaVeloce = IsRicercaProtocolliVeloce(objQueryList);

            if (!ricercaVeloce)
            {
                // Ordinamento per ricerca completamento
                foreach (DocsPaVO.filtri.FiltroRicerca[] filterArray in objQueryList)
                    foreach (DocsPaVO.filtri.FiltroRicerca filterItem in filterArray)
                        if (filterItem.argomento == "DA_PROTOCOLLARE" && filterItem.valore == "1")
                        {
                            // Se ricerca documenti predisposti alla protocollazione,
                            // l'ordinamento deve essere per system_id desc
                            order = "A.SYSTEM_ID DESC";
                            reverseOrder = "A.SYSTEM_ID ASC";
                            break;
                        }

                if (order == string.Empty)
                {
                    order = "A.ID_REGISTRO ASC, A.NUM_ANNO_PROTO DESC, A.NUM_PROTO DESC";
                    reverseOrder = "A.ID_REGISTRO DESC, A.NUM_ANNO_PROTO ASC, A.NUM_PROTO ASC";
                }

                if (reverseOrder == string.Empty)
                    reverseOrder = "A.SYSTEM_ID ASC";
            }

            AppendListaDocumentiPaging(idGruppo, idPeople, listaDoc,
                                            ricercaVeloce,
                                            maxRisultatiQuery,
                                            queryFrom,
                                            filters,
                                            order,
                                            reverseOrder,
                                            numPage, pageSize, true, out numTotPage, out nRec, getIdProfilesList, out idProfilesList);
            return listaDoc;
        }

        public ArrayList AppendListaDocProtocollatiExport(DocsPaVO.utente.InfoUtente infoUtente, ArrayList listaDoc, DocsPaVO.filtri.FiltroRicerca[][] objQueryList, bool mittDest_indirizzo, String[] documentsSystemId)
        {
            string query = string.Empty;
            string queryFrom = string.Empty;
            string queryFromStampe = string.Empty;
            string queryStampe = string.Empty;
            string queryWhere = string.Empty;
            string numRighe = string.Empty;
            string queryOrd = string.Empty;
            string queryStampeWhere = string.Empty;
            bool onlyStampeReg = false;
            bool unionStampeReg = false;
            bool predisposto = predisposti(objQueryList);

            foreach (DocsPaVO.filtri.FiltroRicerca[] filterArray in objQueryList)
                foreach (DocsPaVO.filtri.FiltroRicerca filterItem in filterArray)
                {
                    if (filterItem.argomento.Equals("MEZZO_SPEDIZIONE") && filterItem.valore != null && filterItem.valore != "")
                        queryFrom = ", DPA_COLL_MSPEDIZ_DOCUMENTO B";
                    if (filterItem.argomento.Equals("CONSERVAZIONE") && filterItem.valore != null)
                        queryFrom += ", DPA_ITEMS_CONSERVAZIONE C";

                    if (filterItem.argomento.Equals("STAMPA_REG") && !filterItem.valore.Equals("false"))
                    {
                        if (filterItem.valore.StartsWith("U"))
                            unionStampeReg = true;
                        else
                        {
                            onlyStampeReg = true;
                        }
                    }

                    if (filterItem.argomento.Equals("TIPO") && filterItem.valore.Equals("R"))
                    {
                        onlyStampeReg = true;
                    }
                }

            string dbType = System.Configuration.ConfigurationManager.AppSettings["DBType"].ToUpper();
            queryOrd = "DATA DESC, A.SYSTEM_ID DESC";

            if (predisposto)
                queryOrd = "A.SYSTEM_ID DESC";

            if (!onlyStampeReg && unionStampeReg)
            {
                queryWhere = GetQueryCondProtocollo(infoUtente.idGruppo, infoUtente.idPeople, objQueryList, ref queryFrom, ref queryOrd, predisposto);
                query = GetQueryProtocolloStampaRegExport(infoUtente.idGruppo, infoUtente.idPeople, objQueryList, queryWhere, queryFrom, queryOrd, mittDest_indirizzo);
            }
            else if (onlyStampeReg)
            {
                queryStampeWhere = "AND A.DOCNUMBER=R.DOCNUMBER " + GetQueryCondStampaRegistro(objQueryList, ref queryFromStampe);
                query = GetQueryProtocolloStampaRegExport(infoUtente.idGruppo, infoUtente.idPeople, objQueryList, queryStampeWhere, queryFromStampe, queryOrd, mittDest_indirizzo);
                query += " ORDER BY DATA DESC";
            }
            else
            {
                queryWhere = GetQueryCondProtocollo(infoUtente.idGruppo, infoUtente.idPeople, objQueryList, ref queryFrom, ref queryOrd, predisposto);

                // Se la lista dei system id è valorizzata, viene aggiunta un filtro dui system id
                if (documentsSystemId != null &&
                    documentsSystemId.Length > 0)
                {
                    int i = 0;
                    queryWhere += " AND ( A.SYSTEM_ID IN(";
                    foreach (string id in documentsSystemId)
                    {
                        queryWhere += id;
                        if (i < documentsSystemId.Length - 1)
                        {
                            if (i % 998 == 0 && i > 0)
                            {
                                queryWhere += ") OR A.SYSTEM_ID IN (";
                            }
                            else
                            {
                                queryWhere += ", ";
                            }
                        }
                        else
                        {
                            queryWhere += ")";
                        }
                        i++;
                    }
                    queryWhere += ")";
                }

                query = GetQueryProtocolloExport(infoUtente.idGruppo, infoUtente.idPeople, objQueryList, queryWhere, queryFrom, queryOrd, mittDest_indirizzo);
            }
            if (unionStampeReg)
            {
                foreach (DocsPaVO.filtri.FiltroRicerca[] filterItems in objQueryList)
                {
                    foreach (DocsPaVO.filtri.FiltroRicerca filterItem in filterItems)
                    {
                        if (filterItem.argomento == "ANNO_PROTOCOLLO")
                        {
                            filterItem.valore = "";
                        }
                    }
                }
                queryStampeWhere = "AND A.DOCNUMBER=R.DOCNUMBER " + GetQueryCondStampaRegistro(objQueryList, ref queryFromStampe);
                queryStampe = GetQueryProtocolloStampaRegExport(infoUtente.idGruppo, infoUtente.idPeople, objQueryList, queryStampeWhere, queryFromStampe, queryOrd, mittDest_indirizzo);
                //queryStampe=getquery


                if (dbType.ToUpper() == "SQL")
                {
                    query = "SELECT DISTINCT * FROM(" + query + " UNION " + queryStampe + ")AS B ORDER BY B.DATA DESC";
                }
                else
                {
                    query = "SELECT DISTINCT * FROM(" + query + " UNION " + queryStampe + ") ORDER BY DATA DESC";
                }
            }
            numRighe = CercaTopNDocumenti(objQueryList);

            listaDoc = AppendiListaDocumentiExport(listaDoc, query, true, numRighe, infoUtente);

            return listaDoc;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="idGruppo"></param>
        /// <param name="idPeople"></param>
        /// <param name="listaDoc"></param>
        /// <param name="objQueryList"></param>
        /// <param name="numPage"></param>
        /// <param name="pageSize"></param>
        /// <param name="security"></param>
        /// <param name="numTotPage"></param>
        /// <param name="nRec"></param>
        /// <param name="getIdProfilesList"></param>
        /// <param name="idProfilesList"></param>
        /// <param name="searchValueCustom"></param>
        /// <returns></returns>
        public ArrayList ListaDocumentiPaging(string idGruppo, string idPeople, ArrayList listaDoc, DocsPaVO.filtri.FiltroRicerca[][] objQueryList, int numPage, int pageSize, bool security, out int numTotPage, out int nRec, bool getIdProfilesList, out List<SearchResultInfo> idProfilesList, bool searchValueCustom)
        {
            logger.Debug("ListaDocumentiPaging");
            bool daProto = false;
            // int cons = 0;
            bool unionStampeReg = false;
            int maxRisultatiQuery = GetMaxRisultatiQuery(objQueryList);
            string queryFrom = string.Empty;

            // codice per un ulteriore controllo sul campo tipo dovuto alle modifiche apportate dalla ricerca
            // unificata in cui si è sostituito il filtro tipo con i vari filtri (proto_arrivo, proto_partenza,
            // proto_interno, grigio). Visto che è possibile che da qualche parte del codice venga ancora passato
            // il filtro tipo e non questi ultimi, questo pezzo di codice serve proprio ad escludere eventuali
            // errori
            string tipoRicerca = "";
            foreach (DocsPaVO.filtri.FiltroRicerca[] filterArray in objQueryList)
                foreach (DocsPaVO.filtri.FiltroRicerca filterItem in filterArray)
                {
                    if (filterItem.argomento == "TIPO")
                        tipoRicerca = filterItem.valore;
                    if (filterItem.argomento.Equals("PREDISPOSTO"))
                        daProto = Convert.ToBoolean(filterItem.valore);
                    //if (filterItem.argomento.Equals("MEZZO_SPEDIZIONE") && !filterItem.valore.Equals(""))
                    //    queryFrom = ", DPA_DOC_ARRIVO_PAR B";
                    //if (filterItem.argomento.Equals("CONSERVAZIONE") && !filterItem.valore.Equals(""))
                    //{
                    //    if (filterItem.valore.Equals("0"))
                    //        cons = 2;
                    //    else
                    //        cons = 1;
                    //}
                    if (filterItem.argomento.Equals("STAMPA_REG") && !filterItem.valore.Equals("false"))
                        if (filterItem.valore.StartsWith("U"))
                            unionStampeReg = true;
                }

            string order = string.Empty;
            string reverseOrder = string.Empty;
            string filters = string.Empty;
            string filters_cons = string.Empty;
            string filters_stampe = string.Empty;

            filters = GetQueryCondDocumenti(idGruppo, idPeople, objQueryList, ref queryFrom, ref order, daProto, unionStampeReg, security);
            if (unionStampeReg)
            {
                string queryFromStampe = ", DPA_STAMPAREGISTRI R";
                filters_stampe = " AND A.DOCNUMBER=R.DOCNUMBER " + GetQueryCondStampaRegistro(objQueryList, ref queryFromStampe);
            }

            // Determina se effettuare la ricerca veloce dei protocolli
            bool ricercaVeloce = IsRicercaProtocolliVeloce(objQueryList);

            #region Ordinamento

            // Recupero dei filtri di ricerca relarivi all'ordinamento
            FiltroRicerca oracleField = objQueryList[0].Where(e => e.argomento == "ORACLE_FIELD_FOR_ORDER").FirstOrDefault();
            FiltroRicerca sqlField = objQueryList[0].Where(e => e.argomento == "SQL_FIELD_FOR_ORDER").FirstOrDefault();
            FiltroRicerca profilationField = objQueryList[0].Where(e => e.argomento == "PROFILATION_FIELD_FOR_ORDER").FirstOrDefault();
            FiltroRicerca orderDirection = objQueryList[0].Where(e => e.argomento == "ORDER_DIRECTION").FirstOrDefault();

            if (orderDirection == null)
            {
                orderDirection = new FiltroRicerca()
                {
                    argomento = "ORDER_DIRECTION",
                    valore = "DESC"

                };

            }
            // Function da utilizzare per estrarre i valori del campo profilato da utilizzare per l'ordinamento
            String extractFieldValue = String.Empty;
            String extractFieldValue2 = String.Empty;

            if (dbType == "SQL")
            {
                // DB SQL Server
                // Se bisogna ordinare per campo custom...
                if (profilationField != null)
                {
                    // ...recupero del dettaglio dell'oggetto custom
                    OggettoCustom obj = new Model().getOggettoById(profilationField.valore);

                    if (obj.TIPO.DESCRIZIONE_TIPO.ToUpper() == "CONTATORE")
                        // ...viene preparata la funzione per estrarre il valore del campo profilato
                        extractFieldValue = String.Format(", Convert(int, @dbuser@.getValCampoProfDoc(A.DOCNUMBER, {0})) AS CUSTOM_FIELD", profilationField.valore);
                    else
                        // ...viene preparata la funzione per estrarre il valore del campo profilato
                        extractFieldValue = String.Format(", @dbuser@.getValCampoProfDoc(A.DOCNUMBER, {0}) AS CUSTOM_FIELD", profilationField.valore);

                    // ...viene preparato il filtro per ordinamento e per l'ordinamento inverso
                    order = String.Format("CUSTOM_FIELD {0}", orderDirection.valore);
                    reverseOrder = String.Format("CUSTOM_FIELD {0}", orderDirection.valore == "ASC" ? "DESC" : "ASC");
                }
                else
                {
                    // Altrimenti se è valorizzato il campo da utilizzare per l'ordinamento...
                    if (sqlField != null)
                    {
                        // ...creazione di filtro e impostazione dell'ordine diretto ed inverso
                        extractFieldValue = String.Format(", {0} AS ORDER_STANDARD", sqlField.valore);
                        order = String.Format("ORDER_STANDARD {0}, A.SYSTEM_ID DESC", orderDirection.valore);
                        reverseOrder = String.Format("ORDER_STANDARD {0}, A.SYSTEM_ID DESC", orderDirection.valore == "ASC" ? "DESC" : "ASC");
                    }
                    else
                    {
                        // Altrimenti viene creato il filtro standard
                        extractFieldValue = String.Empty;
                        order = String.Format(" DATA {0}, A.SYSTEM_ID {0} ", orderDirection.valore);
                        reverseOrder = String.Format("A.DATA {0}, A.SYSTEM_ID {0}", orderDirection.valore == "ASC" ? "DESC" : "ASC");
                    }
                }

            }
            else
            {
                // DB ORACLE
                // Se bisogna ordinare per campo custom...
                if (profilationField != null)
                {
                    // ...recupero del dettaglio dell'oggetto custom
                    OggettoCustom obj = new Model().getOggettoById(profilationField.valore);

                    if (obj.TIPO.DESCRIZIONE_TIPO.ToUpper() == "CONTATORE")
                    {
                        // ...viene preparata la funzione per estrarre il valore del campo profilato
                        extractFieldValue = String.Format(", to_number(getValCampoProfDoc(A.DOCNUMBER, {0}))", profilationField.valore);
                        extractFieldValue2 = String.Format(" to_number(getValCampoProfDoc(A.DOCNUMBER, {0}))", profilationField.valore);
                    }
                    else
                    {
                        // ...viene preparata la funzione per estrarre il valore del campo profilato
                        extractFieldValue = String.Format(", getValCampoProfDoc(A.DOCNUMBER, {0})", profilationField.valore);
                        extractFieldValue2 = String.Format(" getValCampoProfDoc(A.DOCNUMBER, {0})", profilationField.valore);
                    }

                    // ...viene preparato il filtro per ordinamento e per l'ordinamento inverso
                    // order = String.Format("getValCampoProfDoc(A.DOCNUMBER, {0}) {1}", profilationField.valore, orderDirection.valore);
                    order = String.Format("{0} {1}", extractFieldValue2, orderDirection.valore);


                    reverseOrder = String.Empty;
                }
                else
                {
                    // Altrimenti se è valorizzato il campo da utilizzare per l'ordinamento...
                    if (oracleField != null)
                    {
                        // ...creazione di filtro e impostazione dell'ordine diretto ed inverso
                        extractFieldValue = String.Empty;
                        order = String.Format("{0} {1}", oracleField.valore, orderDirection.valore);
                        reverseOrder = String.Empty;
                    }
                    else
                    {
                        // Altrimenti viene creato il filtro standard
                        extractFieldValue = String.Empty;
                        //Nel caso non ho le griglie custum ma ho una tipologia con un campo profilato
                        FiltroRicerca contatoreNoCustom = objQueryList[0].Where(e => e.argomento == "CONTATORE_GRIGLIE_NO_CUSTOM").FirstOrDefault();
                        if (contatoreNoCustom != null)
                        {
                            order = String.Format("TO_NUMBER(getcontatoredocordinamento (a.system_id, 'R')) {0}", orderDirection.valore);
                        }
                        else
                        {
                            order = String.Format("NVL(A.DTA_PROTO,A.CREATION_TIME) {0}", orderDirection.valore);
                        }

                        reverseOrder = String.Empty;
                    }
                }
            }

            #endregion



            if (order == string.Empty)
            {
                string _dbType = System.Configuration.ConfigurationManager.AppSettings["DBType"].ToUpper();
                if (_dbType.ToUpper().Equals("SQL"))
                {
                    order = "DATA DESC, A.SYSTEM_ID DESC";
                    reverseOrder = "A.DATA ASC, A.SYSTEM_ID ASC";
                }
                else
                {
                    order = "nvl(A.DTA_PROTO,A.CREATION_TIME) DESC";
                    reverseOrder = "nvl(A.DTA_PROTO,A.CREATION_TIME) ASC";
                }
            }

            if (reverseOrder == string.Empty)
                reverseOrder = "A.SYSTEM_ID ASC";


            // Se siamo su SQL_SERVER e si deve ordinare per VAR_PROF_OGGETTO, si effettua una sostiuzione con
            // VAR_DESC_OGGETTO
            if (dbType == "SQL" && order.Contains("VAR_PROF_OGGETTO"))
            {
                order = order.Replace("VAR_PROF_OGGETTO", "VAR_DESC_OGGETTO");
                reverseOrder = reverseOrder.Replace("VAR_PROF_OGGETTO", "VAR_DESC_OGGETTO");
            }

            if (order.Equals("UPPER(TRIM(CHA_TIPO_PROTO)) DESC") || order.Equals("UPPER(TRIM(CHA_TIPO_PROTO)) ASC") || order.Equals("UPPER(TRIM(VAR_PROF_OGGETTO)) ASC") || order.Equals("UPPER(TRIM(VAR_PROF_OGGETTO)) DESC"))
            {
                order += ", a.system_id DESC";
            }


            ListaDocPaging(idGruppo, idPeople, listaDoc,
                                            ricercaVeloce,
                                            maxRisultatiQuery,
                                            queryFrom,
                                            filters,
                                            order,
                                            reverseOrder,
                                            numPage, pageSize,
                                            security, out numTotPage,
                                            out nRec, unionStampeReg,
                                            filters_stampe,
                                            getIdProfilesList,
                                            searchValueCustom,
                                            out idProfilesList,
                                            extractFieldValue);

            return listaDoc;
        }

        /// <summary>
        /// Ricerca documenti
        /// </summary>
        /// <param name="idGruppo"></param>
        /// <param name="idPeople"></param>
        /// <param name="listaDoc"></param>
        /// <param name="ricercaVeloce"></param>
        /// <param name="maxRisultatiQuery"></param>
        /// <param name="fromTables"></param>
        /// <param name="filters"></param>
        /// <param name="orderCriteria"></param>
        /// <param name="reverseOrderCriteria"></param>
        /// <param name="numPage"></param>
        /// <param name="numTotPage"></param>
        /// <param name="nRec"></param>
        private void AppendListaDocumentiPaging(string idGruppo,
                                                string idPeople,
                                                ArrayList listaDoc,
                                                bool ricercaVeloce,
                                                int maxRisultatiQuery,
                                                string fromTables,
                                                string filters,
                                                string orderCriteria,
                                                string reverseOrderCriteria,
                                                int numPage,
                                                int pageSize,
                                                bool security,
                                                out int numTotPage,
                                                out int nRec,
                                                bool getIdProfilesList,
                                                out List<SearchResultInfo> idProfileList)
        {
            logger.Debug("appendListaDocProtocollati");

            numTotPage = 0;
            nRec = GetCountDocumenti(idGruppo, idPeople, ricercaVeloce, maxRisultatiQuery, fromTables, filters, false, null, security, getIdProfilesList, out idProfileList);

            if (nRec > 0)
            {
                string queryName = string.Empty;
                if (!ricercaVeloce)
                    queryName = "S_RICERCA_DOCUMENTI";
                else
                    queryName = "S_RICERCA_DOCUMENTI_VELOCE";

                DocsPaUtils.Query queryDef = DocsPaUtils.InitQuery.getInstance().getQuery(queryName);

                int pageSizeSqlServer = pageSize;

                // per query sqlserver:
                // il numero totale di righe da estrarre equivale 
                // al limite inferiore dell'ultima riga da estrarre
                int totalRowsSqlServer = (numPage * pageSize);
                if ((nRec - totalRowsSqlServer) <= 0)
                {
                    pageSizeSqlServer -= System.Math.Abs(nRec - totalRowsSqlServer);
                    totalRowsSqlServer = nRec;
                }

                // Parametri specifici per query sqlserver
                queryDef.setParam("pageSize", pageSizeSqlServer.ToString());
                queryDef.setParam("totalRows", totalRowsSqlServer.ToString());
                queryDef.setParam("reverseOrder", reverseOrderCriteria);

                // Parametri specifici per query oracle
                string preferedIndex = string.Empty;
                if (!(filters.IndexOf("A.VAR_PROF_OGGETTO") > -1 ||
                    filters.IndexOf("G.VAR_DESC_CORR") > -1))
                // Impostazione indice da utilizzare
                {
                    if (filters.ToUpper().IndexOf("NVL(A.DTA_PROTO") > -1)
                        //preferedIndex = "/*+index (a )*/";
                        preferedIndex = " ";
                    else
                        if (filters.IndexOf("A.CREATION_") > -1)
                            preferedIndex = "/*+index (a)*/";    //"/*+index (a indx_profile_time)*/";
                        else if (filters.IndexOf("A.DTA_PROTO") > -1)
                            preferedIndex = "/*+index (a indx_profile6)*/";
                }
                string verSecurity = string.Empty;
                string idAmm = "0";
                if (!string.IsNullOrEmpty(idPeople))
                {
                    DocsPaDB.Query_DocsPAWS.Utenti u = new Utenti();
                    idAmm = u.GetIdAmm(idPeople);
                }
                string idRuoloPubblico = DocsPaUtils.Configuration.InitConfigurationKeys.GetValue(idAmm, "ENABLE_FASCICOLO_PUBBLICO");
                if (string.IsNullOrEmpty(idRuoloPubblico))
                    idRuoloPubblico = "0";
                if (security)
                {
                    bool IS_ARCHIVISTA_DEPOSITO;
                    DocsPaDB.Query_DocsPAWS.Utenti ut = new Utenti();
                    IS_ARCHIVISTA_DEPOSITO = ut.isUtArchivistaDeposito(idPeople, idGruppo);

                    if (filters.ToUpper().IndexOf("AND id_documento_principale IS NOT NULL".ToUpper()) > -1 ||
        (filters.IndexOf("NOT A.ID_DOCUMENTO_PRINCIPALE IS NULL") > -1) ||
                 IS_ARCHIVISTA_DEPOSITO)
                    {
                        if (dbType.ToUpper() == "SQL")
                            verSecurity = "(@dbuser@.checkSecurityDocumento(A.SYSTEM_ID, @idPeople@, @idGruppo@, @idRuoloPubblico@,'D') > 0)";
                        else
                            verSecurity = "(checkSecurityDocumento(A.SYSTEM_ID, @idPeople@, @idGruppo@, @idRuoloPubblico@,'D') > 0)";
                    }
                    else
                    {
                        if (IndexSecurity())
                            verSecurity = " EXISTS (select /*+INDEX(e) */  'x' from security e where a.system_id=e.thing and e.PERSONORGROUP in (@idPeople@, @idGruppo@, @idRuoloPubblico@) and e.ACCESSRIGHTS>0) ";
                        else
                            verSecurity = " EXISTS (select  'x' from security e where a.system_id=e.thing and e.PERSONORGROUP in (@idPeople@, @idGruppo@, @idRuoloPubblico@) and e.ACCESSRIGHTS>0) ";
                    }
                }

                if (verSecurity == string.Empty)
                    verSecurity = " A.SYSTEM_ID = A.SYSTEM_ID ";

                queryDef.setParam("security", verSecurity);
                queryDef.setParam("index", preferedIndex);
                queryDef.setParam("rowCount", maxRisultatiQuery.ToString());

                // Parametri validi per tutte le query
                queryDef.setParam("idGruppo", idGruppo);
                queryDef.setParam("idPeople", idPeople);
                queryDef.setParam("idRuoloPubblico", idRuoloPubblico);
                queryDef.setParam("filters", filters);

                // Parametro contentente le tabelle addizionali da aggiungere alla query
                queryDef.setParam("from", fromTables);

                // Parametri per l'impostazione dell'ordinamento
                queryDef.setParam("order", orderCriteria);
                queryDef.setParam("dbuser", getUserDB());


                numTotPage = (nRec / pageSize);

                int startRow = ((numPage * pageSize) - pageSize) + 1;
                int endRow = (startRow - 1) + pageSize;

                queryDef.setParam("startRow", startRow.ToString());
                queryDef.setParam("endRow", endRow.ToString());

                string commandText = queryDef.getSQL();

                logger.Debug(commandText);

                // Caricamento oggetti "InfoDocumento"
                AppendListaDocumentiPaging(listaDoc, commandText, true);
            }
        }


        /// <summary>
        /// Ricerca documenti
        /// </summary>
        /// <param name="idGruppo"></param>
        /// <param name="idPeople"></param>
        /// <param name="listaDoc"></param>
        /// <param name="ricercaVeloce"></param>
        /// <param name="maxRisultatiQuery"></param>
        /// <param name="filters"></param>
        /// <param name="order"></param>
        /// <param name="numPage"></param>
        /// <param name="numTotPage"></param>
        /// <param name="nRec"></param>
        /// <param name="comingPopUp"></param>
        /// <returns></returns>
        private void ListaDocPaging(string idGruppo,
                                    string idPeople,
                                    ArrayList listaDoc,
                                    bool ricercaVeloce,
                                    int maxRisultatiQuery,
                                    string fromTables,
                                    string filters,
                                    string orderCriteria,
                                    string reverseOrderCriteria,
                                    int numPage,
                                    int pageSize,
                                    bool security,
                                    out int numTotPage,
                                    out int nRec,
                                    bool unionStampeReg,
                                    string filters_stampe,
                                    bool getIdProfilesList,
                                    bool searchValueCustom,
                                    out List<SearchResultInfo> idProfilesList,
                                    String extractFieldValue)
        {
            logger.Debug("ListaDocPaging");

            numTotPage = 0;
            nRec = GetCountDocumenti(idGruppo, idPeople, ricercaVeloce, maxRisultatiQuery, fromTables, filters, unionStampeReg, filters_stampe, security, getIdProfilesList, out idProfilesList);

            if (nRec > 0)
            {
                string queryName = string.Empty;
                string verSecurity = " A.SYSTEM_ID = A.SYSTEM_ID ";
                if (!ricercaVeloce)
                    queryName = "S_RIC_DOC";
                else
                    queryName = "S_RIC_DOC_VELOCE";

                DocsPaUtils.Query queryDef = DocsPaUtils.InitQuery.getInstance().getQuery(queryName);

                // Reperimento del numero di elementi da visualizzare per pagina
                int pageSizeSqlServer = pageSize;

                // per query sqlserver:
                // il numero totale di righe da estrarre equivale 
                // al limite inferiore dell'ultima riga da estrarre
                int totalRowsSqlServer = (numPage * pageSize);
                if ((nRec - totalRowsSqlServer) <= 0)
                {
                    pageSizeSqlServer -= System.Math.Abs(nRec - totalRowsSqlServer);
                    totalRowsSqlServer = nRec;
                }

                // Parametri specifici per query sqlserver
                queryDef.setParam("pageSize", pageSizeSqlServer.ToString());
                queryDef.setParam("totalRows", totalRowsSqlServer.ToString());
                queryDef.setParam("reverseOrder", reverseOrderCriteria);

                // Parametri specifici per query oracle
                string preferedIndex = string.Empty;


                if (!(filters.IndexOf("A.VAR_PROF_OGGETTO") > -1 ||
                    filters.IndexOf("G.VAR_DESC_CORR") > -1))
                // Impostazione indice da utilizzare
                {
                    if (filters.ToUpper().IndexOf("NVL(A.DTA_PROTO") > -1)
                        // preferedIndex = "/*+index (a indx_profile_data )*/";
                        preferedIndex = " ";
                    else
                        if (filters.IndexOf("A.CREATION_") > -1)
                            preferedIndex = "/*+index (a)*/";   //"/*+index (a indx_profile_time)*/";
                        else if (filters.IndexOf("A.DTA_PROTO") > -1)
                            preferedIndex = "/*+index (a indx_profile6)*/";
                }
                string idAmm = "0";
                if (!string.IsNullOrEmpty(idPeople))
                {
                    DocsPaDB.Query_DocsPAWS.Utenti u = new Utenti();
                    idAmm = u.GetIdAmm(idPeople);
                }
                string idRuoloPubblico = DocsPaUtils.Configuration.InitConfigurationKeys.GetValue(idAmm, "ENABLE_FASCICOLO_PUBBLICO");
                if (string.IsNullOrEmpty(idRuoloPubblico))
                    idRuoloPubblico = "0";
                if (security)
                {
                    bool IS_ARCHIVISTA_DEPOSITO;
                    DocsPaDB.Query_DocsPAWS.Utenti ut = new Utenti();
                    IS_ARCHIVISTA_DEPOSITO = ut.isUtArchivistaDeposito(idPeople, idGruppo);

                    if (filters.ToUpper().IndexOf("AND id_documento_principale IS NOT NULL".ToUpper()) > -1 ||
                            (filters.IndexOf("NOT A.ID_DOCUMENTO_PRINCIPALE IS NULL") > -1) ||
                            IS_ARCHIVISTA_DEPOSITO)
                    {
                        if (dbType.ToUpper() == "SQL")
                            verSecurity = "(@dbuser@.checkSecurityDocumento(A.SYSTEM_ID, @idPeople@, @idGruppo@, @idRuoloPubblico@,'D') > 0)";
                        else
                            verSecurity = "(checkSecurityDocumento(A.SYSTEM_ID, @idPeople@, @idGruppo@, @idRuoloPubblico@,'D') > 0)";
                    }
                    else
                    {
                        if (IndexSecurity())
                            verSecurity = " EXISTS (select /*+INDEX(e) */  'x' from security e where a.system_id=e.thing and e.PERSONORGROUP in (@idPeople@, @idGruppo@, @idRuoloPubblico@) and e.ACCESSRIGHTS>0) ";
                        else
                            verSecurity = " EXISTS (select  'x' from security e where a.system_id=e.thing and e.PERSONORGROUP in (@idPeople@, @idGruppo@, @idRuoloPubblico@) and e.ACCESSRIGHTS>0) ";
                    }
                }

                if (verSecurity == string.Empty)
                    verSecurity = " A.SYSTEM_ID = A.SYSTEM_ID ";

                queryDef.setParam("security", verSecurity);
                queryDef.setParam("index", preferedIndex);
                queryDef.setParam("rowCount", maxRisultatiQuery.ToString());
                queryDef.setParam("idRuoloPubblico", idRuoloPubblico);
                // Parametri validi per tutte le query
                queryDef.setParam("idGruppo", idGruppo);
                queryDef.setParam("idPeople", idPeople);
                queryDef.setParam("filters", filters);

                // Parametro contentente le tabelle addizionali da aggiungere alla query
                queryDef.setParam("from", fromTables);

                // Parametri per l'impostazione dell'ordinamento
                queryDef.setParam("order", orderCriteria);

                // Impostazione del valore per l'estrazione del valore per l'ordinamento
                queryDef.setParam("customFieldFilter", extractFieldValue);

                // per SQL
                queryDef.setParam("dbuser", getUserDB());

                //fine modifica
                if (nRec % pageSize > 0)
                {
                    numTotPage = (nRec / pageSize) + 1;
                }
                else
                {
                    numTotPage = nRec / pageSize;
                }

                int startRow = ((numPage * pageSize) - pageSize) + 1;
                int endRow = (startRow - 1) + pageSize;

                queryDef.setParam("startRow", startRow.ToString());
                queryDef.setParam("endRow", endRow.ToString());
                queryDef.setParam("filters", filters);
                queryDef.setParam("from", fromTables);

                string unionStampe = string.Empty;
                if (unionStampeReg)
                {
                    unionStampe += " UNION ";
                    if (dbType.ToUpper().Equals("SQL"))
                    {
                        unionStampe += "SELECT TOP " + totalRowsSqlServer.ToString() +
                        " A.SYSTEM_ID, A.DOCNUMBER, A.DTA_ANNULLA, A.VAR_PROF_OGGETTO AS VAR_DESC_OGGETTO, A.ID_REGISTRO," +
                        "A.CHA_TIPO_PROTO, A.CHA_EVIDENZA, A.NUM_ANNO_PROTO, ISNULL(A.DTA_PROTO,A.CREATION_TIME) AS DATA," +
                        "convert(nvarchar (10), A.CREATION_TIME, 103) AS CREATION_DATE," +
                        "A.NUM_PROTO, A.VAR_SEGNATURA, convert(nvarchar (10), A.DTA_PROTO, 103) AS DTA_PROTO, " +
                        getUserDB() + ".getchaimg(A.DOCNUMBER) AS CHA_IMG , A.CHA_PRIVATO, A.CHA_PERSONALE, " + getUserDB() + ".getInADL(A.SYSTEM_ID,'D'," + idGruppo + "," + idPeople + ") AS IN_ADL, " +
                        "A.ID_DOCUMENTO_PRINCIPALE," + getUserDB() + ".getInConservazione(A.SYSTEM_ID, null,'D'," + idPeople + "," + idGruppo + ") AS IN_CONSERVAZIONE, A.CHA_IN_ARCHIVIO," +
                        "a.id_tipo_atto as ID_TIPO_ATTO, ta.var_desc_atto as DESC_TIPO_ATTO, " +
                        getUserDB() + ".getPeopleUserId (a.AUTHOR) as AUTHOR, a.prot_tit as PROT_TIT," +
                        getUserDB() + ".getchafirmato(A.DOCNUMBER) as CHA_FIRMATO," +
                        getUserDB() + ".GetContatoreDoc(a.system_id, '" + tipo_contatore + "') as CONTATORE," +
                        getUserDB() + ".getContatoreDocOrdinamento(a.system_id, '" + tipo_contatore + "') as contatore_ordinamento " +
                        "@customFieldFilter@" +
                        " FROM DPA_STAMPAREGISTRI R, PROFILE a " +
                        "LEFT JOIN dpa_tipo_atto ta on a.id_tipo_atto = ta.system_id " +
                        "WHERE (" + this.getUserDB() + ".checkSecurityDocumento(A.SYSTEM_ID, " + idPeople + ", " + idGruppo + ", " + idRuoloPubblico + ",'D') > 0) " +
                        filters_stampe;
                    }
                    else
                    {
                        unionStampe += "SELECT ROW_NUMBER() OVER(ORDER BY nvl(DTA_PROTO,CREATION_DATE) DESC) AS RN," +
                        "A.SYSTEM_ID, A.DOCNUMBER, A.DTA_ANNULLA, A.VAR_PROF_OGGETTO AS VAR_DESC_OGGETTO," +
                        "A.ID_REGISTRO, A.CHA_TIPO_PROTO, A.CHA_EVIDENZA, A.NUM_ANNO_PROTO," +
                        "nvl(A.DTA_PROTO,A.CREATION_TIME) AS DATA," +
                        "to_char(A.CREATION_TIME,'dd/mm/yyyy') AS CREATION_DATE," +
                        "A.NUM_PROTO, A.VAR_SEGNATURA, to_char(A.DTA_PROTO,'dd/mm/yyyy')  AS DTA_PROTO," +
                        "A.CHA_PRIVATO, A.CHA_PERSONALE, " +
                        "A.ID_DOCUMENTO_PRINCIPALE, A.CHA_IN_ARCHIVIO," +
                        "a.id_tipo_atto as ID_TIPO_ATTO, ta.var_desc_atto as DESC_TIPO_ATTO, " +
                        "getPeopleUserId (a.AUTHOR) as AUTHOR, a.prot_tit as PROT_TIT " +
                            //"getchafirmato(A.DOCNUMBER) as CHA_FIRMATO " +
                        "@customFieldFilter@" +
                        " FROM DPA_STAMPAREGISTRI R, PROFILE a " +
                        "LEFT JOIN dpa_tipo_atto ta on a.id_tipo_atto = ta.system_id " +
                        "WHERE (checkSecurityDocumento(A.SYSTEM_ID, " + idPeople + ", " + idGruppo + ", " + idRuoloPubblico + ",'D') > 0) " +
                        filters_stampe;

                    }
                }
                queryDef.setParam("unionStampe", unionStampe);

                // Se è una stampa registri viene rieseguita la sostituzione della function per l'estrazione
                // del valore assunto da un campo profilato
                if (unionStampeReg)
                    queryDef.setParam("customFieldFilter", extractFieldValue);

                if (ricercaVeloce)
                    queryDef.setParam("dataInizioAnno", "01/01/" + DateTime.Now.Year.ToString() + " 00:00:00");

                if (dbType.ToUpper().Equals("ORACLE"))
                {
                    if (!string.IsNullOrEmpty(tipo_contatore))
                    {
                        queryDef.setParam("tipo_doc_cond", " , GetContatoreDoc(a.system_id, @tipo_doc@) as CONTATORE, getContatoreDocOrdinamento(a.system_id, @tipo_doc@) as contatore_ordinamento ");
                        queryDef.setParam("tipo_doc", "'" + tipo_contatore + "'");
                    }
                    else
                    {
                        queryDef.setParam("tipo_doc_cond", "");
                        queryDef.setParam("tipo_doc", "'" + tipo_contatore + "'");
                    }
                }
                else
                {
                    if (!string.IsNullOrEmpty(tipo_contatore))
                        queryDef.setParam("tipo_doc", "'" + tipo_contatore + "'");
                    else
                        queryDef.setParam("tipo_doc", "'" + tipo_contatore + "'");
                }

                oggettoCustomVisibile = searchValueCustom;
                if (searchValueCustom)
                {
                    string valoreOggettoDb = string.Empty;
                    if (oggettoCUstom != null)
                    {
                        foreach (DocsPaVO.ProfilazioneDinamica.OggettoCustom oggetto in oggettoCUstom)
                        {

                            valoreOggettoDb += ",getvaloreoggettodb(" + idAmministrazione + ", A.DOCNUMBER," + "'" + nomeDocumento + "','" + oggetto.DESCRIZIONE + "')";
                        }
                    }
                    queryDef.setParam("searchValueCustom", valoreOggettoDb);
                }
                else
                    queryDef.setParam("searchValueCustom", string.Empty);




                string commandText = queryDef.getSQL();

                logger.Debug(commandText);

                // Caricamento oggetti "InfoDocumento"
                AppendListaDocumentiPaging(listaDoc, commandText, true);
            }
        }

        /* ABBATANGELI GIANLUIGI
         * Caricamento dal database del valore int relativo al 
         * numero massimo di righe accettate come risultato di ricerca */
        /// <summary>
        /// return, numero massimo di righe per le ricerche.
        /// </summary>
        public int Cfg_MAX_ROW_SEARCHABLE(string idAmministrazione)
        {
            int result = 0;
            string value = DocsPaUtils.Configuration.InitConfigurationKeys.GetValue(idAmministrazione, "MAX_ROW_SEARCHABLE");

            if (string.IsNullOrEmpty(value))
            {
                value = DocsPaUtils.Configuration.InitConfigurationKeys.GetValue("0", "MAX_ROW_SEARCHABLE");
            }
            if (!string.IsNullOrEmpty(value))
            {
                result = Convert.ToInt32(value);
            }
            return result;
        }

        //modiifca
        private string tipoContatoreTemplates(string idTemplate)
        {
            Model model = new Model();
            DocsPaVO.ProfilazioneDinamica.Templates template = model.getTemplateById(idTemplate);

            if (template != null && template.ELENCO_OGGETTI != null)
            {

                foreach (DocsPaVO.ProfilazioneDinamica.OggettoCustom oggettoCustom in template.ELENCO_OGGETTI)
                {
                    if (oggettoCustom.DA_VISUALIZZARE_RICERCA.Equals("1"))
                        return oggettoCustom.TIPO_CONTATORE;
                }
            }
            return string.Empty;
        }
        //fine modifica


        private DocsPaVO.ProfilazioneDinamica.OggettoCustom[] getOggettoCustom(string idTemplate)
        {
            Model model = new Model();
            List<DocsPaVO.ProfilazioneDinamica.OggettoCustom> oggettoCustom = null;
            DocsPaVO.ProfilazioneDinamica.Templates template = model.getTemplateById(idTemplate);

            if (template != null && template.ELENCO_OGGETTI != null)
            {
                nomeDocumento = template.DESCRIZIONE;
                idAmministrazione = template.ID_AMMINISTRAZIONE;
                oggettoCustom = new List<DocsPaVO.ProfilazioneDinamica.OggettoCustom>();
                foreach (DocsPaVO.ProfilazioneDinamica.OggettoCustom oggetto in template.ELENCO_OGGETTI)
                    oggettoCustom.Add(oggetto);

            }

            return oggettoCustom.ToArray();
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="objQueryList"></param>
        /// <returns></returns>
        private int GetMaxRisultatiQuery(DocsPaVO.filtri.FiltroRicerca[][] objQueryList)
        {
            string maxRowCount = GetRowNum(objQueryList);

            if (string.IsNullOrEmpty(maxRowCount))
                maxRowCount = System.Configuration.ConfigurationManager.AppSettings["numeroMaxRisultatiQuery"];

            int retValue;
            Int32.TryParse(maxRowCount, out retValue);
            return retValue;
        }

        /// <summary>
        /// Determina se è stata richiesta la ricerca dei protocolli veloce
        /// </summary>
        /// <param name="objQueryList"></param>
        /// <returns></returns>
        private bool IsRicercaProtocolliVeloce(DocsPaVO.filtri.FiltroRicerca[][] objQueryList)
        {
            bool ricercaVeloce = false;
            bool ricercaOggetto = false;

            foreach (DocsPaVO.filtri.FiltroRicerca[] filterArray in objQueryList)
            {
                foreach (DocsPaVO.filtri.FiltroRicerca filterItem in filterArray)
                {
                    if (!ricercaVeloce)
                        ricercaVeloce = (filterItem.argomento == "VISUALIZZA_TOP_N_DOCUMENTI" &&
                                        !string.IsNullOrEmpty(filterItem.valore));
                    else
                        if (!ricercaOggetto)
                            ricercaOggetto = (filterItem.argomento == "OGGETTO" &&
                                              !string.IsNullOrEmpty(filterItem.valore));
                }
            }

            return (ricercaVeloce && !ricercaOggetto);
        }

        /// <summary>
        /// Prende dall'oggetto FILTRO il valore di quanti record voglio visualizzare
        /// </summary>
        /// <param name="objQueryList">Oggetto FILTRO</param>
        /// <returns></returns>
        private string GetRowNum(DocsPaVO.filtri.FiltroRicerca[][] objQueryList)
        {
            string result = "";
            if (objQueryList != null)
            {
                for (int i = 0; i < objQueryList.Length; i++)
                {
                    for (int j = 0; j < objQueryList[i].Length; j++)
                    {
                        DocsPaVO.filtri.FiltroRicerca f = objQueryList[i][j];
                        if (f.valore != null && !f.valore.Equals(""))
                        {
                            switch (f.argomento)
                            {
                                case "VISUALIZZA_TOP_N_DOCUMENTI":
                                    result = f.valore;
                                    break;
                            }
                        }
                    }
                }
            }

            if (result == "0")
                result = string.Empty;

            return result;
        }

        #endregion


        # region acquisizione diritti fatturazione elettronica

        public bool AcquisisciDirittiDocumento(DocsPaVO.documento.SchedaDocumento schedaDocumento, DocsPaVO.utente.InfoUtente infoUtente)
        {
            bool result = true;

            logger.Debug("Inizio procedura di acquisizione dei diritti documento fatturazione elettronica");
            BeginTransaction();

            if (!UpdateChaPrivatoPersonale(schedaDocumento.systemId))
            {

                RollbackTransaction();
                logger.Error("Errore procedura di modifica a non_privato del documento di fatturazione elettronica - UpdateChaPrivatoPersonale");
                return false;
            
            }

            //Elimino il vecchio proprietario dalla Security
            if (!deleteSecurity(schedaDocumento.systemId, schedaDocumento.autore))
            {
                RollbackTransaction();
                logger.Error("Errore procedura di acquisizione dei diritti documento fatturazione elettronica - deleteSecurity TIBCO");
                return false;
            }
            //Aggiungo il vecchio proprietario nella Delete Security
            if (!insertDeletedSecurity(schedaDocumento, infoUtente))
            {
                RollbackTransaction();
                logger.Error("Errore procedura di acquisizione dei diritti documento fatturazione elettronica - insertDeletedSecurity TIBCO");
                return false;
            }
            //Eliminazione del nuovo ruolo dalla Security
            if (!deleteSecurity(schedaDocumento.systemId, infoUtente.idGruppo))
            {
                RollbackTransaction();
                logger.Error("Errore procedura di acquisizione dei diritti documento fatturazione elettronica - deleteSecurity Utente");
                return false;
            }

            //Aggiungo il nuovo proprietario nella Security
            if (!insertSecurity(schedaDocumento.systemId, infoUtente.idPeople, "0", "NULL", "P"))
            {
                RollbackTransaction();
                logger.Error("Errore procedura di acquisizione dei diritti documento fatturazione elettronica - insertSecurity utente proprietario");
                return false;
            }

            //Aggiungo il ruolo del nuovo proprietario nella Security
            if (!insertSecurity(schedaDocumento.systemId, infoUtente.idGruppo, "255", "NULL", "P"))
            {
                RollbackTransaction();
                logger.Error("Errore procedura di acquisizione dei diritti documento fatturazione elettronica - insertSecurity ruolo proprietario");
                return false;
            }

            //Aggiungo utente TIBCO il diritto di WRITE nella Security
            if (!insertSecurity(schedaDocumento.systemId, " ( Select system_id from people where upper(user_id)='TIBCO' and id_amm="+infoUtente.idAmministrazione+" ) ", "63", "NULL", "A"))
            {
                RollbackTransaction();
                logger.Error("Errore procedura di acquisizione dei diritti documento fatturazione elettronica - insertSecurity Diritti di scrittura TIBCO");
                return false;
            }

            CommitTransaction();
            logger.Debug("Fine procedura di acquisizione dei diritti documento fatturazione elettronica");
            return result;

        }

        private bool deleteSecurity(string thing, string personGroup)
        {
            bool retValue = false;
            string queryAccessrights = string.Empty;

            try
            {
                DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("D_SECURITY");
                q.setParam("param1", "THING = " + thing + " AND PERSONORGROUP = " + personGroup);
                string queryString = q.getSQL();
                logger.Debug(queryString);
                retValue = ExecuteNonQuery(queryString);

            }
            catch
            {
                return false;
            }

            return retValue;
        }

        /// <summary>
        /// se un documento è privato , lo riporta a non privato, Attenzione, modifica solo il flag e non fa nulla sulla gerarchia di visibilità, la visibilità rimane quella privata.
        /// </summary>
        /// <param name="thing"></param>
        /// <param name="personGroup"></param>
        /// <returns></returns>
        private bool UpdateChaPrivatoPersonale(string idDocumento)
        {
            bool retValue = false;
            string queryAccessrights = string.Empty;

            try
            {

                string queryString = " update profile set cha_privato='0', cha_personale='0' where system_id=" + idDocumento;
                logger.Debug(queryString);
                retValue = ExecuteNonQuery(queryString);

            }
            catch
            {
                return false;
            }

            return retValue;
        }


        private bool insertDeletedSecurity(DocsPaVO.documento.SchedaDocumento schedaDocumento, DocsPaVO.utente.InfoUtente infoUtente)
        {
            bool retValue = false;

            try
            {

                DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("I_DELETED_SECURITY");
                string note = "Diritto ceduto da: TIBCO";
                q.setParam("param1", schedaDocumento.systemId + "," + schedaDocumento.autore + ", 0 , NULL, 'P','" + note + "'," + DocsPaDbManagement.Functions.Functions.ToDate(DateTime.Now.ToString("dd/MM/yyyy hh:mm:ss")) + ",'" + infoUtente.idPeople + "','" + infoUtente.idGruppo + "', NULL");
                string queryString = q.getSQL();
                logger.Debug(queryString);
                retValue = ExecuteNonQuery(queryString);

            }
            catch
            {
                return false;
            }

            return retValue;
        }


        private bool insertSecurity(string thing, string personOrGroup, string accessRights, string idGruppoTrasm, string tipoDiritto)
        {
            bool retValue = false;

            try
            {
                DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("I_Security");
                q.setParam("param1", thing + "," + personOrGroup + "," + accessRights + "," + idGruppoTrasm + ",'" + tipoDiritto + "', NULL");
                string queryString = q.getSQL();
                logger.Debug(queryString);
                retValue = ExecuteNonQuery(queryString);
            }
            catch
            {
                return false;
            }

            return retValue;
        }

        #endregion

        public bool isDocAnnullato(string docNumber)
        {
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_PROFILE_ANNULLAMENTO");
            bool result = false;
            q.setParam("param1", docNumber);
            string sql = q.getSQL();
            logger.Debug(sql);
            DataSet dataSet;
            ExecuteQuery(out dataSet, sql);
            if (dataSet == null || dataSet.Tables[0] == null || dataSet.Tables[0].Rows == null)
                return result;
            if (dataSet.Tables[0].Rows.Count > 0) result = true;

            return result;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public string getUserDB()
        {
            return Functions.GetDbUserSession();
        }

        #region Gestione Note documento

        /// <summary>
        /// Caricamento note documento
        /// </summary>
        /// <param name="infoUtente"></param>
        /// <param name="schedaDocumento"></param>
        protected void FetchNoteDocumento(DocsPaVO.utente.InfoUtente infoUtente, DocsPaVO.documento.SchedaDocumento schedaDocumento)
        {
            Note noteDb = new Note(infoUtente);

            DocsPaVO.Note.AssociazioneNota associazione = new DocsPaVO.Note.AssociazioneNota(DocsPaVO.Note.AssociazioneNota.OggettiAssociazioniNotaEnum.Documento, schedaDocumento.systemId);
            schedaDocumento.noteDocumento = noteDb.GetNote(associazione, null).ToList();
        }

        /// <summary>
        /// Aggiornamento note documento
        /// </summary>
        /// <param name="infoUtente"></param>
        /// <param name="schedaDocumento"></param>
        protected void UpdateNoteDocumento(DocsPaVO.utente.InfoUtente infoUtente, DocsPaVO.documento.SchedaDocumento schedaDocumento)
        {
            if (schedaDocumento.noteDocumento != null)
            {
                Note noteDb = new Note(infoUtente);

                schedaDocumento.noteDocumento = noteDb.Update(new DocsPaVO.Note.AssociazioneNota(DocsPaVO.Note.AssociazioneNota.OggettiAssociazioniNotaEnum.Documento, schedaDocumento.systemId),
                                                        schedaDocumento.noteDocumento.ToArray()).ToList();

            }
        }

        #endregion

        #region Gestione Visibilità per Ruolo Registro
        /// <summary>
        /// SetSecurityResponsabileReg
        /// </summary>
        /// <param name="schedaDocumento"></param>
        protected void SetSecurityResponsabileReg(DocsPaVO.documento.SchedaDocumento schedaDoc)
        {
            int retProc;
            // Creazione parametri SP
            ArrayList parameters = new ArrayList();
            //if (!string.IsNullOrEmpty(schedaDoc.registro.idRuoloResp))
            //{
            //    schedaDoc.registro.Diritto_Ruolo_AOO = getRuoloRespReg(schedaDoc.registro);
            //}

            //if (!string.IsNullOrEmpty(schedaDoc.registro.Diritto_Ruolo_AOO))
            //{
            //    schedaDoc.registro.Diritto_Ruolo_AOO = getRuoloRespReg(schedaDoc.registro);
            //}


            if (schedaDoc.registro.idRuoloResp != null && schedaDoc.registro.idRuoloResp != string.Empty)
            {
                if (schedaDoc.registro.Diritto_Ruolo_AOO != null && schedaDoc.registro.Diritto_Ruolo_AOO != string.Empty)
                {
                    int idProfile = Convert.ToInt32(schedaDoc.systemId);
                    int idCorrGlobali = Convert.ToInt32(schedaDoc.registro.idRuoloResp);
                    int diritto_ruolo_AOO = Convert.ToInt32(schedaDoc.registro.Diritto_Ruolo_AOO);

                    if (idProfile != 0 && idCorrGlobali != 0)
                    {
                        parameters.Add(CreateParameter("idCorrGlobali", idCorrGlobali));
                        parameters.Add(CreateParameter("idProfile", idProfile));
                        parameters.Add(CreateParameter("diritto", diritto_ruolo_AOO));
                        parameters.Add(CreateParameter("IdReg", schedaDoc.registro.systemId));


                        retProc = ExecuteStoreProcedure("setsecurityRuoloReg", parameters);

                        /*
                            Valori di ritorno della SP:					
                            --  0: record non trovato
                            -- -1: errore generico	
                            -- >63: accessrights >63
                            -- =63: insert
                            -- <63: update
                        */
                        logger.Debug("Chiamata SP 'setsecurityRuoloReg'. Esito: " + Convert.ToString(retProc));

                        if (retProc <= 0)
                        {
                            logger.Debug("setsecurityRuoloReg: Non è stato possibile estendere la visibilità su idDocumento = " + idProfile + " per il ruolo responsabile del registro");
                        }
                        else if (retProc <= 63)
                        {

                            logger.Debug("setsecurityRuoloReg: Insert - estesa la visibilità su idDocumento = " + idProfile + " per il ruolo responsabile del registro ( con diritto " + diritto_ruolo_AOO + ")");
                        }
                        else //>63
                        {
                            logger.Debug("setsecurityRuoloReg: Visibilità già presente per idDocumento = " + idProfile + " per il ruolo responsabile del registro");

                        }

                    }
                }
            }
            else
            {
                logger.Debug("SetSecurityResponsabileReg: Ruolo Responsabile del Registro non presente.");
            }

        }


        public string getRuoloRespReg(DocsPaVO.utente.Registro reg)
        {
            logger.Debug("getRuoloRespReg:inizio");
            string resp = string.Empty;

            string commandText = string.Format("SELECT ID_RUOLO_RESP as id FROM DPA_EL_REGISTRI WHERE SYSTEM_ID = {0} ", reg.systemId);


            logger.Debug(commandText);

            using (IDataReader reader = ExecuteReader(commandText))
            {
                while (reader.Read())
                {
                    resp = reader.GetValue(0).ToString();
                }
            }
            return resp;

            logger.Debug("getRuoloRespReg:fine");


        }
        #endregion

        /// <summary>
        /// Verifica se l'utente passato (idPeople) è proprietario dell'oggetto
        /// </summary>
        /// <param name="idObj"></param>
        /// <param name="idPeople"></param>
        /// <param name="idGruppo"></param>
        /// <returns>True or False</returns>
        public bool DirittoProprietario(string idObj, string idPeople, string idGruppo)
        {
            bool result = false;
            try
            {
                using (DocsPaDB.DBProvider dbProvider = new DBProvider())
                {
                    string queryString = "";
                    DocsPaUtils.Query q;
                    q = DocsPaUtils.InitQuery.getInstance().getQuery("S_GET_COUNT_ACL");
                    q.setParam("param1", "THING=" + idObj + " AND PERSONORGROUP=" + idPeople + " AND CHA_TIPO_DIRITTO='P'");
                    queryString = q.getSQL();
                    logger.Debug(queryString);
                    string count;
                    dbProvider.ExecuteScalar(out count, queryString);
                    if (count.Equals("0"))
                        result = false;
                    else result = true;
                }
            }
            catch
            {
                result = false;
            }
            return result;
        }

        public DocsPaVO.documento.SchedaDocumento ricercaProtoByTipoDoc(string numProto, string anno, string idReg, string TipoDoc, DocsPaVO.utente.InfoUtente infoutente)
        {

            IDataReader dr = null;
            try
            {

                DocsPaVO.documento.SchedaDocumento schedaDocumento = null;
                DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_ID_PROFILE");
                string firstParam = "NUM_PROTO=" + numProto + " AND NUM_ANNO_PROTO=" + anno + " AND ID_REGISTRO=" + idReg;
                firstParam += " AND ID_TIPO_ATTO = (SELECT SYSTEM_ID FROM DPA_TIPO_ATTO WHERE VAR_DESC_ATTO = '" + TipoDoc + "')";
                q.setParam("param1", firstParam);
                string queryString = q.getSQL();
                logger.Debug(queryString);
                dr = ExecuteReader(queryString);
                string idProfile = "";
                string docNumber = "";
                if (dr.FieldCount > 0)
                    while (dr.Read())
                    {
                        idProfile = dr.GetValue(0).ToString();
                        docNumber = "";
                    }
                if (dr != null)
                {
                    dr.Close();
                    dr.Dispose();
                }
                return schedaDocumento = GetDettaglio(infoutente, idProfile, docNumber, false);

            }
            finally
            {
                if (dr != null)
                {
                    dr.Close();
                    dr.Dispose();
                }
            }
        }

        public string GetIDRegistroDocumento(string idProfile)
        {
            string idReg = string.Empty;
            DocsPaUtils.Query qSelect = DocsPaUtils.InitQuery.getInstance().getQuery("S_Profile4");
            qSelect.setParam("param1", idProfile);
            string queryString = qSelect.getSQL();

            ExecuteScalar(out idReg, queryString);

            return idReg;
        }

        /// <summary>
        /// Creazione della stringa di filtro per la ricerca dei documenti allegati
        /// </summary>
        /// <param name="filters"></param>
        /// <returns></returns>
        //private string GetFiltroDocumentoAllegato(FiltroRicerca[] filters)
        //{
        //    string retValue = string.Empty;

        //    if (isEnabledProfilazioneAllegati)
        //    {
        //        bool searchOther = false;
        //        bool searchAllegato = false;
        //        bool searchGrigio = false;

        //        foreach (FiltroRicerca filterItem in filters)
        //        {
        //            if (!searchOther &&
        //                (filterItem.argomento.Equals(DocsPaVO.filtri.ricerca.listaArgomenti.PROT_PARTENZA.ToString()) ||
        //                filterItem.argomento.Equals(DocsPaVO.filtri.ricerca.listaArgomenti.PROT_INTERNO.ToString()) ||
        //                filterItem.argomento.Equals(DocsPaVO.filtri.ricerca.listaArgomenti.PROT_ARRIVO.ToString())))
        //            {
        //                bool.TryParse(filterItem.valore, out searchOther);
        //            }
        //            else if (isEnabledProfilazioneAllegati &&
        //                filterItem.argomento.Equals(DocsPaVO.filtri.ricerca.listaArgomenti.ALLEGATO.ToString()))
        //            {
        //                bool.TryParse(filterItem.valore, out searchAllegato);
        //            }

        //            if (filterItem.argomento.Equals(DocsPaVO.filtri.ricerca.listaArgomenti.GRIGIO.ToString()))
        //                bool.TryParse(filterItem.valore, out searchGrigio);
        //        }

        //        if (searchGrigio)
        //        {
        //            if (!searchAllegato)
        //                retValue = " AND A.ID_DOCUMENTO_PRINCIPALE IS NULL";
        //            else //if (!searchOther && searchAllegato)
        //                retValue = " OR (A.CHA_TIPO_PROTO IN ('G') AND NOT A.ID_DOCUMENTO_PRINCIPALE IS NULL)";
        //            //else if (searchOther && searchAllegato)
        //            //    retValue = " OR (A.CHA_TIPO_PROTO IN ('G') AND NOT A.ID_DOCUMENTO_PRINCIPALE IS NULL)";
        //        }
        //        else
        //        {
        //            if (searchOther && !searchAllegato)
        //                retValue = " AND A.ID_DOCUMENTO_PRINCIPALE IS NULL";
        //            else if (!searchOther && searchAllegato)
        //                retValue = " AND NOT A.ID_DOCUMENTO_PRINCIPALE IS NULL";
        //            else if (searchOther && searchAllegato)
        //                retValue = " OR (A.CHA_TIPO_PROTO IN ('G') AND NOT A.ID_DOCUMENTO_PRINCIPALE IS NULL)";
        //        }
        //    }
        //    //else
        //    //{
        //    //    // Se la gestione degli allegati non risulta abilitata,
        //    //    // viene impostato il filtro per cercare solamente i grigi
        //    //    retValue = " AND A.ID_DOCUMENTO_PRINCIPALE IS NULL";
        //    //}

        //    return retValue;
        //}
        private string GetFiltroDocumentoAllegato(FiltroRicerca[] filters, out bool searchAllegato, out string queryAllPEC)
        {
            string retValue = string.Empty;
            searchAllegato = false;
            queryAllPEC = string.Empty;
            if (isEnabledProfilazioneAllegati)
            {
                bool searchOther = false;
                searchAllegato = false;
                bool searchGrigio = false;
                foreach (FiltroRicerca filterItem in filters)
                {
                    if (!searchOther &&
                        (filterItem.argomento.Equals(DocsPaVO.filtri.ricerca.listaArgomenti.PROT_PARTENZA.ToString()) ||
                        filterItem.argomento.Equals(DocsPaVO.filtri.ricerca.listaArgomenti.PROT_INTERNO.ToString()) ||
                        filterItem.argomento.Equals(DocsPaVO.filtri.ricerca.listaArgomenti.PROT_ARRIVO.ToString())))
                    {
                        bool.TryParse(filterItem.valore, out searchOther);
                    }
                    else if (isEnabledProfilazioneAllegati &&
                        filterItem.argomento.Equals(DocsPaVO.filtri.ricerca.listaArgomenti.ALLEGATO.ToString()))
                    {
                        //bool.TryParse(filterItem.valore, out searchAllegato);
                        searchAllegato = true;
                        if (filterItem.valore.Equals("pec"))
                        {
                            queryAllPEC = " AND exists (" +
                                            "(SELECT 'x' FROM dpa_notifica dn WHERE dn.docnumber=a.id_documento_principale and dn.version_id=(select max(v.version_id) from  versions v where  v.docnumber=dn.docnumber))" +
                                            "UNION" +
                                            "(SELECT 'x' FROM profile p WHERE p.docnumber=a.docnumber and a.var_prof_oggetto LIKE 'Ricevuta di ritorno delle Mail%')" +
                                            ") ";
                        }
                        else if (filterItem.valore.Equals("user"))
                        {
                            queryAllPEC = " AND not exists (" +
                                            "(SELECT 'x' FROM dpa_notifica dn WHERE dn.docnumber=a.id_documento_principale and dn.version_id=(select max(v.version_id) from  versions v where  v.docnumber=dn.docnumber))" +
                                            "UNION" +
                                            "( SELECT 'x' FROM profile p WHERE p.docnumber=a.docnumber and a.var_prof_oggetto LIKE 'Ricevuta di ritorno delle Mail%'" +
                                            " union SELECT 'x' FROM profile p WHERE p.docnumber=a.docnumber and  a.var_prof_oggetto LIKE 'Ricevuta di avvenuta%' " +
                                            " union SELECT 'x' FROM profile p WHERE p.docnumber=a.docnumber and  a.var_prof_oggetto LIKE 'Ricevuta di mancata consegna%')" +
                                            ") " +
                                            " AND not exists (SELECT 'x' FROM VERSIONS v WHERE v.CHA_ALLEGATI_ESTERNO = '1'  AND v.docnumber = a.docnumber) ";
                        }
                        else if (filterItem.valore.Equals(InteroperabilitaSemplificata.SimplifiedInteroperabilityId))
                        {
                            queryAllPEC = " AND exists (" +
                                            "(SELECT 'x' FROM dpa_notifica dn WHERE dn.docnumber=a.id_documento_principale and dn.version_id=(select max(v.version_id) from  versions v where v.docnumber=dn.docnumber))" +
                                            "UNION" +
                                            "( ( SELECT 'x' FROM profile p WHERE p.docnumber=a.docnumber and a.var_prof_oggetto LIKE 'Ricevuta di avvenuta%' " +
                                            " union SELECT 'x' FROM profile p WHERE p.docnumber=a.docnumber and  a.var_prof_oggetto Like 'Ricevuta di mancata consegna%'))" +
                                            ") ";
                        }
                        else if (filterItem.valore.Equals("esterni"))
                        {

                            queryAllPEC = " AND exists (SELECT 'x' FROM VERSIONS v WHERE v.CHA_ALLEGATI_ESTERNO = '1'  AND v.docnumber = a.docnumber) ";

                        }
                    }

                    if (filterItem.argomento.Equals(DocsPaVO.filtri.ricerca.listaArgomenti.GRIGIO.ToString()))
                        bool.TryParse(filterItem.valore, out searchGrigio);
                }

                if (searchGrigio)
                {
                    if (!searchAllegato)
                        retValue = " AND A.ID_DOCUMENTO_PRINCIPALE IS NULL";
                    else
                    {
                        retValue = " OR (A.CHA_TIPO_PROTO IN ('G') AND NOT A.ID_DOCUMENTO_PRINCIPALE IS NULL" + queryAllPEC + ")";
                    }
                }
                else
                {
                    if (searchOther && !searchAllegato)
                        retValue = " AND A.ID_DOCUMENTO_PRINCIPALE IS NULL";
                    else if (!searchOther && searchAllegato)
                    {
                        retValue = " AND NOT A.ID_DOCUMENTO_PRINCIPALE IS NULL" + queryAllPEC;
                    }
                    else if (searchOther && searchAllegato)
                    {
                        retValue = " OR (A.CHA_TIPO_PROTO IN ('G') AND NOT A.ID_DOCUMENTO_PRINCIPALE IS NULL" + queryAllPEC + ")";
                    }
                }
            }
            else
            {
                // Se la gestione degli allegati non risulta abilitata,
                // viene impostato il filtro per cercare solamente i grigi
                retValue = " AND A.ID_DOCUMENTO_PRINCIPALE IS NULL";
            }

            return retValue;
        }
        /// <summary>
        /// Creazione della stringa di filtro per la ricerca dei documenti grigi e allegato
        /// </summary>
        /// <param name="filters"></param>
        /// <returns></returns>
        private string GetFiltroDocumentoGrigioAllegato(FiltroRicerca[] filters)
        {
            string retValue = string.Empty;

            if (isEnabledProfilazioneAllegati)
            {
                bool searchGrigio = false;
                bool searchAllegato = false;

                foreach (FiltroRicerca filterItem in filters)
                {
                    if (filterItem.argomento.Equals(DocsPaVO.filtri.ricerca.listaArgomenti.GRIGIO.ToString()))
                    {
                        bool.TryParse(filterItem.valore, out searchGrigio);
                    }
                    else if (isEnabledProfilazioneAllegati &&
                        filterItem.argomento.Equals(DocsPaVO.filtri.ricerca.listaArgomenti.ALLEGATO.ToString()))
                    {
                        bool.TryParse(filterItem.valore, out searchAllegato);
                    }
                }

                if (searchGrigio && !searchAllegato)
                    retValue = "A.CHA_TIPO_PROTO='G' AND A.ID_DOCUMENTO_PRINCIPALE IS NULL";
                else if (!searchGrigio && searchAllegato)
                    retValue = "A.CHA_TIPO_PROTO='G' AND NOT A.ID_DOCUMENTO_PRINCIPALE IS NULL";
                else if (searchGrigio && searchAllegato)
                    retValue = "A.CHA_TIPO_PROTO='G'";
            }
            else
            {
                // Se la gestione degli allegati non risulta abilitata,
                // viene impostato il filtro per cercare solamente i grigi
                retValue = "A.CHA_TIPO_PROTO='G' AND A.ID_DOCUMENTO_PRINCIPALE IS NULL";
            }

            string filterCestino = string.Format("{0} = '0'", Functions.getNVL("A.CHA_IN_CESTINO", "'0'"));

            if (retValue != string.Empty)
                retValue = string.Format("{0} AND {1}", retValue, filterCestino);
            else
                retValue = filterCestino;


            return retValue;
        }

        public bool insDocRichiestaConversionePdf(string idProfile)
        {
            bool retValue = false;

            using (DocsPaDB.DBProvider dbProvider = new DocsPaDB.DBProvider())
            {
                DocsPaUtils.Query queryMng = DocsPaUtils.InitQuery.getInstance().getQuery("INS_DOC_IN_CONVERSIONE_PDF");
                queryMng.setParam("colID", DocsPaDbManagement.Functions.Functions.GetSystemIdColName());
                queryMng.setParam("id", DocsPaDbManagement.Functions.Functions.GetSystemIdNextVal("DPA_CONV_PDF_SERVER"));
                queryMng.setParam("idProfile", idProfile);
                queryMng.setParam("dtaConversione", Functions.GetDate());

                string commandText = queryMng.getSQL();
                System.Diagnostics.Debug.WriteLine("SQL - Documenti - insDocRichiestaConversionePdf - QUERY : " + commandText);
                logger.Debug("SQL - Documenti - insDocRichiestaConversionePdf - QUERY : " + commandText);

                int rowsAffected;
                dbProvider.ExecuteNonQuery(commandText, out rowsAffected);
                retValue = (rowsAffected > 0);
            }

            return retValue;
        }

        public void delDocRichiestaConversionePdf(string idProfile)
        {
            DocsPaDB.DBProvider dbProvider = new DocsPaDB.DBProvider();

            try
            {
                DocsPaUtils.Query queryMng = DocsPaUtils.InitQuery.getInstance().getQuery("DEL_DOC_IN_CONVERSIONE_PDF");
                queryMng.setParam("idProfile", idProfile);

                string commandText = queryMng.getSQL();
                System.Diagnostics.Debug.WriteLine("SQL - Documenti - delDocRichiestaConversionePdf - QUERY : " + commandText);
                logger.Debug("SQL - Documenti - delDocRichiestaConversionePdf - QUERY : " + commandText);
                dbProvider.ExecuteNonQuery(commandText);
            }
            catch (Exception e)
            {
                dbProvider.RollbackTransaction();
            }
            finally
            {
                dbProvider.Dispose();
            }
        }

        public bool isDocInConversionePdf(string idProfile)
        {
            bool retValue = false;

            using (DocsPaDB.DBProvider dbProvider = new DocsPaDB.DBProvider())
            {
                DocsPaUtils.Query queryMng = DocsPaUtils.InitQuery.getInstance().getQuery("IS_DOC_IN_CONVERSIONE_PDF");
                queryMng.setParam("idProfile", idProfile);

                string commandText = queryMng.getSQL();
                System.Diagnostics.Debug.WriteLine("SQL - Documenti - isDocInConversionePdf - QUERY : " + commandText);
                logger.Debug("SQL - Documenti - isDocInConversionePdf - QUERY : " + commandText);
                DataSet ds = new DataSet();
                dbProvider.ExecuteQuery(ds, commandText);

                retValue = (ds.Tables[0].Rows.Count != 0);
            }

            return retValue;
        }

        #region trasferimento in deposito
        /// <summary>
        /// Restituisce la lista di una data serie repertoriata
        /// </summary>
        /// <param name="listaDoc"></param>
        /// <param name="template"></param>
        /// <param name="numPage"></param>
        /// <param name="numTotPage"></param>
        /// <param name="nRec"></param>
        /// <returns></returns>
        public ArrayList ListaDocumentiInSeriePaging(string idGruppo, ArrayList listaDoc, DocsPaVO.ProfilazioneDinamica.Templates template, int numPage, out int numTotPage, out int nRec, string oggetto, string anno, string rfAOO)
        //public ArrayList ListaDocumentiInSerie(ArrayList listaDoc, DocsPaVO.ProfilazioneDinamica.Templates template, out int nRec)
        {
            int idgroupParam = Convert.ToInt32(idGruppo);
            nRec = 0;
            //numTotPage = 0;
            logger.Debug("ListaDocumentiInSerie");
            string queryFrom = string.Empty;
            string filters = string.Empty;
            string userDb = string.Empty;
            string dbType = System.Configuration.ConfigurationManager.AppSettings["DBType"];
            if (dbType.ToUpper() == "SQL")
                userDb = DocsPaDbManagement.Functions.Functions.GetDbUserSession() + ".";

            filters += "  (" + userDb + "checkVisibilitaArchivio('D', A.SYSTEM_ID, " + idgroupParam + ") > 0) and A.ID_TIPO_ATTO='" + template.ID_TIPO_ATTO + "'";
            //DocsPaDB.Query_DocsPAWS.Model model = new Model();
            //filters += model.getSerieAndPerRicercaProfilazione(template);
            //filters += model.getSerieAndPerRicercaProfilazioneArchivio(template);

            if (string.IsNullOrEmpty(rfAOO))
                filters += " AND A.system_id in  (SELECT doc_number FROM dpa_associazione_templates dpa0 where (dpa0.id_oggetto = " + oggetto + "and dpa0.anno = " + Convert.ToInt32(anno) + " ) )";
            else
                filters += " AND A.system_id in  (SELECT doc_number FROM dpa_associazione_templates dpa0 where (dpa0.id_oggetto = " + oggetto + " and dpa0.ID_AOO_RF = " + Convert.ToInt32(rfAOO) + "and dpa0.anno = " + Convert.ToInt32(anno) + ") )";
            DocsPaUtils.Query queryDef = DocsPaUtils.InitQuery.getInstance().getQuery("S_DOC_IN_SERIE_TRASFERIMENTO_DEPOSITO");
            queryDef.setParam("paramOggetto", oggetto);
            queryDef.setParam("filters", filters);
            string commandText = queryDef.getSQL();
            logger.Debug(commandText);
            // Caricamento oggetti "InfoDocumento"
            AppendListaDocumentiTrasfDepositoPaging(listaDoc, commandText, true, numPage, out numTotPage, out nRec);
            //AppendListaDocumentiTrasfDepositoPaging(listaDoc, commandText, true, out nRec);
            return listaDoc;
        }

        public ArrayList ListaDocumentiInSerie(ArrayList listaDoc, DocsPaVO.ProfilazioneDinamica.Templates template, string anno, string valOggetto, string rfAOO)
        {
            logger.Debug("ListaDocumentiInSerie");
            string queryFrom = string.Empty;
            string filters = string.Empty;
            filters += "A.CHA_IN_ARCHIVIO = '0' and A.ID_TIPO_ATTO='" + template.ID_TIPO_ATTO + "'";
            //DocsPaDB.Query_DocsPAWS.Model model = new Model();
            //filters += model.getSerieAndPerRicercaProfilazione(template);
            filters += " AND A.system_id in  (SELECT doc_number FROM dpa_associazione_templates dpa0, dpa_oggetti_custom dpa1 where dpa0.id_oggetto =  dpa1.system_id and dpa1.campo_di_ricerca = 'SI' and dpa0.ANNO = ' " + anno + "' and dpa1.REPERTORIO = '1') ";

            if (string.IsNullOrEmpty(rfAOO))
                filters += " AND A.system_id in  (SELECT doc_number FROM dpa_associazione_templates dpa0 where (dpa0.id_oggetto = " + valOggetto + " ) )";
            else
                filters += " AND A.system_id in  (SELECT doc_number FROM dpa_associazione_templates dpa0 where (dpa0.id_oggetto = " + valOggetto + " and dpa0.ID_AOO_RF = " + Convert.ToInt32(rfAOO) + " ) )";

            DocsPaUtils.Query queryDef = DocsPaUtils.InitQuery.getInstance().getQuery("S_DOC_IN_SERIE_TRASFERIMENTO_DEPOSITO");
            queryDef.setParam("paramOggetto", valOggetto);
            queryDef.setParam("filters", filters);
            string commandText = queryDef.getSQL();
            logger.Debug(commandText);
            // Caricamento oggetti "InfoDocumento"
            AppendListaDocumentiTrasfDeposito(listaDoc, commandText, true);
            return listaDoc;
        }


        //OK!!
        //Inserimento di un singolo documento in deposito
        public string TrasfInDepDocumento(string idProfile, string serieOrFasc, string tipoOp)
        {
            string result = String.Empty;
            result = AddDocInDeposito(idProfile, serieOrFasc, tipoOp);
            return result;
        }

        //OK!!
        //Aggiunge un singolo documento in deposito
        //Restituisce -1 se il documento non viene inserito in deposito
        // 1 se il documento viene inserito in deposito
        // 2 se il documento viene inserito in deposito ma è classificato in + fascicoli o serie
        public string AddDocInDeposito(string idProfile, string serieOrFasc, string tipoOp)
        {
            ArrayList parameters = new ArrayList();
            string result = String.Empty;
            DBProvider dbProvider = new DBProvider();
            try
            {
                if (idProfile != null && idProfile != String.Empty)
                {
                    parameters.Add(CreateParameter("idProfile", Convert.ToInt32(idProfile)));
                }
                else
                {
                    parameters.Add(CreateParameter("idProfile", DBNull.Value));
                }
                //if (serieOrFasc)
                parameters.Add(CreateParameter("serie", Convert.ToInt32(serieOrFasc)));
                //else
                //    parameters.Add(CreateParameter("serie", 0));

                DocsPaUtils.Data.ParameterSP versionIdParam = new DocsPaUtils.Data.ParameterSP("result", 0, 0, DocsPaUtils.Data.DirectionParameter.ParamOutput, System.Data.DbType.Int32);
                parameters.Add(versionIdParam);
                DataSet ds = null;
                if (tipoOp == "IN_DEPOSITO")
                {
                    if (dbProvider.ExecuteStoredProcedure("SP_INSERT_DOC_ARCHIVIO", parameters, ds) != -1)
                    {
                        result = Convert.ToString(versionIdParam.Valore);
                    }
                }
                else
                {
                    //TODO: store procedure SP_INSERT_DOC_CORRENTE
                    if (dbProvider.ExecuteStoredProcedure("SP_INSERT_DOC_CORRENTE", parameters, ds) != -1)
                    {
                        result = Convert.ToString(versionIdParam.Valore);
                    }
                }
            }
            catch
            {
                result = "-1";
            }
            finally
            {
                dbProvider.Dispose();
            }
            return result;
        }



        #endregion

        public ArrayList getTipoProtoRisposta(string docNumber)
        {
            ArrayList list = new ArrayList();
            logger.Debug("Start > getTipoProtoRisposta");
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("TIPO_PROTO_RISPOSTA");
            q.setParam("param1", docNumber);
            string queryString = q.getSQL();
            logger.Debug(queryString);
            DataSet dataSet;
            ExecuteQuery(out dataSet, "TIPO_PROTO", queryString);

            foreach (DataRow riga in dataSet.Tables["TIPO_PROTO"].Rows)
            {
                list.Add(riga["CHA_TIPO_PROTO"].ToString());
            }
            dataSet.Dispose();

            logger.Debug("End > getTipoProtoRisposta");
            return list;
        }

        /// <summary>
        /// Indica se ricercare i documenti con i mittenti e destinatari storicizzati 
        /// </summary>
        /// <param name="filters"></param>
        /// <returns></returns>
        protected bool RicercaPerMittentiDestinatariStoricizzati(DocsPaVO.filtri.FiltroRicerca[] filters)
        {
            bool retValue = false;

            foreach (FiltroRicerca item in filters)
            {
                if (item.argomento == DocsPaVO.filtri.ricerca.listaArgomenti.MITT_DEST_STORICIZZATI.ToString())
                {
                    bool.TryParse(item.valore, out retValue);
                    break;
                }
            }

            return retValue;
        }

        public string GetIndirizzoMittDest(string systemId, string tipo)
        {
            string mittDestInd = "";
            DataSet dataSet;
            try
            {
                DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_MittDestIndirizzo");
                q.setParam("systemID", systemId);
                q.setParam("tipo", tipo);
                string queryString = q.getSQL();
                ExecuteQuery(out dataSet, "DOCUMENTI", queryString);

                if (dataSet.Tables["DOCUMENTI"].Rows.Count == 0)
                {
                    mittDestInd = null;
                }
                else
                {
                    mittDestInd = dataSet.Tables["DOCUMENTI"].Rows[0]["MITT_DEST"].ToString();
                }
                return mittDestInd;
            }
            catch (Exception e)
            {
                logger.Error(e.Message);
                logger.Error("Errore nella gestione dei documenti (Query - GetIndirizzoMittDest)", e);
                throw new Exception("F_System");
            }

        }

        //per OCS sabrina
        public void O_UpdatePathProfile(string path, string docNumber)
        {
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("U_Profile");
            q.setParam("param1", "PATH='" + path + "'");
            q.setParam("param2", " DOCNUMBER=" + docNumber);
            string queryString = q.getSQL();
            logger.Debug(queryString);
            ExecuteNonQuery(queryString);
        }

        /// <summary>
        /// Reperimento path del file acquisito per l'ultima versione del documento
        /// </summary>
        /// <param name="docNumber"></param>
        /// <returns></returns>
        public string GetCurrentVersionFilePath(string docNumber)
        {
            DocsPaUtils.Query queryDef = DocsPaUtils.InitQuery.getInstance().getQuery("S_GET_CURRENT_VERSION_FILE_PATH");
            queryDef.setParam("docNumber", docNumber);

            string commandText = queryDef.getSQL();
            logger.Debug(commandText);

            string field;

            using (DBProvider dbProvider = new DBProvider())
                dbProvider.ExecuteScalar(out field, commandText);

            return field;
        }

        public ArrayList getExtFileAqcuisiti(bool formatiDocumentoAttivo, string idamm)
        {
            ArrayList result = new ArrayList();
            DocsPaUtils.Query query = null;

            if (formatiDocumentoAttivo)
            {
                query = DocsPaUtils.InitQuery.getInstance().getQuery("S_APPS_EXTENSION_FORMATI");
                query.setParam("idAmm", idamm);
            }
            else
                query = DocsPaUtils.InitQuery.getInstance().getQuery("S_APPS_EXTENSION");
            string commandText = query.getSQL();
            DataSet ds = new DataSet();
            ExecuteQuery(ds, commandText);
            foreach (DataRow dr in ds.Tables[0].Rows)
            {
                result.Add(dr[0].ToString());
            }
            return result;
        }

        public string getProtocolloTitolario(DocsPaVO.documento.SchedaDocumento schedaDoc)
        {
            DBProvider dbProvider = new DBProvider();
            DocsPaUtils.Query queryDef = DocsPaUtils.InitQuery.getInstance().getQuery("S_PROFILE_PROTO_TIT");
            queryDef.setParam("param1", " SYSTEM_ID = " + schedaDoc.systemId);

            string commandText = queryDef.getSQL();
            logger.Debug("QUERY getProtocolloTitolario : " + commandText);
            DataSet ds = new DataSet();

            dbProvider.ExecuteQuery(ds, commandText);
            string protocolloTitolario = string.Empty;

            if (ds.Tables[0].Rows.Count > 0)
            {
                protocolloTitolario = ds.Tables[0].Rows[0]["PROT_TIT"].ToString();
            }

            return protocolloTitolario;
        }

        #region Date per le ricerche
        public string getFirstDayOfWeek()
        {
            DBProvider dbProvider = new DBProvider();
            DocsPaUtils.Query queryDef = DocsPaUtils.InitQuery.getInstance().getQuery("S_FIRST_DAY_WEEK");
            string commandText = queryDef.getSQL();
            logger.Debug("QUERY getFirstDayOfWeek : " + commandText);
            DataSet ds = new DataSet();

            dbProvider.ExecuteQuery(ds, commandText);
            string firstDayWeek = string.Empty;

            if (ds.Tables[0].Rows.Count > 0)
            {
                firstDayWeek = ds.Tables[0].Rows[0]["DAY"].ToString();
            }
            return firstDayWeek;
        }

        public string getFirstDayOfMonth()
        {
            DBProvider dbProvider = new DBProvider();
            DocsPaUtils.Query queryDef = DocsPaUtils.InitQuery.getInstance().getQuery("S_FIRST_DAY_MONTH");
            string commandText = queryDef.getSQL();
            logger.Debug("QUERY getFirstDayOfMonth : " + commandText);
            DataSet ds = new DataSet();

            dbProvider.ExecuteQuery(ds, commandText);
            string firstDayMonth = string.Empty;

            if (ds.Tables[0].Rows.Count > 0)
            {
                firstDayMonth = ds.Tables[0].Rows[0]["DAY"].ToString();
            }
            return firstDayMonth;
        }

        public string getLastDayOfWeek()
        {
            DBProvider dbProvider = new DBProvider();
            DocsPaUtils.Query queryDef = DocsPaUtils.InitQuery.getInstance().getQuery("S_LAST_DAY_WEEK");
            string commandText = queryDef.getSQL();
            logger.Debug("QUERY getLastDayOfWeek : " + commandText);
            DataSet ds = new DataSet();

            dbProvider.ExecuteQuery(ds, commandText);
            string lastDayWeek = string.Empty;

            if (ds.Tables[0].Rows.Count > 0)
            {
                lastDayWeek = ds.Tables[0].Rows[0]["DAY"].ToString();
            }
            return lastDayWeek;
        }

        public string getLastDayOfMonth()
        {
            DBProvider dbProvider = new DBProvider();
            DocsPaUtils.Query queryDef = DocsPaUtils.InitQuery.getInstance().getQuery("S_LAST_DAY_MONTH");
            string commandText = queryDef.getSQL();
            logger.Debug("QUERY getLastDayOfMonth : " + commandText);
            DataSet ds = new DataSet();

            dbProvider.ExecuteQuery(ds, commandText);
            string lastDayMonth = string.Empty;

            if (ds.Tables[0].Rows.Count > 0)
            {
                lastDayMonth = ds.Tables[0].Rows[0]["DAY"].ToString();
            }
            return lastDayMonth;
        }

        public string toDay()
        {
            DBProvider dbProvider = new DBProvider();
            DocsPaUtils.Query queryDef = DocsPaUtils.InitQuery.getInstance().getQuery("S_TODAY");
            string commandText = queryDef.getSQL();
            logger.Debug("QUERY toDay : " + commandText);
            DataSet ds = new DataSet();

            dbProvider.ExecuteQuery(ds, commandText);
            string today = string.Empty;

            if (ds.Tables[0].Rows.Count > 0)
            {
                today = ds.Tables[0].Rows[0]["DAY"].ToString();
            }
            return today;
        }

        public string DayOnYearBeforeToday()
        {
            DBProvider dbProvider = new DBProvider();
            DocsPaUtils.Query queryDef = DocsPaUtils.InitQuery.getInstance().getQuery("S_DAY_YEAR_BEFORE");
            string commandText = queryDef.getSQL();
            logger.Debug("QUERY toDay : " + commandText);
            DataSet ds = new DataSet();

            dbProvider.ExecuteQuery(ds, commandText);
            string today = string.Empty;

            if (ds.Tables[0].Rows.Count > 0)
            {
                today = ds.Tables[0].Rows[0]["DAY"].ToString();
            }
            return today;
        }

        public string toFirstDayOfYear()
        {
            DBProvider dbProvider = new DBProvider();
            DocsPaUtils.Query queryDef = DocsPaUtils.InitQuery.getInstance().getQuery("S_FIRSTDAY_YEAR");
            string commandText = queryDef.getSQL();
            logger.Debug("QUERY toFirstDayOfYear: " + commandText);
            DataSet ds = new DataSet();

            dbProvider.ExecuteQuery(ds, commandText);
            string today = string.Empty;

            if (ds.Tables[0].Rows.Count > 0)
            {
                today = ds.Tables[0].Rows[0]["DAY"].ToString();
            }
            return today;
        }

        public string GetYesterday()
        {
            DBProvider dbProvider = new DBProvider();
            DocsPaUtils.Query queryDef = DocsPaUtils.InitQuery.getInstance().getQuery("S_YESTERDAY");
            string commandText = queryDef.getSQL();
            logger.Debug("QUERY S_YESTERDAY: " + commandText);
            DataSet ds = new DataSet();

            dbProvider.ExecuteQuery(ds, commandText);
            string today = string.Empty;

            if (ds.Tables[0].Rows.Count > 0)
            {
                today = ds.Tables[0].Rows[0]["DAY"].ToString();
            }
            return today;
        }

        public string GetLastSevenDay()
        {
            DBProvider dbProvider = new DBProvider();
            DocsPaUtils.Query queryDef = DocsPaUtils.InitQuery.getInstance().getQuery("S_LAST_SEVEN_DAY");
            string commandText = queryDef.getSQL();
            logger.Debug("QUERY S_YESTERDAY: " + commandText);
            DataSet ds = new DataSet();

            dbProvider.ExecuteQuery(ds, commandText);
            string today = string.Empty;

            if (ds.Tables[0].Rows.Count > 0)
            {
                today = ds.Tables[0].Rows[0]["DAY"].ToString();
            }
            return today;
        }

        public string GetLastThirtyOneDay()
        {
            DBProvider dbProvider = new DBProvider();
            DocsPaUtils.Query queryDef = DocsPaUtils.InitQuery.getInstance().getQuery("S_LAST_THIRTY_ONE_DAY");
            string commandText = queryDef.getSQL();
            logger.Debug("QUERY S_YESTERDAY: " + commandText);
            DataSet ds = new DataSet();

            dbProvider.ExecuteQuery(ds, commandText);
            string today = string.Empty;

            if (ds.Tables[0].Rows.Count > 0)
            {
                today = ds.Tables[0].Rows[0]["DAY"].ToString();
            }
            return today;
        }
        #endregion

        public DocsPaVO.utente.Canale associaCanalePrefDestinatario(string idProfile, string idDestinatario)
        {
            DocsPaVO.utente.Canale result = new DocsPaVO.utente.Canale();
            DBProvider dbProvider = new DBProvider();
            DocsPaUtils.Query queryDef = DocsPaUtils.InitQuery.getInstance().getQuery("S_DOCTYPES_DOC_ARRIVO_PAR");
            queryDef.setParam("idProfile", idProfile);
            queryDef.setParam("idDestinatario", idDestinatario);
            string commandText = queryDef.getSQL();
            logger.Debug("QUERY S_DOCTYPES_DOC_ARRIVO_PAR : " + commandText);
            DataSet ds = new DataSet();

            dbProvider.ExecuteQuery(ds, commandText);
            string today = string.Empty;

            if (ds.Tables[0].Rows.Count > 0)
            {
                result.systemId = ds.Tables[0].Rows[0]["SYSTEM_ID"].ToString();
                result.descrizione = ds.Tables[0].Rows[0]["DESCRIPTION"].ToString();
                result.tipoCanale = ds.Tables[0].Rows[0]["CHA_TIPO_CANALE"].ToString();
                result.typeId = ds.Tables[0].Rows[0]["TYPE_ID"].ToString();
            }
            return result;
        }

        public DocsPaVO.utente.Canale getCanaleBySystemId(string idDocumenttypes)
        {
            DocsPaVO.utente.Canale result = new DocsPaVO.utente.Canale();
            DBProvider dbProvider = new DBProvider();
            DocsPaUtils.Query queryDef = DocsPaUtils.InitQuery.getInstance().getQuery("AMM_S_GET_MEZZO_SPEDIZIONE");
            queryDef.setParam("systemID", idDocumenttypes);
            string commandText = queryDef.getSQL();
            logger.Debug("QUERY AMM_S_GET_MEZZO_SPEDIZIONE : " + commandText);
            DataSet ds = new DataSet();

            dbProvider.ExecuteQuery(ds, commandText);
            string today = string.Empty;

            if (ds.Tables[0].Rows.Count > 0)
            {
                result.systemId = ds.Tables[0].Rows[0]["ID_MEZZO_SPEDIZIONE"].ToString();
                result.descrizione = ds.Tables[0].Rows[0]["DESCRIZIONE"].ToString();
                result.tipoCanale = ds.Tables[0].Rows[0]["CHA_TIPO_CANALE"].ToString();
                result.typeId = ds.Tables[0].Rows[0]["TYPE_ID"].ToString();
            }
            return result;
        }

        private string GetProtoDest(string idProfile, string idCorrDest)
        {
            logger.Debug("GetProtoDest");
            string protoDest = string.Empty;
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_PROTO_DEST");
            q.setParam("idProfile", idProfile);
            q.setParam("idCorrDest", idCorrDest);
            string queryString = q.getSQL();
            ExecuteScalar(out protoDest, queryString);
            return protoDest;
        }

        public int getNumFolderDoc(string idProfile)
        {
            logger.Debug("getNumFolderDoc");
            string numFolderAppo = string.Empty;
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_NUM_FOLDER_DOC");
            q.setParam("idProfile", idProfile);
            string queryString = q.getSQL();
            ExecuteScalar(out numFolderAppo, queryString);
            int numFolder = Convert.ToInt32(numFolderAppo);
            return numFolder;
        }
        public string getIdMezzoSpedizioneByDesc(string descMezzoSpedizione)
        {
            logger.Debug("getIdMezzoSpedizioneByDesc");
            string result = string.Empty;
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_DocumentTypes4");
            q.setParam("param1", "'" + descMezzoSpedizione + "'");
            string queryString = q.getSQL();
            ExecuteScalar(out result, queryString);
            return result;
        }

        public string GetQueryProtocolloStampaRegExport(string idGruppo, string idPeople, DocsPaVO.filtri.FiltroRicerca[][] objQueryList, string queryWhere, string queryFrom, string queryOrd, bool mittDest_indirizzo)
        {
            string order;
            string userDb = string.Empty;
            string dbType = System.Configuration.ConfigurationManager.AppSettings["DBType"];
            if (dbType.ToUpper() == "SQL")
                userDb = DocsPaDbManagement.Functions.Functions.GetDbUserSession();
            string columnQuery = "A.SYSTEM_ID,";
            columnQuery += "A.DOCNUMBER,";
            columnQuery += "A.num_proto as NUM_PROTOCOLLO,";
            columnQuery += DocsPaDbManagement.Functions.Functions.ToChar("A.dta_proto", false) + " as DATA_PROTOCOLLO,";
            columnQuery += "A.cha_tipo_proto as CHA_TIPO_DOC,";
            columnQuery += DocsPaDbManagement.Functions.Functions.ToChar("A.dta_annulla", false) + " as DATA_ANNULLAMENTO, A.CHA_IMG as IMMAGINE,";
            columnQuery += "A.var_prof_oggetto as OGGETTO,";
            columnQuery += "A.ID_TIPO_ATTO,";
            //columnQuery += "A.ID_AMM,";
            columnQuery += "VAR_NOTE_CESTINO,";

            if (dbType.ToUpper() == "SQL")
            {
                if (!mittDest_indirizzo)
                    columnQuery += userDb + ".corrcat(A.system_id, A.cha_tipo_proto) as MITT_DEST,";
                else
                    columnQuery += userDb + ".corrcat_address(A.system_id, A.cha_tipo_proto) as MITT_DEST,";
                columnQuery += userDb + ".classcat(A.system_id) as COD_FASCICOLI,";
                columnQuery += "ISNULL(A.DTA_PROTO,A.CREATION_TIME) AS DATA, ";
                columnQuery += DocsPaDbManagement.Functions.Functions.GetDbUserSession() + ".getInConservazione(A.system_id, null, 'D', @idPeople@, @idGruppo@) as IN_CONSERVAZIONE, ";
            }
            else
            {
                if (!mittDest_indirizzo)
                    columnQuery += "corrcat(A.system_id, A.cha_tipo_proto) as MITT_DEST,";
                else
                    columnQuery += "corrcat_address(A.system_id, A.cha_tipo_proto) as MITT_DEST,";
                columnQuery += "classcat(A.system_id) as COD_FASCICOLI,";
                columnQuery += "nvl(A.DTA_PROTO,A.CREATION_TIME) as DATA, ";
                columnQuery += DocsPaDbManagement.Functions.Functions.GetDbUserSession() + "getInConservazione(A.system_id, null, 'D', @idPeople@, @idGruppo@) as IN_CONSERVAZIONE, ";
            }
            columnQuery += "A.ID_REGISTRO,";
            columnQuery += "A.NUM_ANNO_PROTO,";
            columnQuery += "A.NUM_PROTO,";
            columnQuery += DocsPaDbManagement.Functions.Functions.ToChar("A.CREATION_DATE", false) + " as DATA_CREAZIONE";
            //columnQuery += DocsPaDbManagement.Functions.Functions.GetDbUserSession() + ".getInConservazione(A.system_id, null, 'D', @idPeople@, @idGruppo@) as IN_CONSERVAZIONE";

            DocsPaUtils.Query q;

            if (idGruppo != null && idPeople != null)
            {
                //Pezza Arlecchino per Milano
                //string nomeQuery = do_switchQuery(objQueryList[0]);
                //if (nomeQuery.Equals(""))
                //{
                q = DocsPaUtils.InitQuery.getInstance().getQuery("S_J_PROFILESTAMPAREG__SECURITY__OGGETTARIO2");
                //}
                //else
                //{
                //    q = DocsPaUtils.InitQuery.getInstance().getQuery(nomeQuery);
                //}
                //Fine pezza Arlecchino per Milano

                q.setParam("param1", columnQuery);
                q.setParam("param2", queryFrom);
                q.setParam("idPeople", idPeople);
                q.setParam("idGruppo", idGruppo);
                q.setParam("param3", queryWhere);
                // q.setParam("param3", "C.ACCESSRIGHTS >= 0 " + "AND (C.PERSONORGROUP=" + idGruppo + " OR C.PERSONORGROUP=" + idPeople + ")" + queryWhere);

                string idAmm = "0";
                if (!string.IsNullOrEmpty(idPeople))
                {
                    DocsPaDB.Query_DocsPAWS.Utenti u = new Utenti();
                    idAmm = u.GetIdAmm(idPeople);
                }
                string idRuoloPubblico = DocsPaUtils.Configuration.InitConfigurationKeys.GetValue(idAmm, "ENABLE_FASCICOLO_PUBBLICO");
                q.setParam("idRuoloPubblico", !string.IsNullOrEmpty(idRuoloPubblico) ? idRuoloPubblico : "0");

                if (dbType.ToUpper().Equals("SQL"))
                {
                    q.setParam("dbUser", userDb);
                    order = "A.DATA DESC, A.SYSTEM_ID DESC";

                }
                else
                {
                    order = "nvl(A.DTA_PROTO,A.CREATION_TIME) DESC";

                }
                //q.setParam("param4", queryOrd);
                //q.setParam("param4", order);

            }
            else
            {
                q = DocsPaUtils.InitQuery.getInstance().getQuery("S_J_PROFILESTAMPAREG__DPA_OGGETTARIO4");
                q.setParam("param1", columnQuery);
                q.setParam("param2", queryFrom);
                q.setParam("param3", queryWhere);
                if (dbType.ToUpper().Equals("SQL"))
                {
                    q.setParam("dbUser", userDb);
                    order = "A.DATA DESC, A.SYSTEM_ID DESC";

                }
                else
                {
                    order = "nvl(A.DTA_PROTO,A.CREATION_TIME) DESC";

                }
                //q.setParam("param4", queryOrd);
                //q.setParam("param4", order);
            }

            string queryString = q.getSQL();

            logger.Debug("GetQueryProtocolloExport = " + queryString);

            return queryString;
        }


        public void updateSecurityPeople(string idProfile, string idPeople)
        {
            DocsPaUtils.Query q;
            int affectedRows;
            string queryString;
            q = DocsPaUtils.InitQuery.getInstance().getQuery("U_SECURITY_ACCESSRIGHTS_0");
            q.setParam("param1", idProfile);
            q.setParam("param2", idPeople);
            q.setParam("param3", idPeople);
            queryString = q.getSQL();
            queryString = queryString + " AND CHA_TIPO_DIRITTO='P'";
            logger.Debug(queryString);

            using (DBProvider dbProvider = new DBProvider())
            {
                dbProvider.ExecuteNonQuery(queryString, out affectedRows);
            }
            
        }

        #region Nuovo visualizzatore

        /// <summary>
        /// Questa funzione restituisce le informazioni di base sul documento specificato
        /// e sui suoi allegati.
        /// </summary>
        /// <param name="idProfile">Il system id del documento richiesto</param>
        /// <param name="docNumber">Il docNumber del documento richiesto</param>
        /// <param name="versionNumber">Il numero della versione del documento richiesto</param>
        /// <returns>L'insieme di informazioni di base del documento richiesto</returns>
        public List<DocsPaVO.documento.BaseInfoDoc> GetBaseInfoForDocument(
            string idProfile,
            string docNumber,
            string versionNumber)
        {
            #region Dichiarazione variabili

            // La lista da restituire
            List<DocsPaVO.documento.BaseInfoDoc> baseInfoDocList = null;
            // Il data set che conterà i risultati della query
            DataSet dataSet;
            // La query da eseguire
            DocsPaUtils.Query query;
            // La stringa SQL da eseguire
            string queryString;
            // Valore utilizzato per  testare se l'esecuzione della query è andata
            // a buon fine
            bool succeded = false;

            #endregion


            // Se idProfile non è specificato viene ricavato
            if (String.IsNullOrEmpty(idProfile))
                idProfile = GetIdProfileFromDocNumber(docNumber);

            // Altrimenti docNumber non è specificato viene ricavato
            if (String.IsNullOrEmpty(docNumber))
                docNumber = GetDocNumberFromIdProfile(idProfile);

            // Prelevamento della query dal querylist
            query = DocsPaUtils.InitQuery.getInstance().getQuery("GET_BASE_INFO_DOC");
            // Impostazione dei parametri
            query.setParam("idProfile", idProfile);
            query.setParam("docNumber", docNumber);

            // Prelevamento della stringa SQL da eseguire
            queryString = query.getSQL();

            // Scrittura nel debugger della query da eseguire
            logger.Debug(queryString);

            // Esecuzione della query
            succeded = ExecuteQuery(out dataSet, queryString);

            // Se l'esecuzione della query è riuscita con successo...
            if (succeded && (dataSet.Tables[0].Rows.Count > 0))
            {
                // ...si crea la lista che conterrà gli oggetti con le informazioni
                // di base sul documento e sui suoi eventuali allegati
                baseInfoDocList = new List<DocsPaVO.documento.BaseInfoDoc>();

                int indexAllegati = 0;

                // ...si procede alla creazione degli oggetti con le informazioni
                // sul documento richiesto e sui suoi eventuali allegati
                // Per ogni riga nel data set...
                foreach (DataRow row in dataSet.Tables[0].Rows)
                {
                    // ...si effettua un'interrogazione alla lista al fine di
                    // individuare un elemento con docNumber pari al docNumber
                    // specificato nella riga attualmente in esame
                    DocsPaVO.documento.BaseInfoDoc temp =
                        baseInfoDocList.Where(e => e.DocNumber == row["DOCNUMBER"].ToString()).FirstOrDefault();

                    string versionLabel = string.Empty;

                    if (String.IsNullOrEmpty(row["ID_DOCUMENTO_PRINCIPALE"].ToString()))
                        versionLabel = row["VERSION_LABEL"].ToString();
                    else
                        versionLabel = FormatCodiceAllegato(++indexAllegati);

                    // Se è stato individuato un elemento...
                    if (temp != null)
                    {
                        logger.Debug(" temp diverso da null");
                        // ...se il docNumber corrisponde a quello passato per parametro...
                        if (row["DOCNUMBER"].ToString() == docNumber)
                        {
                            logger.Debug("row[DOCNUMBER] == docNumber");
                            // ...se il parametro versionNumber è valorizzato...
                            if (!String.IsNullOrEmpty(versionNumber))
                            {
                                logger.Debug(" versionNumber non vuoto");
                                // ...se la riga corrente ha VERSION uguale a quello passato per 
                                // parametro si procede all'aggiornamento
                                if (row["VERSION"].ToString() == versionNumber)
                                {
                                    UpdateBaseInfoDoc(
                                        temp,
                                        row["DOCNUMBER"].ToString(),
                                        row["SYSTEM_ID"].ToString(),
                                        !String.IsNullOrEmpty(row["ID_DOCUMENTO_PRINCIPALE"].ToString()),
                                        row["VERSION"].ToString(),
                                        row["DOCNAME"].ToString(),
                                        row["VAR_NOMEORIGINALE"].ToString(),
                                        row["FILE_SIZE"].ToString(),
                                        row["VAR_PROF_OGGETTO"].ToString(),
                                        row["CHA_TIPO_PROTO"].ToString().ToUpper() != "G",
                                        versionLabel,
                                        row["VERSION_ID"].ToString(),
                                        row["PATH"].ToString());

                                        temp.Firmato = row.Table.Columns.Contains("CHA_FIRMATO") && row["CHA_FIRMATO"] != DBNull.Value ? row["CHA_FIRMATO"].ToString() : "0";
                                }
                            }
                            else
                            {
                                logger.Debug("versionNumber vuoto");
                                // ...altrimenti se VERSION della tupla attuale è maggiore
                                // della versionNumber specificato in temp, si deve effettuare 
                                // l'aggiornamento
                                if (Int32.Parse(row["VERSION"].ToString()) > temp.VersionNumber)
                                    UpdateBaseInfoDoc(
                                      temp,
                                      row["DOCNUMBER"].ToString(),
                                      row["SYSTEM_ID"].ToString(),
                                      !String.IsNullOrEmpty(row["ID_DOCUMENTO_PRINCIPALE"].ToString()),
                                      row["VERSION"].ToString(),
                                      row["DOCNAME"].ToString(),
                                      row["VAR_NOMEORIGINALE"].ToString(),
                                      row["FILE_SIZE"].ToString(),
                                      row["VAR_PROF_OGGETTO"].ToString(),
                                      row["CHA_TIPO_PROTO"].ToString().ToUpper() != "G",
                                      versionLabel,
                                      row["VERSION_ID"].ToString(),
                                      row["PATH"].ToString());
                            }
                        }
                        else
                        {
                            logger.Debug(" row[docnumber] diverso da docNumber");
                            if (Int32.Parse(row["VERSION"].ToString()) > temp.VersionNumber)
                                UpdateBaseInfoDoc(
                                  temp,
                                  row["DOCNUMBER"].ToString(),
                                  row["SYSTEM_ID"].ToString(),
                                  !String.IsNullOrEmpty(row["ID_DOCUMENTO_PRINCIPALE"].ToString()),
                                  row["VERSION"].ToString(),
                                  row["DOCNAME"].ToString(),
                                  row["VAR_NOMEORIGINALE"].ToString(),
                                  row["FILE_SIZE"].ToString(),
                                  row["VAR_PROF_OGGETTO"].ToString(),
                                  row["CHA_TIPO_PROTO"].ToString().ToUpper() != "G",
                                  versionLabel,
                                  row["VERSION_ID"].ToString(),
                                  row["PATH"].ToString());
                        }
                    }
                    else
                    {
                        logger.Debug(" temp null");
                        baseInfoDocList.Add(CreateBaseInfoDoc(
                            row["DOCNUMBER"].ToString(),
                            row["SYSTEM_ID"].ToString(),
                            !String.IsNullOrEmpty(row["ID_DOCUMENTO_PRINCIPALE"].ToString()),
                            row["VERSION"].ToString(),
                            row["DOCNAME"].ToString(),
                            row["VAR_NOMEORIGINALE"].ToString(),
                            row["FILE_SIZE"].ToString(),
                            row["VAR_PROF_OGGETTO"].ToString(),
                            row["CHA_TIPO_PROTO"].ToString().ToUpper() != "G",
                            versionLabel,
                            row["VERSION_ID"].ToString(),
                            row["PATH"].ToString(),
                            row.Table.Columns.Contains("CHA_FIRMATO") && row["CHA_FIRMATO"] != DBNull.Value ? row["CHA_FIRMATO"].ToString() : "0"));
                    }
                }
            }
            else
                // ...altrimenti si lancia un'eccezione per segnalare l'insuccesso
                throw new Exception("Non è stato possibile recuperare le informazioni sul documento.");

            // Restituzione delle informazioni sul documento e
            // sui suoi allegati
            return baseInfoDocList;

        }

        /// <summary>
        /// Funzione per l'aggiornamento dei dati relativi ad un documento
        /// </summary>
        /// <param name="objToUpdate">L'oggetto da aggiornare</param>
        /// <param name="docNumber">Il docNumber</param>
        /// <param name="idProfile">L'id del documento</param>
        /// <param name="isAttachment">True se le informazioni si riferiscono ad un allegato</param>
        /// <param name="versionNumber">Il numero di versione</param>
        /// <param name="docName">Il nome del documento</param>
        /// <param name="fileSize">La dimensione del file</param>
        /// <param name="descrizione">La descrizione del documento</param>
        /// <param name="isProto">True se le informazioni riguardano un protocollo</param>
        /// <param name="versionLabel"></param>
        /// <param name="versionId">L'id associato al numero di versione</param>
        /// <param name="path">Il path del file</param>
        private void UpdateBaseInfoDoc(DocsPaVO.documento.BaseInfoDoc objToUpdate,
            string docNumber,
            string idProfile,
            bool isAttachment,
            string versionNumber,
            string docName,
            string OriginalFileName,
            string fileSize,
            string descritpion,
            bool isProto,
            string versionLabel,
            string versionId,
            string path)
        {
            // Aggiornamento dei dati
            objToUpdate.Name = docName;
            objToUpdate.FileSize = Int32.Parse(fileSize);
            objToUpdate.HaveFile = objToUpdate.FileSize > 0;
            objToUpdate.Description = descritpion;
            objToUpdate.IsProto = isProto;
            objToUpdate.VersionNumber = Int32.Parse(versionNumber);
            objToUpdate.VersionLabel = versionLabel;
            objToUpdate.VersionId = versionId;
            objToUpdate.FileName = path;
            objToUpdate.OriginalFileName = OriginalFileName;
            objToUpdate.IsAttachment = isAttachment;
            if (objToUpdate.HaveFile && objToUpdate.FileName.Contains("\\"))
                objToUpdate.Path = objToUpdate.FileName.Substring(0, objToUpdate.FileName.LastIndexOf("\\"));
            objToUpdate.DocNumber = docNumber;
            objToUpdate.IdProfile = idProfile;
            objToUpdate.IsPecAttachment = objToUpdate.Description.StartsWith("Ricevuta di ritorno delle Mail");
        }

        /// <summary>
        /// Funzione per la creazione di un nuovo oggetto con le informazioni di base su un documento
        /// </summary>
        /// <param name="docNumber"></param>
        /// <param name="isAttachment"></param>
        /// <param name="versionNumber"></param>
        /// <param name="docName"></param>
        /// <param name="fileSize"></param>
        /// <param name="descrizione"></param>
        /// <param name="isProto"></param>
        /// <param name="versionLabel"></param>
        /// <param name="versionId"></param>
        /// <param name="path"></param>
        /// <returns></returns>
        private DocsPaVO.documento.BaseInfoDoc CreateBaseInfoDoc(
            string docNumber,
            string idProfile,
            bool isAttachment,
            string versionNumber,
            string docName,
            string OriginalFileName,
            string fileSize,
            string description,
            bool isProto,
            string versionLabel,
            string versionId,
            string path,
            string firmato)
        {
            // L'oggetto da restituire
            DocsPaVO.documento.BaseInfoDoc baseInfoDoc = new DocsPaVO.documento.BaseInfoDoc();

            // Richiesta di aggiornamento dei dati di baseInfoDoc
            UpdateBaseInfoDoc(baseInfoDoc, docNumber, idProfile, isAttachment, versionNumber, docName, OriginalFileName,
                fileSize, description, isProto, versionLabel, versionId, path);
            baseInfoDoc.Firmato = firmato;

            // Restituzione dell'oggetto creato
            return baseInfoDoc;

        }

        /// <summary>
        /// Funzione per il reperimento dell'idProfile a partire dal docNumber 
        /// </summary>
        /// <param name="docNumber">Il numero di documento di cui recuperare l'id</param>
        /// <returns>L'id del documento corrispondente al docNumber specificato</returns>
        private string GetIdProfileFromDocNumber(string docNumber)
        {
            // Il risultato dell'elaborazione
            string idProfile = String.Empty;

            // Valore utilizzato per determinare se la query è stata eseguita
            // con successo
            bool succeded = false;

            // Il dataset che conterrà i dati restituiti dalla query
            DataSet dataSet;

            // La query da eseguire
            string queryString = String.Format(
                "SELECT p.SYSTEM_ID FROM profile p WHERE p.DOCNUMBER = {0}",
                docNumber);

            // Scrittura nel debugger della query da eseguire
            logger.Debug(queryString);

            // Esecuzione della query
            succeded = ExecuteQuery(out dataSet, queryString);

            // Se la query è stata eseguita con successo e la tabella associata al data set
            // contiene una sola riga...
            if (succeded && dataSet.Tables[0].Rows.Count == 1)
            {
                // ...viene prelevato l'idProfile
                idProfile = dataSet.Tables[0].Rows[0]["SYSTEM_ID"].ToString();

            }
            else

                // ...altrimenti viene sollevata un'eccezione
                throw new Exception("Non è stato possibile recuperare l'id univoco del documento");

            // Restituzione dell'id profile trovato
            return idProfile;

        }

        /// <summary>
        /// Funzione per il reperimento del numero del documento a partire dall'idProfile
        /// </summary>
        /// <param name="idProfile">L'idProfile del documento di cui ricavare il numero</param>
        /// <returns>Il numero associato al documento con idProfile specificato</returns>
        private string GetDocNumberFromIdProfile(string idProfile)
        {
            // Il risultato dell'elaborazione
            string docNumber = String.Empty;

            // Valore utilizzato per determinare se la query è stata eseguita
            // con successo
            bool succeded = false;

            // Il dataset che conterrà i dati restituiti dalla query
            DataSet dataSet;

            // La query da eseguire
            string queryString = String.Format(
                "SELECT p.DOCNUMBER FROM profile p WHERE p.SYSTEM_ID = {0}",
                idProfile);

            // Scrittura nel debugger della query da eseguire
            logger.Debug(queryString);

            // Esecuzione della query
            succeded = ExecuteQuery(out dataSet, queryString);

            // Se la query è stata eseguita con successo e la tabella associata al data set
            // contiene una sola riga...
            if (succeded && dataSet.Tables[0].Rows.Count == 1)
            {
                // ...viene prelevato il docNumber
                docNumber = dataSet.Tables[0].Rows[0]["DOCNUMBER"].ToString();

            }
            else

                // ...altrimenti viene sollevata un'eccezione
                throw new Exception("Non è stato possibile recuperare il numero di documento");

            // Restituzione del docNumber trovato
            return docNumber;

        }

        #endregion

        public int IsDocInADL(string idDoc, string idPeople)
        {
            string queryString;
            string retValue;
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_DOC_IN_ADL");
            q.setParam("idDoc", idDoc);
            q.setParam("idPeople", idPeople);
            queryString = q.getSQL();
            logger.Debug(queryString);
            if (!string.IsNullOrEmpty(idDoc))
            {
                ExecuteScalar(out retValue, queryString);

                if (!string.IsNullOrEmpty(retValue))
                    return 1;
                else
                    return 0;
            }
            else
                return 0;
        }

        /// <summary>
        /// Fascicolazione obbligatoria per i tipi documento (A, P, I, G, R, C)
        /// </summary>
        /// <param name="idAmm"></param>
        /// <param name="infoutente"></param>
        /// <returns></returns>
        public List<DocsPaVO.documento.FascicolazioneTipiDocumento> GetFascicolazioneTipiDocumento(string idAmm, DocsPaVO.utente.InfoUtente infoutente)
        {
            logger.Debug("INIZIO metodo GetFascicolazioneTipiDocumento");
            List<DocsPaVO.documento.FascicolazioneTipiDocumento> list = new List<FascicolazioneTipiDocumento>();
            try
            {
                using (DocsPaDB.DBProvider dbProvider = new DBProvider())
                {
                    DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_DPA_CLASSIFICAZIONE_TIPI_DOC");
                    q.setParam("idAmm", idAmm);

                    string commandText = q.getSQL();
                    logger.Debug(commandText);
                    using (IDataReader reader = dbProvider.ExecuteReader(commandText))
                    {
                        while (reader.Read())
                        {
                            DocsPaVO.documento.FascicolazioneTipiDocumento item = new DocsPaVO.documento.FascicolazioneTipiDocumento();
                            item.IdAmministrazione = reader.GetInt32(reader.GetOrdinal("ID_AMM")).ToString();
                            item.Codice = reader.GetString(reader.GetOrdinal("TIPO_DOC"));
                            item.FascicolazioneObbligatoria = (reader.GetString(reader.GetOrdinal("CHA_FASC_OBBLIGATORIA")) != "0");
                            list.Add(item);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                logger.Error("Errore in GetFascicolazioneTipiDocumento " + ex.Message);
                return null;
            }
            logger.Debug("FINE metodo GetFascicolazioneTipiDocumento");
            return list;
        }

        public bool SetFascicolazioneTipiDocumento(List<DocsPaVO.documento.FascicolazioneTipiDocumento> listTipiDoc, string idAmm, DocsPaVO.utente.InfoUtente infoutente)
        {
            bool result = false;
            try
            {
                List<DocsPaVO.documento.FascicolazioneTipiDocumento> list = GetFascicolazioneTipiDocumento(idAmm, infoutente);
                string commandText;
                int affectedRows;
                if (list != null && list.Count > 0)
                {
                    //Aggiorno i campi esistenti
                    foreach (FascicolazioneTipiDocumento f in listTipiDoc)
                    {
                        DocsPaUtils.Query q2 = DocsPaUtils.InitQuery.getInstance().getQuery("U_DPA_CLASSIFICAZIONE_TIPI_DOC");
                        q2.setParam("idAmm", idAmm);
                        q2.setParam("tipoDoc", f.Codice);
                        q2.setParam("chaFascObbligatoria", f.FascicolazioneObbligatoria ? "1" : "0");
                        commandText = q2.getSQL();
                        logger.Debug(commandText);
                        ExecuteNonQuery(commandText, out affectedRows);
                    }
                }
                else
                {
                    //Inserisco i campi
                    foreach (FascicolazioneTipiDocumento f in listTipiDoc)
                    {
                        DocsPaUtils.Query q2 = DocsPaUtils.InitQuery.getInstance().getQuery("I_DPA_CLASSIFICAZIONE_TIPI_DOC");
                        q2.setParam("idAmm", idAmm);
                        q2.setParam("tipoDoc", f.Codice);
                        q2.setParam("chaFascObbligatoria", f.FascicolazioneObbligatoria ? "1" : "0");
                        commandText = q2.getSQL();
                        logger.Debug(commandText);
                        ExecuteNonQuery(commandText, out affectedRows);
                    }
                }
            }
            catch (Exception ex)
            {
                logger.Error("Errore in SetFascicolazioneTipiDocumento " + ex.Message);
                return false;
            }
            return result;
        }


        /// <summary>
        /// Usato per leggere dal db le etichette dei protocolli (Fabio)
        /// </summary>
        public DocsPaVO.documento.EtichettaInfo[] getLettereDocumento(DocsPaVO.utente.InfoUtente infoutente, string idAmm)
        {
            bool success = false;
            List<DocsPaVO.documento.EtichettaInfo> list = new List<DocsPaVO.documento.EtichettaInfo>();

            using (DocsPaDB.DBProvider dbProvider = new DBProvider())
            {
                DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_LETTERE_DOCUMENTI_ASS");
                q.setParam("idAmministrazione", idAmm);

                string commandText = q.getSQL();
                logger.Debug(commandText);

                using (IDataReader reader = dbProvider.ExecuteReader(commandText))
                {

                    while (reader.Read())
                    {
                        DocsPaVO.documento.EtichettaInfo item = new DocsPaVO.documento.EtichettaInfo();

                        item.IdAmministrazione = reader.GetInt32(reader.GetOrdinal("ID_AMM"));
                        item.Id = reader.GetInt32(reader.GetOrdinal("ID_LETTERADOC")).ToString();
                        item.Codice = reader.GetString(reader.GetOrdinal("CODICE"));
                        item.Descrizione = reader.GetString(reader.GetOrdinal("DESCRIZIONE"));
                        item.Etichetta = reader.GetString(reader.GetOrdinal("ETICHETTA"));

                        list.Add(item);
                        success = true;
                    }
                }

                if (!success)
                {
                    q = DocsPaUtils.InitQuery.getInstance().getQuery("S_LETTERE_DOCUMENTI");
                    commandText = q.getSQL();
                    logger.Debug(commandText);

                    using (IDataReader reader = dbProvider.ExecuteReader(commandText))
                    {
                        while (reader.Read())
                        {
                            DocsPaVO.documento.EtichettaInfo item = new DocsPaVO.documento.EtichettaInfo();
                            item.Id = reader.GetInt32(reader.GetOrdinal("SYSTEM_ID")).ToString();
                            item.Codice = reader.GetString(reader.GetOrdinal("CODICE"));
                            item.Descrizione = reader.GetString(reader.GetOrdinal("DESCRIZIONE"));
                            item.Etichetta = reader.GetString(reader.GetOrdinal("ETICHETTA"));

                            list.Add(item);
                        }
                    }
                }
            }

            return list.ToArray();
        }

        /// <summary>
        /// Usato inserire o fare update di etichette delle amministrazioni (Fabio)
        /// </summary>
        public bool setLettereDocumento(DocsPaVO.utente.InfoUtente infoutente, string idAmm, DocsPaVO.documento.EtichettaInfo[] etichette)
        {
            using (DocsPaDB.DBProvider dbProvider = new DBProvider())
            {
                DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_LETTERE_DOCUMENTI_AMMIN");
                q.setParam("idAmministrazione", idAmm);

                string commandText = q.getSQL();
                logger.Debug(commandText);

                using (IDataReader reader = dbProvider.ExecuteReader(commandText))
                {
                    bool success = reader.Read();
                    string descrizione = null;
                    string id_etichetta = null;
                    string etichetta = null;
                    if (success)
                    {
                        //PROTOCOLLAZIONE PERSONALIZZARA E GIA' PRESENTE, FACCIO UPDATE
                        for (int i = 0; i < etichette.Length; i++)
                        {
                            DocsPaUtils.Query q2 = DocsPaUtils.InitQuery.getInstance().getQuery("UPDATE_LETTERE_DOCUMENTI_AMMIN");
                            descrizione = etichette[i].Descrizione;
                            id_etichetta = (etichette[i].Id).ToString();
                            etichetta = etichette[i].Etichetta;
                            q2.setParam("idAmministrazione", idAmm);
                            q2.setParam("letteradoc", id_etichetta);
                            q2.setParam("descrizione", descrizione);
                            q2.setParam("etichetta", etichetta);
                            int affectedRows;
                            commandText = q2.getSQL();
                            logger.Debug(commandText);
                            ExecuteNonQuery(commandText, out affectedRows);
                        }

                    }
                    else
                    {
                        //PROTOCOLLAZIONE PERSONALIZZATA NON PRESENTE INSERISCO
                        for (int i = 0; i < etichette.Length; i++)
                        {
                            DocsPaUtils.Query q2 = DocsPaUtils.InitQuery.getInstance().getQuery("INSERT_LETTERE_DOCUMENTI_AMMIN");
                            descrizione = etichette[i].Descrizione;
                            id_etichetta = (etichette[i].Id).ToString();
                            etichetta = etichette[i].Etichetta;
                            q2.setParam("idAmministrazione", idAmm);
                            q2.setParam("letteradoc", id_etichetta);
                            q2.setParam("descrizione", descrizione);
                            q2.setParam("etichetta", etichetta);
                            int affectedRows;
                            commandText = q2.getSQL();
                            logger.Debug(commandText);
                            ExecuteNonQuery(commandText, out affectedRows);
                        }


                    }

                }
            }
            return true;
        }

        public bool getIfDocOrFascIsInToDoList(string idUtente, string idTrasmissione)
        {
            bool retValue = false;

            using (DocsPaDB.DBProvider dbProvider = new DocsPaDB.DBProvider())
            {
                DocsPaUtils.Query queryMng = DocsPaUtils.InitQuery.getInstance().getQuery("IS_DOC_OR_FASC_IN_TODOLIST");
                queryMng.setParam("idUtente", idUtente);
                queryMng.setParam("idTrasmissione", idTrasmissione);

                string commandText = queryMng.getSQL();
                System.Diagnostics.Debug.WriteLine("SQL - Documenti - getIfDocOrFascIsInToDoList - QUERY : " + commandText);
                logger.Debug("SQL - Documenti - getIfDocOrFascIsInToDoList - QUERY : " + commandText);
                DataSet ds = new DataSet();
                dbProvider.ExecuteQuery(ds, commandText);

                retValue = (ds.Tables[0].Rows.Count != 0);
            }

            return retValue;
        }

        /// <summary>
        /// Verifica se sono abilitati i mittenti multipli per il protocollo in entrata
        /// </summary>
        /// <returns></returns>
        public static bool isEnableMittentiMultipli
        {
            get
            {
                const string CONFIG_KEY = "ENABLE_MITTENTI_MULTIPLI";

                bool isEnabled;
                bool.TryParse(ConfigurationManager.AppSettings[CONFIG_KEY], out isEnabled);
                return isEnabled;
            }
        }

        public string VerificaDocErrati(string idAmm)
        {
            string retValue = string.Empty;

            using (DocsPaDB.DBProvider dbProvider = new DocsPaDB.DBProvider())
            {
                // calcolo prima i documenti in uscita senza destinatari
                DocsPaUtils.Query queryMng = DocsPaUtils.InitQuery.getInstance().getQuery("VERIFY_DOC_NO_DEST");
                queryMng.setParam("where", "cha_tipo_mitt_dest = 'D'");
                queryMng.setParam("tipoDoc", " AND c.cha_tipo_proto = 'P'");
                queryMng.setParam("idAmm", idAmm);
                string commandText = queryMng.getSQL();
                System.Diagnostics.Debug.WriteLine("SQL - Documenti - VerificaDocErrati - QUERY : " + commandText);
                logger.Debug("SQL - Documenti - VerificaDocErrati - QUERY : " + commandText);

                string result = string.Empty;
                ExecuteScalar(out result, commandText);
                retValue = result + "^";

                // calcolo i documenti in ingresso senza mittente
                queryMng = DocsPaUtils.InitQuery.getInstance().getQuery("VERIFY_DOC_NO_MITT");
                queryMng.setParam("where", "cha_tipo_mitt_dest = 'M'");
                queryMng.setParam("tipoDoc", " AND c.cha_tipo_proto = 'A'");
                queryMng.setParam("idAmm", idAmm);
                commandText = queryMng.getSQL();
                System.Diagnostics.Debug.WriteLine("SQL - Documenti - VerificaDocErrati - QUERY : " + commandText);
                logger.Debug("SQL - Documenti - VerificaDocErrati - QUERY : " + commandText);

                result = string.Empty;
                ExecuteScalar(out result, commandText);
                retValue += result + "^";

                // calcolo i documenti con destinatari in cc nulli
                queryMng = DocsPaUtils.InitQuery.getInstance().getQuery("VERIFY_DOC_NO_CC");
                queryMng.setParam("where", "cha_tipo_mitt_dest = 'C'");
                queryMng.setParam("tipoDoc", "");
                queryMng.setParam("idAmm", idAmm);
                commandText = queryMng.getSQL();
                System.Diagnostics.Debug.WriteLine("SQL - Documenti - VerificaDocErrati - QUERY : " + commandText);
                logger.Debug("SQL - Documenti - VerificaDocErrati - QUERY : " + commandText);

                result = string.Empty;
                ExecuteScalar(out result, commandText);
                retValue += result;
            }
            return retValue;
        }

        public bool IsDocAnnullatoByIdProfile(string idProfile)
        {
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_PROFILE_ANNULLAMENTO_SYSTEM_ID");
            bool result = false;
            q.setParam("systemId", idProfile);
            string sql = q.getSQL();
            logger.Debug(sql);
            DataSet dataSet;
            ExecuteQuery(out dataSet, sql);
            if (dataSet == null || dataSet.Tables[0] == null || dataSet.Tables[0].Rows == null)
                return result;
            if (dataSet.Tables[0].Rows.Count > 0) result = true;

            return result;
        }

        public void UpdateStampeEffettuateProfile(DocsPaVO.utente.InfoUtente infoUtente, string stampe, string idProfile)
        {
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("U_Profile");
            q.setParam("param1", "PRINTS_NUM = '" + stampe + "'");
            q.setParam("param2", "SYSTEM_ID=" + idProfile);
            string queryString = q.getSQL();
            logger.Debug(queryString);
            ExecuteNonQuery(queryString);
        }

        /// <summary>
        /// Verifica se la chiave di configurazione da amministrazione è attiva o meno
        /// </summary>
        /// <returns></returns>
        public bool IndexSecurity()
        {
            bool ret = false;
            try
            {
                string value = DocsPaUtils.Configuration.InitConfigurationKeys.GetValue("0", "BE_INDEX_SECURITY");

                if (!string.IsNullOrEmpty(value) && value.Equals("1"))
                    ret = true;
                else
                    ret = false;

                return ret;
            }
            catch (Exception e)
            {
                return false;
            }
        }

        /// <summary>
        /// Verifica se la chiave di configurazione da amministrazione è attiva o meno
        /// </summary>
        /// <returns></returns>
        public bool IsConfigEnabled()
        {
            string value = DocsPaUtils.Configuration.InitConfigurationKeys.GetValue("0", "BE_CONSOLIDAMENTO");

            if (!string.IsNullOrEmpty(value) && value.Equals("1"))
            {
                return value == "1";
            }
            else
            {
                return false;
            }
        }

        /// <summary>
        /// Restituisce l'ultima nota visibile a tutti nel documento
        /// </summary>
        /// <returns></returns>
        public string GetUltimaNotaVisibileTuttiDocumento(string systemId)
        {
            string retVal = string.Empty;

            using (DocsPaDB.DBProvider dbProvider = new DBProvider())
            {
                DocsPaUtils.Query queryDef = DocsPaUtils.InitQuery.getInstance().getQuery("S_GET_ULTIMA_NOTA_INSERITA_TUTTI");
                queryDef.setParam("tipoOggetto", "D");

                queryDef.setParam("idOggetto", systemId);

                string commandText = queryDef.getSQL();
                logger.Debug(commandText);

                using (IDataReader reader = dbProvider.ExecuteReader(commandText))
                {
                    if (reader.Read())
                        retVal = reader.GetValue(reader.GetOrdinal("TESTO")).ToString();
                }
            }

            return retVal;
        }

        private string tipoContatoreTemplates(DocsPaVO.ProfilazioneDinamica.Templates template)
        {
            Model model = new Model();

            if (template != null && template.ELENCO_OGGETTI != null)
            {

                foreach (DocsPaVO.ProfilazioneDinamica.OggettoCustom oggettoCustom in template.ELENCO_OGGETTI)
                {
                    if (oggettoCustom.DA_VISUALIZZARE_RICERCA.Equals("1"))
                        return oggettoCustom.TIPO_CONTATORE;
                }
            }
            return string.Empty;
        }

        private DocsPaVO.ProfilazioneDinamica.OggettoCustom[] getOggettoCustom(DocsPaVO.ProfilazioneDinamica.Templates template)
        {
            Model model = new Model();
            List<DocsPaVO.ProfilazioneDinamica.OggettoCustom> oggettoCustom = null;

            if (template != null && template.ELENCO_OGGETTI != null)
            {
                nomeDocumento = template.DESCRIZIONE;
                idAmministrazione = template.ID_AMMINISTRAZIONE;
                oggettoCustom = new List<DocsPaVO.ProfilazioneDinamica.OggettoCustom>();
                foreach (DocsPaVO.ProfilazioneDinamica.OggettoCustom oggetto in template.ELENCO_OGGETTI)
                    oggettoCustom.Add(oggetto);

            }

            return oggettoCustom.ToArray();
        }

        /// <summary>
        /// Restituisce l'ultima nota visibile a tutti nel documento
        /// </summary>
        /// <returns></returns>
        public string DocumentoGetCodiciClassifica(string idProfile, DocsPaVO.utente.InfoUtente infoUtente)
        {
            string retVal = string.Empty;

            using (DocsPaDB.DBProvider dbProvider = new DBProvider())
            {
                DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_J_PROJECT__SECURITY4");
                q.setParam("param1", DocsPaDbManagement.Functions.Functions.ToChar("A.DTA_APERTURA", false));
                q.setParam("param2", DocsPaDbManagement.Functions.Functions.ToChar("A.DTA_CHIUSURA", false));
                q.setParam("param3", idProfile);
                q.setParam("param4", infoUtente.idPeople);
                q.setParam("param5", infoUtente.idGruppo);

                string idRuoloPubblico = DocsPaUtils.Configuration.InitConfigurationKeys.GetValue(infoUtente.idAmministrazione, "ENABLE_FASCICOLO_PUBBLICO");
                if (string.IsNullOrEmpty(idRuoloPubblico))
                    idRuoloPubblico = "0";
                q.setParam("idRuoloPubblico", idRuoloPubblico);

                string commandText = q.getSQL();
                logger.Debug(commandText);
                System.Data.DataSet dataSet;
                ExecuteQuery(out dataSet, "PROJECT", commandText);
                if (dataSet.Tables["PROJECT"] != null && dataSet.Tables["PROJECT"].Rows.Count > 0)
                {
                    for (int i = 0; i < dataSet.Tables["PROJECT"].Rows.Count; i++)
                    {
                        retVal += dataSet.Tables["PROJECT"].Rows[i]["VAR_CODICE"].ToString();
                        if (i < dataSet.Tables["PROJECT"].Rows.Count - 1)
                        {
                            retVal += "; ";
                        }
                    }
                }
            }

            return retVal;
        }

        public ArrayList ListaDocumentiExportAsRic(string idGruppo, string idPeople, ArrayList listaDoc, DocsPaVO.filtri.FiltroRicerca[][] objQueryList, bool security, String[] idProfilesList)
        {
            logger.Debug("ListaDocumentiExportAsRic");
            bool daProto = false;
            // int cons = 0;
            bool unionStampeReg = false;
            int maxRisultatiQuery = GetMaxRisultatiQuery(objQueryList);
            string queryFrom = string.Empty;

            // codice per un ulteriore controllo sul campo tipo dovuto alle modifiche apportate dalla ricerca
            // unificata in cui si è sostituito il filtro tipo con i vari filtri (proto_arrivo, proto_partenza,
            // proto_interno, grigio). Visto che è possibile che da qualche parte del codice venga ancora passato
            // il filtro tipo e non questi ultimi, questo pezzo di codice serve proprio ad escludere eventuali
            // errori
            string tipoRicerca = "";
            foreach (DocsPaVO.filtri.FiltroRicerca[] filterArray in objQueryList)
                foreach (DocsPaVO.filtri.FiltroRicerca filterItem in filterArray)
                {
                    if (filterItem.argomento == "TIPO")
                        tipoRicerca = filterItem.valore;
                    if (filterItem.argomento.Equals("PREDISPOSTO"))
                        daProto = Convert.ToBoolean(filterItem.valore);
                    if (filterItem.argomento.Equals("STAMPA_REG") && !filterItem.valore.Equals("false"))
                        if (filterItem.valore.StartsWith("U"))
                            unionStampeReg = true;
                }

            string order = string.Empty;
            string reverseOrder = string.Empty;
            string filters = string.Empty;
            string filters_cons = string.Empty;
            string filters_stampe = string.Empty;

            filters = GetQueryCondDocumenti(idGruppo, idPeople, objQueryList, ref queryFrom, ref order, daProto, unionStampeReg, security);
            if (unionStampeReg)
            {
                string queryFromStampe = ", DPA_STAMPAREGISTRI R";
                filters_stampe = " AND A.DOCNUMBER=R.DOCNUMBER " + GetQueryCondStampaRegistro(objQueryList, ref queryFromStampe);
            }

            // Determina se effettuare la ricerca veloce dei protocolli
            bool ricercaVeloce = IsRicercaProtocolliVeloce(objQueryList);

            #region Ordinamento

            // Recupero dei filtri di ricerca relarivi all'ordinamento
            FiltroRicerca oracleField = objQueryList[0].Where(e => e.argomento == "ORACLE_FIELD_FOR_ORDER").FirstOrDefault();
            FiltroRicerca sqlField = objQueryList[0].Where(e => e.argomento == "SQL_FIELD_FOR_ORDER").FirstOrDefault();
            FiltroRicerca profilationField = objQueryList[0].Where(e => e.argomento == "PROFILATION_FIELD_FOR_ORDER").FirstOrDefault();
            FiltroRicerca orderDirection = objQueryList[0].Where(e => e.argomento == "ORDER_DIRECTION").FirstOrDefault();

            if (orderDirection == null)
            {
                orderDirection = new FiltroRicerca()
                {
                    argomento = "ORDER_DIRECTION",
                    valore = "DESC"

                };

            }
            // Function da utilizzare per estrarre i valori del campo profilato da utilizzare per l'ordinamento
            String extractFieldValue = String.Empty;
            String extractFieldValue2 = String.Empty;

            if (dbType == "SQL")
            {
                // DB SQL Server
                // Se bisogna ordinare per campo custom...
                if (profilationField != null)
                {
                    // ...recupero del dettaglio dell'oggetto custom
                    OggettoCustom obj = new Model().getOggettoById(profilationField.valore);

                    if (obj.TIPO.DESCRIZIONE_TIPO.ToUpper() == "CONTATORE")
                        // ...viene preparata la funzione per estrarre il valore del campo profilato
                        extractFieldValue = String.Format(", Convert(int, @dbuser@.getValCampoProfDoc(A.DOCNUMBER, {0})) AS CUSTOM_FIELD", profilationField.valore);
                    else
                        // ...viene preparata la funzione per estrarre il valore del campo profilato
                        extractFieldValue = String.Format(", @dbuser@.getValCampoProfDoc(A.DOCNUMBER, {0}) AS CUSTOM_FIELD", profilationField.valore);

                    // ...viene preparato il filtro per ordinamento e per l'ordinamento inverso
                    order = String.Format("CUSTOM_FIELD {0}", orderDirection.valore);
                    reverseOrder = String.Format("CUSTOM_FIELD {0}", orderDirection.valore == "ASC" ? "DESC" : "ASC");
                }
                else
                {
                    // Altrimenti se è valorizzato il campo da utilizzare per l'ordinamento...
                    if (sqlField != null)
                    {
                        // ...creazione di filtro e impostazione dell'ordine diretto ed inverso
                        extractFieldValue = String.Format(", {0} AS ORDER_STANDARD", sqlField.valore);
                        order = String.Format("ORDER_STANDARD {0} , a.SYSTEM_ID desc", orderDirection.valore);
                        reverseOrder = String.Format("ORDER_STANDARD {0} , a.SYSTEM_ID desc", orderDirection.valore == "ASC" ? "DESC" : "ASC");
                    }
                    else
                    {
                        // Altrimenti viene creato il filtro standard
                        extractFieldValue = String.Empty;
                        order = String.Format("A.DATA {0}, A.SYSTEM_ID {0}", orderDirection.valore);
                        reverseOrder = String.Format("A.DATA {0}, A.SYSTEM_ID {0}", orderDirection.valore == "ASC" ? "DESC" : "ASC");
                    }
                }

            }
            else
            {
                // DB ORACLE
                // Se bisogna ordinare per campo custom...
                if (profilationField != null)
                {
                    // ...recupero del dettaglio dell'oggetto custom
                    OggettoCustom obj = new Model().getOggettoById(profilationField.valore);

                    if (obj.TIPO.DESCRIZIONE_TIPO.ToUpper() == "CONTATORE")
                    {
                        // ...viene preparata la funzione per estrarre il valore del campo profilato
                        extractFieldValue = String.Format(", to_number(getValCampoProfDoc(A.DOCNUMBER, {0}))", profilationField.valore);
                        extractFieldValue2 = String.Format(" to_number(getValCampoProfDoc(A.DOCNUMBER, {0}))", profilationField.valore);
                    }
                    else
                    {
                        // ...viene preparata la funzione per estrarre il valore del campo profilato
                        extractFieldValue = String.Format(", getValCampoProfDoc(A.DOCNUMBER, {0})", profilationField.valore);
                        extractFieldValue2 = String.Format(" getValCampoProfDoc(A.DOCNUMBER, {0})", profilationField.valore);
                    }

                    // ...viene preparato il filtro per ordinamento e per l'ordinamento inverso
                    // order = String.Format("getValCampoProfDoc(A.DOCNUMBER, {0}) {1}", profilationField.valore, orderDirection.valore);
                    order = String.Format("{0} {1}", extractFieldValue2, orderDirection.valore);


                    reverseOrder = String.Empty;
                }
                else
                {
                    // Altrimenti se è valorizzato il campo da utilizzare per l'ordinamento...
                    if (oracleField != null)
                    {
                        // ...creazione di filtro e impostazione dell'ordine diretto ed inverso
                        extractFieldValue = String.Empty;
                        order = String.Format("{0} {1}", oracleField.valore, orderDirection.valore);
                        reverseOrder = String.Empty;
                    }
                    else
                    {
                        // Altrimenti viene creato il filtro standard
                        extractFieldValue = String.Empty;
                        //Nel caso non ho le griglie custum ma ho una tipologia con un campo profilato
                        FiltroRicerca contatoreNoCustom = objQueryList[0].Where(e => e.argomento == "CONTATORE_GRIGLIE_NO_CUSTOM").FirstOrDefault();
                        if (contatoreNoCustom != null)
                        {
                            order = String.Format("TO_NUMBER(getcontatoredocordinamento (a.system_id, 'R')) {0}", orderDirection.valore);
                        }
                        else
                        {
                            order = String.Format("NVL(A.DTA_PROTO,A.CREATION_TIME) {0}", orderDirection.valore);
                        }

                        reverseOrder = String.Empty;
                    }
                }
            }

            #endregion



            if (order == string.Empty)
            {
                string _dbType = System.Configuration.ConfigurationManager.AppSettings["DBType"].ToUpper();
                if (_dbType.ToUpper().Equals("SQL"))
                {
                    order = "A.DATA DESC, A.SYSTEM_ID DESC";
                    reverseOrder = "A.DATA ASC, A.SYSTEM_ID ASC";
                }
                else
                {
                    order = "nvl(A.DTA_PROTO,A.CREATION_TIME) DESC";
                    reverseOrder = "nvl(A.DTA_PROTO,A.CREATION_TIME) ASC";
                }
            }

            if (reverseOrder == string.Empty)
                reverseOrder = "A.SYSTEM_ID ASC";


            // Se siamo su SQL_SERVER e si deve ordinare per VAR_PROF_OGGETTO, si effettua una sostiuzione con
            // VAR_DESC_OGGETTO
            if (dbType == "SQL" && order.Contains("VAR_PROF_OGGETTO"))
            {
                order = order.Replace("VAR_PROF_OGGETTO", "VAR_DESC_OGGETTO");
                reverseOrder = reverseOrder.Replace("VAR_PROF_OGGETTO", "VAR_DESC_OGGETTO");
            }

            if (dbType == "ORACLE")
            {
                if (order.Equals("UPPER(TRIM(CHA_TIPO_PROTO)) DESC") || order.Equals("UPPER(TRIM(CHA_TIPO_PROTO)) ASC") || order.Equals("UPPER(TRIM(VAR_PROF_OGGETTO)) ASC") || order.Equals("UPPER(TRIM(VAR_PROF_OGGETTO)) DESC"))
                {
                    order += ", a.system_id DESC";
                }
            }


            ListaDocPagingExportAsRic(idGruppo, idPeople, listaDoc,
                                            ricercaVeloce,
                                            maxRisultatiQuery,
                                            queryFrom,
                                            filters,
                                            order,
                                            reverseOrder,
                                            security,
                                            unionStampeReg,
                                            filters_stampe,
                                            extractFieldValue, idProfilesList);

            return listaDoc;
        }

        /// <summary>
        /// Ricerca documenti
        /// </summary>
        /// <param name="idGruppo"></param>
        /// <param name="idPeople"></param>
        /// <param name="listaDoc"></param>
        /// <param name="ricercaVeloce"></param>
        /// <param name="maxRisultatiQuery"></param>
        /// <param name="filters"></param>
        /// <param name="order"></param>
        /// <param name="numPage"></param>
        /// <param name="numTotPage"></param>
        /// <param name="nRec"></param>
        /// <param name="comingPopUp"></param>
        /// <returns></returns>
        private void ListaDocPagingExportAsRic(string idGruppo,
                                    string idPeople,
                                    ArrayList listaDoc,
                                    bool ricercaVeloce,
                                    int maxRisultatiQuery,
                                    string fromTables,
                                    string filters,
                                    string orderCriteria,
                                    string reverseOrderCriteria,
                                    bool security,
                                    bool unionStampeReg,
                                    string filters_stampe,
                                    String extractFieldValue, String[] idProfilesList)
        {
            logger.Debug("ListaDocPaging");


            string queryName = string.Empty;
            string verSecurity = " A.SYSTEM_ID = A.SYSTEM_ID ";
            if (!ricercaVeloce)
                queryName = "S_RIC_DOC_EXPORT";
            else
                queryName = "S_RIC_DOC_VELOCE_EXPORT";

            DocsPaUtils.Query queryDef = DocsPaUtils.InitQuery.getInstance().getQuery(queryName);

            // Parametri specifici per query sqlserver
            //     queryDef.setParam("pageSize", "");
            //    queryDef.setParam("totalRows", "");
            queryDef.setParam("reverseOrder", reverseOrderCriteria);

            // Parametri specifici per query oracle
            string preferedIndex = string.Empty;
            if (!(filters.IndexOf("A.VAR_PROF_OGGETTO") > -1 ||
                filters.IndexOf("G.VAR_DESC_CORR") > -1))
            // Impostazione indice da utilizzare
            {
                if (filters.ToUpper().IndexOf("NVL(A.DTA_PROTO") > -1)
                    // preferedIndex = "/*+index (a indx_profile_data )*/";
                    preferedIndex = " ";
                else
                    if (filters.IndexOf("A.CREATION_") > -1)
                        preferedIndex = "/*+index (a)*/";   // "/*+index (a indx_profile_time)*/";
                    else if (filters.IndexOf("A.DTA_PROTO") > -1)
                        preferedIndex = "/*+index (a indx_profile6)*/";
            }
            string idAmm = "0";
            if (!string.IsNullOrEmpty(idPeople))
            {
                DocsPaDB.Query_DocsPAWS.Utenti u = new Utenti();
                idAmm = u.GetIdAmm(idPeople);
            }
            string idRuoloPubblico = DocsPaUtils.Configuration.InitConfigurationKeys.GetValue(idAmm, "ENABLE_FASCICOLO_PUBBLICO");
            if (string.IsNullOrEmpty(idRuoloPubblico))
                idRuoloPubblico = "0";
            if (security)
            {
                bool IS_ARCHIVISTA_DEPOSITO;
                DocsPaDB.Query_DocsPAWS.Utenti ut = new Utenti();
                IS_ARCHIVISTA_DEPOSITO = ut.isUtArchivistaDeposito(idPeople, idGruppo);
                if (filters.ToUpper().IndexOf("AND id_documento_principale IS NOT NULL".ToUpper()) > -1 ||
                        (filters.IndexOf("NOT A.ID_DOCUMENTO_PRINCIPALE IS NULL") > -1) ||
                        IS_ARCHIVISTA_DEPOSITO)
                {
                    if (dbType.ToUpper() == "SQL")
                        verSecurity = "(@dbuser@.checkSecurityDocumento(A.SYSTEM_ID, @idPeople@, @idGruppo@, @idRuoloPubblico@,'D') > 0)";
                    else
                        verSecurity = "(checkSecurityDocumento(A.SYSTEM_ID, @idPeople@, @idGruppo@, @idRuoloPubblico@,'D') > 0)";
                }
                else
                {
                    if (IndexSecurity())
                        verSecurity = " EXISTS (select /*+INDEX(e) */  'x' from security e where a.system_id=e.thing and e.PERSONORGROUP in (@idPeople@, @idGruppo@, @idRuoloPubblico@) and e.ACCESSRIGHTS>0) ";
                    else
                        verSecurity = " EXISTS (select  'x' from security e where a.system_id=e.thing and e.PERSONORGROUP in (@idPeople@, @idGruppo@, @idRuoloPubblico@) and e.ACCESSRIGHTS>0) ";
                }
            }

            if (verSecurity == string.Empty)
                verSecurity = " A.SYSTEM_ID = A.SYSTEM_ID ";

            queryDef.setParam("security", verSecurity);
            queryDef.setParam("index", preferedIndex);
            queryDef.setParam("rowCount", maxRisultatiQuery.ToString());

            // Parametri validi per tutte le query
            queryDef.setParam("idGruppo", idGruppo);
            queryDef.setParam("idPeople", idPeople);
            queryDef.setParam("filters", filters);
            queryDef.setParam("idRuoloPubblico", idRuoloPubblico);
            // Parametro contentente le tabelle addizionali da aggiungere alla query
            queryDef.setParam("from", fromTables);

            // Parametri per l'impostazione dell'ordinamento
            queryDef.setParam("order", orderCriteria);

            // Impostazione del valore per l'estrazione del valore per l'ordinamento
            queryDef.setParam("customFieldFilter", extractFieldValue);

            // per SQL
            queryDef.setParam("dbuser", getUserDB());

            queryDef.setParam("filters", filters);
            queryDef.setParam("from", fromTables);

            string unionStampe = string.Empty;
            if (unionStampeReg)
            {
                unionStampe += " UNION ";
                if (dbType.ToUpper().Equals("SQL"))
                {
                    unionStampe += "SELECT" +
                    " A.SYSTEM_ID, A.DOCNUMBER, A.DTA_ANNULLA, A.VAR_PROF_OGGETTO AS VAR_DESC_OGGETTO, A.ID_REGISTRO," +
                    "A.CHA_TIPO_PROTO, A.CHA_EVIDENZA, A.NUM_ANNO_PROTO, ISNULL(A.DTA_PROTO,A.CREATION_TIME) AS DATA," +
                    "convert(nvarchar (10), A.CREATION_TIME, 103) AS CREATION_DATE," +
                    "A.NUM_PROTO, A.VAR_SEGNATURA, convert(nvarchar (10), A.DTA_PROTO, 103) AS DTA_PROTO, " +
                    getUserDB() + ".getchaimg(A.DOCNUMBER) AS CHA_IMG , A.CHA_PRIVATO, A.CHA_PERSONALE, " + getUserDB() + ".getInADL(A.SYSTEM_ID,'D'," + idGruppo + "," + idPeople + ") AS IN_ADL, " +
                    "A.ID_DOCUMENTO_PRINCIPALE," + getUserDB() + ".getInConservazione(A.SYSTEM_ID, null,'D'," + idPeople + "," + idGruppo + ") AS IN_CONSERVAZIONE, A.CHA_IN_ARCHIVIO," +
                    "a.id_tipo_atto as ID_TIPO_ATTO, ta.var_desc_atto as DESC_TIPO_ATTO, " +
                    getUserDB() + ".getPeopleUserId (a.AUTHOR) as AUTHOR, a.prot_tit as PROT_TIT," +
                    getUserDB() + ".getchafirmato(A.DOCNUMBER) as CHA_FIRMATO," +
                    getUserDB() + ".GetContatoreDoc(a.system_id, '" + tipo_contatore + "') as CONTATORE," +
                    getUserDB() + ".getContatoreDocOrdinamento(a.system_id, '" + tipo_contatore + "') as contatore_ordinamento " +
                    "@customFieldFilter@" +
                    " FROM DPA_STAMPAREGISTRI R, PROFILE a " +
                    "LEFT JOIN dpa_tipo_atto ta on a.id_tipo_atto = ta.system_id " +
                    "WHERE (" + this.getUserDB() + ".checkSecurityDocumento(A.SYSTEM_ID, " + idPeople + ", " + idGruppo + ", " + idRuoloPubblico + ",'D') > 0) " +
                    filters_stampe;
                }
                else
                {
                    unionStampe += "SELECT ROW_NUMBER() OVER(ORDER BY nvl(DTA_PROTO,CREATION_DATE) DESC) AS RN," +
                    "A.SYSTEM_ID, A.DOCNUMBER, A.DTA_ANNULLA, A.VAR_PROF_OGGETTO AS VAR_DESC_OGGETTO," +
                    "A.ID_REGISTRO, A.CHA_TIPO_PROTO, A.CHA_EVIDENZA, A.NUM_ANNO_PROTO," +
                    "nvl(A.DTA_PROTO,A.CREATION_TIME) AS DATA," +
                    "to_char(A.CREATION_TIME,'dd/mm/yyyy') AS CREATION_DATE," +
                    "A.NUM_PROTO, A.VAR_SEGNATURA, to_char(A.DTA_PROTO,'dd/mm/yyyy')  AS DTA_PROTO," +
                    "A.CHA_PRIVATO, A.CHA_PERSONALE, " +
                    "A.ID_DOCUMENTO_PRINCIPALE, A.CHA_IN_ARCHIVIO," +
                    "a.id_tipo_atto as ID_TIPO_ATTO, ta.var_desc_atto as DESC_TIPO_ATTO, " +
                    "getPeopleUserId (a.AUTHOR) as AUTHOR, a.prot_tit as PROT_TIT " +
                        //"getchafirmato(A.DOCNUMBER) as CHA_FIRMATO " +
                    "@customFieldFilter@" +
                    " FROM DPA_STAMPAREGISTRI R, PROFILE a " +
                    "LEFT JOIN dpa_tipo_atto ta on a.id_tipo_atto = ta.system_id " +
                    "WHERE (checkSecurityDocumento(A.SYSTEM_ID, " + idPeople + ", " + idGruppo + ", " + idRuoloPubblico + ",'D') > 0) " +
                    filters_stampe;

                }
            }
            queryDef.setParam("unionStampe", unionStampe);

            // Se è una stampa registri viene rieseguita la sostituzione della function per l'estrazione
            // del valore assunto da un campo profilato
            if (unionStampeReg)
                queryDef.setParam("customFieldFilter", extractFieldValue);

            if (ricercaVeloce)
                queryDef.setParam("dataInizioAnno", "01/01/" + DateTime.Now.Year.ToString() + " 00:00:00");

            if (dbType.ToUpper().Equals("ORACLE"))
            {
                if (!string.IsNullOrEmpty(tipo_contatore))
                {
                    queryDef.setParam("tipo_doc_cond", " , GetContatoreDoc(a.system_id, @tipo_doc@) as CONTATORE, getContatoreDocOrdinamento(a.system_id, @tipo_doc@) as contatore_ordinamento ");
                    queryDef.setParam("tipo_doc", "'" + tipo_contatore + "'");
                }
                else
                {
                    queryDef.setParam("tipo_doc_cond", "");
                    queryDef.setParam("tipo_doc", "'" + tipo_contatore + "'");
                }
            }
            else
            {
                if (!string.IsNullOrEmpty(tipo_contatore))
                    queryDef.setParam("tipo_doc", "'" + tipo_contatore + "'");
                else
                    queryDef.setParam("tipo_doc", "'" + tipo_contatore + "'");
            }

            queryDef.setParam("searchValueCustom", string.Empty);

            string exportDoc = string.Empty;

            // Se la lista dei system id è valorizzata, viene aggiunta un filtro dui system id
            if (idProfilesList != null &&
                idProfilesList.Length > 0)
            {
                int i = 0;
                exportDoc += " AND ( A.SYSTEM_ID IN(";
                foreach (string id in idProfilesList)
                {
                    exportDoc += id;
                    if (i < idProfilesList.Length - 1)
                    {
                        if (i % 998 == 0 && i > 0)
                        {
                            exportDoc += ") OR A.SYSTEM_ID IN (";
                        }
                        else
                        {
                            exportDoc += ", ";
                        }
                    }
                    else
                    {
                        exportDoc += ")";
                    }
                    i++;
                }
                exportDoc += ")";
            }

            queryDef.setParam("doc", exportDoc);



            string commandText = queryDef.getSQL();

            logger.Debug(commandText);

            // Caricamento oggetti "InfoDocumento"
            AppendListaDocumentiPagingExportAsRicOrder(listaDoc, commandText, true);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="listaDoc"></param>
        /// <param name="query"></param>
        /// <param name="corr"></param>
        private void AppendListaDocumentiPagingExportAsRicOrder(ArrayList listaDoc, string query, bool corr)
        {
            DataSet dataSet;
            if (ExecuteQuery(out dataSet, "DOCUMENTI", query))
            {
                SetTableCorrispondenti(dataSet);

                foreach (DataRow dataRow in dataSet.Tables["DOCUMENTI"].Rows)
                    listaDoc.Add(GetDatiDocumentoExportRicOrder(dataSet, dataRow, corr));

                dataSet.Dispose();

                registri.Clear();
            }
            else
            {
                logger.Debug("Errore nell'esecuzione della query in 'AppendListaDocumentiPaging'");

                throw new ApplicationException("Errore nell'esecuzione della query in 'AppendListaDocumentiPaging'");
            }
        }

        public DocsPaVO.documento.InfoDocumento GetDatiDocumentoExportRicOrder(DataSet dataSet, DataRow dataRow, bool corr)
        {
            logger.Debug("getDatiDocumento");
            DocsPaVO.documento.InfoDocumento infoDoc = new DocsPaVO.documento.InfoDocumento();
            if (dataRow.Table.Columns.Contains("numSerie") && dataRow["numSerie"] != null)
            {
                infoDoc.numSerie = dataRow["numSerie"].ToString();
            }
            infoDoc.idProfile = dataRow["SYSTEM_ID"].ToString();
            infoDoc.docNumber = dataRow["DOCNUMBER"].ToString();
            infoDoc.tipoProto = dataRow["CHA_TIPO_PROTO"].ToString();
            logger.Debug("Aggiunto tipo proto " + dataRow["CHA_TIPO_PROTO"].ToString());
            if (dataRow["ID_REGISTRO"] != null)
            {
                infoDoc.idRegistro = dataRow["ID_REGISTRO"].ToString();
                infoDoc.codRegistro = GetCodiceRegistro(infoDoc.idRegistro);
            }
            infoDoc.dataApertura = dataRow["CREATION_DATE"].ToString();
            infoDoc.oggetto = dataRow["VAR_DESC_OGGETTO"].ToString();
            infoDoc.oggetto = infoDoc.oggetto.Replace("<", "&lt;");
            infoDoc.oggetto = infoDoc.oggetto.Replace(">", "&gt;");

            if (dataRow.Table.Columns.Contains("AUTHOR") && dataRow["AUTHOR"] != DBNull.Value)
            {
                infoDoc.autore = dataRow["AUTHOR"].ToString();
            }

            if (dataRow.Table.Columns.Contains("VAR_NOTE_CESTINO") && dataRow["VAR_NOTE_CESTINO"] != DBNull.Value)
            {
                infoDoc.noteCestino = dataRow["VAR_NOTE_CESTINO"].ToString();
            }

            if (dataRow["CHA_EVIDENZA"] != null)
                infoDoc.evidenza = dataRow["CHA_EVIDENZA"].ToString();

            if (dataRow.Table.Columns.Contains("CHA_PRIVATO") && dataRow["CHA_PRIVATO"] != DBNull.Value)
                infoDoc.privato = dataRow["CHA_PRIVATO"].ToString();

            if (dataRow.Table.Columns.Contains("CHA_PERSONALE") && dataRow["CHA_PERSONALE"] != DBNull.Value)
                infoDoc.personale = dataRow["CHA_PERSONALE"].ToString();

            if (infoDoc == null)
            {
                logger.Debug("Infodoc null");
            }
            else
            {
                logger.Debug("Infodoc pieno");
            }

            infoDoc = GetProtoData(dataSet, dataRow, infoDoc, corr);

            infoDoc.acquisitaImmagine = dataRow["CHA_IMG"].ToString();

            // Data ultima archiviazione del documento in un fascicolo cartaceo
            if (dataRow.Table.Columns.Contains("DATA_ARCHIVIAZIONE"))
            {
                if (dataRow["DATA_ARCHIVIAZIONE"] != DBNull.Value)
                {
                    DateTime dataArchiviazione;
                    if (DateTime.TryParse(dataRow["DATA_ARCHIVIAZIONE"].ToString(), out dataArchiviazione))
                    {
                        infoDoc.dataArchiviazione = dataArchiviazione.ToString("dd/MM/yyyy");
                    }
                }
            }
            //custom per ADL Info
            if (dataRow.Table.Columns.Contains("IN_ADL"))
            {
                if (dataRow["IN_ADL"] != DBNull.Value)
                {
                    infoDoc.inADL = dataRow["IN_ADL"].ToString();
                }
            }

            if (dataRow.Table.Columns.Contains("IN_CONSERVAZIONE"))
            {
                if (dataRow["IN_CONSERVAZIONE"] != DBNull.Value)
                {
                    infoDoc.inConservazione = dataRow["IN_CONSERVAZIONE"].ToString();
                }
            }

            if (dataRow.Table.Columns.Contains("CHA_IN_ARCHIVIO"))
            {
                if (dataRow["CHA_IN_ARCHIVIO"] != DBNull.Value)
                {
                    infoDoc.inArchivio = dataRow["CHA_IN_ARCHIVIO"].ToString();
                }
            }

            if (dataRow.Table.Columns.Contains("ID_TIPO_ATTO"))
            {
                if (dataRow["ID_TIPO_ATTO"] != DBNull.Value)
                {
                    infoDoc.idTipoAtto = dataRow["ID_TIPO_ATTO"].ToString();
                }
                else
                {
                    infoDoc.idTipoAtto = "";
                }
            }

            if (dataRow.Table.Columns.Contains("DESC_TIPO_ATTO") && dataRow["DESC_TIPO_ATTO"] != DBNull.Value)
                infoDoc.tipoAtto = dataRow["DESC_TIPO_ATTO"].ToString();

            if (dataRow.Table.Columns.Contains("isRimovibile"))
            {
                if (dataRow["isRimovibile"] != DBNull.Value)
                {
                    infoDoc.isRimovibile = dataRow["isRimovibile"].ToString();
                }
                else
                {
                    infoDoc.isRimovibile = "";
                }
            }
            if (dataRow["ID_DOCUMENTO_PRINCIPALE"] != DBNull.Value)
            {
                infoDoc.allegato = (Convert.ToInt32(dataRow["ID_DOCUMENTO_PRINCIPALE"]) > 0);
            }

            if (dataRow.Table.Columns.Contains("CHA_FIRMATO"))
            {
                if (dataRow["CHA_FIRMATO"] != DBNull.Value)
                {
                    infoDoc.cha_firmato = dataRow["CHA_FIRMATO"].ToString();
                }
            }

            //MODIFICA DEL 20/05/2009
            if (dataRow.Table.Columns.Contains("CONTATORE"))
            {

                infoDoc.contatore = dataRow["CONTATORE"].ToString();

            }
            //FINE MODIIFCA DEL 20/05/2009

            //Protocollo titolario
            if (dataRow.Table.Columns.Contains("PROT_TIT"))
            {
                infoDoc.protocolloTitolario = dataRow["PROT_TIT"].ToString();
            }

            if (oggettoCUstom != null
                && oggettoCUstom.Length > 0
                && !string.IsNullOrEmpty(nomeDocumento)
                && !string.IsNullOrEmpty(idAmministrazione)
                && oggettoCustomVisibile)
            {
                int i = 26;
                foreach (DocsPaVO.ProfilazioneDinamica.OggettoCustom oggetto in oggettoCUstom)
                {
                    DocsPaVO.documento.InfoDocumento.CampoProfiloInfoDocumento campoProfilo = new DocsPaVO.documento.InfoDocumento.CampoProfiloInfoDocumento();
                    campoProfilo.NomeCampo = oggetto.DESCRIZIONE;
                    campoProfilo.ValoreCampo = dataRow[i].ToString();
                    infoDoc.CampiProfilati.Add(campoProfilo);
                    i++;
                }
            }

            //Aggiunta nota ultima nota visibile a tutti
            infoDoc.ultimaNota = GetUltimaNotaVisibileTuttiDocumento(infoDoc.idProfile);

            string mittDest = string.Empty;

            if (dataRow.Table.Columns.Contains("MITT_DEST"))
            {

                mittDest = dataRow["MITT_DEST"].ToString();

            }

            infoDoc.mittDest.Add(mittDest);

            return infoDoc;
        }

        public ArrayList ListaDocumentiPagingCustom(DocsPaVO.utente.InfoUtente infoUtente, ArrayList listaDoc, DocsPaVO.filtri.FiltroRicerca[][] objQueryList, int numPage, int pageSize, bool security, out int numTotPage, out int nRec, bool getIdProfilesList, bool export, bool gridPersonalization, Field[] visibleFieldsTemplate, String[] documentsSystemId, out List<SearchResultInfo> idProfilesList, bool stampaReg, bool isRicercaFullText, ArrayList fullTextResult)
        {
            logger.Debug("ListaDocumentiPagingCustom");
            bool daProto = false;
            bool unionStampeReg = false;

            // Ottimizzazione query ricerca semplice NI
            bool simpleSearch = false;
            int maxRisultatiQuery = GetMaxRisultatiQuery(objQueryList);
            string queryFrom = string.Empty;
            string filtro_conservazione = string.Empty;

            //
            // Mev CS 1.4 - Esibizione
            string filtro_cons_esib = string.Empty;
            // End Mev CS 1.4
            //

            // INTEGRAZIONE PITRE-PARER
            string filtro_versamento = string.Empty;

            // Ricerca FullText
            string filters_FullText = string.Empty;

            // codice per un ulteriore controllo sul campo tipo dovuto alle modifiche apportate dalla ricerca
            // unificata in cui si è sostituito il filtro tipo con i vari filtri (proto_arrivo, proto_partenza,
            // proto_interno, grigio). Visto che è possibile che da qualche parte del codice venga ancora passato
            // il filtro tipo e non questi ultimi, questo pezzo di codice serve proprio ad escludere eventuali
            // errori
            string tipoRicerca = "";
            // PEC 4 Requisito 3: ricerca documenti spediti
            // Serve una colonna per il conto delle ricevute, che conta un determinato tipo di ricevute a seconda del filtro utilizzato.
            // l'unico modo è modificare la query, ed estrarre un parametro dai filtri ricerca, e quindi passarlo.
            string tipoRicevutaInteroperante = "";
            foreach (DocsPaVO.filtri.FiltroRicerca[] filterArray in objQueryList)
            {
                foreach (DocsPaVO.filtri.FiltroRicerca filterItem in filterArray)
                {
                    if (filterItem.argomento == "TIPO")
                        tipoRicerca = filterItem.valore;
                    if (filterItem.argomento.Equals("PREDISPOSTO"))
                        daProto = Convert.ToBoolean(filterItem.valore);
                    if (filterItem.argomento.Equals("STAMPA_REG") && !filterItem.valore.Equals("false"))
                        if (filterItem.valore.StartsWith("U"))
                            unionStampeReg = true;
                    if (filterItem.argomento.Equals("DOC_SPEDITI"))
                        tipoRicevutaInteroperante = filterItem.valore;

                    if (filterItem.argomento.Equals("IN_CONSERVAZIONE"))
                    {
                        filtro_conservazione = filterItem.valore;
                    }
                    if (filterItem.argomento.Equals("SEARCH_DOCUMENT_SIMPLE"))
                    {
                        simpleSearch = true;
                    }
                    //
                    // MEV CS 1.4 - Esibizione
                    if (filterItem.argomento.Equals("IN_CONSERVAZIONE_ESIB"))
                    {
                        filtro_cons_esib = filterItem.valore;
                    }
                    // End MEV CS 1.4
                    //
                    // INTEGRAZIONE PITRE-PARER
                    if (filterItem.argomento.Equals("STATO_CONSERVAZIONE"))
                    {
                        filtro_versamento = filterItem.valore;
                    }

                }
            }

            string order = string.Empty;
            string reverseOrder = string.Empty;
            string filters = string.Empty;
            string filters_cons = string.Empty;
            string filters_stampe = string.Empty;
            string queryFromStampe = string.Empty;

            if (stampaReg || unionStampeReg)
            {
                queryFromStampe = ", DPA_STAMPAREGISTRI R";
                if (tipoRicerca.Equals("C"))
                    queryFromStampe = ", DPA_STAMPA_REPERTORI R";
                filters_stampe = " AND A.DOCNUMBER=R.DOCNUMBER " + GetQueryCondStampaRegistro(objQueryList, ref queryFromStampe);
            }
            else
            {
                filters = GetQueryCondDocumenti(infoUtente.idGruppo, infoUtente.idPeople, objQueryList, ref queryFrom, ref order, daProto, unionStampeReg, security);
            }

            if (unionStampeReg)
            {
                filters = GetQueryCondDocumenti(infoUtente.idGruppo, infoUtente.idPeople, objQueryList, ref queryFrom, ref order, daProto, unionStampeReg, security);
            }

            //FiltroRicerca simple_search = objQueryList[0].Where(e => e.argomento == "SEARCH_DOCUMENT_SIMPLE").FirstOrDefault();

            //if (simple_search != null)
            //{
            //    queryFromStampe += " left join dpa_doc_arrivo_par dp  on dp.ID_PROFILE = a.SYSTEM_ID left join dpa_corr_globali sim on sim.SYSTEM_ID = dp.ID_MITT_DEST";
            //}


            // Determina se effettuare la ricerca veloce dei protocolli
            bool ricercaVeloce = IsRicercaProtocolliVeloce(objQueryList);

            //Valori campi custom
            string valoriCustom = string.Empty;

            if (visibleFieldsTemplate != null && visibleFieldsTemplate.Length > 0)
            {
                foreach (Field d in visibleFieldsTemplate)
                {
                    if (dbType == "SQL")
                    {
                        valoriCustom = valoriCustom + ", " + getUserDB() + ".getvalcampoprofdoc (docnumber, " + d.CustomObjectId.ToString() + ") AS A" + d.CustomObjectId.ToString();
                    }
                    else
                    {
                        valoriCustom = valoriCustom + ", " + "getvalcampoprofdoc (docnumber, " + d.CustomObjectId.ToString() + ") AS A" + d.CustomObjectId.ToString();
                    }
                }
            }

            #region Ordinamento

            // Recupero dei filtri di ricerca relarivi all'ordinamento
            FiltroRicerca oracleField = objQueryList[0].Where(e => e.argomento == "ORACLE_FIELD_FOR_ORDER").FirstOrDefault();
            FiltroRicerca sqlField = objQueryList[0].Where(e => e.argomento == "SQL_FIELD_FOR_ORDER").FirstOrDefault();
            FiltroRicerca profilationField = objQueryList[0].Where(e => e.argomento == "PROFILATION_FIELD_FOR_ORDER").FirstOrDefault();
            FiltroRicerca orderDirection = objQueryList[0].Where(e => e.argomento == "ORDER_DIRECTION").FirstOrDefault();
            if (orderDirection == null)
            {
                orderDirection = new FiltroRicerca();
                orderDirection.valore = "ASC";
            }
            else if (string.IsNullOrEmpty(orderDirection.valore))
                orderDirection.valore = "ASC";

            FiltroRicerca contatatore_no_custom = objQueryList[0].Where(e => e.argomento == "CONTATORE_GRIGLIE_NO_CUSTOM").FirstOrDefault();

            // Function da utilizzare per estrarre i valori del campo profilato da utilizzare per l'ordinamento
            String extractFieldValue = String.Empty;
            String extractFieldValue2 = String.Empty;

            String contatore = string.Empty;

            if (dbType == "SQL")
            {
                // DB SQL Server
                // Se bisogna ordinare per campo custom...
                reverseOrder = String.Empty;
                if (profilationField != null)
                {
                    if (contatatore_no_custom != null && !gridPersonalization)
                    {
                        if (orderDirection.valore.Equals("ASC"))
                        {
                            extractFieldValue = ", " + " ISNULL(convert(int, @dbuser@.getcontatoredocordinamento (a.system_id, '" + contatatore_no_custom.valore + "')),'zzzzzzzzzzzz')";
                            extractFieldValue2 = "ISNULL(convert(int, @dbuser@.getcontatoredocordinamento (a.system_id, '" + contatatore_no_custom.valore + "')),'zzzzzzzzzzzz')";
                        }
                        else
                        {
                            extractFieldValue = ", " + "convert(int, @dbuser@.getcontatoredocordinamento (a.system_id, '" + contatatore_no_custom.valore + "'))";
                            extractFieldValue2 = "convert(int, @dbuser@.getcontatoredocordinamento (a.system_id, '" + contatatore_no_custom.valore + "'))";
                        }
                        contatore = ", @dbuser@.getcontatoredoc(docnumber,'R') as contatore";
                    }
                    else
                    {
                        Field d = visibleFieldsTemplate.Where(e => e.CustomObjectId.ToString() == profilationField.valore).FirstOrDefault();
                        if (orderDirection.valore.Equals("ASC"))
                        {
                            if (d.IsNumber)
                            {
                                extractFieldValue = String.Format(", ISNULL(convert(int, @dbuser@.getValCampoProfDocOrder(DOCNUMBER, {0})),999999)", profilationField.valore);
                                extractFieldValue2 = String.Format(" ISNULL(convert(int, @dbuser@.getValCampoProfDocOrder(DOCNUMBER, {0})),999999)", profilationField.valore);
                            }
                            else
                            {
                                extractFieldValue = String.Format(", ISNULL(@dbuser@.getValCampoProfDoc(DOCNUMBER, {0}),'zzzzzzzzzzzz')", profilationField.valore);
                                extractFieldValue2 = String.Format(" ISNULL(@dbuser@.getValCampoProfDoc(DOCNUMBER, {0}),'zzzzzzzzzzzz')", profilationField.valore);
                            }
                        }
                        else
                        {
                            if (d.IsNumber)
                            {
                                extractFieldValue = String.Format(", convert(int, @dbuser@.getValCampoProfDocOrder(DOCNUMBER, {0}))", profilationField.valore);
                                extractFieldValue2 = String.Format(" convert(int, @dbuser@.getValCampoProfDocOrder(DOCNUMBER, {0}))", profilationField.valore);
                            }
                            else
                            {
                                extractFieldValue = String.Format(", @dbuser@.getValCampoProfDoc(DOCNUMBER, {0})", profilationField.valore);
                                extractFieldValue2 = String.Format(" @dbuser@.getValCampoProfDoc(DOCNUMBER, {0})", profilationField.valore);
                            }
                        }
                    }

                    order = String.Format("{0} {1}", extractFieldValue2, orderDirection.valore);

                    order = order + ", ISNULL (a.dta_proto, a.creation_time) DESC";
                }
                else
                {
                    // Altrimenti se è valorizzato il campo da utilizzare per l'ordinamento...
                    if (sqlField != null)
                    {
                        // ...creazione di filtro e impostazione dell'ordine diretto ed inverso
                        extractFieldValue = String.Empty;
                        if (orderDirection.valore.Equals("ASC"))
                        {
                            if (sqlField.nomeCampo.Equals("D1") || sqlField.nomeCampo.Equals("D12"))
                            {
                                order = "ISNULL(" + String.Format("{0} ,999999999) {1}", sqlField.valore, orderDirection.valore);
                            }
                            else
                            {
                                if (sqlField.nomeCampo.Equals("D11") || sqlField.nomeCampo.Equals("D14") || sqlField.nomeCampo.Equals("D9"))
                                {
                                    order = "ISNULL(" + String.Format("{0} ,'9999-12-31 23:59:59.997') {1}", sqlField.valore, orderDirection.valore);
                                }
                                else
                                {
                                    order = "ISNULL(" + String.Format("{0} ,'zzzzzzzzzzzz') {1}", sqlField.valore, orderDirection.valore);
                                }
                            }
                        }
                        else
                        {
                            order = String.Format("{0} {1}", sqlField.valore, orderDirection.valore);
                        }
                        if (ricercaVeloce && sqlField.nomeCampo.Equals("D9"))
                        {

                        }
                        else
                        {
                            order = order + ", ISNULL (a.dta_proto, a.creation_time) DESC";
                        }
                    }
                    else//inpostazione di default del filtro
                    {
                        if (!string.IsNullOrEmpty(order))
                            order += ",";
                        order = order + " ISNULL (a.dta_proto, a.creation_time) DESC";
                    }
                }

            }
            else
            {
                // DB ORACLE
                // Se bisogna ordinare per campo custom...
                reverseOrder = String.Empty;
                if (profilationField != null)
                {
                    if (contatatore_no_custom != null && !gridPersonalization)
                    {
                        extractFieldValue = ", " + "to_number(getcontatoredocordinamento (a.system_id, '" + contatatore_no_custom.valore + "'))";
                        extractFieldValue2 = "to_number(getcontatoredocordinamento (a.system_id, '" + contatatore_no_custom.valore + "'))";
                        contatore = ", getcontatoredoc(a.docnumber,'R') as contatore";
                    }
                    else
                    {
                        Field d = visibleFieldsTemplate.Where(e => e.CustomObjectId.ToString() == profilationField.valore).FirstOrDefault();

                        if (d.IsNumber)
                        {
                            extractFieldValue = String.Format(", to_number(getValCampoProfDocOrder(A.DOCNUMBER, {0}))", profilationField.valore);
                            extractFieldValue2 = String.Format(" to_number(getValCampoProfDocOrder(A.DOCNUMBER, {0}))", profilationField.valore);
                        }
                        else
                        {
                            extractFieldValue = String.Format(", getValCampoProfDoc(A.DOCNUMBER, {0})", profilationField.valore);
                            extractFieldValue2 = String.Format(" getValCampoProfDoc(A.DOCNUMBER, {0})", profilationField.valore);
                        }
                    }

                    order = String.Format("{0} {1}", extractFieldValue2, orderDirection.valore);

                    order = order + " NULLS LAST, NVL (a.dta_proto, a.creation_time) DESC";
                }
                else
                {
                    // Altrimenti se è valorizzato il campo da utilizzare per l'ordinamento...
                    if (oracleField != null)
                    {
                        // ...creazione di filtro e impostazione dell'ordine diretto ed inverso
                        extractFieldValue = String.Empty;
                        order = String.Format("{0} {1}", oracleField.valore, orderDirection.valore);
                        order = order + " NULLS LAST, NVL (a.dta_proto, a.creation_time) DESC";
                    }
                    else
                    {
                        // Altrimenti viene creato il filtro standard
                        extractFieldValue = String.Empty;
                        //Nel caso non ho le griglie custum ma ho una tipologia con un campo profilato
                        FiltroRicerca contatoreNoCustom = objQueryList[0].Where(e => e.argomento == "CONTATORE_GRIGLIE_NO_CUSTOM").FirstOrDefault();
                        if (contatoreNoCustom != null)
                        {
                            order = String.Format("TO_NUMBER(getcontatoredocordinamento (a.system_id, 'R')) {0}", orderDirection.valore);
                        }
                        else
                        {
                            order = String.Format("NVL(A.DTA_PROTO,A.CREATION_TIME) {0}", orderDirection.valore);
                        }

                        order = order + " NULLS LAST, NVL (a.dta_proto, a.creation_time) DESC";
                    }
                }
            }

            #endregion
            if (!simpleSearch)
            {
                ListaDocPagingCustom(infoUtente, listaDoc,
                                                ricercaVeloce,
                                                maxRisultatiQuery,
                                                queryFrom,
                                                filters,
                                                order,
                                                reverseOrder,
                                                numPage, pageSize,
                                                security, out numTotPage,
                                                out nRec, unionStampeReg,
                                                filters_stampe,
                                                getIdProfilesList,
                                                out idProfilesList,
                                                extractFieldValue, export, valoriCustom, visibleFieldsTemplate, gridPersonalization, stampaReg, queryFromStampe, documentsSystemId, contatore, filtro_conservazione, tipoRicevutaInteroperante, filtro_cons_esib, filtro_versamento);
            }
            else
            {
                ListaDocSimpleSearchPagingCustom(infoUtente, listaDoc,
                                                ricercaVeloce,
                                                maxRisultatiQuery,
                                                queryFrom,
                                                objQueryList,
                                                order,
                                                reverseOrder,
                                                numPage, pageSize,
                                                security, out numTotPage,
                                                out nRec, unionStampeReg,
                                                filters_stampe,
                                                getIdProfilesList,
                                                out idProfilesList,
                                                extractFieldValue, export, valoriCustom, visibleFieldsTemplate, gridPersonalization, stampaReg, queryFromStampe, documentsSystemId, contatore, filtro_conservazione, filtro_versamento, tipoRicevutaInteroperante, isRicercaFullText, fullTextResult);

            }
            return listaDoc;
        }

        private void ListaDocPagingCustom(DocsPaVO.utente.InfoUtente infoUtente,
                                   ArrayList listaDoc,
                                   bool ricercaVeloce,
                                   int maxRisultatiQuery,
                                   string fromTables,
                                   string filters,
                                   string orderCriteria,
                                   string reverseOrderCriteria,
                                   int numPage,
                                   int pageSize,
                                   bool security,
                                   out int numTotPage,
                                   out int nRec,
                                   bool unionStampeReg,
                                   string filters_stampe,
                                   bool getIdProfilesList,
                                   out List<SearchResultInfo> idProfilesList, string extractFieldValue, bool export, string valoriCustom, Field[] visibleFieldsTemplate, bool gridPersonalization, bool stampaReg, string queryFromStampe, String[] documentsSystemId, String contatore, string filtro_conservazione, string tipoRicevutaInteroperante, string filtro_cons_esib = "", string filtro_versamento = "")
        {
            logger.Debug("ListaDocPagingCustom");

            numTotPage = 0;

            nRec = GetCountDocumentiCustom(infoUtente.idGruppo, infoUtente.idPeople, ricercaVeloce, maxRisultatiQuery, fromTables, filters, unionStampeReg, filters_stampe, security, getIdProfilesList,
                stampaReg, queryFromStampe, orderCriteria, out idProfilesList);

            /* ABBATANGELI GIANLUIGI
             * Aggiunto il valore di configurazione MAX_ROW_SEARCHABLE
             * che determina il numero massimo di righe accettatte
             * come risultato di una ricerca documenti 
             * tranne il caso in cui sto eseguendo un export */
            int maxRowSearchable = (export ? 0 : Cfg_MAX_ROW_SEARCHABLE(infoUtente.idAmministrazione));

            if (maxRowSearchable == 0 || nRec <= maxRowSearchable)
            {
                if (nRec > 0)
                {
                    string queryName = string.Empty;
                    // Bug Parentesi chiusa mancante
                    //string verSecurity = " (A.SYSTEM_ID = A.SYSTEM_ID ";
                    string verSecurity = " (A.SYSTEM_ID = A.SYSTEM_ID )";
                    // if (!ricercaVeloce)
                    queryName = "S_RIC_DOC_CUSTOM";
                    //   else
                    //       queryName = "S_RIC_DOC_VELOCE_CUSTOM";

                    DocsPaUtils.Query queryDef = DocsPaUtils.InitQuery.getInstance().getQuery(queryName);

                    if (!string.IsNullOrEmpty(filtro_conservazione))
                    {
                        if (filtro_conservazione.Equals("D"))
                        {
                            if (dbType == "SQL")
                            {
                                queryDef.setParam("conservazione", " ,@dbuser@.getInConservazioneNoSec(a.SYSTEM_ID,null,'D') as istanzeConservazione ");
                            }
                            else
                            {
                                queryDef.setParam("conservazione", " ,getInConservazioneNoSec(a.SYSTEM_ID,null,'D') as istanzeConservazione ");
                            }
                        }
                        else
                        {
                            if (dbType == "SQL")
                                queryDef.setParam("conservazione", " ,@dbuser@.getInConservazioneNoSec(a.SYSTEM_ID,B.project_id,'F') as istanzeConservazione ");
                            else
                                queryDef.setParam("conservazione", " ,getInConservazioneNoSec(a.SYSTEM_ID,B.project_id,'F') as istanzeConservazione ");
                        }
                    }
                    else
                    {
                        queryDef.setParam("conservazione", string.Empty);
                    }

                    //
                    // MEV CS 1.4 - Esibizione
                    if (!string.IsNullOrEmpty(filtro_cons_esib))
                    {
                        if (filtro_cons_esib.Equals("D"))
                        {
                            if (dbType == "SQL")
                            {
                                queryDef.setParam("esibizione", " ,@dbuser@.getInConsNoSecPerEsib(a.SYSTEM_ID,null,'D') as istanzeConservazione ");
                            }
                            else
                            {
                                queryDef.setParam("esibizione", " ,getInConsNoSecPerEsib(a.SYSTEM_ID,null,'D') as istanzeConservazione ");
                            }
                        }
                        else
                        {
                            if (dbType == "SQL")
                                queryDef.setParam("esibizione", " ,@dbuser@.getInConsNoSecPerEsib(a.SYSTEM_ID,B.project_id,'F') as istanzeConservazione ");
                            else
                                queryDef.setParam("esibizione", " ,getInConsNoSecPerEsib(a.SYSTEM_ID,B.project_id,'F') as istanzeConservazione ");
                        }
                    }
                    else
                    {
                        queryDef.setParam("esibizione", string.Empty);
                    }
                    // End MEV CS 1.4 - Esibizione
                    //
                    // INTEGRAZIONE PITRE-PARER
                    if (this.isConservazionePARER())
                    {
                    if (!string.IsNullOrEmpty(filtro_versamento) || stampaReg)
                    {
                        if (dbType.ToUpper().Equals("SQL"))
                        {
                            queryDef.setParam("stato_cons", " ,@dbuser@.GetStatoConservazione(a.system_id) as StatoConservazione ");
                        }
                        else
                        {
                            queryDef.setParam("stato_cons", " ,GetStatoConservazione(a.system_id) as StatoConservazione ");
                        }
                    }
                    else
                    {
                        queryDef.setParam("stato_cons", string.Empty);
                    }
                    }
                    else
                    {
                        if (this.dbType.ToUpper().Equals("SQL"))
                        {
                            queryDef.setParam("stato_cons", " ,@dbuser@.getInConservazioneDoc(a.system_id) as StatoConservazione ");
                        }
                        else
                        {
                            queryDef.setParam("stato_cons", " ,getInConservazioneDoc(a.system_id) as StatoConservazione ");
                        }
                    }
                    // fine INTEGRAZIONE PITRE-PARER

                    // PEC 4 Requisito 3: ricerca documenti spediti
                    // Inserisco il parametro aggiuntivo.

                    queryDef.setParam("tipoRicevutaInteroperante", "'" + tipoRicevutaInteroperante + "'");


                    if (stampaReg)
                    {
                        queryDef.setParam("fromOther", queryFromStampe);
                        queryDef.setParam("stampe", filters_stampe);
                    }
                    else
                    {
                        queryDef.setParam("fromOther", "");
                        queryDef.setParam("stampe", "");
                    }
                    // Reperimento del numero di elementi da visualizzare per pagina
                    int pageSizeSqlServer = pageSize;


                    // per query sqlserver:
                    // il numero totale di righe da estrarre equivale 
                    // al limite inferiore dell'ultima riga da estrarre
                    int totalRowsSqlServer = (numPage * pageSize);
                    if ((nRec - totalRowsSqlServer) <= 0)
                    {
                        pageSizeSqlServer -= System.Math.Abs(nRec - totalRowsSqlServer);
                        totalRowsSqlServer = nRec;
                    }

                    // Parametri specifici per query sqlserver
                    queryDef.setParam("pageSize", pageSizeSqlServer.ToString());
                    queryDef.setParam("totalRows", totalRowsSqlServer.ToString());
                    queryDef.setParam("reverseOrder", reverseOrderCriteria);




                    // Parametri specifici per query oracle
                    string preferedIndex = string.Empty;
                    if (!export)
                    {
                        preferedIndex = "/*+ FIRST_ROWS(" + pageSize + ") */";
                    }
                    else
                    {
                        preferedIndex = "/*+ FIRST_ROWS(" + nRec + ") */";
                    }
                    //string index2 = "/*+index (a)*/";


                    if ((filters.ToUpper().IndexOf("A.VAR_PROF_OGGETTO") > -1 ||
                         filters.ToUpper().IndexOf("G.VAR_DESC_CORR") > -1) && Cfg_USE_TEXT_INDEX != "0")
                    // Impostazione indice da utilizzare
                    {

                        //if (filters.ToUpper().IndexOf("CONTAINS(A.VAR_PROF_OGGETTO") > -1)
                          //  index2 = "/*+index (a indx_ogg_text)*/ ";












                        //TODO: se var_desc_corr
                    }








                    string idRuoloPubblico = DocsPaUtils.Configuration.InitConfigurationKeys.GetValue(infoUtente.idAmministrazione, "ENABLE_FASCICOLO_PUBBLICO");
                    if (string.IsNullOrEmpty(idRuoloPubblico))
                        idRuoloPubblico = "0";
                    if (security)
                    {
                        bool IS_ARCHIVISTA_DEPOSITO;
                        DocsPaDB.Query_DocsPAWS.Utenti ut = new Utenti();
                        IS_ARCHIVISTA_DEPOSITO = ut.isUtArchivistaDeposito(infoUtente.idPeople, infoUtente.idGruppo);
                        if (filters.ToUpper().IndexOf("AND id_documento_principale IS NOT NULL".ToUpper()) > -1 ||
                                (filters.IndexOf("NOT A.ID_DOCUMENTO_PRINCIPALE IS NULL") > -1) ||
                                IS_ARCHIVISTA_DEPOSITO)
                        {
                            if (dbType.ToUpper() == "SQL")
                                verSecurity = "(@dbuser@.checkSecurityDocumento(A.SYSTEM_ID, @idPeople@, @idGruppo@, @idRuoloPubblico@,'D') > 0)";
                            else
                                verSecurity = "(checkSecurityDocumento(A.SYSTEM_ID, @idPeople@, @idGruppo@, @idRuoloPubblico@,'D') > 0)";
                        }
                        else
                        {
                            if (IndexSecurity())
                                verSecurity = " EXISTS (select /*+INDEX(e) */ 'x' from security e where a.system_id=e.thing and e.PERSONORGROUP in (@idPeople@, @idGruppo@, @idRuoloPubblico@) and e.ACCESSRIGHTS>0) ";
                            else
                                verSecurity = " EXISTS (select  'x' from security e where a.system_id=e.thing and e.PERSONORGROUP in (@idPeople@, @idGruppo@, @idRuoloPubblico@) and e.ACCESSRIGHTS>0) ";
                        }

                    }

                    if (verSecurity == string.Empty)
                        // Bug Parentesi chiusa mancante
                        //verSecurity = " (A.SYSTEM_ID = A.SYSTEM_ID ";
                        verSecurity = " (A.SYSTEM_ID = A.SYSTEM_ID )";

                    queryDef.setParam("security", verSecurity);
                    queryDef.setParam("index", preferedIndex);
                    //queryDef.setParam("index2", index2);
                    queryDef.setParam("rowCount", maxRisultatiQuery.ToString());

                    queryDef.setParam("filters", filters);



                    // Parametro contentente le tabelle addizionali da aggiungere alla query
                    queryDef.setParam("from", fromTables);

                    // Parametri validi per tutte le query
                    queryDef.setParam("idGruppo", infoUtente.idGruppo);
                    queryDef.setParam("idPeople", infoUtente.idPeople);
                    queryDef.setParam("idRuoloPubblico", idRuoloPubblico);
                    //fine modifica
                    numTotPage = (nRec / pageSize);

                    int startRow = ((numPage * pageSize) - pageSize) + 1;
                    int endRow = (startRow - 1) + pageSize;

                    string paging = string.Empty;

                    if (dbType == "SQL")
                    {
                        if (!export)
                        {
                            if (ricercaVeloce)
                            {
                                paging = "WHERE Row <= " + endRow.ToString() + " AND Row <=" + maxRisultatiQuery.ToString() + " AND Row >=" + startRow.ToString();
                            }
                            else
                            {
                                paging = "WHERE Row <= " + endRow.ToString() + " AND Row >=" + startRow.ToString();
                            }
                        }
                        else
                        {
                            if (ricercaVeloce)
                            {
                                paging = "WHERE Row <=" + maxRisultatiQuery.ToString();
                            }
                        }

                        if (ricercaVeloce)
                        {
                            queryDef.setParam("ricVeloce", " and isnull(dta_proto,creation_date) between convert(datetime,'@dataInizioAnno@',103) and getdate() ");
                        }
                        else
                        {
                            queryDef.setParam("ricVeloce", "");
                        }
                    }
                    else
                    {
                        if (!export)
                        {
                            if (ricercaVeloce)
                            {
                                paging = "WHERE ROWNUM <= " + endRow.ToString() + " AND ROWNUM <=" + maxRisultatiQuery.ToString() + " ) a WHERE rnum >=" + startRow.ToString();
                            }
                            else
                            {
                                paging = "WHERE ROWNUM <= " + endRow.ToString() + " ) a WHERE rnum >=" + startRow.ToString();
                            }
                        }
                        else
                        {
                            if (ricercaVeloce)
                            {
                                paging = "WHERE ROWNUM <= " + nRec.ToString() + " AND ROWNUM <=" + maxRisultatiQuery.ToString() + " ) a WHERE rnum >=" + startRow.ToString();
                            }
                            else
                            {
                                paging = "WHERE ROWNUM <= " + nRec.ToString() + " ) a WHERE rnum >=" + startRow.ToString();
                            }
                        }

                        if (ricercaVeloce)
                        {
                            queryDef.setParam("ricVeloce", " AND NVL (dta_proto, creation_date) between add_months(sysdate,-1) and sysdate ");
                        }
                        else
                        {
                            queryDef.setParam("ricVeloce", "");
                        }
                    }

                    string listDocuments = string.Empty;
                    if (export)
                    {
                        if (documentsSystemId != null &&
        documentsSystemId.Length > 0)
                        {
                            int i = 0;
                            listDocuments += " AND ( A.SYSTEM_ID IN(";
                            foreach (string id in documentsSystemId)
                            {
                                listDocuments += id;
                                if (i < documentsSystemId.Length - 1)
                                {
                                    if (i % 998 == 0 && i > 0)
                                    {
                                        listDocuments += ") OR A.SYSTEM_ID IN (";
                                    }
                                    else
                                    {
                                        listDocuments += ", ";
                                    }
                                }
                                else
                                {
                                    listDocuments += ")";
                                }
                                i++;
                            }
                            listDocuments += ")";
                        }

                    }


                    string unionStampe = string.Empty;
                    if (unionStampeReg)
                    {
                        unionStampe += " UNION ";
                        if (dbType.ToUpper().Equals("SQL"))
                        {
                            //unionStampe += "SELECT TOP " + totalRowsSqlServer.ToString() +
                            //" A.SYSTEM_ID, A.DOCNUMBER, A.DTA_ANNULLA, A.VAR_PROF_OGGETTO AS VAR_DESC_OGGETTO, A.ID_REGISTRO," +
                            //"A.CHA_TIPO_PROTO, A.CHA_EVIDENZA, A.NUM_ANNO_PROTO, ISNULL(A.DTA_PROTO,A.CREATION_TIME) AS DATA," +
                            //"convert(nvarchar (10), A.CREATION_TIME, 103) AS CREATION_DATE," +
                            //"A.NUM_PROTO, A.VAR_SEGNATURA, convert(nvarchar (10), A.DTA_PROTO, 103) AS DTA_PROTO, " +
                            //getUserDB() + ".getchaimg(A.DOCNUMBER) AS CHA_IMG , A.CHA_PRIVATO, A.CHA_PERSONALE, " + getUserDB() + ".getInADL(A.SYSTEM_ID,'D'," + infoUtente.idGruppo + "," + infoUtente.idPeople + ") AS IN_ADL, " +
                            //"A.ID_DOCUMENTO_PRINCIPALE," + getUserDB() + ".getInConservazione(A.SYSTEM_ID, null,'D'," + infoUtente.idPeople + "," + infoUtente.idGruppo + ") AS IN_CONSERVAZIONE, A.CHA_IN_ARCHIVIO," +
                            //"a.id_tipo_atto as ID_TIPO_ATTO, ta.var_desc_atto as DESC_TIPO_ATTO, " +
                            //getUserDB() + ".getPeopleUserId (a.AUTHOR) as AUTHOR, a.prot_tit as PROT_TIT," +
                            //getUserDB() + ".getchafirmato(A.DOCNUMBER) as CHA_FIRMATO," +
                            //getUserDB() + ".GetContatoreDoc(a.system_id, '" + tipo_contatore + "') as CONTATORE," +
                            //getUserDB() + ".getContatoreDocOrdinamento(a.system_id, '" + tipo_contatore + "') as contatore_ordinamento " +
                            //"@customFieldFilter@" +
                            //" FROM DPA_STAMPAREGISTRI R, PROFILE a " +
                            //"LEFT JOIN dpa_tipo_atto ta on a.id_tipo_atto = ta.system_id " +
                            //"WHERE (" + getUserDB() + ".checkSecurityDocumento(A.SYSTEM_ID, " + infoUtente.idPeople + ", " + infoUtente.idGruppo + ",'D') > 0) " +
                            //filters_stampe;
                            unionStampe += "SELECT   Row, SYSTEM_ID, DOCNUMBER, DTA_ANNULLA,VAR_DESC_OGGETTO, ID_REGISTRO, cha_tipo_proto,CHA_EVIDENZA, NUM_ANNO_PROTO, DATA, CREATION_DATE, NUM_PROTO, VAR_SEGNATURA, DTA_PROTO, ARCHIVE_DATE as dta_archiviazione,@dbuser@.getchaimg(DOCNUMBER) AS CHA_IMG,CHA_PRIVATO,CHA_PERSONALE,@dbuser@.getInADL(SYSTEM_ID,'D'," + infoUtente.idGruppo + "," + infoUtente.idPeople + ") AS IN_ADL,ID_DOCUMENTO_PRINCIPALE,@dbuser@.getInConservazione(SYSTEM_ID, null,'D', " + infoUtente.idPeople + ", " + infoUtente.idGruppo + ") AS IN_CONSERVAZIONE,CHA_IN_ARCHIVIO, ID_TIPO_ATTO, DESC_TIPO_ATTO, @dbuser@.getPeopleUserId (AUTHOR) as code_author,PROT_TIT, @dbuser@.getchafirmato(DOCNUMBER) as CHA_FIRMATO,@dbuser@.gettestoultimanota('D',system_id," + infoUtente.idGruppo + "," + infoUtente.idPeople + "," + infoUtente.idGruppo + ") as ULTIMA_NOTA,@dbuser@.GETCODREG(id_registro) as cod_registro,@dbuser@.CORRCAT(system_id, cha_tipo_proto) as MITT_DEST,@dbuser@.getpeoplename (author) AS desc_autore,@dbuser@.getdesccorr (id_ruolo_creatore) AS desc_ruolo_autore,@dbuser@.getcodruolobyidcorr(id_ruolo_creatore) AS cod_ruolo_autore,@dbuser@.classcat(system_id) as COD_FASCICOLI,@dbuser@.getdataarrivodoc (DOCNUMBER) AS data_arrivo,@dbuser@.getdiagrammistato (docnumber, 'D') AS stato,@dbuser@.corrcatbytipo(docnumber, cha_tipo_proto, 'M') as mittenti,@dbuser@.corrcatbytipo(docnumber, cha_tipo_proto, 'D') as destinatari,@dbuser@.getEsitoPubblicazione(system_id) as pubblicazione,@dbuser@.esisteNotaVisibile('D',a.system_id," + infoUtente.idGruppo + "," + infoUtente.idPeople + "," + infoUtente.idGruppo + ") AS esiste_nota @contatore@ @valoriCustom@ FROM (SELECT  ROW_NUMBER() OVER (ORDER BY @order@) AS Row, a.SYSTEM_ID, A.DOCNUMBER, A.DTA_ANNULLA,A.VAR_PROF_OGGETTO AS VAR_DESC_OGGETTO,A.ID_REGISTRO, A.CHA_TIPO_PROTO,A.CHA_EVIDENZA, A.NUM_ANNO_PROTO,ISNULL(A.DTA_PROTO,A.CREATION_TIME) AS DATA,convert(nvarchar (10),A.CREATION_TIME, 103) AS CREATION_DATE,A.NUM_PROTO, A.VAR_SEGNATURA,convert(nvarchar (10), A.DTA_PROTO, 103) AS DTA_PROTO,A.CHA_PRIVATO, A.CHA_PERSONALE,A.ID_DOCUMENTO_PRINCIPALE,A.CHA_IN_ARCHIVIO,a.id_tipo_atto as ID_TIPO_ATTO,ta.var_desc_atto as DESC_TIPO_ATTO, a.AUTHOR,a.prot_tit as PROT_TIT, a.ID_RUOLO_CREATORE,a.ARCHIVE_DATE FROM DPA_STAMPAREGISTRI R, PROFILE A LEFT JOIN dpa_tipo_atto ta on a.id_tipo_atto = ta.system_id WHERE (" + this.getUserDB() + ".checkSecurityDocumento(A.SYSTEM_ID, " + infoUtente.idPeople + ", " + infoUtente.idGruppo + ", " + idRuoloPubblico + ",'D') > 0) " + filters_stampe + ")AS a @paging@";
                        }
                        else
                        {
                            //unionStampe += "SELECT ROW_NUMBER() OVER(ORDER BY nvl(DTA_PROTO,CREATION_DATE) DESC) AS RN," +
                            //"A.SYSTEM_ID, A.DOCNUMBER, A.DTA_ANNULLA, A.VAR_PROF_OGGETTO AS VAR_DESC_OGGETTO," +
                            //"A.ID_REGISTRO, A.CHA_TIPO_PROTO, A.CHA_EVIDENZA, A.NUM_ANNO_PROTO," +
                            //"nvl(A.DTA_PROTO,A.CREATION_TIME) AS DATA," +
                            //"to_char(A.CREATION_TIME,'dd/mm/yyyy') AS CREATION_DATE," +
                            //"A.NUM_PROTO, A.VAR_SEGNATURA, to_char(A.DTA_PROTO,'dd/mm/yyyy')  AS DTA_PROTO," +
                            //"A.CHA_PRIVATO, A.CHA_PERSONALE, " +
                            //"A.ID_DOCUMENTO_PRINCIPALE, A.CHA_IN_ARCHIVIO," +
                            //"a.id_tipo_atto as ID_TIPO_ATTO, ta.var_desc_atto as DESC_TIPO_ATTO, " +
                            //"getPeopleUserId (a.AUTHOR) as AUTHOR, a.prot_tit as PROT_TIT " +
                            //    //"getchafirmato(A.DOCNUMBER) as CHA_FIRMATO " +
                            //"@customFieldFilter@" +
                            //" FROM DPA_STAMPAREGISTRI R, PROFILE a " +
                            //"LEFT JOIN dpa_tipo_atto ta on a.id_tipo_atto = ta.system_id " +
                            //"WHERE (checkSecurityDocumento(A.SYSTEM_ID, " + infoUtente.idPeople + ", " + infoUtente.idGruppo + ",'D') > 0) " +
                            //filters_stampe;
                            // unionStampe += "SELECT a.*, getpeopleuserid (a.author) AS code_author, getchaimg (a.docnumber) AS cha_img, getinadl (a.system_id, 'D',  " + infoUtente.idGruppo + ",  " + infoUtente.idPeople + ") AS in_adl, getinconservazione (a.system_id,NULL,'D'," + infoUtente.idPeople + "," + infoUtente.idGruppo + ") AS in_conservazione,getchafirmato (a.docnumber) AS cha_firmato,corrcat (a.system_id, a.cha_tipo_proto) AS mitt_dest,gettestoultimanota ('D',a.system_id," + infoUtente.idGruppo + "," + infoUtente.idPeople + "," + infoUtente.idGruppo + ") AS ultima_nota,getpeoplename (a.author) AS desc_autore,getdesccorr (a.id_ruolo_creatore) AS desc_ruolo_autore,getcodruolobyidcorr (a.id_ruolo_creatore) AS cod_ruolo_autore,getcodreg (a.id_registro) AS cod_registro,classcat (a.system_id) AS cod_fascicoli,getdataarrivodoc (a.docnumber) AS data_arrivo,getdiagrammistato (a.docnumber, 'D') AS stato,corrcatbytipo (a.docnumber, a.cha_tipo_proto, 'M') AS mittenti,corrcatbytipo (a.docnumber, a.cha_tipo_proto, 'D') AS destinatari, getesitopubblicazione (a.system_id) AS pubblicazione,esistenotavisibile ('D', a.system_id," + infoUtente.idGruppo + "," + infoUtente.idPeople + "," + infoUtente.idGruppo + ") AS esiste_nota, a.cha_cod_t_a, getimpronta (a.docnumber) AS impronta  @contatore@ @valoriCustom@ FROM (SELECT " + preferedIndex + "interna.*, ROWNUM rnum FROM (SELECT   /*+INDEX(a)*/a.system_id, a.docnumber, a.dta_annulla,a.var_prof_oggetto AS var_desc_oggetto, a.id_registro, a.cha_tipo_proto, a.cha_evidenza,a.num_anno_proto,TO_CHAR (NVL (a.dta_proto, a.creation_time),'dd/mm/yyyy') AS DATA, TO_CHAR (a.creation_time,'dd/mm/yyyy') AS creation_date,a.num_proto, a.var_segnatura,TO_CHAR (a.dta_proto, 'dd/mm/yyyy') AS dta_proto, a.cha_privato, a.cha_personale,a.id_documento_principale, a.cha_in_archivio,a.id_tipo_atto AS id_tipo_atto,ta.var_desc_atto AS desc_tipo_atto, a.prot_tit AS prot_tit,a.archive_date AS dta_archiviazione, a.id_ruolo_creatore, a.author, a.cha_cod_t_a, a.cod_ext_app @customFieldFilter@ FROM dpa_stamparegistri r, PROFILE a LEFT JOIN dpa_tipo_atto ta ON a.id_tipo_atto = ta.system_id WHERE (checksecuritydocumento (a.system_id, " + infoUtente.idPeople + ", " + infoUtente.idGruppo + ", 'D') > 0) " + filters_stampe + "ORDER BY @order@ )interna @paging@";
                            //unionStampe += "SELECT a.*, getpeopleuserid (a.author) AS code_author, getchaimg (a.docnumber) AS cha_img, getinadl (a.system_id, 'D',  " + infoUtente.idGruppo + ",  " + infoUtente.idPeople + ") AS in_adl, getinadl (a.system_id, 'D', " + infoUtente.idGruppo + ", 0) AS in_adlrole, getinconservazione (a.system_id,NULL,'D'," + infoUtente.idPeople + "," + infoUtente.idGruppo + ") AS in_conservazione,getchafirmato (a.docnumber) AS cha_firmato, corrcat (a.system_id, a.cha_tipo_proto) AS mitt_dest,gettestoultimanota ('D',a.system_id," + infoUtente.idGruppo + "," + infoUtente.idPeople + "," + infoUtente.idGruppo + ") AS ultima_nota,getpeoplename (a.author) AS desc_autore,getdesccorr (a.id_ruolo_creatore) AS desc_ruolo_autore,getcodruolobyidcorr (a.id_ruolo_creatore) AS cod_ruolo_autore,getcodreg (a.id_registro) AS cod_registro,classcat (a.system_id) AS cod_fascicoli,getdataarrivodoc (a.docnumber) AS data_arrivo,getdiagrammistato (a.docnumber, 'D') AS stato,corrcatbytipo (a.docnumber, a.cha_tipo_proto, 'M') AS mittenti,corrcatbytipo (a.docnumber, a.cha_tipo_proto, 'D') AS destinatari,getesitopubblicazione (a.system_id) AS pubblicazione,esistenotavisibile ('D', a.system_id," + infoUtente.idGruppo + "," + infoUtente.idPeople + "," + infoUtente.idGruppo + ") AS esiste_nota, a.cha_cod_t_a, getimpronta (a.docnumber) AS impronta,getnomeoriginale (a.docnumber) AS nome_originale,TO_CHAR (getdateinadl (a.system_id, 'D', " + infoUtente.idGruppo + "," + infoUtente.idPeople + "),'dd/mm/yyyy') AS dta_ins_adl,getesitospedizione (a.system_id) AS esito_spedizione,getcountricevuteinterop (a.system_id, '') AS count_ric_interop  @contatore@ @valoriCustom@ FROM (SELECT " + preferedIndex + "interna.*, ROWNUM rnum FROM (SELECT   /*+INDEX(a)*/a.system_id, a.docnumber, a.dta_annulla,a.var_prof_oggetto AS var_desc_oggetto, a.id_registro, a.cha_tipo_proto, a.cha_evidenza,a.num_anno_proto,TO_CHAR (NVL (a.dta_proto, a.creation_time),'dd/mm/yyyy') AS DATA, TO_CHAR (a.creation_time,'dd/mm/yyyy') AS creation_date,a.num_proto, a.var_segnatura,TO_CHAR (a.dta_proto, 'dd/mm/yyyy') AS dta_proto, a.cha_privato, a.cha_personale,a.id_documento_principale, a.cha_in_archivio,a.id_tipo_atto AS id_tipo_atto,ta.var_desc_atto AS desc_tipo_atto, a.prot_tit AS prot_tit,a.archive_date AS dta_archiviazione, a.id_ruolo_creatore, a.author, a.cha_cod_t_a, a.cod_ext_app @customFieldFilter@ FROM dpa_stamparegistri r, PROFILE a LEFT JOIN dpa_tipo_atto ta ON a.id_tipo_atto = ta.system_id WHERE (checksecuritydocumento (a.system_id, " + infoUtente.idPeople + ", " + infoUtente.idGruppo + ", 'D') > 0) " + filters_stampe + "ORDER BY @order@ )interna @paging@";
                            string strStatoConservazione;
                            if (this.isConservazionePARER())
                                strStatoConservazione = " GetStatoConservazione(a.system_id) ";
                            else
                                strStatoConservazione = " getInConservazioneDoc(a.system_id) ";
                            unionStampe += "SELECT a.*, getpeopleuserid (a.author) AS code_author, getchaimg (a.docnumber) AS cha_img, getinadl (a.system_id, 'D',  " + infoUtente.idGruppo + ",  " + infoUtente.idPeople + ") AS in_adl, getinadl (a.system_id, 'D', " + infoUtente.idGruppo + ", 0) AS in_adlrole, getinconservazione (a.system_id,NULL,'D'," + infoUtente.idPeople + "," + infoUtente.idGruppo + ") AS in_conservazione,getchafirmato (a.docnumber) AS cha_firmato, corrcat (a.system_id, a.cha_tipo_proto) AS mitt_dest,gettestoultimanota ('D',a.system_id," + infoUtente.idGruppo + "," + infoUtente.idPeople + "," + infoUtente.idGruppo + ") AS ultima_nota,getpeoplename (a.author) AS desc_autore,getdesccorr (a.id_ruolo_creatore) AS desc_ruolo_autore,getcodruolobyidcorr (a.id_ruolo_creatore) AS cod_ruolo_autore,getcodreg (a.id_registro) AS cod_registro,classcat (a.system_id) AS cod_fascicoli,getdataarrivodoc (a.docnumber) AS data_arrivo,getdiagrammistato (a.docnumber, 'D') AS stato,corrcatbytipo (a.docnumber, a.cha_tipo_proto, 'M') AS mittenti,corrcatbytipo (a.docnumber, a.cha_tipo_proto, 'D') AS destinatari,getesitopubblicazione (a.system_id) AS pubblicazione,esistenotavisibile ('D', a.system_id," + infoUtente.idGruppo + "," + infoUtente.idPeople + "," + infoUtente.idGruppo + ") AS esiste_nota, a.cha_cod_t_a, getimpronta (a.docnumber) AS impronta,getnomeoriginale (a.docnumber) AS nome_originale,TO_CHAR (getdateinadl (a.system_id, 'D', " + infoUtente.idGruppo + "," + infoUtente.idPeople + "),'dd/mm/yyyy') AS dta_ins_adl,getesitospedizione (a.system_id) AS esito_spedizione,getcountricevuteinterop (a.system_id, '') AS count_ric_interop  @contatore@ @valoriCustom@ ," + strStatoConservazione + " as StatoConservazione, getPolicyVersamentoCod(A.SYSTEM_ID) AS CODICE_POLICY, getPolicyVersamentoCounter(A.SYSTEM_ID) AS CONTATORE_POLICY, getPolicyVersamentoDataExec(A.SYSTEM_ID) AS DATA_ESECUZIONE_POLICY  FROM (SELECT " + preferedIndex + "interna.*, ROWNUM rnum FROM (SELECT   /*+INDEX(a)*/a.system_id, a.docnumber, a.dta_annulla,a.var_prof_oggetto AS var_desc_oggetto, a.id_registro, a.cha_tipo_proto, a.cha_evidenza,a.num_anno_proto,TO_CHAR (NVL (a.dta_proto, a.creation_time),'dd/mm/yyyy') AS DATA, TO_CHAR (a.creation_time,'dd/mm/yyyy') AS creation_date,a.num_proto, a.var_segnatura,TO_CHAR (a.dta_proto, 'dd/mm/yyyy') AS dta_proto, a.cha_privato, a.cha_personale,a.id_documento_principale, a.cha_in_archivio,a.id_tipo_atto AS id_tipo_atto,ta.var_desc_atto AS desc_tipo_atto, a.prot_tit AS prot_tit,a.archive_date AS dta_archiviazione, a.id_ruolo_creatore, a.author, a.cha_cod_t_a, a.cod_ext_app, a.ext, a.in_librofirma @customFieldFilter@ FROM dpa_stamparegistri r, PROFILE a LEFT JOIN dpa_tipo_atto ta ON a.id_tipo_atto = ta.system_id WHERE (checksecuritydocumento (a.system_id, " + infoUtente.idPeople + ", " + infoUtente.idGruppo  + ", " + idRuoloPubblico + ", 'D') > 0) " + filters_stampe + "ORDER BY @order@ )interna @paging@";
                        }
                    }
                    queryDef.setParam("unionStampe", unionStampe);

                    queryDef.setParam("contatore", contatore);
                    // Parametri per l'impostazione dell'ordinamento
                    queryDef.setParam("order", orderCriteria);

                    queryDef.setParam("listDocuments", listDocuments);

                    queryDef.setParam("paging", paging);

                    queryDef.setParam("filters", filters);
                    queryDef.setParam("from", fromTables);

                    // Se è una stampa registri viene rieseguita la sostituzione della function per l'estrazione
                    // del valore assunto da un campo profilato
                    if (unionStampeReg)
                        queryDef.setParam("customFieldFilter", extractFieldValue);

                    if (ricercaVeloce)
                        queryDef.setParam("dataInizioAnno", "01/01/" + DateTime.Now.Year.ToString() + " 00:00:00");

                    queryDef.setParam("valoriCustom", valoriCustom);


                    // per SQL
                    queryDef.setParam("dbuser", getUserDB());
                    queryDef.setParam("idPeople", infoUtente.idPeople);
                    queryDef.setParam("idGruppo", infoUtente.idGruppo);

                    if (dbType.ToUpper().Equals("SQL"))
                    {
                        string with = string.Empty;
                        if (!string.IsNullOrEmpty(idCorrespondentTemplate))
                        {
                            with = " WITH N (system_id) AS (SELECT system_id FROM dpa_corr_globali WHERE system_id = " + idCorrespondentTemplate + " UNION ALL SELECT  np.system_id FROM dpa_corr_globali AS np JOIN N ON N.system_id = np.id_old)";
                        }
                        else if (!string.IsNullOrEmpty(chaiTableDef))
                        {
                            with = chaiTableDef;
                            chaiTableDef = string.Empty;
                        }

                        queryDef.setParam("with", with);
                    }

                    string commandText = queryDef.getSQL();

                    logger.Debug(commandText);

                    AppendListaDocumentiPagingCustom(listaDoc, commandText, visibleFieldsTemplate);
                }
            }
            else
            {
                /* ABBATANGELI GIANLUIGI
                 * Non carico i documenti perchè raggiunto il numero massimo 
                 * di righe per la ricerca ed imposto numTotPage = -2. */
                numTotPage = -2;
            }
        }

        private void AppendListaDocumentiPagingCustom(ArrayList listaDoc, string query, Field[] visibleFieldsTemplate)
        {
            DataSet dataSet = new DataSet();
            if (ExecuteQuery(out dataSet, "DOCUMENTI", query))
            {

                foreach (DataRow dataRow in dataSet.Tables["DOCUMENTI"].Rows)
                {
                    listaDoc.Add(GetDatiDocumentoCustom(dataSet, dataRow, visibleFieldsTemplate));
                }

                dataSet.Dispose();

                registri.Clear();
            }
            else
            {
                logger.Debug("Errore nell'esecuzione della query in 'AppendListaDocumentiPagingCustom'");

                throw new ApplicationException("Errore nell'esecuzione della query in 'AppendListaDocumentiPagingCustom'");
            }
        }

        public DocsPaVO.Grids.SearchObject GetDatiDocumentoCustom(DataSet dataSet, DataRow dataRow, Field[] visibleFieldsTemplate)
        {
            logger.Debug("getDatiDocumento");
            DocsPaVO.Grids.SearchObjectField objField = new DocsPaVO.Grids.SearchObjectField();
            DocsPaVO.Grids.SearchObject objDoc = new DocsPaVO.Grids.SearchObject();
            objDoc.SearchObjectField = new List<DocsPaVO.Grids.SearchObjectField>();

            objDoc.SearchObjectID = dataRow["SYSTEM_ID"].ToString();

            objField = new DocsPaVO.Grids.SearchObjectField();
            objField.SearchObjectFieldValue = dataRow["DOCNUMBER"].ToString();
            objField.SearchObjectFieldID = "D1";
            objDoc.SearchObjectField.Add(objField);

            objField = new DocsPaVO.Grids.SearchObjectField();
            objField.SearchObjectFieldValue = dataRow["ID_REGISTRO"].ToString();
            objField.SearchObjectFieldID = "ID_REGISTRO";
            objDoc.SearchObjectField.Add(objField);

            objField = new DocsPaVO.Grids.SearchObjectField();
            objField.SearchObjectFieldValue = dataRow["COD_REGISTRO"].ToString();
            objField.SearchObjectFieldID = "D2";
            objDoc.SearchObjectField.Add(objField);

            objField = new DocsPaVO.Grids.SearchObjectField();
            objField.SearchObjectFieldValue = dataRow["CHA_TIPO_PROTO"].ToString();
            objField.SearchObjectFieldID = "D3";
            objDoc.SearchObjectField.Add(objField);

            objField = new DocsPaVO.Grids.SearchObjectField();
            objField.SearchObjectFieldValue = dataRow["VAR_DESC_OGGETTO"].ToString();
            objField.SearchObjectFieldValue = objField.SearchObjectFieldValue.Replace("<", "&lt;");
            objField.SearchObjectFieldValue = objField.SearchObjectFieldValue.Replace(">", "&gt;");
            objField.SearchObjectFieldID = "D4";
            objDoc.SearchObjectField.Add(objField);

            objField = new DocsPaVO.Grids.SearchObjectField();
            objField.SearchObjectFieldValue = dataRow["MITT_DEST"].ToString();
            objField.SearchObjectFieldID = "D5";
            objDoc.SearchObjectField.Add(objField);

            objField = new DocsPaVO.Grids.SearchObjectField();
            objField.SearchObjectFieldValue = dataRow["MITTENTI"].ToString();
            objField.SearchObjectFieldID = "D6";
            objDoc.SearchObjectField.Add(objField);

            objField = new DocsPaVO.Grids.SearchObjectField();
            objField.SearchObjectFieldValue = dataRow["DESTINATARI"].ToString();
            objField.SearchObjectFieldID = "D7";
            objDoc.SearchObjectField.Add(objField);

            objField = new DocsPaVO.Grids.SearchObjectField();
            objField.SearchObjectFieldValue = dataRow["VAR_SEGNATURA"].ToString();
            objField.SearchObjectFieldID = "D8";
            objDoc.SearchObjectField.Add(objField);

            objField = new DocsPaVO.Grids.SearchObjectField();
            //Luluciani OLD objField.SearchObjectFieldValue = dataRow["CREATION_DATE"].ToString();
            objField.SearchObjectFieldValue = dataRow["DATA"].ToString(); //colonna data D9 è PredisponiAllaProtocollazione/data creazione e NonSerializedAttribute solo creazione
            //fine
            objField.SearchObjectFieldID = "D9";
            objDoc.SearchObjectField.Add(objField);

            objField = new DocsPaVO.Grids.SearchObjectField();
            objField.SearchObjectFieldValue = dataRow["PUBBLICAZIONE"].ToString();
            objField.SearchObjectFieldID = "D10";
            objDoc.SearchObjectField.Add(objField);

            objField = new DocsPaVO.Grids.SearchObjectField();
            objField.SearchObjectFieldValue = dataRow["DTA_ANNULLA"].ToString();
            objField.SearchObjectFieldID = "D11";
            objDoc.SearchObjectField.Add(objField);

            objField = new DocsPaVO.Grids.SearchObjectField();
            objField.SearchObjectFieldValue = dataRow["NUM_PROTO"].ToString();
            objField.SearchObjectFieldID = "D12";
            objDoc.SearchObjectField.Add(objField);

            objField = new DocsPaVO.Grids.SearchObjectField();
            objField.SearchObjectFieldValue = dataRow["CODE_AUTHOR"].ToString();
            objField.SearchObjectFieldID = "D13";
            objDoc.SearchObjectField.Add(objField);

            objField = new DocsPaVO.Grids.SearchObjectField();
            objField.SearchObjectFieldValue = dataRow["DTA_ARCHIVIAZIONE"].ToString();
            objField.SearchObjectFieldID = "D14";
            objDoc.SearchObjectField.Add(objField);

            objField = new DocsPaVO.Grids.SearchObjectField();
            objField.SearchObjectFieldValue = dataRow["CHA_PERSONALE"].ToString();
            objField.SearchObjectFieldID = "D15";
            objDoc.SearchObjectField.Add(objField);

            objField = new DocsPaVO.Grids.SearchObjectField();
            objField.SearchObjectFieldValue = dataRow["CHA_PRIVATO"].ToString();
            objField.SearchObjectFieldID = "D16";
            objDoc.SearchObjectField.Add(objField);

            objField = new DocsPaVO.Grids.SearchObjectField();
            objField.SearchObjectFieldValue = dataRow["ULTIMA_NOTA"].ToString();
            objField.SearchObjectFieldID = "D17";
            objDoc.SearchObjectField.Add(objField);

            objField = new DocsPaVO.Grids.SearchObjectField();
            objField.SearchObjectFieldValue = dataRow["COD_FASCICOLI"].ToString();
            objField.SearchObjectFieldID = "D18";
            objDoc.SearchObjectField.Add(objField);

            objField = new DocsPaVO.Grids.SearchObjectField();
            objField.SearchObjectFieldValue = dataRow["DESC_AUTORE"].ToString();
            objField.SearchObjectFieldID = "D19";
            objDoc.SearchObjectField.Add(objField);

            objField = new DocsPaVO.Grids.SearchObjectField();
            objField.SearchObjectFieldValue = dataRow["DESC_RUOLO_AUTORE"].ToString();
            objField.SearchObjectFieldID = "D20";
            objDoc.SearchObjectField.Add(objField);

            objField = new DocsPaVO.Grids.SearchObjectField();
            objField.SearchObjectFieldValue = dataRow["DATA_ARRIVO"].ToString();
            objField.SearchObjectFieldID = "D21";
            objDoc.SearchObjectField.Add(objField);

            objField = new DocsPaVO.Grids.SearchObjectField();
            objField.SearchObjectFieldValue = dataRow["STATO"].ToString();
            objField.SearchObjectFieldID = "D22";
            objDoc.SearchObjectField.Add(objField);

            objField = new DocsPaVO.Grids.SearchObjectField();
            objField.SearchObjectFieldValue = dataRow["CHA_IMG"].ToString();
            objField.SearchObjectFieldID = "D23";
            objDoc.SearchObjectField.Add(objField);

            objField = new DocsPaVO.Grids.SearchObjectField();
            if (!String.IsNullOrEmpty(dataRow["cha_cod_t_a"].ToString()))
            {
                objField.SearchObjectFieldValue = new DocsPaVO.Security.InfoAtipicita() { CodiceAtipicita = dataRow["cha_cod_t_a"].ToString() }.DescrizioneAtipicita;
                objField.SearchObjectFieldValue = objField.SearchObjectFieldValue.Substring(1, objField.SearchObjectFieldValue.Length - 6);
            }
            else
                objField.SearchObjectFieldValue = String.Empty;
            objField.SearchObjectFieldID = "D24";
            objDoc.SearchObjectField.Add(objField);

            objField = new DocsPaVO.Grids.SearchObjectField();
            objField.SearchObjectFieldValue = dataRow["IN_ADL"].ToString();
            objField.SearchObjectFieldID = "IN_ADL";
            objDoc.SearchObjectField.Add(objField);

            objField = new DocsPaVO.Grids.SearchObjectField();
            objField.SearchObjectFieldValue = dataRow["IN_ADLROLE"].ToString();
            objField.SearchObjectFieldID = "IN_ADLROLE";
            objDoc.SearchObjectField.Add(objField);

            objField = new DocsPaVO.Grids.SearchObjectField();
            objField.SearchObjectFieldValue = dataRow["IN_CONSERVAZIONE"].ToString();
            objField.SearchObjectFieldID = "IN_CONSERVAZIONE";
            objDoc.SearchObjectField.Add(objField);

            objField = new DocsPaVO.Grids.SearchObjectField();
            objField.SearchObjectFieldValue = dataRow["CHA_IN_ARCHIVIO"].ToString();
            objField.SearchObjectFieldID = "CHA_IN_ARCHIVIO";
            objDoc.SearchObjectField.Add(objField);

            objField = new DocsPaVO.Grids.SearchObjectField();
            objField.SearchObjectFieldValue = dataRow["ID_TIPO_ATTO"].ToString();
            objField.SearchObjectFieldID = "ID_TIPO_ATTO";
            objDoc.SearchObjectField.Add(objField);

            objField = new DocsPaVO.Grids.SearchObjectField();
            objField.SearchObjectFieldValue = dataRow["DESC_TIPO_ATTO"].ToString();
            objField.SearchObjectFieldID = "U1";
            objDoc.SearchObjectField.Add(objField);

            objField = new DocsPaVO.Grids.SearchObjectField();
            objField.SearchObjectFieldValue = dataRow["ID_DOCUMENTO_PRINCIPALE"].ToString();
            objField.SearchObjectFieldID = "ID_DOCUMENTO_PRINCIPALE";
            objDoc.SearchObjectField.Add(objField);

            objField = new DocsPaVO.Grids.SearchObjectField();
            objField.SearchObjectFieldValue = dataRow["CHA_FIRMATO"].ToString();
            objField.SearchObjectFieldID = "CHA_FIRMATO";
            objDoc.SearchObjectField.Add(objField);

            objField = new DocsPaVO.Grids.SearchObjectField();
            objField.SearchObjectFieldValue = dataRow["CHA_TIPO_FIRMA"].ToString();
            objField.SearchObjectFieldID = "CHA_TIPO_FIRMA";
            objDoc.SearchObjectField.Add(objField);

            objField = new DocsPaVO.Grids.SearchObjectField();
            objField.SearchObjectFieldValue = dataRow["PROT_TIT"].ToString();
            objField.SearchObjectFieldID = "PROT_TIT";
            objDoc.SearchObjectField.Add(objField);

            objField = new DocsPaVO.Grids.SearchObjectField();
            objField.SearchObjectFieldValue = dataRow["ESISTE_NOTA"].ToString();
            objField.SearchObjectFieldID = "ESISTE_NOTA";
            objDoc.SearchObjectField.Add(objField);

            if (dataRow.Table.Columns.Contains("CONTATORE"))
            {
                objField = new DocsPaVO.Grids.SearchObjectField();
                objField.SearchObjectFieldValue = dataRow["CONTATORE"].ToString();
                objField.SearchObjectFieldID = "CONTATORE";
                objDoc.SearchObjectField.Add(objField);

            }

            if (dataRow.Table.Columns.Contains("ISTANZECONSERVAZIONE"))
            {
                objField = new DocsPaVO.Grids.SearchObjectField();
                objField.SearchObjectFieldValue = dataRow["ISTANZECONSERVAZIONE"].ToString();
                objField.SearchObjectFieldID = "ISTANZECONSERVAZIONE";
                objDoc.SearchObjectField.Add(objField);
            }

            if (dataRow.Table.Columns.Contains("IMPRONTA"))
            {
                objField = new DocsPaVO.Grids.SearchObjectField();
                objField.SearchObjectFieldValue = dataRow["IMPRONTA"].ToString();
                objField.SearchObjectFieldID = "IMPRONTA";
                objDoc.SearchObjectField.Add(objField);
            }

            if (dataRow.Table.Columns.Contains("NOME_ORIGINALE"))
            {
                objField = new DocsPaVO.Grids.SearchObjectField();
                objField.SearchObjectFieldValue = dataRow["NOME_ORIGINALE"].ToString();
                objField.SearchObjectFieldID = "NOME_ORIGINALE";
                objDoc.SearchObjectField.Add(objField);
            }

            if (dataRow.Table.Columns.Contains("COD_EXT_APP"))
            {
                objField = new DocsPaVO.Grids.SearchObjectField();
                objField.SearchObjectFieldValue = dataRow["COD_EXT_APP"].ToString();
                objField.SearchObjectFieldID = "COD_EXT_APP";
                objDoc.SearchObjectField.Add(objField);
            }

            if (dataRow.Table.Columns.Contains("dta_ins_adl"))
            {
                objField = new DocsPaVO.Grids.SearchObjectField();
                objField.SearchObjectFieldValue = dataRow["dta_ins_adl"].ToString();
                objField.SearchObjectFieldID = "DTA_ADL";
                objDoc.SearchObjectField.Add(objField);
            }

            // PEC 4 Requisito 3: ricerca documenti spediti
            if (dataRow.Table.Columns.Contains("esito_spedizione"))
            {
                objField = new DocsPaVO.Grids.SearchObjectField();
                objField.SearchObjectFieldValue = dataRow["esito_spedizione"].ToString();
                objField.SearchObjectFieldID = "esito_spedizione";
                objDoc.SearchObjectField.Add(objField);
            }

            // PEC 4 Requisito 3: ricerca documenti spediti
            if (dataRow.Table.Columns.Contains("count_ric_interop"))
            {
                objField = new DocsPaVO.Grids.SearchObjectField();
                objField.SearchObjectFieldValue = dataRow["count_ric_interop"].ToString();
                objField.SearchObjectFieldID = "count_ric_interop";
                objDoc.SearchObjectField.Add(objField);
            }
            // INTEGRAZIONE PITRE-PARER: stato conservazione
            if (dataRow.Table.Columns.Contains("StatoConservazione"))
            {
                objField = new DocsPaVO.Grids.SearchObjectField();
                objField.SearchObjectFieldValue = dataRow["StatoConservazione"].ToString();
                objField.SearchObjectFieldID = "stato_conservazione";
                objDoc.SearchObjectField.Add(objField);
            }
            // INTEGRAZIONE PITRE-PARER - MEV Policy
            // Codice policy
            if (dataRow.Table.Columns.Contains("CODICE_POLICY"))
            {
                objField = new DocsPaVO.Grids.SearchObjectField();
                objField.SearchObjectFieldValue = dataRow["CODICE_POLICY"].ToString();
                objField.SearchObjectFieldID = "CODICE_POLICY";
                objDoc.SearchObjectField.Add(objField);
            }
            // Contatore esecuzioni policy
            if (dataRow.Table.Columns.Contains("CONTATORE_POLICY"))
            {
                objField = new DocsPaVO.Grids.SearchObjectField();
                objField.SearchObjectFieldValue = dataRow["CONTATORE_POLICY"].ToString();
                objField.SearchObjectFieldID = "CONTATORE_POLICY";
                objDoc.SearchObjectField.Add(objField);
            }
            if (dataRow.Table.Columns.Contains("DATA_ESECUZIONE_POLICY"))
            {
                objField = new DocsPaVO.Grids.SearchObjectField();
                objField.SearchObjectFieldValue = dataRow["DATA_ESECUZIONE_POLICY"].ToString();
                objField.SearchObjectFieldID = "DATA_ESECUZIONE_POLICY";
                objDoc.SearchObjectField.Add(objField);
            }

            // Conservazione interna
            if (dataRow.Table.Columns.Contains("is_doc_conservato"))
            {
                objField = new DocsPaVO.Grids.SearchObjectField();
                objField.SearchObjectFieldValue = dataRow["is_doc_conservato"].ToString();
                objField.SearchObjectFieldID = "is_doc_conservato";
                objDoc.SearchObjectField.Add(objField);
            }

            if (dataRow.Table.Columns.Contains("CHA_TASK_STATUS"))
            {
                objField = new DocsPaVO.Grids.SearchObjectField();
                objField.SearchObjectFieldValue = dataRow["CHA_TASK_STATUS"].ToString();
                objField.SearchObjectFieldID = "CHA_TASK_STATUS";
                objDoc.SearchObjectField.Add(objField);

            }

            if (visibleFieldsTemplate != null && visibleFieldsTemplate.Length > 0)
            {
                foreach (Field d in visibleFieldsTemplate)
                {
                    objField = new DocsPaVO.Grids.SearchObjectField();
                    string nameColumn = "A" + d.CustomObjectId.ToString();
                    objField.SearchObjectFieldValue = dataRow[nameColumn].ToString();
                    objField.SearchObjectFieldID = d.FieldId;
                    objDoc.SearchObjectField.Add(objField);
                }
            }

            if (dataRow.Table.Columns.Contains("IN_LIBROFIRMA"))
                objDoc.SearchObjectField.Add(new DocsPaVO.Grids.SearchObjectField()
            {
                    SearchObjectFieldValue = dataRow["IN_LIBROFIRMA"].ToString(),
                    SearchObjectFieldID = "IN_LIBROFIRMA"
                });

            //TODO aggiungere altro searchobjectfield
            //if (dataRow.Table.Columns.Contains("dettagliTrasm"))
            //{
            //    objField = new DocsPaVO.Grids.SearchObjectField();
            //    objField.SearchObjectFieldValue = dataRow["dettagliTrasm"].ToString();
            //    objField.SearchObjectFieldID = "dettagliTrasm";
            //    objDoc.SearchObjectField.Add(objField);
            //}

            #region Invalid Character
            objDoc = (DocsPaVO.Grids.SearchObject) DocsPaUtils.Functions.Functions.XML_Serialization_Deserialization_By_Encode(
                objDoc, typeof(DocsPaVO.Grids.SearchObject), null, System.Text.Encoding.UTF8);
            #endregion

            return objDoc;
        }

        /// <summary>
        /// Reperimento del numero totale di documenti estratti nella query paginata
        /// </summary>
        /// <param name="idGruppo"></param>
        /// <param name="idPeople"></param>
        /// <param name="objQueryList"></param>
        /// <param name="getIdProfilesList">True se si desidera ricevere anche la lista dei system id dei documenti restituiti dalla ricerca</param>
        /// <param name="idProfileList">Lista dei system id dei documenti restituiti dalla ricerca</param>
        /// <returns></returns>
        private int GetCountDocumentiCustom(string idGruppo,
                                        string idPeople,
                                        bool ricercaVeloce,
                                        int maxRisultatiQuery,
                                        string fromTables,
                                        string filterString,
                                        bool unionStampeReg,
                                        string filters_stampe,
                                        bool security,
                                        bool getIdProfilesList,
                                        bool stampaReg,
                                        string queryFromStampe,
                                        string orderCriteria,
                                        out List<SearchResultInfo> idProfileList)
        {
            // Lista degli id profile restituiti dalla ricerca
            List<SearchResultInfo> idProfiles = null;
            // Il dataset in cui memorizzarre il risultato della query
            DataSet dataSet;

            int retValue = 0;

            string queryName = string.Empty;
            if (ricercaVeloce)
                queryName = "S_GET_COUNT_ROWS_RICERCA_DOCUMENTI_VELOCE_CUSTOM";
            else
                if (getIdProfilesList)
                    queryName = "S_GET_COUNT_ROWS_RICERCA_DOCUMENTI_MASSIVE_OPERATIONS_CUSTOM";
                else
                    queryName = "S_GET_COUNT_ROWS_RICERCA_DOCUMENTI_CUSTOM";

            DocsPaUtils.Query queryDef = DocsPaUtils.InitQuery.getInstance().getQuery(queryName);

            string queryFrom = string.Empty;
            string queryOrd = string.Empty;
            // Bug Parentesi chiusa mancante
            //string verSecurity = "(A.SYSTEM_ID = A.SYSTEM_ID ";
            string verSecurity = " (A.SYSTEM_ID = A.SYSTEM_ID )";


            if (ricercaVeloce)
            {
                queryDef.setParam("order", orderCriteria);

            }
            if (stampaReg)
            {
                queryDef.setParam("fromOther", queryFromStampe);
                queryDef.setParam("stampe", filters_stampe);
            }
            else
            {
                queryDef.setParam("fromOther", "");
                queryDef.setParam("stampe", "");
            }

            // Parametri specifici per query oracle
            // Parametri specifici per query oracle
            string preferedIndex = "/*+index (a)*/";
            if ((filterString.IndexOf("A.VAR_PROF_OGGETTO") > -1 ||
                filterString.IndexOf("G.VAR_DESC_CORR") > -1) && Cfg_USE_TEXT_INDEX != "0")
            // Impostazione indice da utilizzare
            {
                if (filterString.ToUpper().IndexOf("CONTAINS(A.VAR_PROF_OGGETTO") > -1)
                    preferedIndex = "/*+index (a indx_ogg_text)*/ ";

                //TODO: se var_desc_corr
            }

            if (ricercaVeloce)
                queryDef.setParam("dataInizioAnno", "01/01/" + DateTime.Now.Year.ToString() + " 00:00:00");

            string idAmm = "0";
            if (!string.IsNullOrEmpty(idPeople))
            {
                DocsPaDB.Query_DocsPAWS.Utenti u = new Utenti();
                idAmm = u.GetIdAmm(idPeople);
            }
            string idRuoloPubblico = DocsPaUtils.Configuration.InitConfigurationKeys.GetValue(idAmm, "ENABLE_FASCICOLO_PUBBLICO");
            if (string.IsNullOrEmpty(idRuoloPubblico))
                idRuoloPubblico = "0";
            if (security)
            {
                bool IS_ARCHIVISTA_DEPOSITO;
                DocsPaDB.Query_DocsPAWS.Utenti ut = new Utenti();
                IS_ARCHIVISTA_DEPOSITO = ut.isUtArchivistaDeposito(idPeople, idGruppo);
                if (filterString.ToUpper().IndexOf("AND id_documento_principale IS NOT NULL".ToUpper()) > -1 ||
            (filterString.IndexOf("NOT A.ID_DOCUMENTO_PRINCIPALE IS NULL") > -1) ||
                IS_ARCHIVISTA_DEPOSITO)
                {
                    if (dbType.ToUpper().Equals("SQL"))
                        verSecurity = "(" + this.getUserDB() + ".checkSecurityDocumento(A.SYSTEM_ID, " + idPeople + ", " + idGruppo + ", " + idRuoloPubblico + ",'D') > 0)";
                    else
                        verSecurity = "(checkSecurityDocumento(A.SYSTEM_ID, " + idPeople + ", " + idGruppo + ", " + idRuoloPubblico + ",'D') > 0)";
                }
                else
                {
                    if (IndexSecurity())
                        verSecurity = " EXISTS (select /*+INDEX(e) */  'x' from security e where a.system_id=e.thing and e.PERSONORGROUP in (@idPeople@, @idGruppo@, @idRuoloPubblico@) and e.ACCESSRIGHTS>0) ";
                    else
                        verSecurity = " EXISTS (select 'x' from security e where a.system_id=e.thing and e.PERSONORGROUP in (@idPeople@, @idGruppo@, @idRuoloPubblico@) and e.ACCESSRIGHTS>0) ";
                }
            }

            if (verSecurity == string.Empty)
                // Bug Parentesi chiusa mancante
                //verSecurity = " (A.SYSTEM_ID = A.SYSTEM_ID ";
                verSecurity = " (A.SYSTEM_ID = A.SYSTEM_ID )";

            queryDef.setParam("security", verSecurity);

            //Nel caso di ORACLE 12C non inserisco l'indice poiche pegiora le performance.
            string value = DocsPaUtils.Configuration.InitConfigurationKeys.GetValue("0", "BE_INDICE_QUERY_RICERCHE");
            if (string.IsNullOrEmpty(value) || !value.Equals("1"))
                preferedIndex = string.Empty;

            queryDef.setParam("index", preferedIndex);
            queryDef.setParam("rowCount", maxRisultatiQuery.ToString());
            queryDef.setParam("idGruppo", idGruppo);
            queryDef.setParam("idPeople", idPeople);
            queryDef.setParam("idRuoloPubblico", idRuoloPubblico);
            // Il flag indica se includere nella ricerca anche i documenti di tipo allegato
            queryDef.setParam("from", fromTables);
            queryDef.setParam("filters", filterString);
            queryDef.setParam("dbuser", DocsPaDbManagement.Functions.Functions.GetDbUserSession());

            queryDef.setParam("from", fromTables);
            queryDef.setParam("filters", filterString);

            // aggiungo in union i risultati della ricerca stampe registro (se richiesta)
            string unionStampe = string.Empty;
            if (unionStampeReg)
            {
                unionStampe += " UNION ";
                if (dbType.ToUpper().Equals("SQL"))
                {
                    if (getIdProfilesList)
                    {
                        unionStampe += "SELECT top " + maxRisultatiQuery.ToString() +
                            "A.SYSTEM_ID, (CASE WHEN a.num_proto IS NOT NULL THEN a.num_proto WHEN a.num_proto IS NULL THEN a.docnumber END) AS codice FROM PROFILE a, DPA_STAMPAREGISTRI R " +
                            "WHERE (" + DocsPaDbManagement.Functions.Functions.GetDbUserSession() + ".checkSecurityDocumento(A.SYSTEM_ID, " + idPeople + ", " + idGruppo + ", " + idRuoloPubblico + ",'D') > 0) ";
                    }
                    else
                    {
                        unionStampe += "SELECT top " + maxRisultatiQuery.ToString() +
                           "A.SYSTEM_ID FROM PROFILE a, DPA_STAMPAREGISTRI R " +
                           "WHERE (" + DocsPaDbManagement.Functions.Functions.GetDbUserSession() + ".checkSecurityDocumento(A.SYSTEM_ID, " + idPeople + ", " + idGruppo + ", " + idRuoloPubblico + ",'D') > 0) ";
                    }

                    if (!string.IsNullOrEmpty(filters_stampe))
                        unionStampe += filters_stampe;
                    else
                        unionStampe += " AND A.DOCNUMBER = R.DOCNUMBER";
                }
                else
                {
                    if (getIdProfilesList)
                    {
                        unionStampe += "SELECT A.SYSTEM_ID, (CASE WHEN A.num_proto IS NOT NULL THEN A.num_proto WHEN A.num_proto IS NULL THEN A.docnumber END) AS codice FROM PROFILE A, DPA_STAMPAREGISTRI R WHERE " +
                           " (checkSecurityDocumento(A.SYSTEM_ID, " + idPeople + ", " + idGruppo + ", " + idRuoloPubblico + ",'D') > 0) ";
                    }
                    else
                    {
                        unionStampe += "SELECT A.SYSTEM_ID FROM PROFILE A, DPA_STAMPAREGISTRI R WHERE " +
                           " (checkSecurityDocumento(A.SYSTEM_ID, " + idPeople + ", " + idGruppo + ", " + idRuoloPubblico + ",'D') > 0) ";
                    }
                    if (!string.IsNullOrEmpty(filters_stampe))
                        unionStampe += filters_stampe;
                    else
                        unionStampe += " AND A.DOCNUMBER = R.DOCNUMBER";
                }
            }
            else
                unionStampe = "";

            if (dbType.ToUpper().Equals("SQL"))
            {
                string with = string.Empty;
                if(!string.IsNullOrEmpty(idCorrespondentTemplate))
                {
                     with = " WITH N (system_id) AS (SELECT system_id FROM dpa_corr_globali WHERE system_id = " + idCorrespondentTemplate + " UNION ALL SELECT  np.system_id FROM dpa_corr_globali AS np JOIN N ON N.system_id = np.id_old )";
                }
                else if (!string.IsNullOrEmpty(chaiTableDef))
                {
                    with = chaiTableDef;
                    //chaiTableDef = string.Empty;
                }
                
                queryDef.setParam("with", with);
            }
            queryDef.setParam("unionStampe", unionStampe);

            string commandText = queryDef.getSQL();


            logger.Debug(commandText);

            // Se è richiesta la lista dei system id dei risultati restituiti dalla ricerca,
            // viene compilata la lista altrimenti viene restituito il numero di documenti
            // trovati
            if (getIdProfilesList)
            {
                // Creazione della lista di idProfile
                idProfiles = new List<SearchResultInfo>();

                // Esecuzione query
                ExecuteQuery(out dataSet, commandText);

                // Analisi del risultato e compilazione della lista di systemId
                if (dataSet != null)
                    foreach (DataRow dataRow in dataSet.Tables[0].Rows)
                    {
                        SearchResultInfo temp = new SearchResultInfo();
                        temp.Id = dataRow["SYSTEM_ID"].ToString();
                        temp.Codice = dataRow["CODICE"].ToString();
                        idProfiles.Add(temp);
                    }

                // Calcolo del numero di documenti individuati
                retValue = idProfiles.Count;

            }
            else
            {
                ExecuteQuery(out dataSet, commandText);

                if (ricercaVeloce)
                {
                    if (dataSet != null && dataSet.Tables != null && dataSet.Tables[0] != null && dataSet.Tables[0].Rows != null)
                    {
                        retValue = dataSet.Tables[0].Rows.Count;
                    }
                    else
                    {
                        retValue = 0;
                    }
                }
                else
                {
                    string field;
                    if (ExecuteScalar(out field, commandText))
                        Int32.TryParse(field, out retValue);
                }

            }

            idProfileList = idProfiles;

            // Restituzione valore
            return retValue;
        }

        public void UpdateRiferimentoMittente(string riferimento, string systemId)
        {
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("U_RIFF_MITT");
            q.setParam("riferimento", riferimento);
            q.setParam("systemId", systemId);
            string queryString = q.getSQL();
            logger.Debug(queryString);

            using (DBProvider dbProvider = new DBProvider())
            {
                dbProvider.ExecuteNonQuery(queryString);
            }
            
        }

        public DocsPaVO.documento.InfoDocumento[] GetListaDocumentiPolicyConservazione(DocsPaVO.Conservazione.Policy policy, string lastSystemId)
        {
            InfoDocumento[] result = null;
            string filtri = string.Empty;
            string from = string.Empty;
            int d = 0;
            string userDb = string.Empty;
            string dbType = System.Configuration.ConfigurationManager.AppSettings["DBType"];
            if (dbType.ToUpper() == "SQL")
                userDb = DocsPaDbManagement.Functions.Functions.GetDbUserSession() + ".";

            //Filtri tipo documento
            #region filtri
            if (policy.arrivo || policy.partenza || policy.interno || policy.grigio)
            {
                filtri = filtri + " AND (";

                if (policy.arrivo)
                {
                    if (d == 0)
                    {
                        filtri = filtri + " (a.cha_tipo_proto IN ('A') AND a.cha_da_proto = '0' AND a.id_documento_principale IS NULL) ";
                        d++;
                    }
                    else
                    {
                        filtri = filtri + " OR (a.cha_tipo_proto IN ('A') AND a.cha_da_proto = '0' AND a.id_documento_principale IS NULL) ";
                    }

                }
                if (policy.partenza)
                {
                    if (d == 0)
                    {
                        filtri = filtri + " (a.cha_tipo_proto IN ('P') AND a.cha_da_proto = '0' AND a.id_documento_principale IS NULL) ";
                        d++;
                    }
                    else
                    {
                        filtri = filtri + " OR (a.cha_tipo_proto IN ('P') AND a.cha_da_proto = '0' AND a.id_documento_principale IS NULL) ";
                    }
                }
                if (policy.interno)
                {
                    if (d == 0)
                    {
                        filtri = filtri + " (a.cha_tipo_proto IN ('I') AND a.cha_da_proto = '0' AND a.id_documento_principale IS NULL) ";
                        d++;
                    }
                    else
                    {
                        filtri = filtri + " OR (a.cha_tipo_proto IN ('I') AND a.cha_da_proto = '0' AND a.id_documento_principale IS NULL) ";
                    }
                }
                if (policy.grigio)
                {
                    if (d == 0)
                    {
                        filtri = filtri + " (a.cha_tipo_proto IN ('G') AND a.cha_da_proto = '0' AND a.id_documento_principale IS NULL) ";
                        d++;
                    }
                    else
                    {
                        filtri = filtri + " OR (a.cha_tipo_proto IN ('G') AND a.cha_da_proto = '0' AND a.id_documento_principale IS NULL) ";
                    }
                }
                filtri = filtri + " ) ";
            }
            if (!string.IsNullOrEmpty(policy.idTemplate) && !(policy.idTemplate).Equals("-1"))
            {
                filtri = filtri + " AND a.id_tipo_atto = " + policy.idTemplate;
                if (policy.template != null)
                {
                    DocsPaDB.Query_DocsPAWS.Model model = new Model();
                    filtri = filtri + model.getSeriePerRicercaProfilazione(policy.template, "");
                }
            }
            if (!string.IsNullOrEmpty(policy.idStatoDiagramma) && !(policy.idStatoDiagramma).Equals("-1"))
            {
                filtri = filtri + " AND t.ID_STATO = " + policy.idStatoDiagramma + " AND di.DOC_NUMBER = a.DOCNUMBER and di.ID_STATO = sti.system_id and t.ID_STATO = di.ID_STATO";
                from += ", dpa_ass_diagrammi t, dpa_diagrammi di, dpa_stati sti";
            }
            if (!string.IsNullOrEmpty(policy.classificazione) && !(policy.classificazione).Equals("-1"))
            {
                if (!string.IsNullOrEmpty(policy.tipoClassificazione))
                {
                    from += ", project_components b";
                    if (policy.includiSottoNodi)
                    {
                        string queryGer = "";
                        if (policy.tipoClassificazione.Equals("1"))
                        {
                            //modifica SAB per gestione sql server

                            if (dbType.ToUpper() == "SQL")
                            {
                                queryGer = " ( ";
                                queryGer = queryGer +
                                "select system_id from " + userDb + "fn_CONS_getSottoFascFolderGen(" + policy.classificazione + ") "; ;
                                queryGer = " ) ";

                                filtri = filtri + " AND b.LINK = a.system_id AND b.TYPE = 'D' AND b.project_id IN " + queryGer;
                            }
                            else
                                filtri = filtri + " AND b.LINK = a.system_id AND b.TYPE = 'D' AND b.project_id IN (select system_id from project where cha_tipo_proj in ('C', 'F') AND nvl(cha_tipo_fascicolo,'N') != 'P' connect by prior system_id = id_parent start with SYSTEM_ID = " + policy.classificazione + " )";

                        }
                        if (policy.tipoClassificazione.Equals("2"))
                        {
                            //modifica SAB per gestione sql server
                            queryGer = "";
                            if (dbType.ToUpper() == "SQL")
                            {
                                queryGer = " ( ";
                                queryGer = queryGer +
                                "select system_id from " + userDb + "fn_CONS_getSottoFascFolder(" + policy.classificazione + ") "; ;
                                queryGer = " ) ";

                                filtri = filtri + " AND b.LINK = a.system_id AND b.TYPE = 'D' AND b.project_id IN " + queryGer;

                            }
                            else
                                filtri = filtri + " AND b.LINK = a.system_id AND b.TYPE = 'D' AND b.project_id IN (select system_id from project where cha_tipo_proj in ('C', 'F')  connect by prior system_id = id_parent start with SYSTEM_ID = " + policy.classificazione + ")";

                        }
                        if (policy.tipoClassificazione.Equals("3"))
                        {
                            //modifica SAB per gestione sql server
                            queryGer = "";
                            if (dbType.ToUpper() == "SQL")
                            {
                                queryGer = " ( ";
                                queryGer = queryGer +
                                "select system_id from " + userDb + "fn_CONS_getSottoFascFolderProc(" + policy.classificazione + ") "; ;
                                queryGer = " ) ";

                                filtri = filtri + " AND b.LINK = a.system_id AND b.TYPE = 'D' AND b.project_id IN " + queryGer;
                            }
                            else
                                filtri = filtri + " AND b.LINK = a.system_id AND b.TYPE = 'D' AND b.project_id IN (select system_id from project where cha_tipo_proj in ('C', 'F') and cha_tipo_fascicolo = 'P' connect by prior system_id = id_parent start with SYSTEM_ID = " + policy.classificazione + " )";
                        }
                    }
                    else
                    {
                        string queryGer = "";
                        if (policy.tipoClassificazione.Equals("1"))
                        {

                            queryGer = "";
                            if (dbType.ToUpper() == "SQL")
                            {
                                queryGer = " ( ";
                                queryGer = queryGer +

                                "   select system_id from fn_CONS_getSottoFascicoliGen( " + policy.classificazione + ") " +
                                "   union   " +
                                "   system_id FROM project WHERE (cha_tipo_proj = 'C') AND id_fascicolo IN ( " +
                                "   select system_id from fn_CONS_getSottoFascicoliGen(" + policy.classificazione + ")) ";

                                queryGer = queryGer + " )";

                                filtri = filtri + " AND b.LINK = a.system_id AND b.TYPE = 'D' AND b.project_id IN" + queryGer;
                            }
                            else
                            {
                                filtri = filtri + " AND b.LINK = a.system_id AND b.TYPE = 'D' AND b.project_id IN (SELECT system_id FROM project WHERE (cha_tipo_proj = 'F' and cha_tipo_fascicolo='G') CONNECT BY PRIOR id_parent = system_id START WITH id_parent = " + policy.classificazione + " UNION SELECT system_id FROM project WHERE (cha_tipo_proj = 'C') AND id_fascicolo IN (SELECT system_id FROM project WHERE (cha_tipo_proj = 'F' and cha_tipo_fascicolo='G') CONNECT BY PRIOR id_parent = system_id START WITH id_parent = " + policy.classificazione + "))";
                            }


                        }
                        if (policy.tipoClassificazione.Equals("2"))
                        {
                            queryGer = "";
                            if (dbType.ToUpper() == "SQL")
                            {
                                queryGer = "";
                                if (dbType.ToUpper() == "SQL")
                                {
                                    queryGer = " ( ";
                                    queryGer = queryGer +

                                    "   select system_id from fn_CONS_getSottoFascicoli( " + policy.classificazione + ") " +
                                    "   union   " +
                                    "   system_id FROM project WHERE (cha_tipo_proj = 'C') AND id_fascicolo IN ( " +
                                    "   select system_id from fn_CONS_getSottoFascicoli(" + policy.classificazione + ")) ";

                                    queryGer = queryGer + " )";

                                    filtri = filtri + " AND b.LINK = a.system_id AND b.TYPE = 'D' AND b.project_id IN" + queryGer;
                                }
                                else
                                {
                                    filtri = filtri + " AND b.LINK = a.system_id AND b.TYPE = 'D' AND b.project_id IN (SELECT system_id FROM project WHERE (cha_tipo_proj = 'F') CONNECT BY PRIOR id_parent = system_id START WITH id_parent = " + policy.classificazione + " UNION SELECT system_id FROM project WHERE (cha_tipo_proj = 'C') AND id_fascicolo IN (SELECT system_id FROM project WHERE (cha_tipo_proj = 'F') CONNECT BY PRIOR id_parent = system_id START WITH id_parent = " + policy.classificazione + "))";
                                }
                                //filtri = filtri + " AND b.LINK = a.system_id AND b.TYPE = 'D' AND b.project_id IN (SELECT system_id FROM project WHERE (cha_tipo_proj = 'F') CONNECT BY PRIOR id_parent = system_id START WITH id_parent = " + policy.classificazione + " UNION SELECT system_id FROM project WHERE (cha_tipo_proj = 'C') AND id_fascicolo IN (SELECT system_id FROM project WHERE (cha_tipo_proj = 'F') CONNECT BY PRIOR id_parent = system_id START WITH id_parent = " + policy.classificazione + "))";
                            }
                            if (policy.tipoClassificazione.Equals("3"))
                            {
                                queryGer = " ( ";
                                queryGer = queryGer +

                                 "   select system_id from fn_CONS_getSottoFascicoli( " + policy.classificazione + ") " +
                                 "   union   " +
                                 "   system_id FROM project WHERE (cha_tipo_proj = 'C') AND id_fascicolo IN ( " +
                                 "   select system_id from fn_CONS_getSottoFascicoliProc(" + policy.classificazione + ")) ";

                                queryGer = queryGer + " )";

                                filtri = filtri + " AND b.LINK = a.system_id AND b.TYPE = 'D' AND b.project_id IN" + queryGer;
                            }
                            else
                            {
                                filtri = filtri + " AND b.LINK = a.system_id AND b.TYPE = 'D' AND b.project_id IN (SELECT system_id FROM project WHERE (cha_tipo_proj = 'F' and cha_tipo_fascicolo='P') CONNECT BY PRIOR id_parent = system_id START WITH id_parent = " + policy.classificazione + " UNION SELECT system_id FROM project WHERE (cha_tipo_proj = 'C') AND id_fascicolo IN (SELECT system_id FROM project WHERE (cha_tipo_proj = 'F' and cha_tipo_fascicolo='P')CONNECT BY PRIOR id_parent = system_id START WITH id_parent = " + policy.classificazione + "))";
                            }

                        }
                    }
                }
            }
            if (policy.FormatiDocumento != null && policy.FormatiDocumento.Count > 0)
            {
                filtri = filtri + " AND (";
                for (int i = 0; i < policy.FormatiDocumento.Count; i++)
                {
                    //modifica sab per gestione sql server
                    if (dbType.ToUpper() == "SQL")
                        filtri = filtri + " UPPER(@dbuser@.getchaimg (a.docnumber)) ='" + (policy.FormatiDocumento[i].FileExtension).ToUpper() + "'";
                    else
                        filtri = filtri + " UPPER(getchaimg (a.docnumber)) ='" + (policy.FormatiDocumento[i].FileExtension).ToUpper() + "'";

                    if (i < policy.FormatiDocumento.Count - 1)
                    {
                        filtri = filtri + " OR ";
                    }
                }
                filtri = filtri + ")";
            }
            if (!string.IsNullOrEmpty(policy.idAOO) && !(policy.idAOO).Equals("-1"))
            {
                filtri = filtri + " AND a.ID_REGISTRO = " + policy.idAOO;
            }
            if (!string.IsNullOrEmpty(policy.idRf) && !(policy.idRf).Equals("-1"))
            {
                filtri = filtri + " AND a.ID_RUOLO_CREATORE in (select el.ID_RUOLO_IN_UO  from dpa_l_ruolo_reg el where el.ID_REGISTRO = " + policy.idRf + ")";
            }
            if (!string.IsNullOrEmpty(policy.idUoCreatore) && !(policy.idUoCreatore).Equals("-1"))
            {

                if (!policy.uoSottoposte)
                {
                    filtri = filtri + " AND a.ID_UO_CREATORE = " + policy.idUoCreatore;
                }
                else
                {
                    if (dbType.ToUpper() == "SQL")
                    {
                        filtri = filtri + " AND a.ID_UO_CREATORE IN (select system_id from " + userDb + "fn_CONS_getSottoalberoUO(" + policy.idUoCreatore + "," + policy.idAmministrazione + ") )";
                    }
                    else
                        filtri = filtri + " AND a.ID_UO_CREATORE IN (select p.SYSTEM_ID from dpa_corr_globali p start with p.SYSTEM_ID = " + policy.idUoCreatore + " connect by prior p.SYSTEM_ID = p.ID_PARENT AND p.CHA_TIPO_URP = 'U' AND p.ID_AMM=" + policy.idAmministrazione + ")";

                }
            }

            if (!string.IsNullOrEmpty(policy.tipoDataCreazione))
            {
                if (policy.tipoDataCreazione.Equals("0"))
                {
                    if (!string.IsNullOrEmpty(policy.dataCreazioneDa))
                    {
                        if (dbType.ToUpper() == "SQL")
                            filtri = filtri + " AND a.creation_time >= " + DocsPaDbManagement.Functions.Functions.ToDate(policy.dataCreazioneDa);
                        else
                            filtri = filtri + " AND a.creation_time >=" + " (SELECT " + DocsPaDbManagement.Functions.Functions.ToDate(policy.dataCreazioneDa) + " from dual) ";

                    }
                }
                if (policy.tipoDataCreazione.Equals("1"))
                {
                    if (!string.IsNullOrEmpty(policy.dataCreazioneDa))
                    {
                        if (dbType.ToUpper() == "SQL")
                            filtri = filtri + " AND a.creation_time >= " + DocsPaDbManagement.Functions.Functions.ToDate(policy.dataCreazioneDa);
                        else
                            filtri = filtri + " AND a.creation_time >=" + " (SELECT " + DocsPaDbManagement.Functions.Functions.ToDate(policy.dataCreazioneDa) + " from dual) ";
                    }
                    if (!string.IsNullOrEmpty(policy.dataCreazioneA))
                    {
                        if (dbType.ToUpper() == "SQL")
                            filtri = filtri + " AND a.creation_time < " + DocsPaDbManagement.Functions.Functions.ToDate(policy.dataCreazioneA);
                        else
                            filtri = filtri + " AND a.creation_time <" + " (SELECT " + DocsPaDbManagement.Functions.Functions.ToDate(policy.dataCreazioneA) + " from dual) ";
                    }
                }
                if (policy.tipoDataCreazione.Equals("2"))
                {

                    if (dbType.ToUpper() == "SQL")
                        filtri = filtri + "AND convert(varchar(10), A.creation_time, 103) =  convert(varchar(10), GETDATE(), 103)";
                    else
                        filtri = filtri + " AND to_char(A.creation_time, 'DD/MM/YYYY') =(select to_char(sysdate, 'DD/MM/YYYY') from dual)";
                }
                if (policy.tipoDataCreazione.Equals("3"))
                {

                    if (dbType.ToUpper() == "SQL")
                        filtri = filtri + " AND A.creation_time >= convert(varchar(10), getDate() + (1-datepart( weekday, getDate())), 103) AND A.creation_time< convert(varchar(10), getDate() + (8-datepart( weekday, getDate())), 103)";
                    else
                        filtri = filtri + " AND A.creation_time>=(select to_date(to_char(sysdate+ (1-to_char(sysdate,'D')))) startdayofweek from dual) AND A.creation_time<(select to_date(to_char(sysdate+ (8-to_char(sysdate,'D')))) enddayofweek from dual) ";
                }
                if (policy.tipoDataCreazione.Equals("4"))
                {

                    if (dbType.ToUpper() == "SQL")
                        filtri = filtri + " AND A.creation_time>= convert(varchar(10),DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE()), 0), 103) as start_date  AND A.creation_time<convert(varchar(10), DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE())+ 1, 0), 103) as DAY  ";
                    else
                        filtri = filtri + " AND A.creation_time>=(select to_date(trunc(sysdate,'MM')) as start_date from dual) AND A.creation_time<(select to_date(last_day(sysdate)+1) as DAY from dual)  ";
                }
                if (policy.tipoDataCreazione.Equals("5"))
                {

                    filtri = filtri + " AND A.creation_time BETWEEN " + DocsPaDbManagement.Functions.Functions.ToDateBetween("01/01/" + DateTime.Now.ToString("yyyy").ToString(), true) + " AND " + DocsPaDbManagement.Functions.Functions.ToDateBetween("31/12/" + DateTime.Now.ToString("yyyy").ToString(), false);
                }
            }

            if (!string.IsNullOrEmpty(policy.tipoDataProtocollazione))
            {
                if (policy.tipoDataProtocollazione.Equals("0"))
                {
                    if (!string.IsNullOrEmpty(policy.dataProtocollazioneDa))
                    {
                        if (dbType.ToUpper() == "SQL")
                            filtri = filtri + " AND a.dta_proto >=" + DocsPaDbManagement.Functions.Functions.ToDate(policy.dataProtocollazioneDa);
                        else
                            filtri = filtri + " AND a.dta_proto >=" + " (SELECT " + DocsPaDbManagement.Functions.Functions.ToDate(policy.dataProtocollazioneDa) + " from dual) ";
                    }
                }
                if (policy.tipoDataProtocollazione.Equals("1"))
                {
                    if (!string.IsNullOrEmpty(policy.dataProtocollazioneDa))
                    {
                        if (dbType.ToUpper() == "SQL")
                            filtri = filtri + " AND a.dta_proto >=" + DocsPaDbManagement.Functions.Functions.ToDate(policy.dataProtocollazioneDa);
                        else
                            filtri = filtri + " AND a.dta_proto >=" + " (SELECT " + DocsPaDbManagement.Functions.Functions.ToDate(policy.dataProtocollazioneDa) + " from dual) ";
                    }
                    if (!string.IsNullOrEmpty(policy.dataProtocollazioneA))
                    {
                        if (dbType.ToUpper() == "SQL")
                            filtri = filtri + " AND a.dta_proto <" + DocsPaDbManagement.Functions.Functions.ToDate(policy.dataProtocollazioneA);
                        else
                            filtri = filtri + " AND a.dta_proto <" + " (SELECT " + DocsPaDbManagement.Functions.Functions.ToDate(policy.dataProtocollazioneA) + " from dual) ";
                    }
                }
                if (policy.tipoDataProtocollazione.Equals("2"))
                {

                    if (dbType.ToUpper() == "SQL")
                        filtri = filtri + "AND convert(varchar(10), A.dta_proto, 103) =  convert(varchar(10), GETDATE(), 103)";
                    else
                        filtri = filtri + " AND to_char(A.dta_proto, 'DD/MM/YYYY') =(select to_char(sysdate, 'DD/MM/YYYY') from dual)";
                }
                if (policy.tipoDataProtocollazione.Equals("3"))
                {

                    if (dbType.ToUpper() == "SQL")
                        filtri = filtri + " AND A.dta_proto>= convert(varchar(10), getDate() + (1-datepart( weekday, getDate())), 103) AND A.dta_proto < convert(varchar(10), getDate() + (8-datepart( weekday, getDate())), 103)";
                    else
                        filtri = filtri + " AND A.dta_proto>=(select to_date(to_char(sysdate+ (1-to_char(sysdate,'D')))) startdayofweek from dual) AND A.dta_proto<(select to_date(to_char(sysdate+ (8-to_char(sysdate,'D')))) enddayofweek from dual) ";
                }
                if (policy.tipoDataProtocollazione.Equals("4"))
                {

                    if (dbType.ToUpper() == "SQL")
                        filtri = filtri + " AND A.dta_proto>= convert(varchar(10),DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE()), 0), 103) as start_date  AND A.dta_proto<convert(varchar(10), DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE())+ 1, 0), 103) as DAY  ";
                    else
                        filtri = filtri + " AND A.dta_proto>=(select to_date(trunc(sysdate,'MM')) as start_date from dual) AND A.dta_proto<(select to_date(last_day(sysdate)+1) as DAY from dual)  ";
                }
                if (policy.tipoDataProtocollazione.Equals("5"))
                {
                    filtri = filtri + " AND A.dta_proto BETWEEN " + DocsPaDbManagement.Functions.Functions.ToDateBetween("01/01/" + DateTime.Now.ToString("yyyy").ToString(), true) + " AND " + DocsPaDbManagement.Functions.Functions.ToDateBetween("31/12/" + DateTime.Now.ToString("yyyy").ToString(), false);
                }
                if (policy.soloFirmati)
                {
                    if (dbType.ToUpper() == "SQL")
                        filtri = filtri + " AND @dbuser@.AtLeastOneFirmato(A.DOCNUMBER) = '1'";
                    else
                        filtri = filtri + " AND AtLeastOneFirmato(A.DOCNUMBER) = '1'";
                }
                if (policy.soloDigitali)
                {
                    if (dbType.ToUpper() == "SQL")
                        filtri = filtri + " AND @dbuser@.AtLeastOneCartaceo(A.DOCNUMBER) != '1'";
                    else
                        filtri = filtri + " AND AtLeastOneCartaceo(A.DOCNUMBER) != '1'";
                }

            }




            #endregion

            DataSet ds = new DataSet();

            DocsPaUtils.Query queryDef = DocsPaUtils.InitQuery.getInstance().getQuery("S_GET_DOCUMENT_WITH_POLICY");
            queryDef.setParam("filtri", filtri);
            queryDef.setParam("from", from);
            queryDef.setParam("idPolicy", policy.system_id);
            queryDef.setParam("idAmm", policy.idAmministrazione);
            queryDef.setParam("dbuser", DocsPaDbManagement.Functions.Functions.GetDbUserSession());

            string commandText = queryDef.getSQL();

            logger.Debug(commandText);


            using (DocsPaDB.DBProvider dbProvider = new DBProvider())
            {
                dbProvider.ExecuteQuery(ds, queryDef.getSQL());

                if (ds != null && ds.Tables != null && ds.Tables[0] != null && ds.Tables[0].Rows.Count > 0)
                {
                    result = new InfoDocumento[ds.Tables[0].Rows.Count];
                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        DocsPaVO.documento.InfoDocumento tempInfo = new DocsPaVO.documento.InfoDocumento();
                        tempInfo.idProfile = ds.Tables[0].Rows[i]["system_id"].ToString();
                        tempInfo.docNumber = ds.Tables[0].Rows[i]["docnumber"].ToString();
                        result[i] = tempInfo;
                    }
                }
            }

            return result;
        }

        public DocsPaVO.documento.InfoDocumento[] GetListaDocumentiInFascicoliPolicyConservazione(DocsPaVO.Conservazione.Policy policy, string lastSystemId, string systemIdFasc)
        {
            InfoDocumento[] result = null;
            string filtri = string.Empty;
            string from = string.Empty;


            from = from + ", project_components b";
            filtri = filtri + " AND b.LINK = a.system_id AND b.TYPE = 'D' AND b.project_id = " + systemIdFasc;

            if (policy.soloFirmati)
            {
                if (dbType.ToUpper() == "SQL")
                    filtri = filtri + " AND @dbuser@.AtLeastOneFirmato(A.DOCNUMBER) = '1'";
                else
                    filtri = filtri + " AND AtLeastOneFirmato(A.DOCNUMBER) = '1'";
            }
            if (policy.soloDigitali)
            {
                if (dbType.ToUpper() == "SQL")
                    filtri = filtri + " AND @dbuser@.AtLeastOneCartaceo(A.DOCNUMBER) != '1'";
                else
                    filtri = filtri + " AND AtLeastOneCartaceo(A.DOCNUMBER) != '1'";
            }

            DataSet ds = new DataSet();

            DocsPaUtils.Query queryDef = DocsPaUtils.InitQuery.getInstance().getQuery("S_GET_DOCUMENT_FASC_WITH_POLICY");
            queryDef.setParam("filtri", filtri);
            queryDef.setParam("from", from);
            queryDef.setParam("idPolicy", policy.system_id);
            queryDef.setParam("idProject", systemIdFasc);
            queryDef.setParam("idAmm", policy.idAmministrazione);
            queryDef.setParam("dbuser", DocsPaDbManagement.Functions.Functions.GetDbUserSession());

            string commandText = queryDef.getSQL();

            using (DocsPaDB.DBProvider dbProvider = new DBProvider())
            {
                dbProvider.ExecuteQuery(ds, queryDef.getSQL());

                if (ds != null && ds.Tables[0].Rows.Count > 0)
                {
                    result = new InfoDocumento[ds.Tables[0].Rows.Count];
                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        DocsPaVO.documento.InfoDocumento tempInfo = new DocsPaVO.documento.InfoDocumento();
                        tempInfo.idProfile = ds.Tables[0].Rows[i]["system_id"].ToString();
                        tempInfo.docNumber = ds.Tables[0].Rows[i]["docnumber"].ToString();
                        result[i] = tempInfo;
                    }
                }
            }

            return result;
        }

        /// <summary>
        /// Metodo per l'assegnazione di un diritto ad un ruolo. Questo metodo verifica se il ruolo ha già un diritto sull'oggetto
        /// e, solo nel caso in cui non abbia diritti o ne abbia uno inferiore, viene eseguito un aggiornamento del diritto.
        /// </summary>
        /// <param name="dirittoOggetto">Informaizoni sul diritto da assegnare al ruolo</param>
        /// <returns>Esito dell'operazione</returns>
        public bool AddPermissionToRole(DocsPaVO.documento.DirittoOggetto dirittoOggetto)
        {

            bool retVal = false;

            ArrayList arguments = new ArrayList();
            arguments.Add(new ParameterSP("objId", dirittoOggetto.idObj, DirectionParameter.ParamInput));
            arguments.Add(new ParameterSP("idRole", dirittoOggetto.personorgroup, DirectionParameter.ParamInput));
            arguments.Add(new ParameterSP("rightsToAssign", dirittoOggetto.accessRights, DirectionParameter.ParamInput));
            if (dbType.ToUpper() == "SQL")
            {
                DocsPaUtils.Data.ParameterSP outParam;
                outParam = new DocsPaUtils.Data.ParameterSP("returnvalue", new Int32(), 10, DocsPaUtils.Data.DirectionParameter.ParamOutput, System.Data.DbType.Int32);
                arguments.Add(outParam);
            }
                

            using (DBProvider dbProvider = new DBProvider())
            {
                retVal = dbProvider.ExecuteStoreProcedure("SetRightsForRole", arguments) == 1;
            }

            return retVal;

        }

        /// <summary>
        /// Metodo usato nella ricerca full text per verificare se la stringa ricercata è una stopword o no
        /// </summary>
        /// <param name="ricerca">stringa ricercata</param>
        /// <returns>string</returns>
        public string StopWord(string ricerca)
        {
            string retValue = string.Empty;
            DataSet ds = new DataSet();
            try
            {
                DocsPaUtils.Query queryDef = DocsPaUtils.InitQuery.getInstance().getQuery("S_EXISTS_STOPWORD");
                queryDef.setParam("param1", ricerca);
                using (DocsPaDB.DBProvider dbProvider = new DBProvider())
                {
                    dbProvider.ExecuteQuery(ds, queryDef.getSQL());
                    if (ds != null && ds.Tables[0].Rows.Count > 0)
                        return ricerca;
                }
            }
            catch (Exception e)
            {
                throw new ApplicationException("Errore nell'esecuzione della query in 'stopWord'" + e.Message);
            }
            return retValue;
        }

        public DocsPaVO.documento.InfoDocumento[] GetListaStampePolicyConservazione(DocsPaVO.Conservazione.Policy policy, string lastSystemId, string tipoStampa)
        {
            InfoDocumento[] result = null;
            string filtri = string.Empty;
            string from = string.Empty;

            //Filtri tipo documento
            #region filtri

            if (tipoStampa.Equals("R"))
            {
                from = "DPA_STAMPAREGISTRI r";
            }
            else
            {
                from = "DPA_STAMPA_REPERTORI r";
            }

            if (!string.IsNullOrEmpty(policy.tipoDataCreazione))
            {
                if (policy.tipoDataCreazione.Equals("0"))
                {
                    if (!string.IsNullOrEmpty(policy.dataCreazioneDa))
                    {
                        if (dbType.ToUpper() == "SQL")
                            filtri = filtri + " AND a.creation_time >= " + DocsPaDbManagement.Functions.Functions.ToDate(policy.dataCreazioneDa);
                        else
                            filtri = filtri + " AND a.creation_time >= " + " (SELECT " + DocsPaDbManagement.Functions.Functions.ToDate(policy.dataCreazioneDa) + " from dual) ";
                    }
                }
                if (policy.tipoDataCreazione.Equals("1"))
                {
                    if (!string.IsNullOrEmpty(policy.dataCreazioneDa))
                    {
                        if (dbType.ToUpper() == "SQL")
                            filtri = filtri + " AND a.creation_time >= " + DocsPaDbManagement.Functions.Functions.ToDate(policy.dataCreazioneDa);
                        else
                            filtri = filtri + " AND a.creation_time >=" + " (SELECT " + DocsPaDbManagement.Functions.Functions.ToDate(policy.dataCreazioneDa) + " from dual) ";
                    }
                    if (!string.IsNullOrEmpty(policy.dataCreazioneA))
                    {

                        if (dbType.ToUpper() == "SQL")
                            filtri = filtri + " AND a.creation_time < " + DocsPaDbManagement.Functions.Functions.ToDate(policy.dataCreazioneA);
                        else
                            filtri = filtri + " AND a.creation_time <" + " (SELECT " + DocsPaDbManagement.Functions.Functions.ToDate(policy.dataCreazioneA) + " from dual) ";
                    }
                }
                if (policy.tipoDataCreazione.Equals("2"))
                {
                    if (dbType.ToUpper() == "SQL")
                        filtri = filtri + " AND convert(varchar(10), A.creation_time, 103) =  convert(varchar(10), GETDATE(), 103)";
                    else
                        filtri = filtri + " AND to_char(A.creation_time, 'DD/MM/YYYY') =(select to_char(sysdate, 'DD/MM/YYYY') from dual)";
                }
                if (policy.tipoDataCreazione.Equals("3"))
                {
                    if (dbType.ToUpper() == "SQL")
                        filtri = filtri + " AND A.creation_time >= convert(varchar(10), getDate() + (1-datepart( weekday, getDate())), 103) AND A.creation_time< convert(varchar(10), getDate() + (8-datepart( weekday, getDate())), 103)";
                    else
                        filtri = filtri + " AND A.creation_time>=(select to_date(to_char(sysdate+ (1-to_char(sysdate,'D')))) startdayofweek from dual) AND A.creation_time<(select to_date(to_char(sysdate+ (8-to_char(sysdate,'D')))) enddayofweek from dual) ";
                }
                if (policy.tipoDataCreazione.Equals("4"))
                {
                    if (dbType.ToUpper() == "SQL")
                        filtri = filtri + " AND A.creation_time>= convert(varchar(10),DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE()), 0), 103) as start_date  AND A.creation_time<convert(varchar(10), DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE())+ 1, 0), 103) as DAY  ";
                    else
                        filtri = filtri + " AND A.creation_time>=(select to_date(trunc(sysdate,'MM')) as start_date from dual) AND A.creation_time<(select to_date(last_day(sysdate)+1) as DAY from dual)  ";
                }
                if (policy.tipoDataCreazione.Equals("5"))
                {
                    filtri = filtri + " AND A.creation_time BETWEEN " + DocsPaDbManagement.Functions.Functions.ToDateBetween("01/01/" + DateTime.Now.ToString("yyyy").ToString(), true) + " AND " + DocsPaDbManagement.Functions.Functions.ToDateBetween("31/12/" + DateTime.Now.ToString("yyyy").ToString(), false);
                }
            }

            if (tipoStampa.Equals("C"))
            {
                if (!string.IsNullOrEmpty(policy.idTemplate))
                {
                    from = from + ", DPA_REGISTRI_REPERTORIO rp ";
                    filtri = filtri + " AND rp.COUNTERID=" + policy.idTemplate + " AND r.ID_REPERTORIO = rp.COUNTERID";

                    if (!string.IsNullOrEmpty(policy.idRf) && !(policy.idRf.Equals("-1")))
                    {
                        filtri = filtri + " AND (rp.RFID=" + policy.idRf + " OR " + " rp.REGISTRYID=" + policy.idRf + ")";
                    }
                }
            }

            #endregion

            DataSet ds = new DataSet();

            DocsPaUtils.Query queryDef = DocsPaUtils.InitQuery.getInstance().getQuery("S_GET_STAMPE_WITH_POLICY");
            queryDef.setParam("filtri", filtri);
            queryDef.setParam("from", from);
            queryDef.setParam("idPolicy", policy.system_id);
            queryDef.setParam("idAmm", policy.idAmministrazione);
            queryDef.setParam("tipoStampa", tipoStampa);

            string commandText = queryDef.getSQL();

            using (DocsPaDB.DBProvider dbProvider = new DBProvider())
            {
                dbProvider.ExecuteQuery(ds, queryDef.getSQL());

                if (ds != null && ds.Tables[0].Rows.Count > 0)
                {
                    result = new InfoDocumento[ds.Tables[0].Rows.Count];
                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        DocsPaVO.documento.InfoDocumento tempInfo = new DocsPaVO.documento.InfoDocumento();
                        tempInfo.idProfile = ds.Tables[0].Rows[i]["system_id"].ToString();
                        tempInfo.docNumber = ds.Tables[0].Rows[i]["docnumber"].ToString();
                        result[i] = tempInfo;
                    }
                }
            }

            return result;
        }

        /// <summary>
        /// Metodo per il recupero di un mezzo di spedizione a partire dal suo codice
        /// </summary>
        /// <param name="codice">Codice del mezzo di spedizione</param>
        /// <returns></returns>
        public MezzoSpedizione GetMezzoSpedizioneByCodice(String codice)
        {
            MezzoSpedizione retVal = new MezzoSpedizione();
            using (DBProvider dbProvider = new DBProvider())
            {
                logger.Debug("GetMezzoSpedizioneByCodice");
                string result = string.Empty;
                DocsPaUtils.Query q = InitQuery.getInstance().getQuery("S_DOCUMENT_TYPE_DESCRIPTION_FROM_CODE");
                q.setParam("param1", codice);
                string queryString = q.getSQL();

                using (IDataReader dataReader = dbProvider.ExecuteReader(queryString))
                    while (dataReader.Read())
                        retVal = new MezzoSpedizione()
                        {
                            Descrizione = dataReader["Description"].ToString(),
                            chaTipoCanale = dataReader["Type_Id"].ToString(),
                            IDSystem = dataReader["System_id"].ToString()
                        };
            }

            return retVal;
        }

        /// <summary>
        /// Metodo utilizzato per marcare un documento come non privato
        /// </summary>
        /// <param name="docId">Id del documento</param>
        public void SetNotPrivate(string docId)
        {
            using (DBProvider dbProvider = new DBProvider())
            {
                String query = String.Format("Update profile Set cha_privato = '0' Where system_id = {0}", docId);
                dbProvider.ExecuteNonQuery(query);
            }
        }

        /// <summary>
        /// Metodo per il recupero dell'id profile di un documento a partire dalle informazioni sul protocollo
        /// </summary>
        /// <param name="protoDate">Data di protocollazione</param>
        /// <param name="numProto">Numero di protocollo</param>
        /// <param name="regCode">Registro di protocollazione</param>
        /// <param name="ammCode">Codice dell'amministrazione</param>
        /// <returns>Id profile del documento</returns>
        public String GetIdProfileFromProtoInfo(DateTime protoDate, String numProto, String regCode, String ammCode)
        {
            String idProfile = String.Empty;
            using (DBProvider dbProvider = new DBProvider())
            {
                Query query = InitQuery.getInstance().getQuery("S_LOAD_DOCUMENT_ID_FROM_PROTO_INFO");
                query.setParam("protoDate", protoDate.ToString("dd/MM/yyyy HH:mm:ss"));
                query.setParam("numProto", numProto);
                query.setParam("regCode", regCode);
                query.setParam("ammCode", ammCode);

                using (IDataReader dataReader = dbProvider.ExecuteReader(query.getSQL()))
                    while (dataReader.Read())
                        idProfile = dataReader[0].ToString();

            }

            return idProfile;
        }

        public String GetDocumentAttribute(DateTime protoDate, String numProto, String regCode, String ammCode, DocumentAttribute attribute)
        {
            String retVal = String.Empty;
            using (DBProvider dbProvider = new DBProvider())
            {
                Query query = InitQuery.getInstance().getQuery("S_LOAD_DOCUMENT_INFO_FROM_PROTO_INFO");

                String param = "profile.system_id";
                switch (attribute)
                {
                    case DocumentAttribute.GroupsId:
                        param = "profile.id_ruolo_creatore";
                        break;
                    case DocumentAttribute.UserId:
                        param = "profile.Author";
                        break;
                }

                query.setParam("attribute", param);
                query.setParam("protoDate", protoDate.ToString("dd/MM/yyyy HH:mm:ss"));
                query.setParam("numProto", numProto);
                query.setParam("regCode", regCode);
                query.setParam("ammCode", ammCode);

                using (IDataReader dataReader = dbProvider.ExecuteReader(query.getSQL()))
                    while (dataReader.Read())
                        retVal = dataReader[0].ToString();

            }

            return retVal;
        }

        /// <summary>
        /// Attributi che è possibile recuperare
        /// </summary>
        public enum DocumentAttribute
        {
            IdProfile,
            GroupsId,
            UserId
        }

        /// <summary>
        /// Metodo per il recupero della segnatura di uno specifico documento 
        /// </summary>
        /// <param name="idProfile">Id profile del documento di cui recuperare la segnatura</param>
        /// <returns></returns>
        public String GetDocumentSignatureByProfileId(String idProfile)
        {
            String retVal = String.Empty;
            using (DBProvider dbProvider = new DBProvider())
            {
                String query = "Select var_segnatura From profile Where system_id = " + idProfile;
                using (IDataReader dataReader = dbProvider.ExecuteReader(query))
                    while (dataReader.Read())
                        retVal = dataReader[0].ToString();
            }

            return retVal;
        }

        /// <summary>
        /// Metodo per il recupero dei ruoli che hanno visibilità su un documento
        /// </summary>
        /// <param name="idProfile">Id del documento</param>
        /// <returns>Lista dei system id dei ruoli che vedono il documento</returns>
        private List<String> GetRuoliConVisibilitaSuDocumento(String idProfile)
        {
            List<String> retVal = new List<String>();

            Query query = InitQuery.getInstance().getQuery("S_RUOLI_CON_VISIBILITA_SU_DOCUMENTO");
            query.setParam("idProfile", idProfile);
            string querystring = query.getSQL();
            logger.Debug(querystring);
            using (Utenti dbUser = new Utenti())
            {
                using (DBProvider dbProvider = new DBProvider())
                {
                    using (IDataReader dataReader = dbProvider.ExecuteReader(querystring))
                    {
                        while (dataReader.Read())
                        {
                            retVal.Add(dataReader[0].ToString());
                        }
                    }
                }
            }

            return retVal;
        }

        /// <summary>
        /// Metodo per l'estrazione dei ruoloprotocollatore del documento. Non lo restituisce se coincide con il ruolo IS
        /// </summary>
        /// <param name="schedaDoc"></param>
        /// <returns></returns>
        private string GetRuoloProtocollatore(SchedaDocumento schedaDoc, DocsPaVO.Interoperabilita.Semplificata.InteroperabilitySettings loadedData)
        {
            logger.Debug("Inizio estrazione dell'idGruppo del ruolo protocollatore");
            string idGruppo = string.Empty;
            try
            {
                string query = "SELECT ID_GRUPPO FROM DPA_CORR_GLOBALI WHERE SYSTEM_ID =" + schedaDoc.protocollatore.ruolo_idCorrGlobali;
                DataSet ds = new DataSet();
                logger.Debug(query);
                ExecuteQuery(ds, query);
                string res = string.Empty;
                if (ds.Tables[0].Rows.Count != 0)
                {
                    idGruppo = ds.Tables[0].Rows[0]["ID_GRUPPO"].ToString();
                }
                if (loadedData != null && idGruppo.Equals(loadedData.RoleId.ToString()))
                    idGruppo = string.Empty;
            }
            catch(Exception e)
            {
                logger.Error("Errore durante il reperimento dell'idGruppo del protocollatore " + e.Message);
                idGruppo = string.Empty;
            }
            logger.Debug("Fine estrazione dell'idGruppo del ruolo protocollatore");
            return idGruppo;
        }

        public Dictionary<string, string> GetDatiSegnaturaTimbro(string idDocumento)
        {
            Dictionary<string, string> result = new Dictionary<string, string>();

            Query query = InitQuery.getInstance().getQuery("S_GET_DATI_SEGNATURA_TIMBRO");
            query.setParam("system_id", idDocumento);
            string dbType = System.Configuration.ConfigurationManager.AppSettings["DBType"];
            if (dbType.ToUpper() == "SQL")
            {
                query.setParam("dbuser", DocsPaDbManagement.Functions.Functions.GetDbUserSession());
            }

            using (Utenti dbUser = new Utenti())
            {
                using (DBProvider dbProvider = new DBProvider())
                {
                    using (IDataReader dataReader = dbProvider.ExecuteReader(query.getSQL()))
                    {
                        while (dataReader.Read())
                        {
                            result.Add("segnatura", dataReader["VAR_SEGNATURA"].ToString());
                            result.Add("resgistro", dataReader["COD_REG"].ToString());
                            result.Add("uo", dataReader["UO_CREATORE"].ToString());
                            result.Add("amministrazione", dataReader["VAR_CODICE_AMM"].ToString());
                            result.Add("anno", dataReader["ANNO"].ToString());
                            result.Add("data", dataReader["DTA_PROTO"].ToString());
                            result.Add("ora", dataReader["ORA_PROTO"].ToString());
                            result.Add("tipo", dataReader["CHA_TIPO_PROTO"].ToString());
                            result.Add("numero", dataReader["NUM_PROTO"].ToString());
                            result.Add("allegati", dataReader["ALLEGATI"].ToString());
                            result.Add("fascicoli", dataReader["COD_FASC"].ToString());
                            result.Add("docnumber", dataReader["DOCNUMBER"].ToString());
                            result.Add("rf", dataReader["COD_RF"].ToString());
                        }
                    }
                }
            }

            return result;
        }


        public Dictionary<string, string> GetInfoDocument(string idDocumento)
        {
            Dictionary<string, string> result = new Dictionary<string, string>();

            Query query = InitQuery.getInstance().getQuery("S_GET_INFO_DOCUMENT");
            query.setParam("system_id", idDocumento);
            string dbType = System.Configuration.ConfigurationManager.AppSettings["DBType"];
            if (dbType.ToUpper() == "SQL")
            {
                query.setParam("dbuser", DocsPaDbManagement.Functions.Functions.GetDbUserSession());
            }

            using (Utenti dbUser = new Utenti())
            {
                using (DBProvider dbProvider = new DBProvider())
                {
                    using (IDataReader dataReader = dbProvider.ExecuteReader(query.getSQL()))
                    {
                        while (dataReader.Read())
                        {
                            result.Add("num_proto", dataReader["num_proto"].ToString());
                            result.Add("data_creazione", dataReader["CREATION_DATE"].ToString());
                            result.Add("data_protocollazione", dataReader["DTA_PROTO"].ToString());
                        }
                    }
                }
            }

            return result;
        }

        public void ProtocollaDocProtocollaPregressi(DocsPaVO.utente.InfoUtente infoUtente, DocsPaVO.utente.Ruolo objRuolo, ref DocsPaVO.documento.SchedaDocumento schedaDoc)
        {
            try
            {
                semProtPronto.WaitOne();

                // Inizio transazione sul db
                BeginTransaction();
                bool forceProtocollazioneLibera = true;
                // verifico i dati di ingresso

                CheckInputData(infoUtente.idAmministrazione, schedaDoc, forceProtocollazioneLibera);
                logger.Debug("nomeUtente=" + schedaDoc.userId);

                //protocollazione libera il numero di protocollo viene già passato e quindi non calcolato
                bool protocollazioneLibera = true;

                /* MEV 3765 Gestione selettiva integrazione WSPIA
                 * Modifica MCaropreso:
                 * Effettua controllo sul flag associato al registro
                 */
                bool flagWSPIA = false;
                if (schedaDoc != null && schedaDoc.registro.FlagWspia != null &&
                    schedaDoc.registro.FlagWspia.Equals("1")
                    ) flagWSPIA = true;
                else
                    flagWSPIA = false;

                if (forceProtocollazioneLibera)
                    protocollazioneLibera = true;

                if (protocollazioneLibera || flagWSPIA)
                {
                    if (schedaDoc != null &&
                        schedaDoc.protocollo != null &&
                        !string.IsNullOrEmpty(schedaDoc.protocollo.anno) &&
                        !string.IsNullOrEmpty(schedaDoc.protocollo.numero) &&
                        !string.IsNullOrEmpty(schedaDoc.protocollo.dataProtocollazione))
                    {
                        schedaDoc.protocollo.segnatura = CalcolaSegnatura(schedaDoc, objRuolo);
                        if (string.IsNullOrEmpty(schedaDoc.protocollo.segnatura))
                        {
                            logger.Debug("errore durante la creazione della segnatura");
                            throw new Exception("Errore durante la creazione della segnatura");
                        }

                    }
                    else
                    {
                        if (!GetNumeroProtocollo(ref schedaDoc, objRuolo))
                        {
                            throw new Exception("Errore durante l'aggiornamento della DPA_REG_PROTO");
                        }
                    }

                }
                else
                {
                    // leggo il numero di protocollo
                    if (!GetNumeroProtocollo(ref schedaDoc, objRuolo))
                    {
                        throw new Exception("Errore durante l'aggiornamento della DPA_REG_PROTO");
                    }
                }

                //add massimo digregorio:
                aggiornaADL(ref schedaDoc);



                // aggiorno la tabella PROFILE
                schedaDoc.protocollo.daProtocollare = "0";

                //ABBATANGELI GIANLUIGI - Eseguo la commit solo se sono riuscito ad aggiornare schedaDoc
                Boolean is_committable = false;
                if (UpdateProfile(schedaDoc, infoUtente.sede, String.Empty))
                {
                    if (UpdateNextProtocolNumber(schedaDoc))
                    {
                        //TODO:  
                        SetSecurityResponsabileReg(schedaDoc);

                        // Se il documento è stato ricevuto per interoperabilità semplificata e 
                        // per il registro su cui è stato creato il predisposto, è attiva la gestione
                        // del documento pendente, si procede con l'estensione della visibilità
                        // ai superiori dei ruoli che vedono il documento
                        if (schedaDoc.typeId == InteroperabilitaSemplificata.SimplifiedInteroperabilityId)
                        {
                            Documentale documentale = new Documentale();
                            bool keepPrivate = false;
                            DocsPaVO.Interoperabilita.Semplificata.InteroperabilitySettings loadedData = null;
                            using (InteroperabilitaSemplificata dbIs = new InteroperabilitaSemplificata())
                            {
                                loadedData = dbIs.LoadSettings(schedaDoc.registro.systemId);
                                keepPrivate = loadedData.KeepPrivate;
                            }

                            if (keepPrivate && schedaDoc.privato == "0")
                            {
                                // Logging dell'azione di estenzione della visibilità
                                logger.DebugFormat("IS - Documento non privato, si procede all'estensione dei diritti per il documento {0}", schedaDoc.systemId);

                                // Recupero dei ruoli che vedono il documento
                                //15-09-2016 INC000000821327: commentato ed estendo la visibilta ai superiori solamente del ruolo protocollatore(se diverso da IS)
                                //List<String> roles = GetRuoliConVisibilitaSuDocumento(schedaDoc.systemId);
                                string role = GetRuoloProtocollatore(schedaDoc, loadedData);
                                if(!string.IsNullOrEmpty(role))
                                {
                                    documentale.ExtendVisibilityByQuery(
                                        infoUtente.idAmministrazione,
                                        role,
                                        schedaDoc.systemId);
                                }
                            }
                        }

                        // se il documento è stato ricevuto via mail, controllo se è stato mantenuto pendente.
                        // Se si, estendo la visibilità.
                        // Per gestione pendenti tramite PEC
                        if (schedaDoc.typeId == "MAIL" || schedaDoc.typeId == "INTEROPERABILITA")
                        {
                            Documentale documentale = new Documentale();
                            bool isDocPECPendente = false;
                            using (Interoperabilita dbI = new Interoperabilita())
                            {
                                isDocPECPendente = dbI.getDocPECPendente(schedaDoc.systemId);
                            }

                            if (isDocPECPendente && schedaDoc.privato == "0")
                            {
                                // Logging dell'azione di estenzione della visibilità
                                logger.DebugFormat("Interoperabilità PEC 4 - Documento non privato, si procede all'estensione dei diritti per il documento {0}", schedaDoc.systemId);

                                // Recupero dei ruoli che vedono il documento
                                //15-09-2016 INC000000821327: commentato ed estendo la visibilta ai superiori solamente del ruolo protocollatore(se diverso da IS)
                                //List<String> roles = GetRuoliConVisibilitaSuDocumento(schedaDoc.systemId);
                                string role = GetRuoloProtocollatore(schedaDoc, null);
                                if(!string.IsNullOrEmpty(role))
                                {
                                    documentale.ExtendVisibilityByQuery(
                                        infoUtente.idAmministrazione,
                                        role,
                                        schedaDoc.systemId);
                                }
                            }
                        }
                        CommitTransaction();
                        is_committable = true;
                    }
                }

                if (!is_committable)
                {
                    RollbackTransaction();
                    //protocollo non effettuato.
                    if (schedaDoc.protocollo != null)
                    {
                        schedaDoc.protocollo.numero = "";
                        schedaDoc.protocollo.dataProtocollazione = "";
                        schedaDoc.protocollo.segnatura = "";
                    }

                    throw new Exception();
                }

            }
            catch (Exception e)
            {
                RollbackTransaction();
                //protocollo non effettuato.
                if (schedaDoc.protocollo != null)
                {
                    schedaDoc.protocollo.numero = "";
                    schedaDoc.protocollo.dataProtocollazione = "";
                    schedaDoc.protocollo.segnatura = "";
                }
                logger.Error(e.Message);
                throw new Exception();
            }
            finally
            {
                semProtPronto.ReleaseMutex();
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="infoUtente"></param>
        /// <param name="idProfile"></param>
        /// <param name="docNumber"></param>
        /// <returns></returns>
        public DocsPaVO.documento.SchedaDocumento GetDettaglioNoSecurityByNumProtoEIDRegistro(DocsPaVO.utente.InfoUtente infoUtente, string numProto, string idRegistro)
        {
            logger.Debug("getDettaglio");
            DocsPaVO.documento.SchedaDocumento schedaDoc = new DocsPaVO.documento.SchedaDocumento();
            try
            {
                DocsPaUtils.Query queryDef = DocsPaUtils.InitQuery.getInstance().getQuery("S_GET_DETTAGLIO_DOCUMENTO_NO_SECURITY_BY_NUM_PROTO_E_REG");

                queryDef.setParam("creationDate", Functions.ToChar("a.creation_date", false));
                queryDef.setParam("creationTime", Functions.ToChar("a.creation_time", true));
                queryDef.setParam("dta_proto_eme", Functions.ToChar("a.dta_proto_eme", false));
                queryDef.setParam("dta_proto", Functions.ToChar("a.dta_proto", false));
                queryDef.setParam("dta_proto_in", Functions.ToChar("a.dta_proto_in", false));
                queryDef.setParam("dta_annulla", Functions.ToChar("a.dta_annulla", false));
                queryDef.setParam("docNumber", "a.num_proto = " + numProto + " and a.id_registro = " + idRegistro);


                string commandText = queryDef.getSQL();
                logger.Debug(commandText);

                DataSet dataSet;
                if (ExecuteQuery(out dataSet, "PROFILE", commandText))
                {
                    schedaDoc = new DocsPaVO.documento.SchedaDocumento();
                    if (dataSet.Tables["PROFILE"] != null && dataSet.Tables["PROFILE"].Rows != null && dataSet.Tables["PROFILE"].Rows.Count > 0)
                    {
                        DataRow dataRow = dataSet.Tables["PROFILE"].Rows[0];
                        schedaDoc = GetSchedaDocumento(infoUtente, dataRow);
                    }

                    //if (Cfg_SET_DATA_VISTA_GRD)
                    //    SetDataVistaSP(infoUtente, schedaDoc.systemId, "D");
                }

                if (schedaDoc == null)
                    return null;

                dataSet.Dispose();

                //Profilazione dinamica 
                if (schedaDoc.tipologiaAtto != null && schedaDoc.tipologiaAtto.systemId != null && schedaDoc.tipologiaAtto.systemId != "")
                {
                    Model model = new Model();
                    DocsPaVO.ProfilazioneDinamica.Templates template = model.getTemplateDettagli(schedaDoc.docNumber);
                    schedaDoc.template = template;
                }
            }
            catch (Exception e)
            {
                logger.Error(e.Message);
                logger.Error("Errore nella gestione dei documenti (Query - GetDettaglio)", e);
                throw new Exception("F_System");
            }

            return schedaDoc;
        }

        public bool DeleteProtocollo(DocsPaVO.utente.InfoUtente infoUtente, DocsPaVO.documento.SchedaDocumento schedaDocumento)
        {
            bool result = true;

            logger.Debug("DeleteProtocollo");
            try
            {
                //Cancello prima gli allegati
                if (schedaDocumento.allegati != null && schedaDocumento.allegati.Count > 0)
                {
                    foreach (DocsPaVO.documento.Allegato all in schedaDocumento.allegati)
                    {
                        using (DocsPaDB.DBProvider dbProvider = new DBProvider())
                        {
                            DocsPaUtils.Query queryDef = DocsPaUtils.InitQuery.getInstance().getQuery("D_DELETE_PROFILE_FROM_DPA_NOTE");
                            queryDef.setParam("docNumer", all.docNumber);
                            string query = queryDef.getSQL();
                            dbProvider.ExecuteNonQuery(query);
                            dbProvider.CommitTransaction();
                        }

                        using (DocsPaDB.DBProvider dbProvider = new DBProvider())
                        {
                            DocsPaUtils.Query queryDef = DocsPaUtils.InitQuery.getInstance().getQuery("D_DELETE_PROFILE_FROM_DOCARRIVOPAR");
                            queryDef.setParam("docNumer", all.docNumber);
                            string query = queryDef.getSQL();
                            dbProvider.ExecuteNonQuery(query);
                            dbProvider.CommitTransaction();
                        }

                        using (DocsPaDB.DBProvider dbProvider = new DBProvider())
                        {
                            DocsPaUtils.Query queryDef = DocsPaUtils.InitQuery.getInstance().getQuery("D_DELETE_PROFILE_FROM_VERSIONS");
                            queryDef.setParam("docNumer", all.docNumber);
                            string query = queryDef.getSQL();
                            dbProvider.ExecuteNonQuery(query);
                            dbProvider.CommitTransaction();
                        }

                        using (DocsPaDB.DBProvider dbProvider = new DBProvider())
                        {
                            DocsPaUtils.Query queryDef = DocsPaUtils.InitQuery.getInstance().getQuery("D_DELETE_PROFILE_FROM_COMPONENTS");
                            queryDef.setParam("docNumer", all.docNumber);
                            string query = queryDef.getSQL();
                            dbProvider.ExecuteNonQuery(query);
                            dbProvider.CommitTransaction();
                        }

                        using (DocsPaDB.DBProvider dbProvider = new DBProvider())
                        {
                            DocsPaUtils.Query queryDef = DocsPaUtils.InitQuery.getInstance().getQuery("D_DELETE_PROFILE_FROM_DOCNUMER");
                            queryDef.setParam("docNumer", all.docNumber);
                            string query = queryDef.getSQL();
                            dbProvider.ExecuteNonQuery(query);
                            dbProvider.CommitTransaction();
                        }

                    }
                }

                //Cancello il documento
                using (DocsPaDB.DBProvider dbProvider = new DBProvider())
                {
                    DocsPaUtils.Query queryDef = DocsPaUtils.InitQuery.getInstance().getQuery("D_DELETE_PROFILE_FROM_DPA_NOTE");
                    queryDef.setParam("docNumer", schedaDocumento.docNumber);
                    string query = queryDef.getSQL();
                    dbProvider.ExecuteNonQuery(query);
                    dbProvider.CommitTransaction();
                }

                using (DocsPaDB.DBProvider dbProvider = new DBProvider())
                {
                    DocsPaUtils.Query queryDef = DocsPaUtils.InitQuery.getInstance().getQuery("D_DELETE_PROFILE_FROM_DOCARRIVOPAR");
                    queryDef.setParam("docNumer", schedaDocumento.docNumber);
                    string query = queryDef.getSQL();
                    dbProvider.ExecuteNonQuery(query);
                    dbProvider.CommitTransaction();
                }

                using (DocsPaDB.DBProvider dbProvider = new DBProvider())
                {
                    DocsPaUtils.Query queryDef = DocsPaUtils.InitQuery.getInstance().getQuery("D_DELETE_PROFILE_FROM_VERSIONS");
                    queryDef.setParam("docNumer", schedaDocumento.docNumber);
                    string query = queryDef.getSQL();
                    dbProvider.ExecuteNonQuery(query);
                    dbProvider.CommitTransaction();
                }

                using (DocsPaDB.DBProvider dbProvider = new DBProvider())
                {
                    DocsPaUtils.Query queryDef = DocsPaUtils.InitQuery.getInstance().getQuery("D_DELETE_PROFILE_FROM_COMPONENTS");
                    queryDef.setParam("docNumer", schedaDocumento.docNumber);
                    string query = queryDef.getSQL();
                    dbProvider.ExecuteNonQuery(query);
                    dbProvider.CommitTransaction();
                }

                using (DocsPaDB.DBProvider dbProvider = new DBProvider())
                {
                    DocsPaUtils.Query queryDef = DocsPaUtils.InitQuery.getInstance().getQuery("D_DELETE_PROFILE_FROM_DOCNUMER");
                    queryDef.setParam("docNumer", schedaDocumento.docNumber);
                    string query = queryDef.getSQL();
                    dbProvider.ExecuteNonQuery(query);
                    dbProvider.CommitTransaction();
                }

                using (DocsPaDB.DBProvider dbProvider = new DBProvider())
                {
                    DocsPaUtils.Query queryDef = DocsPaUtils.InitQuery.getInstance().getQuery("D_DELETE_PROFILE_FROM_PROJECT_COMPONENTS");
                    queryDef.setParam("idDoc", schedaDocumento.systemId);
                    string query = queryDef.getSQL();
                    dbProvider.ExecuteNonQuery(query);
                    dbProvider.CommitTransaction();
                }

            }
            catch (Exception e)
            {
                logger.Error(e.Message);
                logger.Error("Errore nella cancellazione di un documento", e);
                throw new Exception("F_System");
            }

            return result;
        }

        //Metodo utilizzato per aggiornare i campi CREATION_DATE, CREATION_TIME, LAST_EDIT_DATE
        public void updateDataCreazioneDocGrigio(SchedaDocumento schedaDoc, string id_vecchio_documento)
        {
            try
            {
                using (DocsPaDB.DBProvider dbProvider = new DBProvider())
                {
                    dbProvider.BeginTransaction();
                    Query query = InitQuery.getInstance().getQuery("U_DATA_CREATION_DOC_GRIGIO");

                    query.setParam("creation_date", DocsPaDbManagement.Functions.Functions.ToDate(schedaDoc.dataCreazione));
                    query.setParam("creation_time", DocsPaDbManagement.Functions.Functions.ToDate(schedaDoc.dataCreazione));
                    query.setParam("last_edit_date", DocsPaDbManagement.Functions.Functions.ToDate(schedaDoc.dataCreazione));
                    query.setParam("id_vecchio_documento", id_vecchio_documento.Trim());
                    query.setParam("system_id", schedaDoc.systemId);

                    string commandText = query.getSQL();
                    System.Diagnostics.Debug.WriteLine("SQL - UpdateDataCreazioneDocGrigio - DocsPaDB/ImportPregressi.cs - QUERY : " + commandText);
                    logger.Debug("SQL - UpdateDataCreazioneDocGrigio - DocsPaDB/ImportPregressi.cs - QUERY : " + commandText);
                    //dbProvider.ExecuteNonQuery(commandText);
                    if (!dbProvider.ExecuteNonQuery(commandText))
                    {
                        dbProvider.RollbackTransaction();
                        throw new Exception();
                    }
                    else
                    {
                        dbProvider.CommitTransaction();
                    }
                }
            }
            catch (Exception e)
            {
                logger.Error(e.Message);
            }
        }

        public bool SetFlagAllegatiEsterni(string versionId, string docNumber)
        {
            try
            {
                using (DocsPaDB.DBProvider dbProvider = new DBProvider())
                {
                    DocsPaUtils.Query query = DocsPaUtils.InitQuery.getInstance().getQuery("U_SET_FLAG_ALLEGATI_ESTERNI");
                    query.setParam("version_id", versionId);
                    query.setParam("docnumber", docNumber);
                    string commandText = query.getSQL();
                    logger.Debug(commandText);
                    dbProvider.ExecuteNonQuery(commandText);
                }
                return true;
            }
            catch (Exception e)
            {
                logger.Error(e.Message);
                return false;

            }
        }

        /// <summary>
        /// Set del flag CHA_ALLEGATI_ESTERNO in VERSIONS
        ///
        /// </summary>
        /// <param name="versionId"></param>
        /// <param name="docNumber"></param>
        /// <param name="flagChar">
        /// P = PEC, I = IS, 1 = esterno
        /// </param>
        /// <returns></returns>
        public bool SetFlagAllegati_PEC_IS_EXT(string versionId, string docNumber, string flagChar)
        {
            bool result = false;
            string commandText = string.Empty;
            try
            {
                using (DocsPaDB.DBProvider dbProvider = new DBProvider())
                {
                    DocsPaUtils.Query query = DocsPaUtils.InitQuery.getInstance().getQuery("U_SET_FLAG_ALLEGATI_PEC_IS_EXT");
                    query.setParam("flagChar", flagChar);
                    query.setParam("version_id", versionId);
                    query.setParam("docnumber", docNumber);
                    commandText = query.getSQL();
                    logger.Debug(commandText);
                    int row = 0;
                    if(dbProvider.ExecuteNonQuery(commandText, out row ))
                    {
                        if(row > 0)
                            result = true;
                    }
                }
                return result;
            }
            catch (Exception e)
            {
                logger.Error("Errore nel metodo SetFlagAllegati_PEC_IS_EXT per l'allegato: " + docNumber + ". QUERY " + commandText + " " + e.Message);
                return false;

            }
        }

        /// <summary>
        /// return 1 se l'allegato è di tipo esterno
        /// </summary>
        /// <param name="version_id"></param>
        /// <returns></returns>
        public string GetIsAllegatoEsterno(string version_id)
        {
            logger.Info("BEGIN");
            string retValue = string.Empty;
            try
            {
                DocsPaUtils.Query queryDef = DocsPaUtils.InitQuery.getInstance().getQuery("S_ALLEGATO_ESTERNO");
                queryDef.setParam("version_id", version_id);
                string commandText = queryDef.getSQL();
                using (DBProvider dbProvider = new DBProvider())
                {
                    string field;
                    if (dbProvider.ExecuteScalar(out field, commandText))
                        retValue = field;
                }
            }
            catch (Exception e)
            {
                logger.Error(e.Message);
            }
            return retValue;
        }

        /// <summary>
        /// Metodo per prelevare la tipologia dell'allegato
        /// 1 = esterno
        /// I = IS
        /// P = PEC
        /// </summary>
        /// <param name="version_id"></param>
        /// <returns></returns>
        public string GetTipologiaAllegato(string version_id)
        {
            logger.Info("BEGIN");
            string retValue = string.Empty;
            try
            {
                // la query S_ALLEGATO_ESTERNO restuisce il CHA_ALLEGATI_ESTERNO di VERSIONS che contiene tutti i valori necessari
                DocsPaUtils.Query queryDef = DocsPaUtils.InitQuery.getInstance().getQuery("S_ALLEGATO_ESTERNO");
                queryDef.setParam("version_id", version_id);
                string commandText = queryDef.getSQL();
                using (DBProvider dbProvider = new DBProvider())
                {
                    string field;
                    if (dbProvider.ExecuteScalar(out field, commandText))
                        retValue = field;
                }
            }
            catch (Exception e)
            {
                logger.Error(e.Message);
            }
            return retValue;
        }

        public DocsPaVO.documento.Tab GetDocumentTab(string documentId, DocsPaVO.utente.InfoUtente infoUser)
        {
            DocsPaVO.documento.Tab retval = new DocsPaVO.documento.Tab();
            DocsPaUtils.Query queryDef = DocsPaUtils.InitQuery.getInstance().getQuery("S_GET_DOCUMENT_TAB");

            queryDef.setParam("documentId", documentId);

            string commandText = queryDef.getSQL();
            logger.Debug(commandText);

            DataSet dataSet;
            if (ExecuteQuery(out dataSet, "PROFILE", commandText))
            {
                if (dataSet.Tables["PROFILE"] != null && dataSet.Tables["PROFILE"].Rows != null && dataSet.Tables["PROFILE"].Rows.Count > 0)
                {
                    DataRow dataRow = dataSet.Tables["PROFILE"].Rows[0];
                    retval.ClassificationsNumber = dataRow["prj"].ToString();
                    retval.TransmissionsNumber = dataRow["trans"].ToString();
                    if (!dataRow["deleteSecurity"].ToString().Equals("0"))
                    {
                        retval.DeletedSecurity = true;
                    }
                }
            }

            return retval;
        }

        public int GetDocumentTrasmToCCDest(string documentId, DocsPaVO.utente.InfoUtente infoUser)
        {
            int retval = 0;
            DocsPaUtils.Query queryDef = DocsPaUtils.InitQuery.getInstance().getQuery("S_GET_DOCUMENT_TRASM_TO_CC");

            queryDef.setParam("idProfile", documentId);

            string commandText = queryDef.getSQL();
            logger.Debug(commandText);

            DataSet dataSet;
            if (ExecuteQuery(out dataSet, "PROFILE", commandText))
            {
                if (dataSet.Tables["PROFILE"] != null && dataSet.Tables["PROFILE"].Rows != null && dataSet.Tables["PROFILE"].Rows.Count > 0)
                {
                    DataRow dataRow = dataSet.Tables["PROFILE"].Rows[0];
                    retval = Convert.ToInt32(dataRow["trans"]);
                }
            }

            return retval;
        }

        public DocsPaVO.documento.SchedaDocumento GetListVersionDetail(DocsPaVO.utente.InfoUtente infoUtente, string idProfile, string docNumber, bool impostaDataVista)
        {
            logger.Info("BEGIN");
            DocsPaVO.documento.SchedaDocumento schedaDocumento = null;

            try
            {
                DocsPaUtils.Query queryDef = DocsPaUtils.InitQuery.getInstance().getQuery("S_GET_SCHEDA_DOCUMENTO");

                queryDef.setParam("creationDate", Functions.ToChar("A.CREATION_DATE", false));
                queryDef.setParam("creationTime", Functions.ToChar("A.CREATION_TIME", true));
                queryDef.setParam("dtaProtoEme", Functions.ToChar("A.DTA_PROTO_EME", true));
                queryDef.setParam("dtaProto", Functions.ToChar("A.DTA_PROTO", true));
                queryDef.setParam("dtaProtoIn", Functions.ToChar("A.DTA_PROTO_IN", false));
                queryDef.setParam("dtaAnnulla", Functions.ToChar("A.DTA_ANNULLA", false));
                queryDef.setParam("idGroup", infoUtente.idGruppo);
                queryDef.setParam("idPeople", infoUtente.idPeople);

                string documentoPubblico = string.Empty;
                string idRuoloPubblico = DocsPaUtils.Configuration.InitConfigurationKeys.GetValue(infoUtente.idAmministrazione, "ENABLE_FASCICOLO_PUBBLICO");
                if (string.IsNullOrEmpty(idRuoloPubblico))
                {
                    idRuoloPubblico = "0";
                }
                else
                {
                    if (dbType.Equals("SQL"))
                        documentoPubblico = getUserDB() + ".checkDocumentoPubblico(A.DOCNUMBER, " + idRuoloPubblico + ") AS CHA_PUBBLICO, ";
                    else
                        documentoPubblico = "checkDocumentoPubblico(A.DOCNUMBER, " + idRuoloPubblico + ") AS CHA_PUBBLICO, ";
                }
                queryDef.setParam("documentoPubblico", documentoPubblico);
                queryDef.setParam("idRuoloPubblico", idRuoloPubblico);

                string keyParams = string.Empty;

                if (!string.IsNullOrEmpty(idProfile))
                    queryDef.setParam("pk", String.Format("A.SYSTEM_ID = {0}", idProfile));
                else if (!string.IsNullOrEmpty(docNumber))
                    queryDef.setParam("pk", String.Format("A.DOCNUMBER = {0}", docNumber));

                queryDef.setParam("dbUser", getUserDB());

                string commandText = queryDef.getSQL();
                logger.Debug(commandText);

                DataSet dataSet;
                if (ExecuteQuery(out dataSet, "PROFILE", commandText))
                {
                    if (dataSet.Tables["PROFILE"].Rows.Count > 0)
                    {
                        DataRow dataRow = dataSet.Tables["PROFILE"].Rows[0];

                        schedaDocumento = GetVersions(infoUtente, dataRow);

                        dataSet.Dispose();
                        dataSet = null;

                        //if (impostaDataVista)
                        //    SetDataVistaSP(infoUtente, schedaDocumento.systemId, "D");
                    }
                }

                //Profilazione dinamica 
                //if (schedaDocumento != null && schedaDocumento.tipologiaAtto != null && schedaDocumento.tipologiaAtto.systemId != null && schedaDocumento.tipologiaAtto.systemId != "")
                //{
                //    Model model = new Model();
                //    DocsPaVO.ProfilazioneDinamica.Templates template = model.getTemplateDettagli(schedaDocumento.docNumber);
                //    schedaDocumento.template = template;
                //}
            }
            catch (Exception e)
            {
                string errorMessage = string.Format("Errore nel reperimento del documento con idProfile {0} e con docNumber {1}: {2}", idProfile, docNumber, e.Message);
                logger.Error(errorMessage);

                throw new ApplicationException(errorMessage, e);
            }
            logger.Info("END");
            return schedaDocumento;
        }

        private DocsPaVO.documento.SchedaDocumento GetVersions(DocsPaVO.utente.InfoUtente infoUtente, DataRow dataRow)
        {
            logger.Info("BEGIN");
            DocsPaVO.documento.SchedaDocumento schedaDoc = new DocsPaVO.documento.SchedaDocumento();

            if (!GetProfileVersion(infoUtente, dataRow, ref schedaDoc))
            {
                schedaDoc = null;
            }

            //DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_DPA_COLL_MSPEDIZ_DOC");
            //q.setParam("param1", schedaDoc.systemId);
            //string comText = q.getSQL();
            //logger.Debug(comText);
            //DataSet ds;
            //ExecuteQuery(out ds, "MS", comText);
            //if (ds.Tables[0].Rows.Count != 0)
            //{
            //    foreach (DataRow row in ds.Tables[0].Rows)
            //    {
            //        schedaDoc.mezzoSpedizione = row[0].ToString();
            //        schedaDoc.descMezzoSpedizione = row[1].ToString();
            //    }
            //}
            //else
            //{
            //    schedaDoc.mezzoSpedizione = "0";
            //    schedaDoc.descMezzoSpedizione = "";
            //}
            logger.Info("END");
            return schedaDoc;
        }

        public bool GetProfileVersion(DocsPaVO.utente.InfoUtente infoUtente, DataRow dataRow, ref DocsPaVO.documento.SchedaDocumento schedaDoc)
        {
            logger.Info("BEGIN");
            bool result = true;
            schedaDoc.autore = dataRow["AUTHOR"].ToString();
            schedaDoc.systemId = dataRow["SYSTEM_ID"].ToString();
            schedaDoc.dataCreazione = dataRow["CREATION_TIME"].ToString();
            schedaDoc.docNumber = dataRow["DOCNUMBER"].ToString();
            schedaDoc.accessRights = dataRow["ACCESSRIGHTS"].ToString();
            //Aggiunto per gestione documenti personali
            /*if (schedaDoc.accessRights == "0")
                schedaDoc.accessRights = "255";*/
            schedaDoc.tipoProto = dataRow["CHA_TIPO_PROTO"].ToString();
            schedaDoc.modOggetto = dataRow["CHA_MOD_OGGETTO"].ToString();
            schedaDoc.assegnato = dataRow["CHA_ASSEGNATO"].ToString();
            schedaDoc.fascicolato = dataRow["CHA_FASCICOLATO"].ToString();
            schedaDoc.privato = dataRow["CHA_PRIVATO"].ToString();
            schedaDoc.personale = dataRow["CHA_PERSONALE"].ToString();
            schedaDoc.evidenza = dataRow["CHA_EVIDENZA"].ToString();
            schedaDoc.interop = dataRow["CHA_INTEROP"].ToString();
            schedaDoc.dataScadenza = dataRow["DTA_SCADENZA"].ToString();
            // Registro
            schedaDoc.registro = GetRegistro(dataRow["ID_REGISTRO"].ToString());
            // Oggetto
            schedaDoc.oggetto = GetOggetto(dataRow);
            // Protocollo
            string tipoDoc = dataRow["CHA_TIPO_PROTO"].ToString();
            if (tipoDoc.Equals("A") || tipoDoc.Equals("P") || tipoDoc.Equals("I"))
            {
                if (tipoDoc.Equals("A"))
                {
                    schedaDoc.protocollo = new DocsPaVO.documento.ProtocolloEntrata();
                    //if (schedaDoc.protocollo == null)
                    //{
                    //    result = false;
                    //}
                }
                else if (tipoDoc.Equals("P"))
                {
                    schedaDoc.protocollo = new DocsPaVO.documento.ProtocolloUscita();
                    //if (schedaDoc.protocollo == null)
                    //{
                    //    result = false;
                    //}
                }
                else if (tipoDoc.Equals("I"))
                {
                    schedaDoc.protocollo = new DocsPaVO.documento.ProtocolloInterno();
                    //if (schedaDoc.protocollo == null)
                    //{
                    //    result = false;
                    //}
                }

                schedaDoc.protocollo.numero = dataRow["NUM_PROTO"].ToString();
                schedaDoc.protocollo.segnatura = dataRow["VAR_SEGNATURA"].ToString();
                schedaDoc.protocollo.dataProtocollazione = dataRow["DTA_PROTO"].ToString();
                //GetDatiProtocollo(dataRow, ref schedaDoc);
                //schedaDoc.rispostaDocumento = GetRispostaAlProtocollo(dataRow);

            }
            //else
            //{
            //    //doc grigi
            //    schedaDoc.rispostaDocumento = GetRispostaDocGrigio(dataRow);

            //}
            // Documenti

            schedaDoc.documenti = GetDocumenti(infoUtente, dataRow);

            // Impostazione del flag sulla visibilità delle versioni
            // schedaDoc.previousVersionsHidden = (!HasDocumentVersionsFullVisibility(schedaDoc.systemId, infoUtente.idPeople, infoUtente.idGruppo));

            // Reperimento allegati documento
            schedaDoc.allegati = GetAllegati(dataRow["DOCNUMBER"].ToString(), string.Empty);

            //// TipologiaAtto
            if (!string.IsNullOrEmpty(dataRow["ID_TIPO_ATTO"].ToString()))
            {
                schedaDoc.tipologiaAtto = new TipologiaAtto();
                //schedaDoc.tipologiaAtto.descrizione = dataRow["ID_TIPO_ATTO"].ToString();
                schedaDoc.tipologiaAtto = GetTipologiaAtto(dataRow);
            }

            //// ParoleChiave
            //schedaDoc.paroleChiave = GetParolaChiave(dataRow);

            if (dataRow["DTA_PROTO"].ToString().Length > 10)
                schedaDoc.oraCreazione = dataRow["DTA_PROTO"].ToString().Substring(11);

            //riempie l'oggetto creatore documento
            //schedaDoc.creatoreDocumento = GetCreatoreDocumento(dataRow);

            schedaDoc.inCestino = dataRow["CHA_IN_CESTINO"].ToString();

            if (schedaDoc.inCestino == "")
                schedaDoc.inCestino = "0";

            // Nuova gestione allegato
            if (dataRow["ID_DOCUMENTO_PRINCIPALE"] != DBNull.Value)
                //    // Reperimento informazioni sul documento principale
                schedaDoc.documentoPrincipale = GetInfoDocumento(infoUtente.idGruppo, infoUtente.idPeople, dataRow["ID_DOCUMENTO_PRINCIPALE"].ToString(), true);

            // Caricamento note documento
            //FetchNoteDocumento(infoUtente, schedaDoc);

            //Protocollo titolario
            schedaDoc.protocolloTitolario = dataRow["PROT_TIT"].ToString();

            //Num in fasc
            schedaDoc.numInFasc = dataRow["NUM_IN_FASC"].ToString();

            //ID fasc protocollo titolario
            schedaDoc.idFascProtoTit = dataRow["ID_FASC_PROT_TIT"].ToString();

            //Numero protocollo nodo titolario
            schedaDoc.numProtTit = dataRow["NUM_PROT_TIT"].ToString();

            //Id Titolario
            schedaDoc.idTitolario = dataRow["ID_TITOLARIO"].ToString();

            //Riferimento Mittente
            schedaDoc.riferimentoMittente = dataRow["CHA_RIFF_MITT"].ToString();

            //typeId:
            schedaDoc.typeId = dataRow["TYPE_ID"].ToString();

            //CHA_DOCUMENTO_DA_PEC
            schedaDoc.documento_da_pec = dataRow["CHA_DOCUMENTO_DA_PEC"].ToString();

            //// Reperimento stato di consolidamento del documento
            //if (IsConfigEnabled())
            //{
            //    DocsPaDB.Query_DocsPAWS.DocumentConsolidation consolidationDb = new DocumentConsolidation(infoUtente);
            //    schedaDoc.ConsolidationState = consolidationDb.GetState(schedaDoc.systemId);
            //}
            //else
            //{
            //    DocsPaVO.documento.DocumentConsolidationStateInfo retValueCons = null;
            //    schedaDoc.ConsolidationState = retValueCons;
            //}

            // Reperimento del valore del campo LastForward utilizzato per indicare il system id dell'ultimo
            // documento generato tramite inoltro del documento di cui si sta richiedendo il dettaglio
            schedaDoc.LastForward = dataRow["LAST_FORWARD"].ToString();

            //***************************************************************
            //GIORDANO IACOZZILLI
            //17/07/2013
            //Gestione dell'icona della copia del docuemnto/fascicolo in deposito.
            //+FIX per le 100000 di query che ghettano il documento.
            //***************************************************************
            if (dataRow.Table.Columns.Contains("CHA_IN_ARCHIVIO"))
            {
                schedaDoc.inArchivio = dataRow["CHA_IN_ARCHIVIO"] != null ? dataRow["CHA_IN_ARCHIVIO"].ToString() : "0";
            }
            //***************************************************************
            //FINE
            //***************************************************************

            //Reperimento atipicità del documento
            // schedaDoc.InfoAtipicita = DocsPaDB.Query_DocsPAWS.Documentale.GetInfoAtipicita(dataRow, DocsPaVO.Security.InfoAtipicita.TipoOggettoAtipico.DOCUMENTO);

            if (dataRow.Table.Columns.Contains("inConservazione") && dataRow["inConservazione"] != DBNull.Value)
            {

                if (dataRow["inConservazione"].ToString() == "1")
                {
                    schedaDoc.inConservazione = "1";
                }

            }

            // ABBATANGELI GIANLUIGI - gestione applicazioni esterne
            schedaDoc.codiceApplicazione = dataRow["COD_EXT_APP"].ToString();
            if (extAppControlEnabled && (!string.IsNullOrEmpty(schedaDoc.codiceApplicazione)))
            {
                schedaDoc.accessRights = (string.Compare(schedaDoc.codiceApplicazione, infoUtente.codWorkingApplication) == 0 ? schedaDoc.accessRights : "45");
                //schedaDoc.accessRights = (sameApplication(schedaDoc.codiceApplicazione,infoUtente.extApplications)?schedaDoc.accessRights:"45");
            }

            logger.Info("END");
            return result;
        }



        #region ADL Role

        public int IsDocInADLRole(string idDoc, string idRole)
        {
            string queryString;
            string retValue;
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_DOC_IN_ADLROLE");
            q.setParam("idDoc", idDoc);
            q.setParam("idRole", idRole);
            queryString = q.getSQL();
            logger.Debug(queryString);
            if (!string.IsNullOrEmpty(idDoc))
            {
                ExecuteScalar(out retValue, queryString);

                if (!string.IsNullOrEmpty(retValue))
                    return 1;
                else
                    return 0;
            }
            else
                return 0;
        }

        public bool ExeAddLavoroRole(string idProfile, string tipoProto, string idRegistro, DocsPaVO.utente.InfoUtente infoUtente, DocsPaVO.fascicolazione.Fascicolo fasc)
        {
            DataSet dataSet = new DataSet();
            DocsPaUtils.Query q;
            string queryString = "";
            bool result = true;
            try
            {
                //costruzione della query
                string idPeople = "0";
                string idRuoloInUo = infoUtente.idCorrGlobali;
                System.DateTime now = System.DateTime.Now;
                CultureInfo ci = new CultureInfo("it-IT");
                string dateString = DocsPaDbManagement.Functions.Functions.ToDate(now.ToString("dd/MM/yyyy hh:mm:ss tt", ci));
                if (idProfile != null && tipoProto != null)
                {
                    q = DocsPaUtils.InitQuery.getInstance().getQuery("S_DPAAreaLavoro");
                    q.setParam("param1", "SYSTEM_ID, CHA_TIPO_DOC");
                    q.setParam("param2", "ID_PEOPLE=" + idPeople + " AND ID_RUOLO_IN_UO=" + idRuoloInUo + " AND ID_PROFILE=" + idProfile);
                    queryString = q.getSQL();
                    logger.Debug(queryString);
                    ExecuteQuery(dataSet, "DOC", queryString);
                    if (dataSet.Tables["DOC"].Rows.Count == 0)
                    {
                        // verifica se in ADL utente
                        q = DocsPaUtils.InitQuery.getInstance().getQuery("S_DPAAreaLavoro");
                        q.setParam("param1", "SYSTEM_ID, CHA_TIPO_DOC");
                        q.setParam("param2", "ID_PEOPLE=" + infoUtente.idPeople + " AND ID_RUOLO_IN_UO=" + idRuoloInUo + " AND ID_PROFILE=" + idProfile);
                        queryString = q.getSQL();
                        logger.Debug(queryString);
                        ExecuteQuery(dataSet, "DOC", queryString);
                        if (dataSet.Tables["DOC"].Rows.Count == 0)
                        {
                            //si esegue l'inserimento
                            q = DocsPaUtils.InitQuery.getInstance().getQuery("I_DPAAreaLavoro");
                            q.setParam("param1", Functions.GetSystemIdColName() + " ID_PEOPLE,ID_RUOLO_IN_UO,ID_PROFILE,CHA_TIPO_DOC,DTA_INS, ID_REGISTRO ");
                            if (idRegistro != null && idRegistro != String.Empty)
                            {
                                q.setParam("param2", Functions.GetSystemIdNextVal(null) + " '" + idPeople + "','" + idRuoloInUo + "','" + idProfile + "','" + tipoProto + "'," + dateString + "," + "'" + idRegistro + "'");
                            }
                            else
                            {
                                q.setParam("param2", Functions.GetSystemIdNextVal(null) + " '" + idPeople + "','" + idRuoloInUo + "','" + idProfile + "','" + tipoProto + "'," + dateString + "," + "NULL");
                            }
                            queryString = q.getSQL();
                            logger.Debug(queryString);
                            ExecuteNonQuery(queryString);
                        }
                        else
                        {
                            // promozione ADL utente in ADL ruolo
                            q = DocsPaUtils.InitQuery.getInstance().getQuery("U_DPAAreaLavoro");
                            q.setParam("param1", "CHA_TIPO_DOC='" + tipoProto + "'" + ", ID_REGISTRO = '" + idRegistro + "', ID_PEOPLE='0'");
                            q.setParam("param2", "ID_PEOPLE=" + infoUtente.idPeople + " AND ID_RUOLO_IN_UO=" + idRuoloInUo + " AND ID_PROFILE=" + idProfile);
                            queryString = q.getSQL();
                            logger.Debug(queryString);
                            ExecuteNonQuery(queryString);
                        }
                    }
                    else
                    {
                        //si fa l'update solo se il tipo documento vecchio è grigio e quello nuovo è diverso da grigio
                        if (dataSet.Tables["DOC"].Rows[0]["CHA_TIPO_DOC"].ToString().Equals("G") && !tipoProto.Equals("G"))
                        {
                            q = DocsPaUtils.InitQuery.getInstance().getQuery("U_DPAAreaLavoro");
                            q.setParam("param1", "CHA_TIPO_DOC='" + tipoProto + "'" + ", ID_REGISTRO = '" + idRegistro + "'");
                            q.setParam("param2", "ID_PEOPLE=" + idPeople + " AND ID_RUOLO_IN_UO=" + idRuoloInUo + " AND ID_PROFILE=" + idProfile);
                            queryString = q.getSQL();
                            logger.Debug(queryString);
                            ExecuteNonQuery(queryString);
                        }
                    }
                }
                if (fasc != null)
                {
                    string idProject = fasc.systemID;
                    string tipoFasc = fasc.tipo;
                    q = DocsPaUtils.InitQuery.getInstance().getQuery("S_DPAAreaLavoro");
                    q.setParam("param1", "SYSTEM_ID");
                    q.setParam("param2", "ID_PEOPLE=" + idPeople + " AND ID_RUOLO_IN_UO=" + idRuoloInUo + " AND ID_PROJECT=" + idProject);
                    queryString = q.getSQL();
                    logger.Debug(queryString);
                    ExecuteQuery(dataSet, "FASC", queryString);
                    if (dataSet.Tables["FASC"].Rows.Count == 0)
                    {
                        // check ADL utente
                        q = DocsPaUtils.InitQuery.getInstance().getQuery("S_DPAAreaLavoro");
                        q.setParam("param1", "SYSTEM_ID");
                        q.setParam("param2", "ID_PEOPLE=" + infoUtente.idPeople + " AND ID_RUOLO_IN_UO=" + idRuoloInUo + " AND ID_PROJECT=" + idProject);
                        queryString = q.getSQL();
                        logger.Debug(queryString);
                        ExecuteQuery(dataSet, "FASC", queryString);
                        if (dataSet.Tables["FASC"].Rows.Count == 0)
                        {
                            //si inserisce il nuovo dato
                            q = DocsPaUtils.InitQuery.getInstance().getQuery("I_DPAAreaLavoro");
                            q.setParam("param1", Functions.GetSystemIdColName() + " ID_PEOPLE, ID_RUOLO_IN_UO, ID_PROJECT, CHA_TIPO_FASC, DTA_INS, ID_REGISTRO ");
                            q.setParam("param2", Functions.GetSystemIdNextVal(null) + " '" + idPeople + "','" + idRuoloInUo + "','" + idProject + "','" + tipoFasc + "'," + dateString + "," + (idRegistro.Equals(String.Empty) ? "NULL" : "'" + idRegistro + "'"));
                            queryString = q.getSQL();
                            logger.Debug(queryString);
                            ExecuteNonQuery(queryString);
                        }
                        else
                        {
                            // update ADL utente in ADL ruolo
                            q = DocsPaUtils.InitQuery.getInstance().getQuery("U_DPAAreaLavoro");
                            q.setParam("param1", "CHA_TIPO_DOC='" + tipoProto + "'" + ", ID_REGISTRO = '" + idRegistro + "', ID_PEOPLE='0'");
                            q.setParam("param2", "ID_PEOPLE=" + infoUtente.idPeople + " AND ID_RUOLO_IN_UO=" + idRuoloInUo + " AND ID_PROJECT=" + idProject);
                            queryString = q.getSQL();
                            logger.Debug(queryString);
                            ExecuteNonQuery(queryString);
                        }
                    }
                }
            }
            catch (Exception)
            {
                result = false;
            }
            return result;
        }

        public int IsFascInADLRole(string idFasc, string idRole)
        {
            string queryString;
            string retValue;
            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_FASC_IN_ADLROLE");
            q.setParam("idFasc", idFasc);
            q.setParam("idRole", idRole);
            queryString = q.getSQL();
            logger.Debug(queryString);
            if (!string.IsNullOrEmpty(idFasc))
            {
                ExecuteScalar(out retValue, queryString);

                if (!string.IsNullOrEmpty(retValue))
                    return 1;
                else
                    return 0;
            }
            else
                return 0;
        }

        #endregion
        #region mev conservazione 1.5

        //ritorna con parametri di output l'utente propietario e il ruolo di un ogetto (sia che sia documento sia che sia Fascicolo)
        public void getUtenteAndRuoloProprietario(String idThing, out String utenteProprietario, out String ruoloProprietario)
        {
            utenteProprietario = string.Empty;
            ruoloProprietario = string.Empty;
            DocsPaUtils.Query q;
            q = DocsPaUtils.InitQuery.getInstance().getQuery("S_SECURITY_PROPRIETARIO");
            q.setParam("param1", idThing);
            q.setParam("param2", "'P'");
            string queryString = q.getSQL();

            string personGroup;
            string accessrights;

            IDataReader dr = null;
            using (DocsPaDB.DBProvider dbProvider = new DBProvider())
            {
                using (dr = dbProvider.ExecuteReader(queryString))
                {
                    while (dr.Read())
                    {
                        personGroup = dr["PERSONORGROUP"].ToString();
                        accessrights = dr["ACCESSRIGHTS"].ToString();

                        if (accessrights.Equals("0"))
                            utenteProprietario = personGroup;
                        if (accessrights.Equals("255"))
                            ruoloProprietario = personGroup;
                    }
                }
            }
        }

        public bool isDocFirmato(string docNumber, string versionId, out string extOriginale)
        {
            bool result = false;
            string value = string.Empty;
            extOriginale = string.Empty;

            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_Components");
            q.setParam("param1", "CHA_FIRMATO, EXT");
            q.setParam("param2", "VERSION_ID=" + versionId + " AND DOCNUMBER=" + docNumber);
            string queryString = q.getSQL();
            logger.Debug(queryString);

            using (IDataReader rtn = ExecuteReader(queryString))
            {
                if (rtn != null && rtn.FieldCount > 0)
                    while (rtn.Read())
                    {
                        // Cha_firmato
                        value = rtn.GetString(0);
                        // estensione originale
                        extOriginale = rtn.GetString(1);
                    }
            }

            result = value.Equals("1");

            return result;
        }

        public string getOriginaExt(string docNumber, string versionId)
        {
            string value = string.Empty;


            DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_Components");
            q.setParam("param1", "EXT");
            q.setParam("param2", "VERSION_ID=" + versionId + " AND DOCNUMBER=" + docNumber);
            string queryString = q.getSQL();
            logger.Debug(queryString);

            using (IDataReader rtn = ExecuteReader(queryString))
            {
                if (rtn != null && rtn.FieldCount > 0)
                    while (rtn.Read())
                    {
                        // estensione originale
                        value = rtn.GetString(0);

                    }
            }

            value = value.Equals("0") ? string.Empty : value.Trim();

            return value;
        }
        #endregion

        /// <summary>
        /// Metodo per il recupero dell'id dell'ultimo documento creato con un dato oggetto
        /// </summary>
        /// <param name="subject">Oggetto del documento</param>
        /// <returns>Id del documento</returns>
        public String GetLastInsertedDocumentWithSubject(String subject)
        {
            // Sql da eseguire
            String sql = String.Format("Select Max(system_id) From Profile Where var_prof_oggetto = '{0}'", subject);

            String lastId = String.Empty;
            using (DBProvider dbProvider = new DBProvider())
            {
                dbProvider.ExecuteScalar(out lastId, sql);
            }

            return lastId;
        }

        #region ElectronicSignature

        /// <summary>
        /// Estra la lista delle firme elettronica applicate sul documento in input
        /// </summary>
        /// <param name="docnumber"></param>
        /// <param name="versionId"></param>
        /// <param name="infoUtente"></param>
        /// <returns></returns>
        public List<DocsPaVO.LibroFirma.FirmaElettronica> GetElectronicSignatureDocument(string docnumber, string versionId, DocsPaVO.utente.InfoUtente infoUtente)
        {
            logger.Debug("Inizio Metodo GetElectronicSignatureDocument in DocsPaDb.Query_DocsPAWS.Documenti");
            List<DocsPaVO.LibroFirma.FirmaElettronica> listElectronicSignature = new List<DocsPaVO.LibroFirma.FirmaElettronica>();
            string query = string.Empty;
            DataSet ds = new DataSet();
            try
            {
                DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_DPA_FIRMA_ELETTRONICA");
                q.setParam("docnumber", docnumber);
                q.setParam("versionId", versionId);
                query = q.getSQL();
                logger.Debug("GetElectronicSignatureDocument: " + query);

                if (ExecuteQuery(out ds, "electronicSignatureDocument", query))
                {
                    if (ds.Tables["electronicSignatureDocument"] != null && ds.Tables["electronicSignatureDocument"].Rows.Count > 0)
                    {
                        DocsPaVO.LibroFirma.FirmaElettronica electronicSignature;
                        foreach (DataRow row in ds.Tables["electronicSignatureDocument"].Rows)
                        {
                            electronicSignature = new DocsPaVO.LibroFirma.FirmaElettronica()
                            {
                                IdFirma = row["ID_FIRMA"].ToString(),
                                Docnumber = row["ID_DOCUMENTO"].ToString(),
                                Versionid = row["VERSION_ID"].ToString(),
                                Xml = !string.IsNullOrEmpty(row["XML"].ToString()) ? row["XML"].ToString() : string.Empty
                            };
                            if(!string.IsNullOrEmpty(electronicSignature.Xml))
                            {
                                ElaborateXmlElectronicSignature(ref electronicSignature);
                                listElectronicSignature.Add(electronicSignature);
                            }
                        }
                    }
                }
            }
            catch(Exception ex)
            {
                logger.Error("Errore nel Metodo GetElectronicSignatureDocument in DocsPaDb.Query_DocsPAWS.Documenti: " + ex.Message);
                return null;
            }
            logger.Debug("Fine Metodo GetElectronicSignatureDocument in DocsPaDb.Query_DocsPAWS.Documenti");
            return listElectronicSignature;

        }

        private void ElaborateXmlElectronicSignature(ref DocsPaVO.LibroFirma.FirmaElettronica electronicSignature)
        {
            XmlDocument doc = new XmlDocument();
            XmlTextReader xtr = new XmlTextReader(new System.IO.StringReader(electronicSignature.Xml)); //new XmlTextReader(electronicSignature.XmlElectronicSignature);
            doc.Load(xtr);
            
            XmlElement elFirmatario = (XmlElement)doc.DocumentElement.SelectSingleNode("FirmaElettronica/Firmatario");
            string ruoloFirmatario = elFirmatario.SelectSingleNode("Ruolo").InnerText.Trim();
            string utenteFirmatario = elFirmatario.SelectSingleNode("Utente").InnerText.Trim();
            
            XmlElement elDataCreazione = (XmlElement)doc.DocumentElement.SelectSingleNode("FirmaElettronica/DataCreazione");
            electronicSignature.DataApposizione = elDataCreazione.InnerText.Trim();

            string delegato = elFirmatario.GetAttribute("delega");
            if (string.IsNullOrEmpty(delegato))
            {
                electronicSignature.Firmatario = utenteFirmatario + " (" + ruoloFirmatario + ")";
            }
            else
            {
                electronicSignature.Firmatario = delegato + " (" + ruoloFirmatario + ") DELEGATO DA " + utenteFirmatario;
            }
        }

        /// <summary>
        /// Imposta il cha_firmato ad 1 in seguito all'apposizione della firma
        /// </summary>
        /// <param name="versionId"></param>
        /// <param name="docnumber"></param>
        /// <returns></returns>
        public bool UpdateComponentsChaFirmato(string versionId, string docnumber)
        {
            DocsPaUtils.Query queryDef = DocsPaUtils.InitQuery.getInstance().getQuery("U_COMPONENTS_CHA_FIRMATO");

            int rowsAffected = 0;
            try
            {
                queryDef.setParam("versionId", versionId);
                queryDef.setParam("docnumber", docnumber);
                string commandText = queryDef.getSQL();
                logger.Debug(commandText);
                ExecuteNonQuery(commandText, out rowsAffected);
            }
            catch(Exception e)
            {
                logger.Error("Errore nel Metodo UpdateComponentsChaFirmato in DocsPaDb.Query_DocsPAWS.Documenti: " + e.Message);
            }
            return (rowsAffected > 0);
        }

        /// <summary>
        /// Imposta il cha_firmato ad 1 in seguito all'apposizione della firma
        /// </summary>
        /// <param name="versionId"></param>
        /// <param name="docnumber"></param>
        /// <param name="tipoFirma"></param>
        /// <returns></returns>
        public bool UpdateComponentsChaTipoFirma(string versionId, string docnumber, string tipoFirma, bool electornicallySigned = false)
        {
            DocsPaUtils.Query queryDef = DocsPaUtils.InitQuery.getInstance().getQuery("U_COMPONENTS_CHA_TIPO_FIRMA");

            int rowsAffected = 0;
            try
            {
                if (electornicallySigned)
                {
                    switch (tipoFirma)
                    {
                        case (DocsPaVO.documento.TipoFirma.CADES):
                            tipoFirma = DocsPaVO.documento.TipoFirma.CADES_ELETTORNICA;
                            break;
                        case (DocsPaVO.documento.TipoFirma.XADES):
                            tipoFirma = DocsPaVO.documento.TipoFirma.XADES_ELETTORNICA;
                            break;
                        case (DocsPaVO.documento.TipoFirma.PADES):
                            tipoFirma = DocsPaVO.documento.TipoFirma.PADES_ELETTORNICA;
                            break;
                        case (DocsPaVO.documento.TipoFirma.TSD):
                            tipoFirma = DocsPaVO.documento.TipoFirma.TSD_ELETTORNICA;
                            break;
                        case (DocsPaVO.documento.TipoFirma.NESSUNA_FIRMA):
                            tipoFirma = DocsPaVO.documento.TipoFirma.ELETTORNICA;
                            break;
                    }
                }

                queryDef.setParam("versionId", versionId);
                queryDef.setParam("docnumber", docnumber);
                queryDef.setParam("tipoFirma", tipoFirma);
                string commandText = queryDef.getSQL();
                logger.Debug(commandText);
                ExecuteNonQuery(commandText, out rowsAffected);
            }
            catch (Exception e)
            {
                logger.Error("Errore nel Metodo UpdateComponentsChaFirmato in DocsPaDb.Query_DocsPAWS.Documenti: " + e.Message);
            }
            return (rowsAffected > 0);
        }


        /// <summary>
        /// Reperimento oggetto InfoDocumento NB. per il paramentro idProfile occorre passare il DocNumber
        /// </summary>
        /// <param name="idGruppo"></param>
        /// <param name="idPeople"></param>
        /// <param name="idProfile"></param>
        /// <param name="corr"></param>
        /// <returns></returns>
        public DocsPaVO.documento.InfoDocumento GetInfoDocumentoLite(string idProfile)
        {
            logger.Info("BEGIN");
            logger.Debug("START : DocsPaDB > Query_DocsPAWS > Documenti > GetInfoDocumentoLite");
            DataSet ds = new DataSet();
            DocsPaUtils.Query queryDef = null;
            DocsPaVO.documento.InfoDocumento infoDoc = null;
            queryDef = DocsPaUtils.InitQuery.getInstance().getQuery("S_GET_INFO_DOCUMENTO_LITE");
            queryDef.setParam("docnumber", idProfile);

            string queryString = queryDef.getSQL();
            logger.Debug(queryString);
            logger.Debug("GetInfoDocumentoLite: " + queryString);

            if (ExecuteQuery(out ds, "GetInfoDocumentoLite", queryString))
             {
                 if (ds.Tables["GetInfoDocumentoLite"] != null && ds.Tables["GetInfoDocumentoLite"].Rows.Count > 0)
                 {
                     DataRow row = ds.Tables["GetInfoDocumentoLite"].Rows[0];
                     infoDoc = new InfoDocumento()
                     {
                         docNumber = row["SYSTEM_ID"].ToString(),
                         idProfile = row["DOCNUMBER"].ToString(),
                         oggetto = row["VAR_DESC_OGGETTO"].ToString(),
                         tipoProto = !string.IsNullOrEmpty(row["CHA_TIPO_PROTO"].ToString()) ? row["CHA_TIPO_PROTO"].ToString() : string.Empty
                     };
                 }
             }

            logger.Debug("END : DocsPaDB > Query_DocsPAWS > Documenti > GetInfoDocumentoLite");

            logger.Info("END");

            return infoDoc;
        }
        #endregion

        public string GetRifTemporaleDocProtocollati(string idProfile)
        {
            string result = string.Empty;

            try
            {
                using (DBProvider dbProvider = new DBProvider())
                {
                    Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_GET_DATA_ORA_PROTOCOLLAZIONE");
                    q.setParam("idDoc", idProfile);
                    string command = q.getSQL();
                    logger.Debug(command);

                    if (!dbProvider.ExecuteScalar(out result, command))
                        throw new Exception(dbProvider.LastExceptionMessage);
                }
            }
            catch(Exception ex)
            {
                logger.Debug(ex.Message);
                return string.Empty;
            }
            return result;
        }

        #region ULTIMI_DOCUMENTI_VISUALIZZATI
        /// <summary>
        /// Aggiorna la lista degli ultimi documenti acceduti
        /// </summary>
        /// <param name="idProfile"></param>
        /// <param name="infoUtente"></param>
        /// <returns></returns>
        public void UpdateLastDocumentsView(string idProfile, DocsPaVO.utente.InfoUtente infoUtente)
        {
            logger.Info("BEGIN UpdateLastDocumentsView");
            try
            {
                // Creazione parametri per la Store Procedure
                ArrayList parameters = new ArrayList();

                parameters.Add(CreateParameter("p_idpeople", infoUtente.idPeople));
                parameters.Add(CreateParameter("p_idgruppo", infoUtente.idGruppo));
                parameters.Add(CreateParameter("p_idprofile", idProfile));
                parameters.Add(CreateParameter("p_idamm", infoUtente.idAmministrazione));
                ExecuteStoredProcedure("SP_UPDATE_ULTIMI_DOC_VIS", parameters, null);
            }
            catch (Exception e)
            {
                logger.Debug("Errore nel metdod UpdateLastDocumentsView" + e.Message);
            }
            logger.Info("END UpdateLastDocumentsView");
        }

        /// <summary>
        /// Estrae la lista degli ultimi documenti visualizzati
        /// </summary>
        /// <param name="infoUtente"></param>
        /// <returns></returns>
        public List<DocsPaVO.documento.DocumentoVisualizzato> GetLastDocumentsView(DocsPaVO.utente.InfoUtente infoUtente)
        {
            logger.Info("BEGIN GetLastDocumentsView");
            List<DocsPaVO.documento.DocumentoVisualizzato> lastDocumentsView = new List<DocumentoVisualizzato>();
            try
            {
                string query;
                DataSet ds = new DataSet();
                DocsPaUtils.Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_DPA_ULTIMI_DOC_VISUALIZZATI");
                q.setParam("idPeople", infoUtente.idPeople);
                q.setParam("idGruppo", infoUtente.idGruppo);
                q.setParam("idAmm", infoUtente.idAmministrazione);
                query = q.getSQL();
                logger.Debug("GetLastDocumentsView: " + query);

                if (ExecuteQuery(out ds, "lastDocumentsVew", query))
                {
                    if (ds.Tables["lastDocumentsVew"] != null && ds.Tables["lastDocumentsVew"].Rows.Count > 0)
                    {
                        DocsPaVO.documento.DocumentoVisualizzato docVis = null;
                        foreach (DataRow row in ds.Tables["lastDocumentsVew"].Rows)
                        {
                            docVis = new DocumentoVisualizzato()
                            {
                                IdPeople =  row["ID_PEOPLE"].ToString(),
                                IdGruppo = row["ID_GRUPPO"].ToString(),
                                IdAmm = row["ID_AMM"].ToString(),
                                IdProfile = row["ID_PROFILE"].ToString(),
                                Oggetto = row["OGGETTO"].ToString(),
                                Segnatura = !string.IsNullOrEmpty(row["SEGNATURA"].ToString()) ? row["SEGNATURA"].ToString() : string.Empty
                            };
                            lastDocumentsView.Add(docVis);
                        }
                    }
                }
            }
            catch (Exception e)
            {
                logger.Debug("Errore nel metdod GetLastDocumentsView" + e.Message);
                return lastDocumentsView;
            }
            logger.Info("FINE GetLastDocumentsView");
            return lastDocumentsView;
        }

        /// <summary>
        /// Verifica se il documento è stato spedito
        /// </summary>
        /// <param name="docnumber"></param>
        /// <param name="codAzione"></param>
        /// <returns></returns>
        public bool CheckDocumentIsSent(string docnumber, string codAzione)
        {
            bool result = false;

            try
            {
                using (DBProvider dbProvider = new DBProvider())
                { 
                    DocsPaUtils.Query queryMng = DocsPaUtils.InitQuery.getInstance().getQuery("S_DPA_LOG_BY_ID_OGGETTO_COD_AZIONE");
                    queryMng.setParam("param1", docnumber);
                    queryMng.setParam("param2", codAzione);
                    string commandText = queryMng.getSQL();
                    DataSet ds = new DataSet();

                    dbProvider.ExecuteQuery(ds, "CheckDocumentIsSent", commandText);

                    if (ds.Tables["CheckDocumentIsSent"] != null && ds.Tables["CheckDocumentIsSent"].Rows.Count > 0)
                    {
                        result = true;
                    }
                }
            }
            catch (Exception e)
            {
                logger.Error(e.Message);
                logger.Error("Errore in CheckDocumentIsSent ", e);
                return false;
            }

            return result;
        }
        #endregion

        private bool isConservazionePARER()
        {
            bool result = false;
            try
            {
                string key = DocsPaUtils.Configuration.InitConfigurationKeys.GetValue("0", "FE_WA_CONSERVAZIONE");
                if (!string.IsNullOrEmpty(key) && key.Equals("1"))
                {
                    result = true;
                }
            }
            catch (Exception ex)
            {
                logger.DebugFormat("Errore nel reperimento della chiave di conservazione! {0}\r\n{1}", ex.Message, ex.StackTrace);
                result = false;
            }
            return result;

        }

        private string GetQueryCondDocInNodieFasicoli(DocsPaVO.filtri.FiltroRicerca f, string idPeople)
        {
            string idAmm = GetIdAmministrazioneByIdPeople(idPeople);
            string queryWhere = string.Empty;
            queryWhere += " AND EXISTS (SELECT LINK FROM PROJECT_COMPONENTS PC WHERE PC.LINK=A.SYSTEM_ID AND EXISTS  ";
            queryWhere += " (SELECT SYSTEM_ID FROM PROJECT P1 WHERE P1.SYSTEM_ID = PC.PROJECT_ID AND UPPER(P1.VAR_CODICE) LIKE '" + f.valore.ToUpper() + "%' AND P1.ID_AMM =" + idAmm;
            queryWhere += " UNION SELECT SYSTEM_ID FROM PROJECT P2 WHERE P2.SYSTEM_ID = PC.PROJECT_ID AND EXISTS ( SELECT SYSTEM_ID FROM PROJECT P3  WHERE UPPER(P3.VAR_CODICE) LIKE '" + f.valore.ToUpper() + "%' AND P3.ID_AMM =" + idAmm + " AND P2.ID_FASCICOLO =P3.SYSTEM_ID)";
            queryWhere += " AND P2.ID_AMM =" + idAmm + " ))";

            return queryWhere;
        }

        private string GetIdAmministrazioneByIdPeople(string idPeople)
        {
            // Sql da eseguire
            string sql = "SELECT ID_AMM FROM PEOPLE WHERE SYSTEM_ID = " + idPeople;

            string idAmm = String.Empty;
            using (DBProvider dbProvider = new DBProvider())
            {
                dbProvider.ExecuteScalar(out idAmm, sql);
            }

            return idAmm;
        }
        protected bool RicercaPerUoProtollatriceStoricizzate(DocsPaVO.filtri.FiltroRicerca[] filters)
        {
            bool retValue = false;

            string value = (from item in filters
                            where item.argomento == DocsPaVO.filtri.ricerca.listaArgomenti.UO_PROT_STORICIZZATE.ToString()
                            select item.valore).FirstOrDefault();
            if (!string.IsNullOrEmpty(value))
                bool.TryParse(value, out retValue);

            return retValue;
        }

        protected bool RicercaPerUoProtocollatriciSottostanti(DocsPaVO.filtri.FiltroRicerca[] filters)
        {
            bool retValue = false;
            string value = (from item in filters
                            where item.argomento == DocsPaVO.filtri.ricerca.listaArgomenti.UO_PROT_SOTTOSTATNTI.ToString()
                            select item.valore).FirstOrDefault();
            if(!string.IsNullOrEmpty(value))
                bool.TryParse(value, out retValue);

            return retValue;
        }

        private List<string> getIdUOSottoposte(string idUo)
        {
            List<String> result = new List<string>();
            try
            {
                using (DBProvider dbProvider = new DBProvider())
                {
                    Query q = DocsPaUtils.InitQuery.getInstance().getQuery("S_GET_UO_SOTTOPOSTE");
                    q.setParam("idUo", idUo);
                    string command = q.getSQL();
                    logger.Debug(command);

                    IDataReader dr = dbProvider.ExecuteReader(command);

                    while (dr.Read())
                    {
                        result.Add(dr.GetValue(0).ToString());
                    }
                    dr.Close();
                }
            }
            catch (Exception ex)
            {
                logger.Debug(ex.Message);
            }
            return result;
        }

        public bool SetDataFirmaDocumento(string idProfile, string idVersione)
        {
            bool result = false;

            logger.Debug("BEGIN");

            try
            {
                Query query = InitQuery.getInstance().getQuery("I_INFO_FIRMA_DIGITALE");
                query.setParam("id_profile", idProfile);
                query.setParam("version_id", idVersione);

                string command = query.getSQL();
                logger.Debug("QUERY - " + command);

                if (!this.ExecuteNonQuery(command))
                    throw new Exception(this.LastExceptionMessage);

                result = true;
            }
            catch (Exception ex)
            {
                logger.Debug("Errore in SetDataFirmaDocumento - ", ex);
            }

            logger.Debug("END");

            return result;
        }

    }
}
