using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using NttDataWA.DocsPaWR;
using NttDataWA.Utils;
using NttDataWA.UIManager;
using System.Collections;
using NttDatalLibrary;
using System.Text;
using System.Globalization;
using System.Data;
using NttDataWA.UserControls;
using System.Security.Cryptography;
using log4net;

namespace NttDataWA.Document
{
    public partial class Document : System.Web.UI.Page
    {
        private ILog _logger = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);

        private const string NOTPROTOCOL = "N";
        private const string ATTACHMENT = "ALL";
        private const string PANEL_VERSION = "UpBottomButtons";
        private const string MODIFY_VERSION = "MODIFY_VERSION";
        private const string CONFIRM_REMOVE_VERSION = "CONFIRM_REMOVE_VERSION";
        private const string UP_PANEL_SENDER = "UpPnlSender";
        private const string NEW_SENDER_FROM_ADDRESS_BOOK = "NewSenderFromAddressBook";
        private const string UP_PANEL_OBJECT = "UpdPnlObject";
        private const string RETURN_FROM_K1_K2 = "ReturnFromK1_K2";
        private const string SIGNATURE_PROCESS_CONCLUTED = "SignatureProcessConcluted";
        private const string POPUP_DRAG_AND_DROP = "POPUP_DRAG_AND_DROP";
        private const string UP_DOCUMENT_BUTTONS = "upPnlButtons";
        private const string CLOSE_POPUP_ADDRESS_BOOK = "closePopupAddressBook";

        private string idProfile = string.Empty;
        private string docNumber = string.Empty;
        protected DocsPaWR.FiltroRicerca[][] qV;
        protected DocsPaWR.FiltroRicerca[][] ListaFiltri;
        protected DocsPaWR.FiltroRicerca[] fVList;
        protected DocsPaWR.FiltroRicerca fV1;

        private bool? _errorRequirePopUp;

        /// <summary>
        /// Id del Task a cui associare il contributo
        /// </summary>
        private DocsPaWR.Task Task
        {
            get
            {
                if (HttpContext.Current.Session["TaskDoc"] != null)
                {
                    return HttpContext.Current.Session["TaskDoc"] as DocsPaWR.Task;
                }
                return null;
            }
            set
            {
                HttpContext.Current.Session["TaskDoc"] = value;
            }
        }

        private string TypeDocument
        {
            get
            {
                return HttpContext.Current.Session["typeDoc"].ToString();

            }
            set
            {
                if (value != null)
                    HttpContext.Current.Session["typeDoc"] = value;
                else if (!string.IsNullOrEmpty(Request.QueryString["t"]))
                    HttpContext.Current.Session["typeDoc"] = Request.QueryString["t"];
                else
                    HttpContext.Current.Session["typeDoc"] = string.Empty;
            }
        }
        private string ReturnValue
        {
            get
            {
                //Laura 19 Marzo
                if ((HttpContext.Current.Session["ReturnValuePopup"]) != null)
                    return HttpContext.Current.Session["ReturnValuePopup"].ToString();
                else
                    return string.Empty;
            }
        }
        // Nel caso sia stato modificato il mezzo di spedizione di un corrispondente.
        private string[] bypassaControlloRicevute
        {
            get
            {
                if (HttpContext.Current.Session["bypassaControlloRicevute2032"] != null)
                {
                    string bypassa = HttpContext.Current.Session["bypassaControlloRicevute2032"].ToString();
                    return bypassa.Split('§');
                }
                else return null;

            }
            set
            {
                HttpContext.Current.Session["bypassaControlloRicevute2032"] = value;
            }
        }
        private bool modificaDestDaChoiceTypeDelivery
        {
            get
            {
                if (HttpContext.Current.Session["modDestinatariPerCambioCanale20140221"] != null)
                {
                    return (Boolean)HttpContext.Current.Session["modDestinatariPerCambioCanale20140221"];
                }
                else return false;
            }
            set
            {
                HttpContext.Current.Session["modDestinatariPerCambioCanale20140221"] = value;
            }
        }

        /// <summary>
        /// Indica se è necessario modficare i bottoni del documento che indicano nessina/una/più presenze del corrispondente in rubrica nel caso di k1-k2
        /// </summary>
        private bool UpdateDocumentProfileButton
        {
            get
            {
                bool result = false;
                if (HttpContext.Current.Session["UpdateDocumentProfileButton"] != null)
                {
                    result = bool.Parse(HttpContext.Current.Session["UpdateDocumentProfileButton"].ToString());
                }
                return result;
            }
            set
            {
                HttpContext.Current.Session["UpdateDocumentProfileButton"] = value;
            }
        }

        private string TypeProtocol
        {
            get
            {
                string toReturn = null;
                if (HttpContext.Current.Session["TypeProtocol"] != null) toReturn = HttpContext.Current.Session["TypeProtocol"].ToString();

                return toReturn;
            }
            set
            {
                HttpContext.Current.Session["TypeProtocol"] = value;
            }
        }
        private bool IsForwarded
        {
            get
            {
                bool result = false;
                if (HttpContext.Current.Session["IsForwarded"] != null) result = (bool)HttpContext.Current.Session["IsForwarded"];
                return result;

            }
            set
            {
                HttpContext.Current.Session["IsForwarded"] = value;
            }
        }

        private bool DocumentAnswerFromProject
        {
            get
            {
                bool result = false;
                if (HttpContext.Current.Session["DocumentAnswerFromProject"] != null) result = (bool)HttpContext.Current.Session["DocumentAnswerFromProject"];
                return result;

            }
            set
            {
                HttpContext.Current.Session["DocumentAnswerFromProject"] = value;
            }
        }

        private Oggetto[] ObjectstList
        {
            get
            {
                if (HttpContext.Current.Session["objectsList"] != null)
                    return HttpContext.Current.Session["objectsList"] as Oggetto[];
                else
                    return null;
            }
            set
            {
                HttpContext.Current.Session["objectsList"] = value;
            }
        }

        protected void Page_Load(object sender, EventArgs e)
        {
            this._logger.Info("START");

            DettaglioSegnatura _dettaglioSegnatura = null;

            string typeDoc = string.Empty;

            //Se ACL rimossa, allora visualizzo un messaggio di warning all'utente per poi reindirizzarlo alla HOME.
            if (!DocumentManager.IsNewDocument() && DocumentManager.CheckRevocationAcl())
            {
                ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "function RedirectHome(){$(location).attr('href','" + this.ResolveUrl("~/Index.aspx") + "');} if (parent.fra_main) {parent.fra_main.ajaxDialogModal('RevocationAcl', 'warning', '','',null,null,'RedirectHome()')} else {parent.parent.ajaxDialogModal('RevocationAcl', 'warning', '','',null,null,'RedirectHome()');}", true);
                return;
            }
            this._logger.DebugFormat("Is postback: '{0}'", IsPostBack.ToString());

            //Reset titolario 
            if (HttpContext.Current.Session["Titolario"] != null)
            {
                HttpContext.Current.Session["Titolario"] = null;
            }


            if (!IsPostBack)
            {
                // Volani: workaround per problema firma applet dopo firma massiva
                // Resetto parametro di sessione, rimane settato erroneamente dopo una firma massiva e non mostra i certificati
                HttpContext.Current.Session["CommandType"] = null;

                //Mev Task
                if (HttpContext.Current.Session["Task"] != null)
                {
                    this.Task = HttpContext.Current.Session["Task"] as Task;
                    HttpContext.Current.Session["Task"] = null;
                }
                else
                {
                    this.Task = null;
                }


                Page.Form.DefaultFocus = this.DocumentBntRecord.ClientID;

                this.TypeDocument = Page.Request["t"];
                this.InitializePage();
                this.ClearSessionProperties();

                string language = UIManager.UserManager.GetUserLanguage();

                if (!string.IsNullOrEmpty(this.TypeDocument))
                {
                    this._logger.Debug("Creao nuovo");
                    this.DocumentInWorking = UIManager.DocumentManager.NewSchedaDocumento();
                    this.IsForwarded = false;

                    HttpContext.Current.Session["Answer.DocumentWIP"] = null;

                    UIManager.DocumentManager.setSelectedRecord(this.DocumentInWorking);

                    typeDoc = this.TypeDocument.ToUpper();

                    switch (typeDoc)
                    {
                        case "A":
                            this.RblTypeProtocol.SelectedValue = "A";
                            this.RblTypeProtocol.Items[0].Attributes.Add("class", "orange");
                            this.container.Attributes.Add("class", "borderOrange");
                            this.containerDocumentTabDxBorder.Attributes.Add("class", "containerDocumentTabOrangeDxBorder");
                            this.containerDocumentTab.Attributes.Add("class", "containerDocumentTabOrange");
                            this.DocumentBtnPrepared.Visible = false;
                            this.DocumentBtnRemove.Visible = false;
                            this.DocumentBtnUndo.Enabled = false;
                            this.DocumentBtnConsolid.Enabled = false;
                            this.DocumentBtnSave.Enabled = false;
                            this.DocumentBtnRepeat.Enabled = false;
                            this.DocumentBtnAdL.Enabled = false;
                            this.DocumentBtnAdLRole.Enabled = false;
                            this.DocumentBtnSend.Visible = false;
                            this.DocumentBtnTransmit.Visible = false;
                            this.PnlRecipients.Visible = false;
                            this.PnlCheckUser.Visible = false;
                            this.DocumentBtnCreateDocument.Visible = false;
                            this.DocumentBtnPrint.Enabled = false;
                            if (this.EnableForward)
                            {
                                this.DocumentBtnForward.Visible = true;
                            }
                            else
                            {
                                this.DocumentBtnForward.Visible = false;
                            }
                            this.DocumentBtnForward.Enabled = false;
                            this.HeaderDocument.TypeDocument = "A";
                            this.HeaderDocument.TypeRecord = "A";
                            this.rbIn.Text = DocumentManager.GetDescriptionLabel("A");

                            this.rbOut.Text = DocumentManager.GetDescriptionLabel("P");  //Valore P

                            if (!InternalRecordEnable)
                            {
                                this.RblTypeProtocol.Items.RemoveAt(2);
                            }
                            else
                            {
                                this.rbOwn.Text = DocumentManager.GetDescriptionLabel("I");
                            }

                            if (this.MeansSendingRequired)
                            {
                                this.PnlMeansSender.Visible = true;
                            }

                            if (this.EnableMultipleSenders)
                            {
                                this.PnlMultipleSender.Visible = true;
                            }

                            this.PopulateDDLRegistry(this.Role);
                            this.InitializeAddressBooks();
                            // save in session
                            this.TypeProtocol = this.RblTypeProtocol.SelectedValue;

                            if (!UIManager.UserManager.IsAuthorizedFunctions("DO_PROT_OG_OGGETTARIO"))
                            {
                                this.DocumentImgObjectary.Visible = false;
                            }


                            break;

                        case "P":
                            this.senderpopup.Title = Utils.Languages.GetLabelFromCode("TitleSenderPopup", language);
                            this.DocumentBtnPrepared.Visible = false;
                            this.DocumentBtnRemove.Visible = false;
                            this.DocumentBtnUndo.Enabled = false;
                            this.DocumentBtnSave.Enabled = false;
                            this.DocumentBtnRepeat.Enabled = false;
                            this.DocumentBtnAdL.Enabled = false;
                            this.DocumentBtnAdLRole.Enabled = false;
                            this.DocumentBtnSend.Visible = false;
                            this.DocumentBtnTransmit.Visible = false;
                            this.PnlRecipients.Visible = false;
                            this.PnlCheckUser.Visible = false;
                            this.DocumentBtnCreateDocument.Visible = false;
                            this.RblTypeProtocol.SelectedValue = "P";
                            this.RblTypeProtocol.Items[1].Attributes.Add("class", "green");
                            this.container.Attributes.Add("class", "borderGreen");
                            this.containerDocumentTabDxBorder.Attributes.Add("class", "containerDocumentTabGreenDxBorder");
                            this.containerDocumentTab.Attributes.Add("class", "containerDocumentTabGreen");
                            this.PnlMultipleSender.Visible = false;
                            this.PnlMeansSender.Visible = false;
                            this.PnlRecipients.Visible = true;
                            this.DocumentBtnSend.Visible = true;
                            this.DocumentBtnSend.Enabled = false;
                            this.DocumentBtnTransmit.Visible = false;
                            this.PnlArrivaleDate.Visible = false;
                            this.PnlSenderProtocol.Visible = false;
                            this.DocumentBtnPrint.Enabled = false;
                            this.DocumentImgPrintEnvelopesRecipients.Enabled = false;
                            this.HeaderDocument.TypeDocument = "P";
                            this.PnlCheckUser.Visible = false;
                            this.DocumentBtnConsolid.Enabled = false;
                            this.DocumentBtnForward.Visible = false;
                            this.HeaderDocument.TypeRecord = "P";
                            this.rbIn.Text = DocumentManager.GetDescriptionLabel("A");

                            this.rbOut.Text = DocumentManager.GetDescriptionLabel("P");  //Valore P

                            if (!InternalRecordEnable)
                            {
                                this.RblTypeProtocol.Items.RemoveAt(2);
                            }
                            else
                            {
                                this.rbOwn.Text = DocumentManager.GetDescriptionLabel("I");
                            }

                            if (this.EnableSenderDefault)
                            {
                                this.SetSenderDefault();
                            }
                            else
                            {
                                this.TxtCodeSender.Text = string.Empty;
                                this.TxtDescriptionSender.Text = string.Empty;
                            }

                            this.PopulateDDLRegistry(this.Role);
                            this.InitializeAddressBooks();

                            // save in session
                            this.TypeProtocol = this.RblTypeProtocol.SelectedValue;

                            if (!UIManager.UserManager.IsAuthorizedFunctions("DO_PROT_OG_OGGETTARIO"))
                            {
                                this.DocumentImgObjectary.Visible = false;
                            }
                            break;

                        case "I":
                            this.senderpopup.Title = Utils.Languages.GetLabelFromCode("TitleTrasmitPopup", language);
                            this.DocumentBtnPrepared.Visible = false;
                            this.DocumentBtnRemove.Visible = false;
                            this.DocumentBtnUndo.Enabled = false;
                            this.DocumentBtnSave.Enabled = false;
                            this.DocumentBtnRepeat.Enabled = false;
                            this.DocumentBtnAdL.Enabled = false;
                            this.DocumentBtnAdLRole.Enabled = false;
                            this.DocumentBtnSend.Visible = false;
                            this.DocumentBtnTransmit.Visible = false;
                            this.PnlRecipients.Visible = false;
                            this.PnlCheckUser.Visible = false;
                            this.DocumentBtnForward.Visible = false;
                            this.DocumentImgPrintEnvelopesRecipients.Enabled = false;
                            this.RblTypeProtocol.SelectedValue = "I";
                            this.RblTypeProtocol.Items[2].Attributes.Add("class", "blue");
                            this.container.Attributes.Add("class", "borderBlue");
                            this.containerDocumentTabDxBorder.Attributes.Add("class", "containerDocumentTabBlueDxBorder");
                            this.containerDocumentTab.Attributes.Add("class", "containerDocumentTabBlue");
                            this.PnlMultipleSender.Visible = false;
                            this.PnlMeansSender.Visible = false;
                            this.PnlRecipients.Visible = true;
                            this.DocumentBtnSend.Visible = false;
                            this.DocumentBtnTransmit.Visible = true;
                            this.DocumentBtnTransmit.Enabled = false;
                            this.PnlArrivaleDate.Visible = false;
                            this.PnlSenderProtocol.Visible = false;
                            this.HeaderDocument.TypeDocument = "I";
                            this.PnlCheckUser.Visible = false;
                            this.DocumentBtnPrint.Enabled = false;
                            this.DocumentBtnConsolid.Enabled = false;
                            this.DocumentBtnCreateDocument.Visible = false;
                            this.HeaderDocument.TypeRecord = "I";
                            this.rbIn.Text = DocumentManager.GetDescriptionLabel("A");

                            this.rbOut.Text = DocumentManager.GetDescriptionLabel("P");  //Valore P

                            if (!InternalRecordEnable)
                            {
                                this.RblTypeProtocol.Items.RemoveAt(2);
                            }
                            else
                            {
                                this.rbOwn.Text = DocumentManager.GetDescriptionLabel("I");
                            }
                            this.PopulateDDLRegistry(this.Role);
                            this.InitializeAddressBooks();

                            if (this.EnableSenderDefault)
                            {
                                this.SetSenderDefault();
                            }
                            else
                            {
                                this.TxtCodeSender.Text = string.Empty;
                                this.TxtDescriptionSender.Text = string.Empty;
                            }

                            // save in session
                            this.TypeProtocol = this.RblTypeProtocol.SelectedValue;

                            if (!UIManager.UserManager.IsAuthorizedFunctions("DO_PROT_OG_OGGETTARIO"))
                            {
                                this.DocumentImgObjectary.Visible = false;
                            }
                            break;

                        case NOTPROTOCOL:
                            this._logger.Debug("caricato un Non Protocollato");
                            this.RblTypeProtocol.Visible = false;

                            this.PnlRegistry.Visible = false;

                            this.container.Attributes.Add("class", "borderGrey");

                            this.containerDocumentTabDxBorder.Attributes.Add("class", "containerDocumentTabGreyDxBorder");
                            this.containerDocumentTab.Attributes.Add("class", "containerDocumentTabGrey");
                            this.PnlMultipleSender.Visible = false;
                            this.PnlSenders.Visible = false;
                            this.PnlMeansSender.Visible = false;
                            this.DocumentBtnPrepared.Enabled = false;
                            this.DocumentBtnPrint.Enabled = false;
                            this.DocumentBtnRemove.Enabled = false;
                            this.DocumentBtnUndo.Visible = false;
                            this.DocumentBntRecord.Visible = false;
                            this.DocumentBtnRepeat.Enabled = false;
                            this.DocumentBtnAdL.Enabled = false;
                            this.DocumentBtnAdLRole.Enabled = false;
                            this.DocumentBtnSend.Visible = false;
                            this.DocumentBtnTransmit.Visible = false;
                            this.PnlRecipients.Visible = false;
                            this.PnlArrivaleDate.Visible = false;
                            this.PnlSenderProtocol.Visible = false;
                            this.DocumentLblRegistry.Visible = false;
                            this.PnlCheckUser.Visible = true;
                            this.DocumentBtnSave.Visible = false;
                            this.DocumentBtnConsolid.Enabled = false;
                            this.DocumentBtnCreateDocument.Enabled = true;
                            if (this.EnableForward && UIManager.UserManager.IsAuthorizedFunctions("DO_PROT_PROTOCOLLA"))
                            {
                                this.DocumentBtnForward.Visible = true;
                            }
                            else
                            {
                                this.DocumentBtnForward.Visible = false;
                            }
                            this.DocumentBtnForward.Enabled = false;
                            this.HeaderDocument.TypeRecord = "G";
                            this.HeaderDocument.TypeDocument = NOTPROTOCOL;

                            if (!UIManager.UserManager.IsAuthorizedFunctions("DO_PRO_OGGETTARIO"))
                            {
                                this.DocumentImgObjectary.Visible = false;
                            }
                            break;

                        case ATTACHMENT:
                            //this.RblTypeProtocol.Visible = false;
                            //this.PnlRegistry.Visible = false;
                            //this.container.Attributes.Add("class", "borderGrey");
                            //this.containerDocumentTabDxBorder.Attributes.Add("class", "containerDocumentTabGreyDxBorder");
                            //this.containerDocumentTab.Attributes.Add("class", "containerDocumentTabGrey");
                            //this.PnlMultipleSender.Visible = false;
                            //this.PnlSenders.Visible = false;
                            //this.PnlMeansSender.Visible = false;
                            //this.DocumentBtnPrepared.Enabled = false;
                            //this.DocumentBtnPrint.Enabled = true;
                            //this.DocumentBtnRemove.Enabled = true;
                            //this.DocumentBtnUndo.Visible = false;
                            //this.DocumentBntRecord.Enabled = false;
                            //this.DocumentBtnRepeat.Enabled = false;
                            //this.DocumentBtnAdL.Visible = false;
                            //this.DocumentBtnSend.Visible = false;
                            //this.DocumentBtnTransmit.Visible = false;
                            //this.PnlRecipients.Visible = false;
                            //this.UpPnlResponseProtocol.Visible = false;
                            //this.UpPnlDocType.Visible = false;
                            //this.UpPnlKeywords.Visible = true;
                            //this.UpPnlMainDoc.Visible = true;
                            //this.PnlCheckUser.Visible = true;
                            //this.DocumentBtnSave.Visible = false;
                            //this.DocumentBtnCreateDocument.Visible = false;
                            //this.HeaderDocument.TypeDocument = ATTACHMENT;
                            break;
                    }

                    // Con l'introduzione dei lotti di fatture, non si può limitare alla sola fattura elettronica. Tolgo il controllo della descrizione tipologia
                    //if (DocumentInWorking.autore != null && DocumentInWorking.tipologiaAtto != null && DocumentInWorking.tipologiaAtto.descrizione.ToUpper().Equals("FATTURA ELETTRONICA"))
                    //if (DocumentInWorking.autore != null && DocumentInWorking.tipologiaAtto != null)
                    if (DocumentInWorking.autore != null && DocumentInWorking.tipologiaAtto != null && (DocumentInWorking.tipologiaAtto.descrizione.ToUpper().Equals("FATTURA ELETTRONICA") || DocumentInWorking.tipologiaAtto.descrizione.ToUpper().Equals("LOTTO DI FATTURE")))
                    {
                        DocsPaWR.DocsPaWebService ws = new DocsPaWebService();
                        DocsPaWR.Utente user = ws.getUtenteById(DocumentInWorking.autore);
                        if (user.userId.ToUpper().Contains("TIBCO"))
                        {
                            this.DocumentBtnPrepared.Enabled = false;
                            string accessRights = "";
                            string idGruppoTrasm = "";
                            string tipoDiritto = "";
                            ws.SelectSecurity(DocumentInWorking.systemId, DocumentInWorking.autore, "", out accessRights, out idGruppoTrasm, out tipoDiritto);
                            if (!string.IsNullOrEmpty(accessRights) && accessRights != "63")
                                //((ImageButton)FindControl("btn_salva")).AlternateText = "Salva e acquisisci diritti";
                                this.DocumentBtnSave.ToolTip = "Acquisisci diritti";
                            else
                            {
                                this.DocumentBtnSave.ToolTip = null;
                                this.DocumentChekUser.Checked = false;
                                this.DocumentInWorking.personale = "0";
                                DocumentManager.setSelectedRecord(this.DocumentInWorking);

                            }
                        }
                    }

                }
                else
                {
                    this.DocumentInWorking = DocumentManager.getSelectedRecord();
                    //***************************************************************
                    //GIORDANO IACOZZILLI
                    //17/07/2013
                    //Gestione dell'icona della copia del docuemnto/fascicolo in deposito.
                    //***************************************************************
                    if (this.DocumentInWorking != null && this.DocumentInWorking.inArchivio == "1")
                    {
                        HeaderDocument.FlagCopyInArchive = "1";
                    }
                    //***************************************************************
                    //FINE
                    //***************************************************************

                    // ***** Alessandro Aiello 25/10/2018
                    // Segnatura Permanente
                    // ***** Inizio
                    if (this.DocumentInWorking != null)
                    {
                        this._logger.Debug("@@SEGNATURA");

                        #region SEGNATURA PERMANENTE

                        _dettaglioSegnatura = this.DocumentInWorking.DettaglioSegnatura;



                        if (_dettaglioSegnatura == null)
                        {
                            _dettaglioSegnatura = UIManager.DocumentManager.GetDettaglioSegnaturaDocumento(this.DocumentInWorking.systemId);
                            if(_dettaglioSegnatura == null)
                            {
                                this._logger.Debug("Calcolo segnatura");
                                // nel caso di documenti creati prima della modifica alla creazione dei documenti, nella quale viene generato e salvato nel
                                // Database il dettaglio della segnatura automaticamente, viene calcolata.
                                _dettaglioSegnatura = UIManager.DocumentManager.CalcolaDettaglioSegnatura(this.DocumentInWorking);
                            }
                            this.DocumentInWorking.DettaglioSegnatura = _dettaglioSegnatura;
                        }

                        // la gestione della visibilità dei controlli e in fondo al Page_Load


                        #endregion


                    }

                    // ***** Fine


                    if (this.DocumentInWorking != null && ((!string.IsNullOrEmpty(this.DocumentInWorking.systemId) && !string.IsNullOrEmpty(this.DocumentInWorking.accessRights) && Convert.ToInt32(this.DocumentInWorking.accessRights) >= Convert.ToInt32(HMdiritti.HMdiritti_Write)) || this.IsForwarded))
                    {
                        this.EnableEdit = true;
                    }

                    //In lavorazione  //la prima volta che entro nella pagina prendo da backend la scheda documento
                    if (this.DocumentInWorking != null && !string.IsNullOrEmpty(this.DocumentInWorking.systemId))
                    {
                        //la prima volta che entro nella pagina aggiorno con una chiamata al backend doc principale e allegati
                        this.DocumentInWorking.checkOutStatus = DocumentManager.GetCheckOutDocumentStatus(this.DocumentInWorking.systemId);
                        this.DocumentInWorking.documenti = DocumentManager.GetVersionsMainDocument(UserManager.GetInfoUser(), this.DocumentInWorking.systemId);
                        this.DocumentInWorking.allegati = DocumentManager.getAttachments(DocumentInWorking, "all");
                        DocumentManager.setSelectedRecord(this.DocumentInWorking);
                    }
                    //Se ACL rimossa, allora visualizzo un messaggio di warning all'utente per poi reindirizzarlo alla HOME.
                    if (!DocumentManager.IsNewDocument() && DocumentManager.CheckRevocationAcl())
                    {
                        ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "function RedirectHome(){$(location).attr('href','" + this.ResolveUrl("~/Index.aspx") + "');} if (parent.fra_main) {parent.fra_main.ajaxDialogModal('RevocationAcl', 'warning', '','',null,null,'RedirectHome()')} else {parent.parent.ajaxDialogModal('RevocationAcl', 'warning', '','',null,null,'RedirectHome()');}", true);
                        return;
                    }

                    if (!this.IsForwarded && this.DocumentInWorking != null && !string.IsNullOrEmpty(this.DocumentInWorking.systemId))
                    {
                        this.DocumentCheckPrivate.Enabled = false;

                        this.DisabledDocumentChekUser.Attributes.Remove("class");
                        this.DisabledDocumentCheckPrivate.Attributes.Remove("class");
                        this.DisabledDocumentChekUser.Attributes.Add("class", "check_disabled");
                        this.DisabledDocumentCheckPrivate.Attributes.Add("class", "check_disabled");
                    }
                    if (this.IsForwarded && (!DocumentManager.IsNewDocument() || this.DocumentInWorking.tipoProto.ToUpper() != "P")) this.IsForwarded = false;

                    this.DisplayMailIcons();
                    if (this.DocumentInWorking.documenti != null)
                    {
                        FileManager.setSelectedFile(this.DocumentInWorking.documenti[0]);
                    }
                    if (this.DocumentInWorking != null && !string.IsNullOrEmpty(this.DocumentInWorking.tipoProto))
                    {
                        //if (this.DocumentInWorking.spedizioneDocumento == null)
                        //{
                        //    this.DocumentInWorking.spedizioneDocumento = SenderManager.GetSpedizioneDocumento(this.DocumentInWorking);

                        //}


                        typeDoc = (this.DocumentInWorking.documentoPrincipale != null &&
                            !string.IsNullOrEmpty(this.DocumentInWorking.documentoPrincipale.docNumber)) ? ATTACHMENT : this.DocumentInWorking.tipoProto.ToUpper();
                        {

                        }
                        if (this.RapidClassificationRequiredByTypeDoc)
                        {
                            if (this.DocumentInWorking != null && !string.IsNullOrEmpty(this.DocumentInWorking.tipoProto))
                                this.LblClassRequired.Visible = DocumentManager.IsClassificationRqueredByTypeDoc(this.DocumentInWorking.tipoProto);
                        }
                        bool docAlreadySent_opt = false;
                        if (typeDoc == "P")
                        {
                            //15/02/2016: usato un nuovo metodo che va a controllare nella LOG se è presente l'evento di spedizione, questo per catturare anche le spedizioni ad interni
                            //docAlreadySent_opt = SenderManager.DocumentAlreadySent_Opt(this.DocumentInWorking.systemId);
                            docAlreadySent_opt = DocumentManager.CheckDocumentIsSent(this.DocumentInWorking.systemId);
                        }
                        else if (typeDoc == "I")
                        {
                            docAlreadySent_opt = TrasmManager.DocumentAlreadyTransmitted_Opt(this.DocumentInWorking.systemId);
                        }
                        switch (typeDoc)
                        {
                            case "A":
                                this.RblTypeProtocol.SelectedValue = "A";
                                this.RblTypeProtocol.Items[0].Attributes.Add("class", "orange");
                                this.container.Attributes.Add("class", "borderOrange");
                                this.containerDocumentTabDxBorder.Attributes.Add("class", "containerDocumentTabOrangeDxBorder");
                                this.containerDocumentTab.Attributes.Add("class", "containerDocumentTabOrange");
                                this.DocumentBtnPrepared.Visible = false;
                                this.DocumentBtnRemove.Visible = false;
                                this.DocumentBtnUndo.Enabled = false;
                                this.DocumentBtnConsolid.Enabled = false;
                                this.DocumentBtnSave.Enabled = false;
                                this.DocumentBtnRepeat.Enabled = false;
                                this.DocumentBtnAdL.Enabled = false;
                                this.DocumentBtnAdLRole.Enabled = false;
                                this.DocumentBtnSend.Visible = false;
                                this.DocumentBtnTransmit.Visible = false;
                                this.PnlRecipients.Visible = false;
                                this.PnlCheckUser.Visible = false;
                                this.DocumentBtnCreateDocument.Visible = false;
                                if (this.EnableForward)
                                {
                                    this.DocumentBtnForward.Visible = true;
                                }
                                else
                                {
                                    this.DocumentBtnForward.Visible = false;
                                }
                                if (this.DocumentInWorking != null && !string.IsNullOrEmpty(this.DocumentInWorking.systemId))
                                {
                                    this.DocumentBtnForward.Enabled = true;
                                }
                                else
                                {
                                    this.DocumentBtnForward.Enabled = false;
                                }
                                this.HeaderDocument.TypeDocument = "A";
                                this.HeaderDocument.TypeRecord = "A";
                                this.rbIn.Text = DocumentManager.GetDescriptionLabel("A");

                                this.rbOut.Text = DocumentManager.GetDescriptionLabel("P");  //Valore P

                                if (!InternalRecordEnable)
                                {
                                    this.RblTypeProtocol.Items.RemoveAt(2);
                                }
                                else
                                {
                                    this.rbOwn.Text = DocumentManager.GetDescriptionLabel("I");
                                }

                                if (this.MeansSendingRequired)
                                {
                                    this.PnlMeansSender.Visible = true;
                                }

                                if (this.EnableMultipleSenders)
                                {
                                    this.PnlMultipleSender.Visible = true;
                                }

                                //Controllo se si tratta di un predisposto, in tal caso applico il controllo per k1 e k2
                                if (DocumentInWorking != null && !string.IsNullOrEmpty(DocumentInWorking.interop) && DocumentInWorking.protocollo != null && string.IsNullOrEmpty(DocumentInWorking.protocollo.segnatura))
                                {
                                    if (this.Sender != null || (DocumentInWorking.protocollo as ProtocolloEntrata) != null)
                                    {
                                        string check = verifyK1K2();
                                        if (!string.IsNullOrEmpty(check))
                                        {
                                            switch (check)
                                            {
                                                case "0":
                                                    this.DocumentImgSenderWarning.Visible = true;
                                                    this.DocumentImgSenderWarning.AlternateText = Utils.Languages.GetLabelFromCode("DocumentImgSenderWarningToolTipSenderE", UIManager.UserManager.GetUserLanguage());
                                                    this.DocumentImgSenderWarning.ToolTip = Utils.Languages.GetLabelFromCode("DocumentImgSenderWarningToolTipSenderE", UIManager.UserManager.GetUserLanguage());
                                                    break;
                                                case "1":
                                                    this.DocumentImgSenderInt.Visible = true;
                                                    this.DocumentImgAddNewCorrispondent.Visible = true;
                                                    NotOpenK1K2 = true;
                                                    break;
                                                case "-1":
                                                    this.DocumentImgSenderInt.Visible = true;
                                                    NotOpenK1K2 = true;
                                                    break;
                                                default:
                                                    this.DocumentImgSenderWarning.Visible = true;
                                                    this.DocumentImgSenderWarning.AlternateText = Utils.Languages.GetLabelFromCode("DocumentImgSenderWarningToolTipMoreSender", UIManager.UserManager.GetUserLanguage());
                                                    this.DocumentImgSenderWarning.ToolTip = Utils.Languages.GetLabelFromCode("DocumentImgSenderWarningToolTipMoreSender", UIManager.UserManager.GetUserLanguage());
                                                    break;
                                            }
                                        }
                                    }
                                }

                                if (!UIManager.UserManager.IsAuthorizedFunctions("DO_PROT_OG_OGGETTARIO"))
                                {
                                    this.DocumentImgObjectary.Visible = false;
                                }
                                break;

                            case "P":
                                this.senderpopup.Title = Utils.Languages.GetLabelFromCode("TitleSenderPopup", language);
                                this.RblTypeProtocol.SelectedValue = "P";
                                this.RblTypeProtocol.Items[1].Attributes.Add("class", "green");
                                this.container.Attributes.Add("class", "borderGreen");
                                this.containerDocumentTabDxBorder.Attributes.Add("class", "containerDocumentTabGreenDxBorder");
                                this.containerDocumentTab.Attributes.Add("class", "containerDocumentTabGreen");
                                this.PnlMultipleSender.Visible = false;
                                this.PnlMeansSender.Visible = false;
                                this.PnlRecipients.Visible = true;
                                this.DocumentBtnSend.Visible = true;
                                this.DocumentBtnSend.Enabled = false;
                                this.DocumentBtnTransmit.Visible = false;
                                this.PnlArrivaleDate.Visible = false;
                                this.PnlSenderProtocol.Visible = false;
                                this.HeaderDocument.TypeDocument = "P";
                                this.PnlCheckUser.Visible = false;
                                this.DocumentBtnCreateDocument.Visible = false;
                                this.DocumentBtnForward.Visible = false;
                                this.DocumentBtnConsolid.Enabled = false;
                                if (this.IsForwarded)
                                {
                                    this.DocumentBtnSave.Enabled = true;
                                    this.DocumentBntRecord.Enabled = true;
                                }
                                this.HeaderDocument.TypeRecord = "P";
                                this.rbIn.Text = DocumentManager.GetDescriptionLabel("A");
                                this.rbOut.Text = DocumentManager.GetDescriptionLabel("P");  //Valore P

                                if (this.DocumentInWorking.spedizioneDocumento != null)
                                {
                                    this.setSendOrResendButtonText(language, this.DocumentInWorking.spedizioneDocumento.Spedito);
                                    //this.setSendOrResendButtonText(language, docAlreadySent_opt);
                                }
                                else
                                {
                                    this.setSendOrResendButtonText(language, docAlreadySent_opt);
                                }

                                if (!InternalRecordEnable)
                                {
                                    this.RblTypeProtocol.Items.RemoveAt(2);
                                }
                                else
                                {
                                    this.rbOwn.Text = DocumentManager.GetDescriptionLabel("I");
                                }

                                if (!UIManager.UserManager.IsAuthorizedFunctions("DO_PROT_OG_OGGETTARIO"))
                                {
                                    this.DocumentImgObjectary.Visible = false;
                                }
                                if (DocumentInWorking.protocollo != null)
                                {
                                    if ((DocumentInWorking.protocollo as ProtocolloUscita).destinatari != null)
                                        this.EditListRecipients = (DocumentInWorking.protocollo as ProtocolloUscita).destinatari.ToList();
                                    if ((DocumentInWorking.protocollo as ProtocolloUscita).destinatariConoscenza != null)
                                        this.EditListRecipientsCC = (DocumentInWorking.protocollo as ProtocolloUscita).destinatariConoscenza.ToList();
                                }
                                break;

                            case "I":
                                this.senderpopup.Title = Utils.Languages.GetLabelFromCode("TitleTrasmitPopup", language);
                                this.RblTypeProtocol.SelectedValue = "I";
                                this.RblTypeProtocol.Items[2].Attributes.Add("class", "blue");
                                this.container.Attributes.Add("class", "borderBlue");
                                this.containerDocumentTabDxBorder.Attributes.Add("class", "containerDocumentTabBlueDxBorder");
                                this.containerDocumentTab.Attributes.Add("class", "containerDocumentTabBlue");
                                this.PnlMultipleSender.Visible = false;
                                this.PnlMeansSender.Visible = false;
                                this.PnlRecipients.Visible = true;
                                this.DocumentBtnSend.Visible = false;
                                //this.DocumentImgReceivedSending.Visible = false;
                                this.DocumentImgReportSpedizioni.Visible = false;
                                this.DocumentImgReceivedSendingCC.Visible = false;
                                this.DocumentBtnTransmit.Visible = true;
                                this.DocumentBtnTransmit.Enabled = false;
                                this.PnlArrivaleDate.Visible = false;
                                this.PnlSenderProtocol.Visible = false;
                                this.HeaderDocument.TypeDocument = "I";
                                this.PnlCheckUser.Visible = false;
                                this.DocumentBtnCreateDocument.Visible = false;
                                this.DocumentBtnForward.Visible = false;
                                this.DocumentBtnConsolid.Enabled = false;
                                this.HeaderDocument.TypeRecord = "I";
                                this.rbIn.Text = DocumentManager.GetDescriptionLabel("A");

                                this.rbOut.Text = DocumentManager.GetDescriptionLabel("P");  //Valore P

                                if (this.DocumentInWorking.spedizioneDocumento != null)
                                {
                                    this.setSendOrResendButtonText(language, this.DocumentInWorking.spedizioneDocumento.Spedito);

                                }
                                else
                                {
                                    this.setSendOrResendButtonText(language, docAlreadySent_opt);
                                }

                                if (!InternalRecordEnable)
                                {
                                    this.RblTypeProtocol.Items.RemoveAt(2);
                                }
                                else
                                {
                                    this.rbOwn.Text = DocumentManager.GetDescriptionLabel("I");
                                }
                                if (!UIManager.UserManager.IsAuthorizedFunctions("DO_PROT_OG_OGGETTARIO"))
                                {
                                    this.DocumentImgObjectary.Visible = false;
                                }
                                if ((DocumentInWorking.protocollo as ProtocolloInterno).destinatari != null)
                                    this.EditListRecipients = (DocumentInWorking.protocollo as ProtocolloInterno).destinatari.ToList();
                                if ((DocumentInWorking.protocollo as ProtocolloInterno).destinatariConoscenza != null)
                                    this.EditListRecipientsCC = (DocumentInWorking.protocollo as ProtocolloInterno).destinatariConoscenza.ToList();
                                break;

                            case "G":
                            case "R":
                            case "C":
                                this.RblTypeProtocol.Visible = false;

                                this.PnlRegistry.Visible = false;

                                this.container.Attributes.Add("class", "borderGrey");

                                this.containerDocumentTabDxBorder.Attributes.Add("class", "containerDocumentTabGreyDxBorder");
                                this.containerDocumentTab.Attributes.Add("class", "containerDocumentTabGrey");
                                this.PnlMultipleSender.Visible = false;
                                this.PnlSenders.Visible = false;
                                this.PnlMeansSender.Visible = false;
                                this.DocumentBtnPrepared.Enabled = false;
                                this.DocumentBtnPrint.Enabled = false;
                                this.DocumentBtnRemove.Enabled = false;
                                this.DocumentBtnUndo.Visible = false;
                                this.DocumentBntRecord.Visible = false;
                                this.DocumentBtnRepeat.Enabled = false;
                                this.DocumentBtnAdL.Enabled = false;
                                this.DocumentBtnAdLRole.Enabled = false;
                                this.DocumentBtnSend.Visible = false;
                                this.DocumentBtnTransmit.Visible = false;
                                this.PnlRecipients.Visible = false;
                                this.PnlArrivaleDate.Visible = false;
                                this.PnlSenderProtocol.Visible = false;
                                this.DocumentLblRegistry.Visible = false;
                                this.PnlCheckUser.Visible = true;
                                this.DocumentChekUser.Enabled = false;
                                this.DocumentBtnConsolid.Enabled = false;
                                this.DocumentBtnForward.Enabled = false;
                                if (this.DocumentInWorking != null && !string.IsNullOrEmpty(this.DocumentInWorking.systemId))
                                {
                                    this.DocumentBtnSave.Visible = true;
                                    this.DocumentBtnCreateDocument.Visible = false;
                                }
                                else
                                {
                                    this.DocumentBtnSave.Visible = false;
                                    this.DocumentBtnCreateDocument.Visible = true;
                                }
                                if (this.EnableForward)
                                {
                                    this.DocumentBtnForward.Visible = true;
                                }
                                else
                                {
                                    this.DocumentBtnForward.Visible = false;
                                }
                                this.HeaderDocument.TypeDocument = NOTPROTOCOL;
                                this.HeaderDocument.TypeRecord = "G";
                                this.DocumentImgAnswerWithProtocol.AlternateText = Utils.Languages.GetLabelFromCode("DocumentImgAnswerWithDocument", language);
                                this.DocumentImgAnswerWithProtocol.ToolTip = Utils.Languages.GetLabelFromCode("DocumentImgAnswerWithDocument", language);
                                this.DocumentImgAnswerWithDocument.AlternateText = Utils.Languages.GetLabelFromCode("DocumentImgAnswerWithProtocol", language);
                                this.DocumentImgAnswerWithDocument.ToolTip = Utils.Languages.GetLabelFromCode("DocumentImgAnswerWithProtocol", language);
                                if (!UIManager.UserManager.IsAuthorizedFunctions("DO_PRO_OGGETTARIO"))
                                {
                                    this.DocumentImgObjectary.Visible = false;
                                }
                                // Gabriele Melini 4-3-2016
                                // Disabilito il tasto Salva per le stampe
                                // Non esiste al momento gestione DCTM degli oggetti stampa registro
                                if (typeDoc.Equals("R") || typeDoc.Equals("C"))
                                    this.DocumentBtnSave.Enabled = false;
                                break;

                            case ATTACHMENT:
                                this.container.Attributes.Add("class", "borderGrey");
                                this.containerDocumentTabDxBorder.Attributes.Add("class", "containerDocumentTabGreyDxBorder");
                                this.containerDocumentTab.Attributes.Add("class", "containerDocumentTabGrey");

                                //Visible Panel
                                UpPnlKeywords.Visible = true;
                                UpPnlMainDoc.Visible = true;
                                PnlCheckUser.Visible = true;

                                //Hidden Panel
                                PnlSenderProtocol.Visible = false;
                                UpPnlArrivaleDate.Visible = false;
                                pnlPjct.Visible = false;
                                RblTypeProtocol.Visible = false;
                                PnlRegistry.Visible = false;
                                PnlRecipients.Visible = false;
                                UpPnlResponseProtocol.Visible = false;
                                UpPnlDocType.Visible = false;
                                PnlSenders.Visible = false;
                                PnlMeansSender.Visible = false;
                                PnlMultipleSender.Visible = false;
                                UpDocumentPrivate.Visible = false;
                                DocumentLblRegistry.Visible = false;
                                this.UpPnlResponse.Visible = false;

                                //visible buttons
                                this.DocumentBtnPrint.Enabled = true;
                                DocumentBtnForward.Enabled = true;

                                //hidden buttons
                                this.DocumentBntRecord.Visible = false;
                                this.DocumentBtnRepeat.Visible = false;
                                this.DocumentBtnAdL.Visible = false;
                                this.DocumentBtnAdLRole.Visible = false;
                                this.DocumentBtnConsolid.Visible = false;
                                this.DocumentBtnUndo.Visible = false;
                                this.DocumentBtnPrepared.Visible = false;
                                this.DocumentBtnRemove.Visible = false;
                                this.DocumentBtnSend.Visible = false;
                                this.DocumentBtnTransmit.Visible = false;
                                this.DocumentBtnCreateDocument.Visible = false;

                                this.HeaderDocument.TypeDocument = ATTACHMENT;
                                populateAttachment();

                                // se il grigio si riferisce ad un allegato non utente disabilito oggetto, note, parole chiavi
                                if (Convert.ToInt32(this.Page.Request["typeAttachment"]) != 1)
                                {
                                    TxtCodeObject.Enabled = false;
                                    TxtObject.Enabled = false;
                                    DocumentImgDesriptionObject.Enabled = false;
                                    DocumentImgObjectary.Enabled = false;
                                    DocumentImgObjectHistory.Enabled = false;
                                    TxtNote.Enabled = false;
                                    DocumentBtnForward.Visible = false;
                                    DocumentImgNotedetails.Enabled = false;
                                    DocumentImgSelectKeyword.Enabled = false;
                                    DocumentImgDeleteKeyword.Enabled = false;
                                }
                                //se il grigio si riferisce ad un allegato utente ed il doc principale è stato annullato, nasondo i
                                //pulsanti salva, inoltra e rendo readonly oggetto, note, parole chiavi con focus su oggetto
                                if (Convert.ToInt32(this.Page.Request["typeAttachment"]) == 1 &&
                                    this.DocumentInWorking.documentoPrincipale != null &&
                                    DocumentManager.IsDocumentAnnul(this.DocumentInWorking.documentoPrincipale.idProfile))
                                {
                                    TxtCodeObject.ReadOnly = true;
                                    TxtObject.ReadOnly = true;
                                    DocumentImgDesriptionObject.Enabled = false;
                                    DocumentImgObjectary.Enabled = false;
                                    DocumentImgObjectHistory.Enabled = false;
                                    TxtNote.ReadOnly = true;
                                    this.DocumentBtnForward.Visible = false;
                                    this.DocumentImgNotedetails.Enabled = false;
                                    this.DocumentImgSelectKeyword.Enabled = false;
                                    this.DocumentImgDeleteKeyword.Enabled = false;
                                    TxtObject.Focus();
                                }
                                break;
                        }
                        this.PopulateRecord();
                        this.PopulateDataDocument();
                        if (this.DocumentInWorking != null && !string.IsNullOrEmpty(this.DocumentInWorking.systemId) && (DocumentManager.IsDocumentCheckedOut() || CheckInOut.CheckInOutServices.IsCheckedOutDocument(DocumentManager.getSelectedRecord().docNumber, DocumentManager.getSelectedRecord().docNumber, UserManager.GetInfoUser(), true, DocumentManager.getSelectedRecord())))
                        {
                            if (this.DocumentInWorking.checkOutStatus != null)
                                this.DisableCheckInOut(false);
                            else
                                this.DisableCheckInOut(true);
                        }
                        this.ControlConsolidatioDocument();
                        this.ControlRemovedDocument();
                        this.ControlAbortDocument();
                        // Per gestione pendenti tramite PEC
                        // controllo che sia un predisposto ricevuto tramite mail, e che essa sia configurata per la ricezione di mail pendenti.
                        if (DocumentInWorking != null && !string.IsNullOrEmpty(DocumentInWorking.interop) && DocumentInWorking.protocollo != null && string.IsNullOrEmpty(DocumentInWorking.protocollo.segnatura) && typeDoc == "A" && (DocumentInWorking.typeId == "MAIL" || DocumentInWorking.typeId == "INTEROPERABILITA") && DocumentManager.IsDocPecPendente(DocumentInWorking.systemId))
                        {
                            this.DocumentCheckPrivate.Checked = false;
                            this.DocumentCheckPrivate.Enabled = true;
                            //this.DocumentBtnSave.Enabled = false;
                            this.DisabledDocumentCheckPrivate.Attributes.Remove("class");
                        }
                        //Per gestione pendenti IS
                        if (DocumentInWorking != null && DocumentInWorking.protocollo != null && String.IsNullOrEmpty(DocumentInWorking.protocollo.segnatura) && typeDoc == "A"
                            && DocumentInWorking.typeId.Equals("SIMPLIFIEDINTEROPERABILITY")
                            && SimplifiedInteroperabilityManager.EnablePrivateCheck(
                                DocumentInWorking.protocollo,
                                DocumentInWorking.typeId,
                                DocumentInWorking.registro.systemId))
                        {
                            this.DocumentCheckPrivate.Enabled = true;
                            this.DisabledDocumentCheckPrivate.Attributes.Remove("class");
                        }
                        if (this.CustomDocuments)
                        {
                            if (this.DocumentInWorking.template != null)
                            {
                                this.LoadTemplateDocument();
                            }
                        }
                        //Verifico lo stato AdL
                        int isInAdl = DocumentManager.isDocInADL(this.DocumentInWorking.systemId, this);
                        if (isInAdl == 0)
                        {
                            this.DocumentBtnAdL.Text = Utils.Languages.GetLabelFromCode("DocumentBtnAdL", language);
                        }
                        else
                        {
                            this.DocumentBtnAdL.Text = Utils.Languages.GetLabelFromCode("DocumentBtnAdLRemove", language);
                        }
                        // verifica ADL ruolo
                        if (DocumentManager.isDocInADLRole(this.DocumentInWorking.systemId, this) == 0)
                        {
                            this.DocumentBtnAdLRole.Text = Utils.Languages.GetLabelFromCode("DocumentBtnAdLRole", language);
                        }
                        else
                        {
                            this.DocumentBtnAdLRole.Text = Utils.Languages.GetLabelFromCode("DocumentBtnAdLRoleRemove", language);
                            this.DocumentBtnAdL.Enabled = false;
                        }
                        //if (DocumentInWorking.autore != null && DocumentInWorking.tipologiaAtto != null && DocumentInWorking.tipologiaAtto.descrizione.ToUpper().Equals("FATTURA ELETTRONICA"))
                        if (DocumentInWorking.autore != null && DocumentInWorking.tipologiaAtto != null && (DocumentInWorking.tipologiaAtto.descrizione.ToUpper().Equals("FATTURA ELETTRONICA") || DocumentInWorking.tipologiaAtto.descrizione.ToUpper().Equals("LOTTO DI FATTURE")))
                        {
                            DocsPaWR.DocsPaWebService ws = new DocsPaWebService();
                            DocsPaWR.Utente user = ws.getUtenteById(DocumentInWorking.autore);
                            if (user.userId.ToUpper().Contains("TIBCO"))
                            {
                                this.DocumentBtnPrepared.Enabled = false;
                                string accessRights = "";
                                string idGruppoTrasm = "";
                                string tipoDiritto = "";
                                ws.SelectSecurity(DocumentInWorking.systemId, DocumentInWorking.autore, "", out accessRights, out idGruppoTrasm, out tipoDiritto);
                                if (!string.IsNullOrEmpty(accessRights) && accessRights != "63")
                                    //((ImageButton)FindControl("btn_salva")).AlternateText = "Salva e acquisisci diritti";
                                    this.DocumentBtnSave.ToolTip = "Acquisisci diritti";
                                else
                                {
                                    this.DocumentBtnSave.ToolTip = null;
                                }
                            }
                        }

                    }
                    else
                    {
                        Response.Redirect("Document.aspx?t=a");
                    }

                    this.EnableEditMode();
                }

                if (!string.IsNullOrEmpty(this.DocumentDdlTypeDocument.SelectedValue))
                {
                    this.DocumentImgHistoryTipology.Visible = true;
                }
                this.LoadTransmissionMoldes();
                this.InitAnswers();
                this.VisibiltyRoleFunctions();
                this.TxtObject.Focus();

                if (this.DocumentAnswerFromProject)
                {
                    this.DocumentAnswerFromProject = false;
                    //Popolo il campo fascicolazione
                    string codice = string.Empty;
                    string descrizione = string.Empty;
                    bool isRootFolder = false;
                    Fascicolo project = UIManager.ProjectManager.getProjectInSession();
                    Folder folder = project.folderSelezionato;

                    if (folder == null || project.codice == folder.descrizione)
                    {
                        this.TxtCodeProject.Text = project.codice;
                        this.TxtDescriptionProject.Text = project.descrizione;
                    }
                    else
                    {
                        this.CalcolaFascicolazioneRapida(folder, ref codice, ref descrizione, ref isRootFolder, project.codice);
                        this.TxtCodeProject.Text = project.codice + "//" + codice.Substring(0, codice.Length - 2);
                    }
                    this.TxtCodeProject_OnTextChanged(null, null);
                    TxtObject.Focus();
                }


                // *******
                // Alessandro Aiello
                // INIZIO Gestione controlli

                if (_dettaglioSegnatura != null)
                {
                    if (_dettaglioSegnatura.DettaglioSegnaturaRepertorio != null)
                    {
                        this.DocumentBtnPrepared.Visible = false;
                    }

                    if ("1".Equals(_dettaglioSegnatura.Segnato))
                    {
                        this._attivaPulsanteApponiSegnaturaPermanente(false);

                        //ABBATANGELI - MiBACT - Visuaizzaione del tasto in caso applichiamo segnatura non protocollato
                        this.DocumentBtnPrepared.Enabled = (typeDoc.Equals("G") || typeDoc.Equals("R") || typeDoc.Equals("C") || typeDoc.Equals("NOTPROTOCOL")) ? true : false;

                        this.DocumentDdlTypeDocument.Enabled = false;  // Disattivo Tipizzazione
                    }
                    else if ("1".Equals(_dettaglioSegnatura.IsPermanenteProtocollo) || "1".Equals(_dettaglioSegnatura.IsPermanenteRepertorio))
                    {
                        this._logger.Debug("Protocollo o repertorio");
                        this._logger.Debug(">> Inposto pulsante permanente");
                        this._attivaPulsanteApponiSegnaturaPermanente("0".Equals(_dettaglioSegnatura.Segnato));
                        // this.SignaturePermanenteConfig.Title = Utils.Languages.GetLabelFromCode("TitleSignaturePermanentePopup", language);
                        this._logger.Debug("Segnato: " + _dettaglioSegnatura.Segnato);
                        if ("0".Equals(_dettaglioSegnatura.Segnato))
                        {
                            this.DocumentBtnPrepared.Visible = true;
                        }
                        else
                        {
                            this.DocumentBtnPrepared.Visible = false;
                        }
                    }

                    /*
                    if(this.DocumentInWorking.documentoPrincipale != null)
                    {
                        this._attivaPulsanteApponiSegnaturaPermanente(false, false);
                    }*/

                    this.verificaValoriAttivazionePermanente();

                }
                // ******** FINE
            }
            else
            {

                if (this.CustomDocuments)
                {
                    this.PnlTypeDocument.Controls.Clear();
                    if (!string.IsNullOrEmpty(this.DocumentDdlTypeDocument.SelectedValue))
                    {
                        if (this.Template == null || !this.Template.SYSTEM_ID.ToString().Equals(this.DocumentDdlTypeDocument.SelectedValue))
                        {
                            if (this.DocumentInWorking != null && !string.IsNullOrEmpty(this.DocumentInWorking.systemId) && this.DocumentInWorking.template != null)
                            {
                                this.Template = this.DocumentInWorking.template;
                            }
                            else
                            {
                                this.Template = ProfilerDocManager.getTemplateById(this.DocumentDdlTypeDocument.SelectedItem.Value);
                                if (this.ProceedingsEnabled)
                                {
                                    if (this.DocumentInWorking != null && UIManager.ProjectManager.getProjectInSession() != null && UIManager.ProjectManager.getProjectInSession().template != null && UIManager.ProjectManager.getProjectInSession().template.ELENCO_OGGETTI != null)
                                    {
                                        if (this.Template != null && this.Template.ELENCO_OGGETTI != null && this.Template.ELENCO_OGGETTI.Count() > 0)
                                        {
                                            foreach (DocsPaWR.OggettoCustom oggDocumento in this.Template.ELENCO_OGGETTI)
                                            {
                                                foreach (DocsPaWR.OggettoCustom oggFascicolo in UIManager.ProjectManager.getProjectInSession().template.ELENCO_OGGETTI)
                                                {
                                                    if (oggFascicolo.DESCRIZIONE.ToUpper() == oggDocumento.DESCRIZIONE.ToUpper())
                                                    {
                                                        oggDocumento.VALORE_DATABASE = oggFascicolo.VALORE_DATABASE;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if (this.CustomDocuments)
                        {
                            this.PopulateProfiledDocument();
                            if (!string.IsNullOrEmpty(DocumentInWorking.accessRights) && Convert.ToInt32(DocumentInWorking.accessRights) > Convert.ToInt32(HMdiritti.HMdiritti_Read))
                                this.LoadDiagramAndState("1");
                            else
                                this.LoadDiagramAndState();
                        }
                    }
                }
                //// test personale1
                //if (DocumentInWorking.autore != null)
                //{
                //    DocsPaWR.DocsPaWebService ws = new DocsPaWebService();
                //    DocsPaWR.Utente user = ws.getUtenteById(DocumentInWorking.autore);
                //    if (user.userId.ToUpper().Contains("TIBCO"))
                //    {
                //        this.DocumentBtnPrepared.Enabled = false;
                //        string accessRights = "";
                //        string idGruppoTrasm = "";
                //        string tipoDiritto = "";
                //        ws.SelectSecurity(DocumentInWorking.systemId, DocumentInWorking.autore, "", out accessRights, out idGruppoTrasm, out tipoDiritto);
                //        if (!string.IsNullOrEmpty(accessRights) && accessRights != "63")
                //            //((ImageButton)FindControl("btn_salva")).AlternateText = "Salva e acquisisci diritti";
                //            this.DocumentBtnSave.ToolTip = "Acquisisci diritti";
                //        else
                //        {
                //            this.DocumentBtnSave.ToolTip = null;
                //            this.DocumentChekUser.Checked = false;
                //            this.DocumentInWorking.personale = "0";
                //            DocumentManager.setSelectedRecord(this.DocumentInWorking);
                //        }
                //    }
                //}

                this.ReadRetValueFromPopup();
            }

            if (this.DdlRegistries.Items != null && this.DdlRegistries.Items.Count > 0)
            {
                Registro reg = UserManager.getRegistroBySistemId(this, this.DdlRegistries.SelectedValue);
                if (reg.stato.Equals("C"))
                    this.DocumentBntRecord.Enabled = false;
            }
            //laura 19 Marzo
            switch (TypeDocument)
            {
                case "a":
                case "u":
                case "i":
                    HttpContext.Current.Session["SearchProject.from"] = "protocollo";
                    //SearchProject.Url = "../popup/SearchProject.aspx?caller=protocollo";
                    break;
                case "n":
                    HttpContext.Current.Session["SearchProject.from"] = "profilo";
                    // SearchProject.Url = "../popup/SearchProject.aspx?caller=profilo";
                    break;
            }

            if (TypeDocument == "")
            {
                if (!String.IsNullOrEmpty(DocumentInWorking.systemId))
                    if (DocumentInWorking.protocollo != null && !String.IsNullOrEmpty(DocumentInWorking.protocollo.segnatura))
                    {
                        HttpContext.Current.Session["SearchProject.from"] = "protocollo";
                        //SearchProject.Url = "../popup/SearchProject.aspx?caller=protocollo";
                    }
                    else
                    {
                        HttpContext.Current.Session["SearchProject.from"] = "profilo";
                        //SearchProject.Url = "../popup/SearchProject.aspx?caller=profilo";
                    }
            }
            this.RefreshScript();
            //CustomImageButton buttonViewFile = (CustomImageButton)this.DocumentButtons.FindControl("DocumentImgViewFile");
            //buttonViewFile.Click += this.ViewDocument.LinkViewFileDocument;
            this.InitDragAndDropReport();
        }

        private void verificaValoriAttivazionePermanente()
        {
            if (this.DocumentInWorking.documenti[0] != null && this.DocumentBtnApponiSegnaturaPermanente.Visible)
            {
                if (System.IO.Path.GetExtension(this.DocumentInWorking.documenti[0].fileName).ToLower().Equals(".pdf"))
                {
                    this._attivaPulsanteApponiSegnaturaPermanente(this.DocumentInWorking.documenti[0].fileSize != "0");
                }
                else 
                {
                    if (this.DocumentBtnApponiSegnaturaPermanente.Visible)
                        this._attivaPulsanteApponiSegnaturaPermanente(false, true);
                }

                this.UpDocumentButtons.Update();
            }
        }

        private void _attivaPulsanteApponiSegnaturaPermanente(bool isEbabled = true, bool isVisible = true)
        {
            this._logger.Info("START");
            this.DocumentBtnApponiSegnaturaPermanente.Enabled = isEbabled;
            this.DocumentBtnApponiSegnaturaPermanente.Visible = isVisible;
            this._logger.Info("END");
        }


        private void getLabelFascPrim()
        {
            SchedaDocumento doc = DocumentManager.getSelectedRecord();
            if (doc != null && !string.IsNullOrEmpty(doc.systemId) && !string.IsNullOrEmpty(doc.fascicolato) && doc.fascicolato.Equals("1"))
            {
                string descFascPrimaria = DocumentManager.GetFascicolazionePrimaria(this, doc.docNumber);
                if (!string.IsNullOrEmpty(descFascPrimaria))
                {
                    lblPrimaryFascDescr.Text = descFascPrimaria.ToString();
                    pnl_fasc_Primaria.Visible = true;
                }
                else
                {
                    pnl_fasc_Primaria.Visible = false;
                }
            }

        }

        private void EnableEditMode()
        {
            if (this.DocumentInWorking != null && !string.IsNullOrEmpty(this.DocumentInWorking.systemId))
            {
                if (((!string.IsNullOrEmpty(this.DocumentInWorking.systemId) && !string.IsNullOrEmpty(this.DocumentInWorking.accessRights) && Convert.ToInt32(this.DocumentInWorking.accessRights) >= Convert.ToInt32(HMdiritti.HMdiritti_Write))) || this.IsForwarded)
                {
                    if (!UIManager.UserManager.IsAuthorizedFunctions("DO_PROT_MIT_MODIFICA"))
                    {
                        this.TxtCodeSender.ReadOnly = true;
                        this.TxtDescriptionSender.ReadOnly = true;
                        this.DocumentImgSenderAddressBook.Enabled = false;
                        this.DocumentImgMultipleSenderDelete.Enabled = false;
                        this.DocumentImgMultipleSenderAddressBook.Enabled = false;
                        this.DocumentImgDownSender.Enabled = false;
                        this.DocumentImgUpSender.Enabled = false;
                    }


                    if (!UIManager.UserManager.IsAuthorizedFunctions("DO_PROT_DEST_MODIFICA") && !UIManager.UserManager.IsAuthorizedFunctions("DO_PROT_DESTCC_MODIFICA"))
                    {
                        this.TxtRecipientCode.ReadOnly = true;
                        this.TxtRecipientDescription.ReadOnly = true;
                        this.DocumentImgRecipientAddressBook.Enabled = false;
                        this.DocumentImgAddRecipientToCC.Enabled = false;
                        this.DocumentImgAddRecipientFromCC.Enabled = false;
                        this.DocumentImgAddRecipient.Enabled = false;
                        this.DocumentImgDeleteRecipient.Enabled = false;
                        this.DocumentImgDeleteRecipientCC.Enabled = false;
                    }



                    this.EnableEdit = true;

                    //MODIFICA DISABILITATA
                    if (this.DocumentInWorking.tipoProto.Equals("G"))
                    {
                        if (!UIManager.UserManager.IsAuthorizedFunctions("DO_PRO_SALVA"))
                        {
                            this.DisableFunctionAbotDocument();
                            this.DocumentBtnSave.Visible = false;
                        }

                        if (UIManager.UserManager.IsAuthorizedFunctions("DO_DOC_RIPROPONI") && !UIManager.UserManager.IsAuthorizedFunctions("DO_NUOVODOC"))
                        {
                            this.DocumentBtnRepeat.Enabled = false;
                        }


                    }
                    else
                    {

                        if (!UIManager.UserManager.IsAuthorizedFunctions("DO_PROT_OG_MODIFICA"))
                        {
                            this.TxtObject.ReadOnly = true;
                            this.TxtCodeObject.ReadOnly = true;
                        }

                        if (!UIManager.UserManager.IsAuthorizedFunctions("DO_PROT_SALVA"))
                        {
                            this.DisableFunctionAbotDocument();
                            this.DocumentBtnSave.Visible = false;
                        }

                        if (this.DocumentInWorking.registro != null && this.DocumentInWorking.registro.stato == "C")
                        {
                            this.DisableFunctionAbotDocument();
                            this.DocumentBtnSave.Enabled = false;
                            this.DocumentBtnSend.Enabled = false;
                            this.EnableEdit = false;
                        }

                        if (this.DocumentInWorking.inCestino != null && this.DocumentInWorking.inCestino == "1")
                        {
                            this.DisableFunctionAbotDocument();
                            this.DocumentBtnSave.Enabled = false;
                            this.DocumentBtnSend.Enabled = false;
                            this.EnableEdit = false;
                        }

                        if (this.EnableForward && !UserManager.IsAuthorizedFunctions("DO_PROT_PROTOCOLLA"))
                        {
                            this.DocumentBtnForward.Enabled = false;
                        }

                        if (!((this.IsRoleInwardEnabled() && this.DocumentInWorking.tipoProto.Equals("A")) || (this.IsRoleOutwardEnabled() && this.DocumentInWorking.tipoProto.Equals("P")) || (this.IsRoleInternalEnabled() && this.DocumentInWorking.tipoProto.Equals("I"))))
                        {
                            this.DocumentBtnRepeat.Enabled = false;
                        }
                    }
                }
                else
                {
                    this.EnableEdit = false;

                    //Buttons

                    this.DocumentBtnSend.Enabled = false;
                    this.DocumentBtnTransmit.Enabled = false;
                    this.DocumentBtnPrepared.Enabled = false;

                    this.DocumentBtnRemove.Enabled = false;
                    this.DocumentBtnUndo.Enabled = false;
                    this.DocumentBtnConsolid.Enabled = false;
                    this.DocumentBtnCreateDocument.Enabled = false;
                    this.DocumentBntRecord.Enabled = false;
                    this.DocumentBtnRepeat.Enabled = false;

                    this.DocumentImgObjectary.Enabled = false;
                    this.DocumentImgSenderAddressBook.Enabled = false;
                    this.RapidSender.Enabled = false;
                    this.TxtCodeSender.ReadOnly = true;
                    this.TxtDescriptionSender.ReadOnly = true;
                    this.DocumentImgDownSender.Enabled = false;
                    this.DocumentImgUpSender.Enabled = false;
                    this.DocumentImgMultipleSenderAddressBook.Enabled = false;
                    this.DocumentImgMultipleSenderDelete.Enabled = false;
                    this.TxtObject.ReadOnly = true;
                    this.TxtCodeObject.ReadOnly = true;
                    this.DocumentCheckPrivate.Enabled = false;

                    this.TxtRecipientCode.ReadOnly = true;
                    this.TxtRecipientDescription.ReadOnly = true;
                    this.RapidRecipient.Enabled = false;
                    this.DocumentImgDeleteRecipient.Enabled = false;
                    this.DocumentImgAddRecipientToCC.Enabled = false;
                    this.DocumentImgAddRecipientFromCC.Enabled = false;
                    this.DocumentImgDeleteRecipientCC.Enabled = false;
                    this.DocumentImgAddRecipient.Enabled = false;
                    this.DocumentImgRecipientAddressBook.Enabled = false;

                    this.DdlMeansSending.Enabled = false;

                    this.TxtProtocolSender.ReadOnly = true;
                    this.TxtDateProtocol.ReadOnly = true;

                    this.DocumentImgViewDocumentExists.Enabled = false;
                    this.TxtArrivalDate.ReadOnly = true;
                    this.TxtTimeOfArrival.ReadOnly = true;

                    // INC000000577548
                    // Il collegamento è consentito anche per documenti su cui si possiedono
                    // solo diritti di lettura
                    //this.DocumentImgAnswerSearch.Enabled = false;
                    //this.DocumentImgAnswerWithProtocol.Enabled = false;
                    //this.DocumentImgAnswerWithDocument.Enabled = false;
                    //this.DocumentImgDelAnswer.Enabled = false;

                    this.btnclassificationschema.Enabled = false;
                    this.DocumentImgSearchProjects.Enabled = false;

                    this.DocumentDdlTypeDocument.Enabled = false;
                    this.DocumentDdlStateDiagram.Enabled = false;
                    this.DocumentStateDiagramDataValue.ReadOnly = true;

                    if (this.PnlKeywpords.Visible)
                    {
                        this.DocumentImgSelectKeyword.Enabled = false;
                        this.DocumentImgDeleteKeyword.Enabled = false;
                    }

                    //Only read rights
                    if (this.DocumentInWorking != null && !string.IsNullOrEmpty(this.DocumentInWorking.systemId) && Convert.ToInt32(this.DocumentInWorking.accessRights) == Convert.ToInt32(HMdiritti.HMdiritti_Read))
                    {
                        this.EnableEdit = true;
                    }
                    else
                    {
                        this.DocumentBtnSave.Enabled = false;
                        this.DocumentBtnPrint.Enabled = false;
                        this.RblTypeNote.Enabled = false;
                        this.ddlNoteRF.Enabled = false;
                        this.txtNoteAutoComplete.Enabled = false;
                        this.TxtNote.ReadOnly = true;
                        this.TxtCodeProject.ReadOnly = true;
                        this.TxtDescriptionProject.ReadOnly = true;
                        this.RapidSenderDescriptionProject.Enabled = false;
                        this.DocumentDdlTransmissionsModel.Enabled = false;
                        //this.DocumentBtnAdL.Enabled = false;
                        //this.DocumentBtnAdLRole.Enabled = false;

                    }

                    //se il documento ha una tipologia con diagramma associato
                    DocsPaWR.Stato stato = DiagrammiManager.GetStateDocument(this.DocumentInWorking.docNumber);
                    if (stato != null && stato.STATO_FINALE)
                    {
                        this.DocumentBtnAdL.Enabled = true;
                        this.DocumentBtnAdLRole.Enabled = true;
                        this.DocumentBtnPrint.Enabled = true;
                        this.DocumentBtnConsolid.Enabled = true;
                        this.DocumentBtnForward.Enabled = true;
                    }
                    else
                    {
                        this.DocumentBtnForward.Enabled = false;
                    }
                }
            }
        }

        private void DisableCheckInOut(bool enable)
        {
            this.EnableEdit = enable;
            this.DocumentBtnSave.Enabled = enable;
            this.DocumentBtnConsolid.Enabled = enable;
            this.DocumentBntRecord.Enabled = enable;
            this.DocumentBtnPrepared.Enabled = enable;
            this.DocumentBtnConsolid.Enabled = enable;
            this.DocumentBtnCreateDocument.Enabled = enable;

            if (enable)
            {
                if ((!string.IsNullOrEmpty(this.DocumentInWorking.accessRights) && Convert.ToInt32(this.DocumentInWorking.accessRights) >= Convert.ToInt32(HMdiritti.HMdiritti_Write)) || this.IsForwarded)
                {
                    if (!UIManager.UserManager.IsAuthorizedFunctions("DO_PROT_MIT_MODIFICA"))
                    {
                        this.TxtCodeSender.ReadOnly = true;
                        this.TxtDescriptionSender.ReadOnly = true;
                        this.DocumentImgSenderAddressBook.Enabled = false;
                        this.DocumentImgMultipleSenderDelete.Enabled = false;
                        this.DocumentImgMultipleSenderAddressBook.Enabled = false;
                        this.DocumentImgDownSender.Enabled = false;
                        this.DocumentImgUpSender.Enabled = false;
                    }
                    else
                    {
                        this.TxtCodeSender.ReadOnly = false;
                        this.TxtDescriptionSender.ReadOnly = false;
                        this.DocumentImgSenderAddressBook.Enabled = true;
                        this.DocumentImgMultipleSenderDelete.Enabled = true;
                        this.DocumentImgMultipleSenderAddressBook.Enabled = true;
                        this.DocumentImgDownSender.Enabled = true;
                        this.DocumentImgUpSender.Enabled = true;
                    }

                    if (!UIManager.UserManager.IsAuthorizedFunctions("DO_PROT_DEST_MODIFICA") && !UIManager.UserManager.IsAuthorizedFunctions("DO_PROT_DESTCC_MODIFICA"))
                    {
                        this.TxtRecipientCode.ReadOnly = true;
                        this.TxtRecipientDescription.ReadOnly = true;
                        this.DocumentImgRecipientAddressBook.Enabled = false;
                        this.DocumentImgAddRecipientToCC.Enabled = false;
                        this.DocumentImgAddRecipientFromCC.Enabled = false;
                        this.DocumentImgAddRecipient.Enabled = false;
                        this.DocumentImgDeleteRecipient.Enabled = false;
                        this.DocumentImgDeleteRecipientCC.Enabled = false;
                    }
                    else
                    {
                        this.TxtRecipientCode.ReadOnly = false;
                        this.TxtRecipientDescription.ReadOnly = false;
                        this.DocumentImgRecipientAddressBook.Enabled = true;
                        this.DocumentImgAddRecipientToCC.Enabled = true;
                        this.DocumentImgAddRecipientFromCC.Enabled = true;
                        this.DocumentImgAddRecipient.Enabled = true;
                        this.DocumentImgDeleteRecipient.Enabled = true;
                        this.DocumentImgDeleteRecipientCC.Enabled = true;
                    }

                    if (!UIManager.UserManager.IsAuthorizedFunctions("DO_PROT_OG_MODIFICA"))
                    {
                        this.TxtObject.ReadOnly = false;
                        this.TxtCodeObject.ReadOnly = false;
                    }

                    this.EnableEdit = true;

                    //MODIFICA DISABILITATA
                    if (this.DocumentInWorking.tipoProto.Equals("G"))
                    {
                        if (!UIManager.UserManager.IsAuthorizedFunctions("DO_PRO_SALVA"))
                        {
                            this.DisableFunctionAbotDocument();
                            this.DocumentBtnSave.Visible = false;
                        }
                        else
                        {
                            this.DocumentBtnSave.Visible = true;
                        }

                        if (UIManager.UserManager.IsAuthorizedFunctions("DO_DOC_RIPROPONI") && !UIManager.UserManager.IsAuthorizedFunctions("DO_NUOVODOC"))
                        {
                            this.DocumentBtnRepeat.Enabled = false;
                        }
                        else
                        {
                            this.DocumentBtnRepeat.Enabled = true;
                        }
                    }
                    else
                    {

                        if (!UIManager.UserManager.IsAuthorizedFunctions("DO_PROT_SALVA"))
                        {
                            this.DisableFunctionAbotDocument();
                            this.DocumentBtnSave.Visible = false;
                        }
                        else
                        {
                            this.DocumentBtnSave.Visible = true;
                        }

                        if (this.DocumentInWorking.registro != null && this.DocumentInWorking.registro.stato == "C")
                        {
                            this.DisableFunctionAbotDocument();
                            this.DocumentBtnSave.Enabled = false;
                            this.DocumentBtnSend.Enabled = false;
                            this.EnableEdit = false;
                        }
                        else
                        {
                            this.DocumentBtnSave.Enabled = true;
                            this.EnableEdit = true;
                        }

                        if (this.DocumentInWorking.inCestino != null && this.DocumentInWorking.inCestino == "1")
                        {
                            this.DisableFunctionAbotDocument();
                            this.DocumentBtnSave.Enabled = false;
                            this.DocumentBtnSend.Enabled = false;
                            this.EnableEdit = false;
                        }
                        else
                        {
                            this.DocumentBtnSave.Enabled = true;
                            this.EnableEdit = true;
                        }

                        if (this.EnableForward && !UserManager.IsAuthorizedFunctions("DO_PROT_PROTOCOLLA"))
                        {
                            this.DocumentBtnForward.Enabled = false;
                        }
                        else
                        {
                            this.DocumentBtnForward.Enabled = true;
                        }

                        if (!((this.IsRoleInwardEnabled() && this.DocumentInWorking.tipoProto.Equals("A")) || (this.IsRoleOutwardEnabled() && this.DocumentInWorking.tipoProto.Equals("P")) || (this.IsRoleInternalEnabled() && this.DocumentInWorking.tipoProto.Equals("I"))))
                        {
                            this.DocumentBtnRepeat.Enabled = false;
                        }
                        else
                        {
                            this.DocumentBtnRepeat.Enabled = true;
                        }
                    }
                }

                if (this.DocumentInWorking.protocollo != null && !string.IsNullOrEmpty(this.DocumentInWorking.protocollo.segnatura))
                {
                    this.DocumentBntRecord.Enabled = false;
                }
            }

            this.DocumentImgObjectary.Enabled = enable;
            this.DocumentImgSenderAddressBook.Enabled = enable;
            this.RapidSender.Enabled = enable;
            this.TxtCodeSender.ReadOnly = !enable;
            this.TxtDescriptionSender.ReadOnly = !enable;
            this.DocumentImgDownSender.Enabled = enable;
            this.DocumentImgUpSender.Enabled = enable;
            this.DocumentImgMultipleSenderAddressBook.Enabled = enable;
            this.DocumentImgMultipleSenderDelete.Enabled = enable;
            this.TxtObject.ReadOnly = !enable;
            this.TxtCodeObject.ReadOnly = !enable;

            this.TxtRecipientCode.ReadOnly = !enable;
            this.TxtRecipientDescription.ReadOnly = !enable;
            this.RapidRecipient.Enabled = enable;
            this.DocumentImgDeleteRecipient.Enabled = enable;
            this.DocumentImgAddRecipientToCC.Enabled = enable;
            this.DocumentImgAddRecipientFromCC.Enabled = enable;
            this.DocumentImgDeleteRecipientCC.Enabled = enable;
            this.DocumentImgAddRecipient.Enabled = enable;
            this.DocumentImgRecipientAddressBook.Enabled = enable;

            this.DdlMeansSending.Enabled = enable;

            this.TxtProtocolSender.ReadOnly = !enable;
            this.TxtDateProtocol.ReadOnly = !enable;

            this.DocumentImgViewDocumentExists.Enabled = enable;
            this.TxtArrivalDate.ReadOnly = !enable;
            this.TxtTimeOfArrival.ReadOnly = !enable;

            this.RblTypeNote.Enabled = enable;
            this.ddlNoteRF.Enabled = enable;
            this.txtNoteAutoComplete.Enabled = enable;
            this.TxtNote.ReadOnly = !enable;

            this.DocumentImgAnswerSearch.Enabled = enable;
            this.DocumentImgAnswerWithProtocol.Enabled = enable;
            this.DocumentImgAnswerWithDocument.Enabled = enable;
            this.DocumentImgDelAnswer.Enabled = enable;

            this.btnclassificationschema.Enabled = enable;
            this.DocumentImgSearchProjects.Enabled = enable;
            this.TxtCodeProject.ReadOnly = !enable;
            this.TxtDescriptionProject.ReadOnly = !enable;
            this.RapidSenderDescriptionProject.Enabled = enable;

            this.DocumentDdlTransmissionsModel.Enabled = enable;

            this.DocumentDdlTypeDocument.Enabled = enable;
            if (this.DocumentInWorking.template != null && !string.IsNullOrEmpty(this.DocumentInWorking.template.SYSTEM_ID.ToString()))
            {
                this.DocumentDdlTypeDocument.Enabled = false;
            }
            if ("1".Equals(this.DocumentInWorking.DettaglioSegnatura?.Segnato))
            {
                this.DocumentDdlTypeDocument.Enabled = false;
            }
            this.DocumentDdlStateDiagram.Enabled = enable;
            this.DocumentStateDiagramDataValue.ReadOnly = !enable;

            if (this.PnlKeywpords.Visible)
            {
                this.DocumentImgSelectKeyword.Enabled = enable;
                this.DocumentImgDeleteKeyword.Enabled = enable;
            }

        }

        private void VisibiltyRoleFunctions()
        {
            if (!UIManager.UserManager.IsAuthorizedFunctions("DO_ADD_ADL"))
            {
                this.DocumentBtnAdL.Visible = false;
                this.DocumentBtnAdLRole.Visible = false;
            }

            if (!UIManager.UserManager.IsAuthorizedFunctions("DO_PROT_OG_STORIA"))
            {
                //DO_PROT_DATA_ORA_STORIA 
            }

            if (!UIManager.UserManager.IsAuthorizedFunctions("DO_PROT_DATA_ORA_STORIA"))
            {
                //Da implementare mostra storie documento 
            }

            if (!UIManager.UserManager.IsAuthorizedFunctions("DO_PROFIL_HISTORY"))
            {
                //Storia campi profilati
            }

            if (!UIManager.UserManager.IsAuthorizedFunctions("DO_IN_MIT_DETTAGLI"))
            {
                this.DocumentImgSenderDetails.Visible = false;
            }

            if (!UIManager.UserManager.IsAuthorizedFunctions("DO_IN_PRO_VERIFICAPREC"))
            {
                this.DocumentImgViewDocumentExists.Visible = false;
            }

            if (!UIManager.UserManager.IsAuthorizedFunctions("DO_OUT_DES_PIU"))
            {
                this.DocumentImgAddRecipient.Visible = false;
            }

            if (!UIManager.UserManager.IsAuthorizedFunctions("DO_OUT_DES_TIPO_INVIO"))
            {
                this.DocumentImgSending.Visible = false;
            }

            if (!UIManager.UserManager.IsAuthorizedFunctions("DO_OUT_DES_DETTAGLI"))
            {
                this.DocumentImgRecipientDetails.Visible = false;
                this.DocumentImgRecipientDetailsCC.Visible = false;
            }

            if (!UIManager.UserManager.IsAuthorizedFunctions("DO_OUT_DES_ELIMINA"))
            {
                this.DocumentImgDeleteRecipient.Visible = false;
                this.DocumentImgDeleteRecipientCC.Visible = false;
            }

            if (!UIManager.UserManager.IsAuthorizedFunctions("DO_CLA_TITOLARIO"))
            {
                this.btnclassificationschema.Visible = false;
            }

            if (!UIManager.UserManager.IsAuthorizedFunctions("DO_CLA_VIS_PROC"))
            {
                this.DocumentImgSearchProjects.Visible = false;

            }

            if (!UIManager.UserManager.IsAuthorizedFunctions("DO_PROT_PROTOCOLLA"))
            {
                this.DocumentBntRecord.Visible = false;
            }

            if (!UIManager.UserManager.IsAuthorizedFunctions("DO_TRA_TRASMETTI"))
            {
                this.DocumentBtnTransmit.Visible = false;
            }

            if (!UIManager.UserManager.IsAuthorizedFunctions("DO_OUT_SPEDISCI"))
            {
                this.DocumentBtnSend.Visible = false;
            }

            if (this.RblTypeProtocol.Visible && !UIManager.UserManager.IsAuthorizedFunctions("DO_PROT_RIPROPONI"))
            {
                this.DocumentBtnRepeat.Visible = false;
            }

            if (!this.RblTypeProtocol.Visible && !UIManager.UserManager.IsAuthorizedFunctions("DO_DOC_RIPROPONI"))
            {
                this.DocumentBtnRepeat.Visible = false;
            }

            if (this.RblTypeProtocol.Visible && !UIManager.UserManager.IsAuthorizedFunctions("DO_PROT_ANNULLA"))
            {
                this.DocumentBtnUndo.Visible = false;
            }

            if (this.DocumentInWorking != null && !string.IsNullOrEmpty(this.DocumentInWorking.systemId) && this.DocumentInWorking.protocollo != null && string.IsNullOrEmpty(this.DocumentInWorking.protocollo.segnatura) && !UIManager.UserManager.IsAuthorizedFunctions("DO_PRED_ANNULLA"))
            {
                this.DocumentBtnUndo.Visible = false;
            }
            else
            {
                if (this.DocumentInWorking != null && !string.IsNullOrEmpty(this.DocumentInWorking.systemId) && this.DocumentInWorking.protocollo != null && string.IsNullOrEmpty(this.DocumentInWorking.protocollo.segnatura) && UIManager.UserManager.IsAuthorizedFunctions("DO_PRED_ANNULLA"))
                {
                    this.DocumentBtnUndo.Visible = true;
                }
            }

            if (this.PnlKeywpords.Visible && !UIManager.UserManager.IsAuthorizedFunctions("DO_PRO_SELEZIONA"))
            {
                this.DocumentImgSelectKeyword.Visible = false;
            }

            if (this.PnlKeywpords.Visible && !UIManager.UserManager.IsAuthorizedFunctions("DO_PRO_ELIMINAPAROLE"))
            {
                this.DocumentImgDeleteKeyword.Visible = false;
            }

            if (!UIManager.UserManager.IsAuthorizedFunctions("DO_PRO_PREDISPONI"))
            {
                this.DocumentBtnPrepared.Visible = false;
            }
            else
            {
                if (!UIManager.UserManager.IsAuthorizedFunctions("DO_PROT_PROTOCOLLA"))
                {
                    this.DocumentBtnPrepared.Visible = false;
                }
            }

            if (!UIManager.UserManager.IsAuthorizedFunctions("DO_PRO_STAMPASCHEDA"))
            {
                this.DocumentBtnPrint.Visible = false;
            }

            if (!UIManager.UserManager.IsAuthorizedFunctions("DO_PRO_RIMUOVI"))
            {
                this.DocumentBtnRemove.Visible = false;
            }

            if (!UIManager.UserManager.IsAuthorizedFunctions("DO_PROTO_PRIVATO"))
            {
                this.DocumentCheckPrivate.Visible = false;
            }

            if (!UIManager.UserManager.IsAuthorizedFunctions("FASC_INS_DOC"))
            {
                this.PnlProject.Visible = false;
            }

            if (!UIManager.UserManager.IsAuthorizedFunctions("DO_TRA_NUOVA"))
            {
                this.PnlRapidTransmission.Visible = false;
            }

            if (!UIManager.UserManager.IsAuthorizedFunctions("DO_PROT_DATA_ORA_MODIFICA"))
            {
                this.TxtArrivalDate.ReadOnly = true;
                this.TxtTimeOfArrival.ReadOnly = true;
            }

            if (!UIManager.UserManager.IsAuthorizedFunctions("DO_CREA_PERSONALE"))
            {
                this.DocumentChekUser.Visible = false;
            }

            if (!UIManager.UserManager.IsAuthorizedFunctions("DO_CONSOLIDAMENTO") && !UserManager.IsAuthorizedFunctions("DO_CONSOLIDAMENTO_METADATI"))
            {
                this.DocumentBtnConsolid.Visible = false;
            }

            if (!UIManager.UserManager.IsAuthorizedFunctions("PROTO_IN"))
            {
                this.RblTypeProtocol.Items[0].Enabled = false;
            }

            if (!UIManager.UserManager.IsAuthorizedFunctions("PROTO_OUT"))
            {
                this.RblTypeProtocol.Items[1].Enabled = false;
            }

            if (!UIManager.UserManager.IsAuthorizedFunctions("PROTO_OWN") && this.InternalRecordEnable)
            {
                this.RblTypeProtocol.Items[2].Enabled = false;
            }

            if (!UIManager.UserManager.IsAuthorizedFunctions("DO_ADL_ROLE"))
            {
                this.DocumentBtnAdLRole.Visible = false;
            }

            if (!UIManager.UserManager.IsAuthorizedFunctions("DO_ADD_ADL"))
            {
                this.DocumentBtnAdL.Visible = false;
                this.DocumentBtnAdLRole.Visible = false;
            }

            //Se il protocollo è GIALLO  disabilito il pulsante protocolla
            if (this.Registry != null)
            {
                string state = UIManager.RegistryManager.getStatoRegistro(this.Registry);
                if (!string.IsNullOrEmpty(state) && !state.Equals("V"))
                {
                    this.DocumentBntRecord.Enabled = false;
                }
            }

        }

        private void setSendOrResendButtonText(string language, bool trasmitted)
        {
            if (trasmitted)
            {
                this.DocumentBtnSend.Text = Utils.Languages.GetLabelFromCode("DocumentBtnResend", language);
                this.DocumentBtnTransmit.Text = Utils.Languages.GetLabelFromCode("DocumentBtnRetransmit", language);
            }
            else
            {
                this.DocumentBtnSend.Text = Utils.Languages.GetLabelFromCode("DocumentBtnSend", language);
                this.DocumentBtnTransmit.Text = Utils.Languages.GetLabelFromCode("DocumentBtnTransmit", language);
            }
        }

        private void ControlConsolidatioDocument()
        {
            SchedaDocumento doc = DocumentManager.getSelectedRecord();
            bool consolidationSetp1 = UserManager.IsAuthorizedFunctions("DO_CONSOLIDAMENTO");
            bool consolidationSetp2 = UserManager.IsAuthorizedFunctions("DO_CONSOLIDAMENTO_METADATI");
            string language = UIManager.UserManager.GetUserLanguage();

            if (this.DocumentBtnConsolid.Enabled && (consolidationSetp1 != false || consolidationSetp2 != false))
            {
                //Documento non consolidato
                if (doc != null && !string.IsNullOrEmpty(doc.systemId) && doc.ConsolidationState == null || (doc.ConsolidationState != null && doc.ConsolidationState.State == DocsPaWR.DocumentConsolidationStateEnum.None))
                {
                    if (consolidationSetp1 && consolidationSetp2)
                    {
                        this.DocumentBtnConsolid.Enabled = true;
                    }
                    else
                    {
                        if (consolidationSetp1)
                        {
                            this.DocumentBtnConsolid.Enabled = true;
                        }
                        else
                        {
                            this.DocumentBtnConsolid.Enabled = false;
                        }
                    }
                }
                else
                {
                    if (doc.ConsolidationState.State == DocumentConsolidationStateEnum.Step1 && consolidationSetp2)
                    {
                        //Consolidato Contenuti
                        this.DocumentBtnConsolid.Enabled = true;
                        this.LblDocumentConsolidateType.Text = Utils.Languages.GetLabelFromCode("LblDocumentConsolidateTypeStep1", language);
                    }
                    else
                    {
                        //Consolidato Contenuti e metadati
                        this.DocumentBtnConsolid.Enabled = false;
                        this.TxtObject.ReadOnly = true;
                        this.DocumentImgObjectary.Enabled = false;
                        this.TxtCodeSender.ReadOnly = true;
                        this.TxtDescriptionSender.ReadOnly = true;
                        this.DocumentImgSenderAddressBook.Enabled = false;
                        this.TxtProtocolSender.ReadOnly = true;
                        this.TxtDateProtocol.ReadOnly = true;
                        this.TxtArrivalDate.ReadOnly = true;
                        this.TxtTimeOfArrival.ReadOnly = true;
                        this.DocumentImgDownSender.Enabled = false;
                        this.DocumentImgUpSender.Enabled = false;
                        this.DocumentImgMultipleSenderAddressBook.Enabled = false;
                        this.DocumentImgMultipleSenderDelete.Enabled = false;
                        this.TxtCodeObject.ReadOnly = true;
                        this.DocumentImgDeleteRecipient.Enabled = false;
                        this.DocumentImgDeleteRecipientCC.Enabled = false;
                        this.DocumentImgAddRecipient.Enabled = false;
                        this.DocumentImgAddRecipientFromCC.Enabled = false;
                        this.DocumentImgAddRecipientToCC.Enabled = false;
                        this.DocumentImgRecipientAddressBook.Enabled = false;
                        this.DocumentImgMultipleSenderAddressBook.Enabled = false;
                        this.DocumentImgMultipleSenderDelete.Enabled = false;
                        this.DocumentImgDownSender.Enabled = false;
                        this.DocumentImgUpSender.Enabled = false;
                        this.LblDocumentConsolidateType.Text = Utils.Languages.GetLabelFromCode("LblDocumentConsolidateTypeStep2", language);
                        this.TxtRecipientCode.Enabled = false;
                        this.TxtRecipientDescription.Enabled = false;
                        this.RapidRecipient.Enabled = false;
                        //this.TxtCodeProject.Enabled = false;
                        //this.TxtDescriptionProject.Enabled = false;
                        //this.RapidSenderDescriptionProject.Enabled = false;
                    }

                    this.DocumentBtnUndo.Enabled = false;
                }
            }
            else
            {
                if (doc != null)
                {
                    if (!string.IsNullOrEmpty(doc.systemId) && doc.ConsolidationState == null || (doc.ConsolidationState != null && doc.ConsolidationState.State == DocsPaWR.DocumentConsolidationStateEnum.None))
                    {
                    }
                    else
                    {
                        if (doc.ConsolidationState.State == DocumentConsolidationStateEnum.Step1 && consolidationSetp2)
                        {
                            this.LblDocumentConsolidateType.Text = Utils.Languages.GetLabelFromCode("LblDocumentConsolidateTypeStep1", language);

                        }
                        else
                        {
                            //Consolidato Contenuti e metadati
                            this.DocumentBtnConsolid.Enabled = false;
                            this.TxtObject.ReadOnly = true;
                            this.DocumentImgObjectary.Enabled = false;
                            this.TxtCodeSender.ReadOnly = true;
                            this.TxtDescriptionSender.ReadOnly = true;
                            this.DocumentImgSenderAddressBook.Enabled = false;
                            this.TxtProtocolSender.ReadOnly = true;
                            this.TxtDateProtocol.ReadOnly = true;
                            this.TxtArrivalDate.ReadOnly = true;
                            this.TxtTimeOfArrival.ReadOnly = true;
                            this.DocumentImgDownSender.Enabled = false;
                            this.DocumentImgUpSender.Enabled = false;
                            this.DocumentImgMultipleSenderAddressBook.Enabled = false;
                            this.DocumentImgMultipleSenderDelete.Enabled = false;
                            this.TxtCodeObject.ReadOnly = true;
                            this.DocumentImgDeleteRecipient.Enabled = false;
                            this.DocumentImgDeleteRecipientCC.Enabled = false;
                            this.DocumentImgAddRecipient.Enabled = false;
                            this.DocumentImgAddRecipientFromCC.Enabled = false;
                            this.DocumentImgAddRecipientToCC.Enabled = false;
                            this.DocumentImgRecipientAddressBook.Enabled = false;
                            this.DocumentImgMultipleSenderAddressBook.Enabled = false;
                            this.DocumentImgMultipleSenderDelete.Enabled = false;
                            this.DocumentImgDownSender.Enabled = false;
                            this.DocumentImgUpSender.Enabled = false;
                            this.LblDocumentConsolidateType.Text = Utils.Languages.GetLabelFromCode("LblDocumentConsolidateTypeStep2", language);
                            this.TxtRecipientCode.Enabled = false;
                            this.TxtRecipientDescription.Enabled = false;
                            this.RapidRecipient.Enabled = false;
                            //this.TxtCodeProject.Enabled = false;
                            //this.TxtDescriptionProject.Enabled = false;
                            //this.RapidSenderDescriptionProject.Enabled = false;
                        }
                    }
                }
            }
        }

        private void ControlAbortDocument()
        {
            this.AbortDocument = false;
            if (this.DocumentInWorking.tipoProto.ToUpper().Equals("A") || this.DocumentInWorking.tipoProto.ToUpper().Equals("P") || this.DocumentInWorking.tipoProto.ToUpper().Equals("I"))
            {
                DocsPaWR.ProtocolloAnnullato protAborted = null;
                if (this.DocumentInWorking != null && this.DocumentInWorking.tipoProto != null && this.DocumentInWorking.protocollo != null && this.DocumentInWorking.protocollo.protocolloAnnullato != null)
                {
                    protAborted = this.DocumentInWorking.protocollo.protocolloAnnullato;
                    this.AbortDocument = true;
                }

                if (protAborted != null)
                {
                    this.PnlAbortRecord.Visible = true;
                    this.LblDocumentAborted.Text = this.DocumentInWorking.protocollo.protocolloAnnullato.dataAnnullamento;
                    this.LblDocumentAbortText.Text = this.DocumentInWorking.protocollo.protocolloAnnullato.autorizzazione;
                    this.DisableFunctionAbotDocument();
                    this.DocumentBtnSend.Enabled = false;
                    this.DocumentBtnConsolid.Enabled = false;
                }
            }
        }

        private void DisableFunctionAbotDocument()
        {
            this.DocumentBtnSave.Enabled = false;
            this.DocumentBtnTransmit.Enabled = false;
            this.DocumentBtnPrepared.Enabled = false;
            this.DocumentBtnPrint.Enabled = false;
            this.DocumentBtnRemove.Enabled = false;
            this.DocumentBtnUndo.Enabled = false;
            this.DocumentBtnConsolid.Enabled = false;
            this.DocumentImgObjectary.Enabled = false;
            this.DocumentImgSenderAddressBook.Enabled = false;
            this.RapidSender.Enabled = false;
            this.TxtCodeSender.ReadOnly = true;
            this.TxtDescriptionSender.ReadOnly = true;
            this.DocumentImgDownSender.Enabled = false;
            this.DocumentImgUpSender.Enabled = false;
            this.DocumentImgMultipleSenderAddressBook.Enabled = false;
            this.DocumentImgMultipleSenderDelete.Enabled = false;
            this.TxtObject.ReadOnly = true;
            this.TxtCodeObject.ReadOnly = true;
            this.DocumentCheckPrivate.Enabled = false;

            this.TxtRecipientCode.ReadOnly = true;
            this.TxtRecipientDescription.ReadOnly = true;
            this.RapidRecipient.Enabled = false;
            this.DocumentImgDeleteRecipient.Enabled = false;
            this.DocumentImgAddRecipientToCC.Enabled = false;
            this.DocumentImgAddRecipientFromCC.Enabled = false;
            this.DocumentImgDeleteRecipientCC.Enabled = false;
            this.DocumentImgAddRecipient.Enabled = false;
            this.DocumentImgRecipientAddressBook.Enabled = false;

            this.DdlMeansSending.Enabled = false;

            this.TxtProtocolSender.ReadOnly = true;
            this.TxtDateProtocol.ReadOnly = true;

            this.DocumentImgViewDocumentExists.Enabled = false;
            this.TxtArrivalDate.ReadOnly = true;
            this.TxtTimeOfArrival.ReadOnly = true;

            this.RblTypeNote.Enabled = false;
            this.ddlNoteRF.Enabled = false;
            this.txtNoteAutoComplete.Enabled = false;
            this.TxtNote.ReadOnly = true;

            this.DocumentImgAnswerSearch.Enabled = false;
            this.DocumentImgAnswerWithProtocol.Enabled = false;
            this.DocumentImgAnswerWithDocument.Enabled = false;
            this.DocumentImgDelAnswer.Enabled = false;

            this.btnclassificationschema.Enabled = false;
            this.DocumentImgSearchProjects.Enabled = false;
            this.TxtCodeProject.ReadOnly = true;
            this.TxtDescriptionProject.ReadOnly = true;
            this.RapidSenderDescriptionProject.Enabled = false;

            this.DocumentDdlTransmissionsModel.Enabled = false;

            this.DocumentDdlTypeDocument.Enabled = false;
            this.DocumentDdlStateDiagram.Enabled = false;
            this.DocumentStateDiagramDataValue.ReadOnly = true;

            if (this.PnlKeywpords.Visible)
            {
                this.DocumentImgSelectKeyword.Enabled = false;
                this.DocumentImgDeleteKeyword.Enabled = false;
            }
        }


        private void DisableFunctionRemovedDocument()
        {
            // disable all buttons
            this.DocumentBtnSave.Enabled = false;
            this.DocumentBtnCreateDocument.Enabled = false;
            this.DocumentBntRecord.Enabled = false;
            this.DocumentBtnRepeat.Enabled = false;
            this.DocumentBtnSend.Enabled = false;
            this.DocumentBtnTransmit.Enabled = false;
            this.DocumentBtnAdL.Enabled = false;
            this.DocumentBtnAdLRole.Enabled = false;
            this.DocumentBtnPrepared.Enabled = false;
            this.DocumentBtnPrint.Enabled = false;
            this.DocumentBtnRemove.Enabled = false;
            this.DocumentBtnUndo.Enabled = false;
            this.DocumentBtnConsolid.Enabled = false;
            this.DocumentBtnForward.Enabled = false;
            this.UpDocumentButtons.Update();
        }

        private void ControlRemovedDocument()
        {
            this.RemovedDocument = false;
            if (this.DocumentInWorking.tipoProto.ToUpper().Equals("G") ||
                (this.DocumentInWorking.protocollo != null && string.IsNullOrEmpty(DocumentInWorking.protocollo.segnatura)))
            {
                if (this.DocumentInWorking != null && this.DocumentInWorking.inCestino != null && this.DocumentInWorking.inCestino == "1")
                {
                    this.RemovedDocument = true;
                    this.DisableFunctionRemovedDocument();
                }
            }
        }

        protected void ReadRetValueFromPopup()
        {
            this._errorRequirePopUp = null;
            if (!string.IsNullOrEmpty(this.FlussoAutomatico.ReturnValue))
            {
                ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "setReturnValue", "SetRetValue('FlussoAutomatico','');", true);
                Response.Redirect("../Document/Document.aspx");
                return;
            }
            if (!string.IsNullOrEmpty(this.RepositoryView.ReturnValue))
            {
                if (this.RepositoryView.ReturnValue == "selected")
                {
                    SchedaDocumento doc = DocumentManager.getSelectedRecord();
                    doc.checkOutStatus = DocumentManager.GetCheckOutDocumentStatus(doc.systemId);
                    DocumentManager.setSelectedRecord(doc);

                    this.DocumentButtons.RefreshButtons(DocumentButtons.TypeRefresh.D_UPLOADFILE);
                    this.ViewDocument.RefreshAcquiredDocument();
                    ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "setReturnValue", "SetRetValue('RepositoryView','');", true);
                }
                else
                {
                    ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "setReturnValue", "SetRetValue('RepositoryView','');", true);
                }
            }

            if ((!string.IsNullOrEmpty(this.UplodadFile.ReturnValue)) || (!string.IsNullOrEmpty(this.ActiveXScann.ReturnValue)))
            {
                if (this.UplodadFile.ReturnValue != "repository")
                {
                    SchedaDocumento doc = DocumentManager.getSelectedRecord();
                    doc.checkOutStatus = DocumentManager.GetCheckOutDocumentStatus(doc.systemId);
                    DocumentManager.setSelectedRecord(doc);

                    this.DocumentButtons.RefreshButtons(DocumentButtons.TypeRefresh.D_UPLOADFILE);

                    this.verificaValoriAttivazionePermanente();

                    this.ViewDocument.RefreshAcquiredDocument();
                    ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "setReturnValue", "SetRetValue('UplodadFile','');", true);
                    ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "setReturnValue", "SetRetValue('ActiveXScann','');", true);
                    HttpContext.Current.Session["UploadFileAlreadyOpened" + Session.SessionID] = null;
                }
                else
                {
                    ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "setReturnValue", "SetRetValue('UplodadFile','');", true);
                    HttpContext.Current.Session["UploadFileAlreadyOpened" + Session.SessionID] = null;
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "RepView", "ajaxModalPopupRepositoryView();", true);
                }
            }

            if (this.Request.Form["__EVENTTARGET"] != null && this.Request.Form["__EVENTTARGET"].Equals(UP_DOCUMENT_BUTTONS))
            {
                if (this.Request.Form["__EVENTARGUMENT"] != null && (this.Request.Form["__EVENTARGUMENT"].Equals(POPUP_DRAG_AND_DROP)))
                {
                    DragAndDropManager.ClearReport();

                    return;
                }
            }

            if (this.Request.Form["__EVENTTARGET"] != null && this.Request.Form["__EVENTTARGET"].Equals(UP_PANEL_OBJECT))
            {
                if (this.Request.Form["__EVENTARGUMENT"] != null && this.Request.Form["__EVENTARGUMENT"].Equals(RETURN_FROM_K1_K2))
                {
                    if (!string.IsNullOrEmpty(this.DetailsSenderK1.ReturnValue) || !string.IsNullOrEmpty(this.DetailsSenderK2.ReturnValue))
                    {
                        if (this.DetailsSenderK1.ReturnValue.Equals("abort") || this.DetailsSenderK2.ReturnValue.Equals("abort"))
                        {
                            ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "setReturnValue1", "SetRetValue('VerifyPrevious','');", true);
                            ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "setReturnValue2", "SetRetValue('SelectRF','');", true);
                            ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "setReturnValue3", "SetRetValue('ChooseRFSegnatureFromRecord','');", true);
                            ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "setReturnValue4", "SetRetValue('DetailsSenderK1','');", true);
                            ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "setReturnValue5", "SetRetValue('DetailsSenderK2','');", true);
                            this.DetailsSenderK1.ReturnValue = string.Empty;
                            this.DetailsSenderK2.ReturnValue = string.Empty;
                            this.VerifyPrevious.ReturnValue = string.Empty;
                            this.SelectRF.ReturnValue = string.Empty;
                            this.ChooseRFSegnatureFromRecord.ReturnValue = string.Empty;
                        }
                        else if (NewIdCorr != null)
                        {
                            this.Sender = AddressBookManager.GetCorrespondentBySystemId(NewIdCorr);
                            ((ProtocolloEntrata)DocumentInWorking.protocollo).mittente = this.Sender;
                            ((ProtocolloEntrata)DocumentInWorking.protocollo).daAggiornareMittente = true;
                            this.TxtCodeSender.Text = this.Sender.codiceRubrica;
                            this.TxtDescriptionSender.Text = this.Sender.descrizione;
                            this.IdSender.Value = this.Sender.systemId;
                            this.UpPnlSender.Update();
                            //TODO Reimpostare il campo VAR_INSERT_INTEROP a zero per questo mitt
                            int rows = AddressBookManager.ResetCorrVarInsertIterop(NewIdCorr, "NULL");
                            NotOpenK1K2 = true;
                            protocollaOk(DocumentInWorking);
                            this.DocumentImgSenderWarning.Visible = false;
                            this.UpPnlImgSender.Update();
                        }
                        //if (!string.IsNullOrEmpty(this.DetailsSenderK1.ReturnValue))
                        //    ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "setReturnValue", "SetRetValue('DetailsSenderK1','');", true);
                        //else
                        //    ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "setReturnValue", "SetRetValue('DetailsSenderK2','');", true);
                    }
                    else
                    {
                        if (UpdateDocumentProfileButton)
                        {
                            SetButtonsCheckSender();
                            this.UpPnlImgSender.Update();
                        }
                    }
                    DeletePropertyDetailsSenderK1K2();
                }

                if (this.Request.Form["__EVENTARGUMENT"] != null && this.Request.Form["__EVENTARGUMENT"].Equals(SIGNATURE_PROCESS_CONCLUTED))
                {

                    this.ViewDocument.UpdateProcessLFInAction();
                }
            }

            if (!string.IsNullOrEmpty(this.StartProcessSignature.ReturnValue))
            {
                if (UIManager.DocumentManager.getSelectedAttachId() != null)
                {
                    FileManager.GetFileRequest(UIManager.DocumentManager.getSelectedAttachId()).inLibroFirma = true;
                }
                else
                {
                    FileManager.GetFileRequest().inLibroFirma = true;
                }
                this.ViewDocument.UpdateProcessLFInAction();
                this.DocumentTabs.RefreshLayoutTab();
                ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "setReturnValue", "SetRetValue('StartProcessSignature','');", true);
                ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('SuccessStartProcessSignature', 'check', '');} else {parent.ajaxDialogModal('SuccessStartProcessSignature', 'check', '');}", true);
            }

            if (!string.IsNullOrEmpty(this.DigitalSignSelector.ReturnValue))
            {
                this.ViewDocument.UpdateSignedFile();
                this.ViewDocument.ShowDocumentAcquired(false);
                FileRequest fileReq;
                if (UIManager.DocumentManager.getSelectedAttachId() != null)
                {
                    fileReq = FileManager.GetFileRequest(UIManager.DocumentManager.getSelectedAttachId());
                }
                else
                {
                    fileReq = FileManager.GetFileRequest();
                }
                if (fileReq != null && fileReq.inLibroFirma)
                {
                    //LibroFirmaManager.AggiornaDataEsecuzioneElementoInLibroFirma(fileReq.docNumber);
                    SchedaDocumento temp = DocumentManager.getDocumentListVersions(this.Page, fileReq.docNumber, fileReq.docNumber);
                    FileManager.aggiornaFileRequest(this.Page, temp.documenti.Where(e => e.versionId == fileReq.versionId).FirstOrDefault(), false);
                    this.ViewDocument.UpdateProcessLFInAction();
                }
                ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "setReturnValue", "SetRetValue('DigitalSignSelector','');", true);
                HttpContext.Current.Session["CommandType"] = null;


            }

            if (!string.IsNullOrEmpty(this.HSMSignature.ReturnValue))
            {
                this.ViewDocument.UpdateSignedFile();
                this.ViewDocument.ShowDocumentAcquired(false);
                FileRequest fileReq;
                if (UIManager.DocumentManager.getSelectedAttachId() != null)
                {
                    fileReq = FileManager.GetFileRequest(UIManager.DocumentManager.getSelectedAttachId());
                }
                else
                {
                    fileReq = FileManager.GetFileRequest();
                }
                if (fileReq != null && fileReq.inLibroFirma)
                {
                    //LibroFirmaManager.AggiornaDataEsecuzioneElementoInLibroFirma(fileReq.docNumber);
                    SchedaDocumento temp = DocumentManager.getDocumentListVersions(this.Page, fileReq.docNumber, fileReq.docNumber);
                    FileManager.aggiornaFileRequest(this.Page, temp.documenti.Where(e => e.versionId == fileReq.versionId).FirstOrDefault(), false);
                    this.ViewDocument.UpdateProcessLFInAction();
                }
                ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "setReturnValue", "SetRetValue('HSMSignature','');", true);
            }

            if (!string.IsNullOrEmpty(this.DigitalCosignSelector.ReturnValue))
            {
                this.ViewDocument.UpdateSignedFile();
                this.ViewDocument.ShowDocumentAcquired(false);
                ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "setReturnValue", "SetRetValue('DigitalCosignSelector','');", true);
                HttpContext.Current.Session["CommandType"] = null;
            }

            if (!string.IsNullOrEmpty(this.DigitalVisureSelector.ReturnValue))
            {
                FileRequest approvingFile = (FileRequest)HttpContext.Current.Session["fileInAccettazione"];
                ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "setReturnValue", "SetRetValue('DigitalVisureSelector','');", true);
                HttpContext.Current.Session["fileInAccettazione"] = null;
                bool isAdvancementProcess = false;
                string message = string.Empty;
                if (LibroFirmaManager.PutElectronicSignature(approvingFile, isAdvancementProcess, out message))
                {
                    SchedaDocumento temp = DocumentManager.getDocumentListVersions(this.Page, approvingFile.docNumber, approvingFile.docNumber);
                    FileManager.aggiornaFileRequest(this.Page, temp.documenti.Where(e => e.versionId == approvingFile.versionId).FirstOrDefault(), false);
                    this.ViewDocument.UpdateProcessLFInAction();
                }
                else
                {
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('ErrorPutElectronicSignature', 'warning', '', '" + message + "');} else {parent.ajaxDialogModal('ErrorPutElectronicSignature', 'warning', '', '" + message + "');}", true);
                    return;
                }
            }

            if (!string.IsNullOrEmpty(this.OpenLocalCheckOutFile.ReturnValue))
            {
                HttpContext.Current.Session["IsAlreadyDownloaded"] = null;
                ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "setReturnValue", "SetRetValue('OpenLocalCheckOutFile','');", true);
            }

            if (!string.IsNullOrEmpty(this.CheckInDocument.ReturnValue))
            {
                //this.CheckOutDisabled();
                //ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "setReturnValue", "SetRetValue('CheckInDocument','');", true);
            }

            if (!string.IsNullOrEmpty(this.UndoCheckOut.ReturnValue))
            {
                System.Web.HttpContext.Current.Session["isCheckinOrOut"] = null;
                ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "setReturnValue", "SetRetValue('UndoCheckOut','');", true);

                this.ViewDocument.RefreshCheckInDocument();
                this.DisableCheckInOut(true);
                this.UpContainer.Update();
                this.UpDocumentButtons.Update();
            }

            if (this.CheckInOutUpdatedDoc())
            {
                this.DocumentInWorking = DocumentManager.getSelectedRecord();

                if (this.DocumentInWorking != null && !string.IsNullOrEmpty(this.DocumentInWorking.systemId))
                {
                    this.DocumentInWorking = DocumentManager.getDocumentDetails(this.Page, this.DocumentInWorking.systemId, this.DocumentInWorking.docNumber);
                    DocumentManager.setSelectedRecord(this.DocumentInWorking);
                    if (DocumentManager.IsDocumentCheckedOut() || CheckInOut.CheckInOutServices.IsCheckedOutDocument(DocumentManager.getSelectedRecord().docNumber, DocumentManager.getSelectedRecord().docNumber, UserManager.GetInfoUser(), true, DocumentManager.getSelectedRecord()))
                    {
                        this.DisableCheckInOut(false);
                    }
                    else
                    {
                        this.DisableCheckInOut(true);
                    }
                }

                if (HttpContext.Current.Session["isCheckOutModel"] == null)
                {
                    HttpContext.Current.Session["isCheckOutModel"] = null;
                    this.ViewDocument.RefreshCheckInDocument();

                    this.UpContainer.Update();
                }
                else
                {
                    HttpContext.Current.Session["isCheckOutModel"] = null;
                    this.ViewDocument.RefreshCheckInDocumentNoUpdateDocument();
                }
                this.UpDocumentButtons.Update();
            }

            if (this.Request.Form["__EVENTTARGET"] != null && this.Request.Form["__EVENTTARGET"].Equals(UP_PANEL_SENDER))
            {
                if (this.Request.Form["__EVENTARGUMENT"] != null && this.Request.Form["__EVENTARGUMENT"].Equals(NEW_SENDER_FROM_ADDRESS_BOOK))
                {
                    if (!string.IsNullOrEmpty(this.AddressBook_New.ReturnValue))
                    {
                        this.DocumentImgAddNewCorrispondent.Visible = false;
                        this.DocumentImgSenderInt.Visible = false;
                        this.UpPnlImgSender.Update();
                        ((ProtocolloEntrata)this.DocumentInWorking.protocollo).mittente = this.NewSender;
                        DocumentManager.setSelectedRecord(this.DocumentInWorking);
                        PopulateRecordSender();
                        NotOpenK1K2 = true;
                        ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "setReturnValue", "SetRetValue('AddressBook_New','');", true);
                    }
                    HttpContext.Current.Session.Remove("AddressBook_details_gvCaselle");
                    HttpContext.Current.Session.Remove("newSender");
                }
            }

            if ("REFRESH".Equals(this.Signature?.ReturnValue) || "up".Equals(this.Signature?.ReturnValue))
            {
                this.ViewDocument.ShowDocumentAcquired(true);
                ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "setReturnValue", "SetRetValue('Signature','');", true);
                //string script = "$('<a href='document.aspx'></a>')[0].click()";
                ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "testReturn", "$(function(){ $('<a href='document.aspx'></a>')[0].click(); });", true);

                //////// 

            }

            if (!string.IsNullOrEmpty(this.DocumentViewer.ReturnValue))
            {
                ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "setReturnValue", "SetRetValue('DocumentViewer','');", true);
            }

            if (!string.IsNullOrEmpty(this.VersionAdd.ReturnValue))
            {
                this.ViewDocument.ShowChangeVersions();
                this.verificaValoriAttivazionePermanente();
                ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "setReturnValue", "SetRetValue('VersionAdd','');", true);
                return;
            }

            if (!string.IsNullOrEmpty(this.ModifyVersion.ReturnValue))
            {
                this.ViewDocument.UpdateDescriptionVersion();
                ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "setReturnValue", "SetRetValue('ModifyVersion','');", true);
                return;
            }

            if (this.Request.Form["__EVENTTARGET"] != null && this.Request.Form["__EVENTTARGET"].Equals(PANEL_VERSION))
            {
                //popup confirm eliminazione versione
                if (this.Request.Form["__EVENTARGUMENT"] != null && this.Request.Form["__EVENTARGUMENT"].Equals(CONFIRM_REMOVE_VERSION))
                {
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxConfirmModal", "if (parent.fra_main) {parent.fra_main.ajaxConfirmModal('ConfirmRemoveVersion', 'HiddenRemoveVersion', '');} else {parent.ajaxConfirmModal('ConfirmRemoveVersion', 'HiddenRemoveVersion', '');}", true);
                    return;
                }
            }

            //rimuovi versione
            if (!string.IsNullOrEmpty((this.ViewDocument.FindControl("HiddenRemoveVersion") as HiddenField).Value))
            {
                (this.ViewDocument.FindControl("HiddenRemoveVersion") as HiddenField).Value = string.Empty;
                bool res = this.ViewDocument.RemoveVersion();
                if (!res)
                {
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('ErrorRemoveVersion', 'error', '');} else {parent.ajaxDialogModal('ErrorRemoveVersion', 'error', '');}", true);
                    return;
                }
                this.ViewDocument.ShowChangeVersions();
                this.verificaValoriAttivazionePermanente();
                return;
            }

            if (!string.IsNullOrEmpty(this.ViewObject.ReturnValue))
            {
                this.TxtObject.Text = this.TxtObjectViewer;
                this.UpdPnlObject.Update();
                ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "setReturnValue", "SetRetValue('ViewObject','');", true);
            }

            if (!string.IsNullOrEmpty(this.Object.ReturnValue))
            {
                this.TxtObject.Text = this.ReturnValue.Split('#').First();
                if (this.ReturnValue.Split('#').Length > 1)
                    this.TxtCodeObject.Text = this.ReturnValue.Split('#').Last();
                this.UpdPnlObject.Update();

                TxtCodeProject_OnTextChanged(new object(), new EventArgs());
                ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "setReturnValue", "SetRetValue('Object','');", true);
            }

            if (!string.IsNullOrEmpty(this.OpenTitolario.ReturnValue))
            {

                if (this.ReturnValue.Split('#').Length > 1)
                {
                    this.TxtCodeProject.Text = this.ReturnValue.Split('#').First();
                    this.TxtDescriptionProject.Text = this.ReturnValue.Split('#').Last();
                    this.UpPnlProject.Update();
                    TxtCodeProject_OnTextChanged(new object(), new EventArgs());
                }
                ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "setReturnValue", "SetRetValue('OpenTitolario','');", true);
            }


            if (!string.IsNullOrEmpty(this.AnswerSearchDocuments.ReturnValue))
            {
                SchedaDocumento docWIP = HttpContext.Current.Session["Answer.DocumentWIP"] as SchedaDocumento;
                if (docWIP.oggetto != null && !string.IsNullOrEmpty(docWIP.oggetto.descrizione)) this.TxtObject.Text = docWIP.oggetto.descrizione;
                this.UpdPnlObject.Update();

                switch (docWIP.tipoProto)
                {
                    case "A":
                        if (((DocsPaWR.ProtocolloEntrata)docWIP.protocollo).mittente != null) this.Sender = ((DocsPaWR.ProtocolloEntrata)docWIP.protocollo).mittente;
                        this.TxtCodeSender.Text = this.Sender.codiceRubrica;
                        this.TxtDescriptionSender.Text = this.Sender.descrizione;
                        this.UpPnlSender.Update();
                        this.UpPnlRecipients.Update();
                        break;

                    case "P":
                    case "I":
                        if (
                            docWIP.protocollo.GetType() == typeof(DocsPaWR.ProtocolloEntrata)
                            && ((DocsPaWR.ProtocolloEntrata)docWIP.protocollo).mittente != null
                            )
                        {
                            this.Sender = ((DocsPaWR.ProtocolloEntrata)docWIP.protocollo).mittente;
                            this.TxtCodeSender.Text = this.Sender.codiceRubrica;
                            this.TxtDescriptionSender.Text = this.Sender.descrizione;
                        }
                        else if (
                            docWIP.protocollo.GetType() == typeof(DocsPaWR.ProtocolloUscita)
                            && ((DocsPaWR.ProtocolloUscita)docWIP.protocollo).mittente != null
                            )
                        {
                            this.Sender = ((DocsPaWR.ProtocolloUscita)docWIP.protocollo).mittente;
                            this.TxtCodeSender.Text = this.Sender.codiceRubrica;
                            this.TxtDescriptionSender.Text = this.Sender.descrizione;
                        }
                        else if (
                            docWIP.protocollo.GetType() == typeof(DocsPaWR.ProtocolloInterno)
                            && ((DocsPaWR.ProtocolloInterno)docWIP.protocollo).mittente != null
                            )
                        {
                            this.Sender = ((DocsPaWR.ProtocolloInterno)docWIP.protocollo).mittente;
                            this.TxtCodeSender.Text = this.Sender.codiceRubrica;
                            this.TxtDescriptionSender.Text = this.Sender.descrizione;
                        }

                        if (docWIP.protocollo.GetType() == typeof(DocsPaWR.ProtocolloUscita))
                        {
                            if (((DocsPaWR.ProtocolloUscita)docWIP.protocollo).destinatari != null)
                            {
                                DocsPaWR.Corrispondente[] listaDestCC = this.ListRecipientsCC.ToArray<Corrispondente>();
                                DocsPaWR.Corrispondente[] listaDest = this.ListRecipients.ToArray<Corrispondente>();
                                foreach (Corrispondente corr in new List<Corrispondente>(((DocsPaWR.ProtocolloUscita)docWIP.protocollo).destinatari))
                                {
                                    if (!AddressBookManager.esisteCorrispondente(listaDestCC, corr))
                                    {
                                        if (!AddressBookManager.esisteCorrispondente(listaDest, corr))
                                        {
                                            this.ListRecipients = AddressBookManager.AddCorrespondet(this.ListRecipients, this.ListRecipientsCC, corr);
                                            ListItem item = new ListItem(corr.descrizione, corr.codiceRubrica);
                                            this.ListBoxRecipient.Items.Insert(0, item);
                                        }
                                    }
                                }
                            }
                            if (((DocsPaWR.ProtocolloUscita)docWIP.protocollo).destinatariConoscenza != null)
                            {
                                DocsPaWR.Corrispondente[] listaDestCC = this.ListRecipientsCC.ToArray<Corrispondente>();
                                DocsPaWR.Corrispondente[] listaDest = this.ListRecipients.ToArray<Corrispondente>();
                                foreach (Corrispondente corr in new List<Corrispondente>(((DocsPaWR.ProtocolloUscita)docWIP.protocollo).destinatariConoscenza))
                                {
                                    if (!AddressBookManager.esisteCorrispondente(listaDestCC, corr))
                                    {
                                        if (!AddressBookManager.esisteCorrispondente(listaDest, corr))
                                        {
                                            this.ListRecipientsCC = AddressBookManager.AddCorrespondet(this.ListRecipientsCC, this.ListRecipients, corr);
                                            ListItem item = new ListItem(corr.descrizione, corr.codiceRubrica);
                                            this.ListBoxRecipientCC.Items.Insert(0, item);
                                        }
                                    }
                                }
                            }
                        }
                        else if (docWIP.protocollo.GetType() == typeof(DocsPaWR.ProtocolloInterno))
                        {
                            if (((DocsPaWR.ProtocolloInterno)docWIP.protocollo).destinatari != null)
                            {
                                DocsPaWR.Corrispondente[] listaDestCC = this.ListRecipientsCC.ToArray<Corrispondente>();
                                DocsPaWR.Corrispondente[] listaDest = this.ListRecipients.ToArray<Corrispondente>();
                                foreach (Corrispondente corr in new List<Corrispondente>(((DocsPaWR.ProtocolloInterno)docWIP.protocollo).destinatari))
                                {
                                    if (!AddressBookManager.esisteCorrispondente(listaDestCC, corr))
                                    {
                                        if (!AddressBookManager.esisteCorrispondente(listaDest, corr))
                                        {
                                            this.ListRecipients = AddressBookManager.AddCorrespondet(this.ListRecipients, this.ListRecipientsCC, corr);
                                            ListItem item = new ListItem(corr.descrizione, corr.codiceRubrica);
                                            this.ListBoxRecipient.Items.Insert(0, item);
                                        }
                                    }
                                }
                            }
                            if (((DocsPaWR.ProtocolloInterno)docWIP.protocollo).destinatariConoscenza != null)
                            {
                                DocsPaWR.Corrispondente[] listaDestCC = this.ListRecipientsCC.ToArray<Corrispondente>();
                                DocsPaWR.Corrispondente[] listaDest = this.ListRecipients.ToArray<Corrispondente>();
                                foreach (Corrispondente corr in new List<Corrispondente>(((DocsPaWR.ProtocolloInterno)docWIP.protocollo).destinatari))
                                {
                                    if (!AddressBookManager.esisteCorrispondente(listaDestCC, corr))
                                    {
                                        if (!AddressBookManager.esisteCorrispondente(listaDest, corr))
                                        {
                                            this.ListRecipientsCC = AddressBookManager.AddCorrespondet(this.ListRecipientsCC, this.ListRecipients, corr);
                                            ListItem item = new ListItem(corr.descrizione, corr.codiceRubrica);
                                            this.ListBoxRecipientCC.Items.Insert(0, item);
                                        }
                                    }
                                }
                            }
                        }
                        this.UpPnlSender.Update();
                        this.UpPnlRecipients.Update();
                        break;
                }

                if (docWIP.rispostaDocumento != null)
                {
                    if (!string.IsNullOrEmpty(docWIP.rispostaDocumento.segnatura))
                    {
                        this.litAnswerRif.Text = docWIP.rispostaDocumento.segnatura;
                    }
                    else
                    {
                        this.litAnswerRif.Text = docWIP.rispostaDocumento.docNumber;
                    }
                }

                string language = UIManager.UserManager.GetUserLanguage();
                ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "setReturnValue", "SetRetValue('AnswerSearchDocuments','');", true);
                this.plcAnswerRif.Visible = true;
                this.DocumentImgGoAnswer.Visible = true;
                this.UpPnlResponseProtocol.Update();
                this.UpPnlResponse.Update();
                this.DocumentLblAnswer.ToolTip = "<div align='left'>" + Utils.Languages.GetLabelFromCode("DocumentLblAnswer", language) + " " + this.litAnswerRif.Text.ToString() + "</div>";

                this.DocumentImgGoAnswer.ToolTip = "<div align='left'>" + Utils.Languages.GetLabelFromCode("DocumentImgGoAnswer", language) + "</div>";

                this.DocumentImgAnswerSearch.ToolTip = Utils.Languages.GetLabelFromCode("DocumentImgAnswerEdit", language);
            }

            if (!string.IsNullOrEmpty(this.AnswerChooseRecipient.ReturnValue))
            {
                SchedaDocumento docWIP = HttpContext.Current.Session["Answer.DocumentWIP"] as SchedaDocumento;
                DocumentManager.setSelectedRecord(docWIP);
                HttpContext.Current.Session["Answer.DocumentWIP"] = DocumentManager.getDocumentDetails(this, docWIP.rispostaDocumento.docNumber, docWIP.rispostaDocumento.docNumber);

                this.AnswerChooseRecipient.ReturnValue = string.Empty;
                Response.Redirect("Document.aspx");
            }


            if (!string.IsNullOrEmpty(this.AnswerShowAnswers.ReturnValue))
            {
                DocumentManager.setSelectedRecord(DocumentManager.getDocumentDetails(this, this.AnswerShowAnswers.ReturnValue, this.AnswerShowAnswers.ReturnValue));
                this.AnswerShowAnswers.ReturnValue = string.Empty;
                Response.Redirect("Document.aspx");
            }

            if (!string.IsNullOrEmpty(this.Note.ReturnValue))
            {
                this.FetchNote();
                ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "setReturnValue", "SetRetValue('Note','');", true);
            }

            if (!string.IsNullOrEmpty(this.AbortCounter.ReturnValue))
            {
                this.PnlTypeDocument.Controls.Clear();
                this.PopulateProfiledDocument();
                this.UpPnlTypeDocument.Update();
                this.HeaderDocument.RefreshDataDocument();
                this.DocumentTabs.RefreshLayoutTab();

                //Modifico la notifica in seguito all'annullamento del contatore
                #region Aggiornamento delle notifiche legate al documento
                List<TypeOperation> typeOperation = new List<TypeOperation>();
                typeOperation.Add(TypeOperation.ABORT_COUNTER_REPERTOIRE);
                //effettuo il popolamento oggetto TypeOperation per il successivo aggiornamento delle notifiche: verifica se è stata modificata
                //la descrizione o la tipologia del fascicolo; in tal caso vengono riportate sulle notifiche legate al fascicolo stesso, qualora esse esistano
                if (typeOperation != null && typeOperation.Count > 0)
                {
                    NotificationManager.ModifyNotificationDelegate modifyNotification = new NotificationManager.ModifyNotificationDelegate(NotificationManager.ModifyNotification);
                    modifyNotification.BeginInvoke(UserManager.GetInfoUser(), typeOperation.ToArray(), DocumentManager.getSelectedRecord().systemId, NotificationManager.ListDomainObject.DOCUMENT, null, null);
                }
                #endregion
                ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "setReturnValue", "SetRetValue('AbortCounter','');", true);
            }

            if (!string.IsNullOrEmpty(this.ChooseCorrespondent.ReturnValue))
            {
                if (this.ChooseCorrespondent.ReturnValue.Equals("sender"))
                {

                    this.TxtCodeSender.Text = this.ChooseMultipleCorrespondent.codiceRubrica;
                    this.TxtDescriptionSender.Text = this.ChooseMultipleCorrespondent.descrizione;
                    this.IdSender.Value = this.ChooseMultipleCorrespondent.systemId;
                    this.Sender = this.ChooseMultipleCorrespondent;
                    this.ChooseMultipleCorrespondent = null;
                    this.UpPnlSender.Update();
                }
                else
                {
                    if (this.ChooseCorrespondent.ReturnValue.Equals("recipients"))
                    {
                        this.SetRecipient(this.ChooseMultipleCorrespondent);
                        this.UpPnlRecipients.Update();
                        this.ChooseMultipleCorrespondent = null;
                    }
                    else
                    {
                        //Profiler document
                        UserControls.CorrespondentCustom corr = (UserControls.CorrespondentCustom)this.PnlTypeDocument.FindControl(this.ChooseCorrespondent.ReturnValue);
                        corr.TxtCodeCorrespondentCustom = this.ChooseMultipleCorrespondent.descrizione;
                        corr.TxtDescriptionCorrespondentCustom = this.ChooseMultipleCorrespondent.codiceRubrica;
                        corr.IdCorrespondentCustom = this.ChooseMultipleCorrespondent.systemId;
                        this.UpPnlTypeDocument.Update();
                    }
                }

                ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "setReturnValue", "SetRetValue('ChooseCorrespondent','');", true);
            }

            if (!string.IsNullOrEmpty(this.HiddenAbortPre.Value))
            {
                if (this.DocumentInWorking != null)
                {
                    this.DocumentInWorking = DocumentManager.annullaPredisposizione(this.InfoUser, this.DocumentInWorking);
                    #region Aggiornamento delle notifiche legate al documento
                    List<TypeOperation> typeOperation = new List<TypeOperation>();
                    typeOperation.Add(TypeOperation.CHANGE_TYPE_PROTO);
                    //effettuo il popolamento oggetto TypeOperation per il successivo aggiornamento delle notifiche: verifica se è stata modificata
                    //la descrizione o la tipologia del fascicolo; in tal caso vengono riportate sulle notifiche legate al fascicolo stesso, qualora esse esistano
                    if (typeOperation != null && typeOperation.Count > 0)
                    {
                        NotificationManager.ModifyNotificationDelegate modifyNotification = new NotificationManager.ModifyNotificationDelegate(NotificationManager.ModifyNotification);
                        modifyNotification.BeginInvoke(UserManager.GetInfoUser(), typeOperation.ToArray(), DocumentManager.getSelectedRecord().systemId, NotificationManager.ListDomainObject.DOCUMENT, null, null);
                    }
                    #endregion
                    DocumentManager.setSelectedRecord(this.DocumentInWorking);
                    this.HiddenAbortPre.Value = string.Empty;
                    Response.Redirect("Document.aspx");
                }
            }

            if (!string.IsNullOrEmpty(this.AbortRecord.ReturnValue))
            {
                //Modifico la notifica in seguito all'annullamento di un protocollo
                #region Aggiornamento delle notifiche legate al documento
                List<TypeOperation> typeOperation = new List<TypeOperation>();
                typeOperation.Add(TypeOperation.ABORT_RECORD);
                //effettuo il popolamento oggetto TypeOperation per il successivo aggiornamento delle notifiche: verifica se è stata modificata
                //la descrizione o la tipologia del fascicolo; in tal caso vengono riportate sulle notifiche legate al fascicolo stesso, qualora esse esistano
                if (typeOperation != null && typeOperation.Count > 0)
                {
                    NotificationManager.ModifyNotificationDelegate modifyNotification = new NotificationManager.ModifyNotificationDelegate(NotificationManager.ModifyNotification);
                    modifyNotification.BeginInvoke(UserManager.GetInfoUser(), typeOperation.ToArray(), DocumentManager.getSelectedRecord().systemId, NotificationManager.ListDomainObject.DOCUMENT, null, null);
                }
                #endregion
                ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "setReturnValue", "SetRetValue('AbortRecord','');", true);
                Response.Redirect("Document.aspx");
            }

            if (!string.IsNullOrEmpty(this.SelectRF.ReturnValue))
            {
                SchedaDocumento doc = DocumentManager.getSelectedRecord();
                this.protocollaOk(doc);
            }

            if (!string.IsNullOrEmpty(this.Prints.ReturnValue))
            {
                ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "setReturnValue", "SetRetValue('Prints','');", true);
            }

            if (!string.IsNullOrEmpty(this.RemoveProfile.ReturnValue))
            {
                this.DisableFunctionRemovedDocument();

                List<Navigation.NavigationObject> navigationList = Navigation.NavigationUtils.GetNavigationList();
                string callingPage = System.IO.Path.GetFileName(HttpContext.Current.Request.FilePath);
                string linkPage = string.Empty;
                Navigation.NavigationObject obj = navigationList.Last();
                string link = string.Empty;
                if (!string.IsNullOrEmpty(callingPage))
                {
                    if (callingPage.ToUpper().Equals(obj.Page))
                    {

                        link = "~/Index.aspx";
                    }
                    else
                    {
                        link = Navigation.NavigationUtils.GetLink(obj.CodePage, true, this.Page);
                        obj = navigationList.Last();
                    }
                }

                ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "function RedirectHome(){$(location).attr('href','" + this.ResolveUrl(link) + "');} if (parent.fra_main) {parent.fra_main.ajaxDialogModal('RevocationAcl', 'warning', '','',null,null,'RedirectHome()')} else {parent.parent.ajaxDialogModal('RevocationAcl', 'warning', '','',null,null,'RedirectHome()');}", true);
                return;
            }

            if (!string.IsNullOrEmpty(this.Consolidation.ReturnValue))
            {
                ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "setReturnValue", "SetRetValue('Consolidation','');", true);
                Response.Redirect("Document.aspx");
            }

            if (!string.IsNullOrEmpty(this.VerifyPrevious.ReturnValue))
            {
                SchedaDocumento doc = this.DocumentInWorking;
                this.protocollaOk(doc);
            }

            if (!string.IsNullOrEmpty(this.SelectKeyword.ReturnValue))
            {
                DocsPaWR.SchedaDocumento schedaDocumento = DocumentManager.getSelectedRecord();
                if (schedaDocumento != null)
                {
                    if (schedaDocumento.paroleChiave != null)
                    {
                        if (schedaDocumento.paroleChiave.Length > 0)
                        {

                            this.ListKeywords.Attributes.Clear();
                            this.ListKeywords.Items.Clear();

                            for (int i = 0; i < schedaDocumento.paroleChiave.Length; i++)
                            {
                                this.ListKeywords.Items.Add(schedaDocumento.paroleChiave[i].descrizione);
                                this.ListKeywords.Items[i].Value = schedaDocumento.paroleChiave[i].systemId;
                            }
                            this.UpPnlKeywords.Update();
                        }
                    }
                }
                ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "setReturnValue", "SetRetValue('SelectKeyword','');", true);
            }

            if (!string.IsNullOrEmpty(this.HiddenAutomaticState.Value))
            {
                if (this.DocumentInWorking != null)
                {
                    DiagrammiManager.salvaModificaStato(this.DocumentInWorking.docNumber, this.DocumentDdlStateDiagram.SelectedItem.Value, this.StateDiagram, this.InfoUser.userId, this.InfoUser, this.DocumentStateDiagramDataValue.Text, this.Page);

                    InfoDocumento infoDoc = new InfoDocumento();
                    ArrayList modelli = new ArrayList(DiagrammiManager.isStatoTrasmAuto(this.InfoUser.idAmministrazione, this.DocumentDdlStateDiagram.SelectedItem.Value, this.Template.SYSTEM_ID.ToString()));
                    for (int i = 0; i < modelli.Count; i++)
                    {
                        DocsPaWR.ModelloTrasmissione mod = (DocsPaWR.ModelloTrasmissione)modelli[i];
                        if (mod.SINGLE == "1")
                        {
                            infoDoc = DocumentManager.getInfoDocumento(this.DocumentInWorking);
                            TrasmManager.effettuaTrasmissioneDocDaModello(mod, this.DocumentDdlStateDiagram.SelectedItem.Value, infoDoc, this);
                        }
                        else
                        {
                            for (int k = 0; k < mod.MITTENTE.Length; k++)
                            {
                                if (mod.MITTENTE[k].ID_CORR_GLOBALI.ToString() == this.Role.systemId)
                                {
                                    infoDoc = DocumentManager.getInfoDocumento(this.DocumentInWorking);
                                    TrasmManager.effettuaTrasmissioneDocDaModello(mod, this.DocumentDdlStateDiagram.SelectedItem.Value, infoDoc, this);
                                    break;
                                }
                            }
                        }
                    }
                    Stato state = (from s in StateDiagram.STATI where s.SYSTEM_ID.ToString() == this.DocumentDdlStateDiagram.SelectedValue select s).FirstOrDefault();
                    if (state.STATO_FINALE)
                    {
                        DocumentManager.RightsDocumentChanges(HMdiritti.HMdiritti_Read, this.DocumentInWorking.systemId);
                    }
                    this.HiddenAutomaticState.Value = string.Empty;
                    this.DocumentDdlStateDiagram.SelectedIndex = -1;
                    this.LoadDiagramAndState();
                    this.UpPnlTypeDocument.Update();
                }
            }

            if (!string.IsNullOrEmpty(this.HiddenFinalState.Value))
            {
                if (this.DocumentInWorking != null)
                {
                    DiagrammiManager.salvaModificaStato(this.DocumentInWorking.docNumber, this.DocumentDdlStateDiagram.SelectedItem.Value, this.StateDiagram, this.InfoUser.userId, this.InfoUser, this.DocumentStateDiagramDataValue.Text, this.Page);
                    string idTemplate = this.Template.SYSTEM_ID.ToString();
                    Stato state = (from s in StateDiagram.STATI where s.SYSTEM_ID.ToString() == this.DocumentDdlStateDiagram.SelectedValue select s).FirstOrDefault();
                    if (state.CONVERSIONE_PDF)
                        this.IsCosolidato = true;   //FACCIO IL REDIRECT SULLA PAGINA PER AGGIORNARE NEL CASO DI CONVERSIONE PDF

                    InfoDocumento infoDoc = new InfoDocumento();
                    ArrayList modelli = new ArrayList(DiagrammiManager.isStatoTrasmAuto(this.InfoUser.idAmministrazione, this.DocumentDdlStateDiagram.SelectedItem.Value, this.Template.SYSTEM_ID.ToString()));
                    for (int i = 0; i < modelli.Count; i++)
                    {
                        DocsPaWR.ModelloTrasmissione mod = (DocsPaWR.ModelloTrasmissione)modelli[i];
                        if (mod.SINGLE == "1")
                        {
                            infoDoc = DocumentManager.getInfoDocumento(this.DocumentInWorking);
                            TrasmManager.effettuaTrasmissioneDocDaModello(mod, this.DocumentDdlStateDiagram.SelectedItem.Value, infoDoc, this);
                        }
                        else
                        {
                            for (int k = 0; k < mod.MITTENTE.Length; k++)
                            {
                                if (mod.MITTENTE[k].ID_CORR_GLOBALI.ToString() == this.Role.systemId)
                                {
                                    infoDoc = DocumentManager.getInfoDocumento(this.DocumentInWorking);
                                    TrasmManager.effettuaTrasmissioneDocDaModello(mod, this.DocumentDdlStateDiagram.SelectedItem.Value, infoDoc, this);
                                    break;
                                }
                            }
                        }
                    }

                    this.HiddenFinalState.Value = string.Empty;
                    this.DocumentDdlStateDiagram.SelectedIndex = -1;
                    this.LoadDiagramAndState();
                    this.UpPnlTypeDocument.Update();
                    //ho messo il documento in stato finale dunque modifico anche l'accessRigths
                    DocumentManager.RightsDocumentChanges(HMdiritti.HMdiritti_Read, this.DocumentInWorking.systemId);
                    this.PopulateProfiledDocument();
                }
            }

            if (!string.IsNullOrEmpty(this.HiddenISPrivate.Value))
            {
                this.HiddenISPrivate.Value = string.Empty;
                this.protocollaDoc();
                this.UpDocumentPrivate.Update();
            }

            if (!string.IsNullOrEmpty(this.HiddenControlPrivateTrans.Value))
            {
                if (this.HiddenControlPrivateTypeOperation.Value.Equals("RECORD"))
                {
                    this.protocollaDoc();
                }
                if (this.HiddenControlPrivateTypeOperation.Value.Equals("CREATEDOCUMENT"))
                {
                    this.CreateDocument();
                }
                this.UpPnlTransmissionsModel.Update();
            }

            if (!string.IsNullOrEmpty(this.HiddenPublicFolder.Value))
            {
                if (this.HiddenPublicFolderTypeOperation.Value.Equals("RECORD"))
                {
                    this.HiddenPublicFolderTypeOperation.Value = string.Empty;
                    this.protocollaDoc();
                }
                if (this.HiddenPublicFolderTypeOperation.Value.Equals("CREATEDOCUMENT"))
                {
                    this.HiddenPublicFolderTypeOperation.Value = string.Empty;
                    this.CreateDocument();
                }
                if (this.HiddenPublicFolderTypeOperation.Value.Equals("SAVEDOCUMENT"))
                {
                    this.HiddenPublicFolderTypeOperation.Value = string.Empty;
                    this.SaveDocument();
                }
            }

            if (!string.IsNullOrEmpty(this.HiddenControlPrivateClass.Value))
            {
                if (this.HiddenControlPrivateTypeOperation.Value.Equals("RECORD"))
                {
                    this.protocollaDoc();
                }

                if (this.HiddenControlPrivateTypeOperation.Value.Equals("CREATEDOCUMENT"))
                {
                    this.CreateDocument();
                }

                this.UpPnlTransmissionsModel.Update();
            }

            if (!string.IsNullOrEmpty(this.HiddenSendNoFile.Value))
            {
                this.completaProtocollazione(false);
            }

            if (!string.IsNullOrEmpty(this.HiddenControlRepeatCopyDocuments2.Value))
            {
                this.HiddenControlRepeatCopyDocuments2.Value = string.Empty;

                if (!string.IsNullOrEmpty(this.HiddenControlRepeatCopyDocuments.Value))
                    this.RepeatDocument(true);
                else
                    this.RepeatDocument(false);
            }

            if (!string.IsNullOrEmpty(senderpopup.ReturnValue))
            {
                this.DocumentTabs.RefreshLayoutTab();
                this.UpContainerDocumentTab.Update();
                ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "setReturnValue", "SetRetValue('senderpopup','');", true);
            }

            if (!string.IsNullOrEmpty(this.ChooseRFSegnature.ReturnValue))
            {
                SchedaDocumento schedaDocumento = DocumentManager.getSelectedRecord();
                Registro newReg = UserManager.getRegistroBySistemId(this.Page, this.ChooseRFSegnature.ReturnValue);

                bool resInvioRicevuta = DocumentManager.DocumentoInvioRicevuta(Page, schedaDocumento, newReg);
                if (resInvioRicevuta)
                {
                    string msg = "InfoSendReceiptCorrectly";
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "ajaxDialogModal('" + msg.Replace("'", "\\'") + "', 'check');", true);
                }

                ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "setReturnValue", "SetRetValue('ChooseRFSegnature','');", true);
            }

            if (!string.IsNullOrEmpty(this.CorrespondentDetails.ReturnValue))
            {
                if (this.CorrespondentDetails.ReturnValue.Equals("M"))
                {
                    this.TxtCodeSender.Text = this.Sender.codiceRubrica;
                    this.TxtDescriptionSender.Text = this.Sender.descrizione;
                    this.IdSender.Value = this.Sender.systemId;
                    this.UpPnlSender.Update();
                    if (this.DocumentInWorking != null && !string.IsNullOrEmpty(this.DocumentInWorking.systemId))
                    {
                        this.EditSender = true;
                    }
                }
                else if (this.CorrespondentDetails.ReturnValue.Equals("I"))
                {
                    //TO DO
                }
                else if (this.CorrespondentDetails.ReturnValue.Equals("D"))
                {
                    this.RefreshListRecipientsOutProtocolRecipients();
                    //this.EditRecipients = true;
                    this.UpPnlRecipients.Update();
                }
                else if (this.CorrespondentDetails.ReturnValue.Equals("C"))
                {
                    this.ListBoxRecipientCC.Items.Clear();
                    this.RefreshListRecipientsOutProtocolRecipientsCC();
                    //this.EditRecipientsCC = true;
                    this.UpPnlRecipients.Update();
                }

            }

            //Laura 13 Marzo
            if (!string.IsNullOrEmpty(this.SearchProject.ReturnValue))
            {
                //if (!String.IsNullOrEmpty(DocumentInWorking.systemId))
                //{

                //    ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "setReturnValue", "SetRetValue('SearchProject','');", true);

                //    //TxtCodeProject.Text = string.Empty;
                //    //TxtDescriptionProject.Text = string.Empty;
                //    ////creazioneDataTableFascicoli();
                //    ////UpNFascicoli.Update();
                //    ////UpGrid.Update();
                //    //UpPnlProject.Update();                        
                //    //}
                //    //else {
                //    //string msg = "ResultFascicolazione";

                //    //ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + msg + "', 'info', '', '" + HttpContext.Current.Session["ReturnValuePopup"].ToString() + "');} else {parent.ajaxDialogModal('" + msg + "', 'info', '', '" + HttpContext.Current.Session["ReturnValuePopup"].ToString() + "');}", true);
                //    //}
                //}

                if (this.ReturnValue.Split('#').Length > 1)
                {
                    this.TxtCodeProject.Text = this.ReturnValue.Split('#').First();
                    this.TxtDescriptionProject.Text = this.ReturnValue.Split('#').Last();
                    this.UpPnlProject.Update();
                    TxtCodeProject_OnTextChanged(new object(), new EventArgs());
                }
                else
                    //Laura 19 Marzo
                    if (this.ReturnValue.Contains("//"))
                    {
                        this.TxtCodeProject.Text = this.ReturnValue;
                        this.TxtDescriptionProject.Text = "";
                        this.UpPnlProject.Update();
                        TxtCodeProject_OnTextChanged(new object(), new EventArgs());
                    }
                ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "setReturnValue", "SetRetValue('SearchProject','');", true);
            }

            if (!string.IsNullOrEmpty(this.NewProject.ReturnValue))
            {
                this.TxtCodeProject.Text = this.ReturnValue.Split('#').First();
                this.TxtDescriptionProject.Text = this.ReturnValue.Split('#').Last();
                this.UpPnlProject.Update();
                TxtCodeProject_OnTextChanged(new object(), new EventArgs());
                ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "setReturnValue", "SetRetValue('NewProject','');", true);
                HttpContext.Current.Session.Remove("searchCorrespondentIntExtWithDisabled");
            }

            if (!string.IsNullOrEmpty(this.ChoiceTypeDelivery.ReturnValue))
            {
                this.SetListRecipientsOutProtocolFromAddressBook();
                this.SetListRecipientsOutProtocolCCFromAddressBook();
                this.UpPnlRecipients.Update();
                //this.EditRecipients = true;
                //this.EditRecipientsCC = true;
                ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "setReturnValue", "SetRetValue('ChoiceTypeDelivery','');", true);
            }

            if (!string.IsNullOrEmpty(this.HierarchyVisibility.ReturnValue))
            {
                this.DocumentInWorking.eredita = "1";
                ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "setReturnValue", "SetRetValue('HierarchyVisibility','');", true);
            }
            else
            {
                this.HiddenControlPrivateHierarchyTransmission.Value = string.Empty;
            }

            if (IsCosolidato)
            {
                HttpContext.Current.Session.Remove("IsCosolidato");
                Response.Redirect("Document.aspx");
            }
            if (this.Request.Form["__EVENTTARGET"] != null && this.Request.Form["__EVENTTARGET"].Equals(UP_PANEL_OBJECT))
            {

                if (this.Request.Form["__EVENTARGUMENT"] != null && (this.Request.Form["__EVENTARGUMENT"].Equals(CLOSE_POPUP_ADDRESS_BOOK)))
                {
                    ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "setReturnValue", "SetRetValue('AddressBookFromPopup','');", true);
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "popupObject", "document.getElementById('ifrm_StartProcessSignature').contentWindow.closeAddressBookPopup();", true);
                    return;
                }
            }
            ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "resizeFrame", "resizeIframe();", true);
            ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "function", "reallowOp();", true);

            if ((!this._errorRequirePopUp ?? false))
            {
                Response.Redirect("Document.aspx");
            }
        }

        private void LoadTemplateDocument()
        {
            this.Template = this.DocumentInWorking.template;
            ListItem item = new ListItem();
            item.Text = this.DocumentInWorking.template.DESCRIZIONE;
            item.Value = this.DocumentInWorking.template.SYSTEM_ID.ToString();
            if (this.DocumentDdlTypeDocument.Items == null || this.DocumentDdlTypeDocument.Items.Count == 0 || !this.DocumentDdlTypeDocument.Items.Contains(item))
            {
                this.DocumentDdlTypeDocument.Items.Add(item);
            }
            this.DocumentDdlTypeDocument.SelectedValue = this.DocumentInWorking.template.SYSTEM_ID.ToString();
            this.DocumentDdlTypeDocument.Enabled = false;
            this.PopulateProfiledDocument();
            if (!string.IsNullOrEmpty(DocumentInWorking.accessRights) && Convert.ToInt32(DocumentInWorking.accessRights) > Convert.ToInt32(HMdiritti.HMdiritti_Read))
                this.LoadDiagramAndState("1");
            else
                this.LoadDiagramAndState();
        }

        private bool CheckInOutUpdatedDoc()
        {
            bool retVal = false;

            if (System.Web.HttpContext.Current.Session["isCheckinOrOut"] != null)
            {
                retVal = bool.Parse(System.Web.HttpContext.Current.Session["isCheckinOrOut"].ToString());
                System.Web.HttpContext.Current.Session["isCheckinOrOut"] = null;
            }

            return retVal;
        }

        private void LoadDiagramAndState(string isRemoveFinalState = "")
        {
            if (this.EnableStateDiagram && this.DocumentInWorking.tipologiaAtto != null)
            {
                this.StateDiagram = DiagrammiManager.getDgByIdTipoDoc(this.DocumentInWorking.tipologiaAtto.systemId, this.InfoUser.idAmministrazione);

                if (this.StateDiagram != null)
                {
                    this.PnlStateDiagram.Visible = true;
                    DocsPaWR.Stato stato = DiagrammiManager.GetStateDocument(this.DocumentInWorking.docNumber);
                    if (stato != null)
                    {

                        //Emanuela:Commentato il seguente if perchè se non ho visibilità sullo stato corrente non mi fa vedere nemmeno quelli successivi:sbagliato, quelli 
                        //successivi potrebbero essere visibili
                        //se il ruolo corrente ha visibilità sullo stato corrente allora carico gli stati successivi
                        //if (DiagrammiManager.IsRuoloAssociatoStatoDia(this.StateDiagram.SYSTEM_ID.ToString(), this.Role.idGruppo, stato.SYSTEM_ID.ToString()))
                        //{
                        this.LitActualStateDiagram.Text = stato.DESCRIZIONE;
                        //se il documento è in stato finale ma non è stato rimosso il blocco 
                        //su quest'ultimo allora non limito i diritti sul doc a solo lettura
                        if (stato.STATO_FINALE && string.IsNullOrEmpty(isRemoveFinalState))
                        {
                            this.DocumentInWorking.accessRights = "45";
                            this.EnableEditMode();
                            this.UpContainer.Update();
                            this.UpDocumentButtons.Update();
                        }
                        else
                        {
                            this.popolaComboBoxStatiSuccessivi(stato, this.StateDiagram);
                        }
                        //}
                    }
                    else
                    {
                        string st = DiagrammiManager.getStatoDocStorico(this.DocumentInWorking.docNumber);
                        this.LitActualStateDiagram.Text = st;
                        //ddl_statiSuccessivi.Enabled = false;
                        this.popolaComboBoxStatiSuccessivi(null, this.StateDiagram);
                    }

                    //Quando un documento è in sola lettura, non deve essere possibile cambiare lo stato
                    if (this.DocumentInWorking.accessRights == "45")
                        this.DocumentDdlStateDiagram.Enabled = false;

                    //if (this.DocumentInWorking != null && !string.IsNullOrEmpty(this.DocumentInWorking.systemId) && !string.IsNullOrEmpty(this.DocumentInWorking.dataScadenza) && this.DocumentInWorking.dataScadenza != "0" && this.DocumentInWorking.dataScadenza.IndexOf("1900") == -1)
                    //{
                    //    this.PnlDocumentStateDiagramDate.Visible = true;
                    //    this.PnlScadenza.Visible = true;
                    //    this.DocumentStateDiagramDataValue.Text = this.DocumentInWorking.dataScadenza;
                    //    this.DocumentStateDiagramDataValue.Enabled = false;
                    //}
                    if (this.Template != null && !string.IsNullOrEmpty(this.Template.SCADENZA) && this.Template.SCADENZA != "0")
                    {
                        this.PnlDocumentStateDiagramDate.Visible = true;
                        this.PnlScadenza.Visible = true;
                        this.DocumentStateDiagramDataValue.Text = this.DocumentInWorking.dataScadenza;

                        DateTime dataOdierna = System.DateTime.Now;
                        int scadenza = Convert.ToInt32(this.Template.SCADENZA);
                        DateTime dataCalcolata = dataOdierna.AddDays(scadenza);
                        this.PnlScadenza.Visible = true;
                        if (string.IsNullOrEmpty(this.DocumentInWorking.dataScadenza))
                        {
                            this.DocumentStateDiagramDataValue.Text = utils.formatDataDocsPa(dataCalcolata);

                            //this.DocumentInWorking.dataScadenza = Utils.formatDataDocsPa(dataCalcolata);
                        }
                        else
                        {
                            this.DocumentStateDiagramDataValue.Text = this.DocumentInWorking.dataScadenza.Substring(0, 10);
                            this.DocumentStateDiagramDataValue.ReadOnly = true;
                        }
                        this.UpPnlScadenza.Update();
                    }
                    //Quando un documento è di una tipologia non in esercizio, non deve essere possibile cambiare lo stato
                    if (this.Template.IN_ESERCIZIO.ToUpper().Equals("NO"))
                    {
                        this.DocumentDdlStateDiagram.SelectedIndex = 0;
                        this.DocumentDdlStateDiagram.Enabled = false;
                    }


                }

            }
        }

        private void ClearSessionProperties()
        {
            this.Sender = null;
            this.ListRecipients = null;
            this.ListRecipientsCC = null;
            this.Project = null;
            this.Template = null;
            this.StateDiagram = null;
            this.AbortDocument = false;
            this.MultipleSenders = null;
            this.EnableEdit = true;
            this.EditSender = false;
            //this.EditRecipients = false;
            //this.EditRecipientsCC = false;
            this.EditListRecipientsCC = null;
            this.EditListRecipients = null;
            this.EditMultipleSender = false;
            this.TempSender = null;
            this.NewIdCorr = null;
            this.NotOpenK1K2 = false;
            this.Parameter = null;
            this.NewSender = null;
            this.SenderDetail = null;
            this.ChooseMultipleCorrespondent = null;
            this.CheckOutContext = null;
            this.bypassaControlloRicevute = null;
            this.modificaDestDaChoiceTypeDelivery = false;
            // APPLET_G 
            this.CheckOutAppletContext = null;
            //Laura 19 Marzo
            ProjectManager.removeFascicoloSelezionatoFascRapida();
            ProjectManager.setProjectInSessionForRicFasc(String.Empty);
            //Giordano: accodo la mia pulizia:
            HeaderDocument.FlagCopyInArchive = "0";
            HttpContext.Current.Session["Answer.DocumentWIP"] = null;
            HttpContext.Current.Session.Remove("IsCosolidato");
            //Fine
        }

        protected void DocumentImgSenderAddressBook_Click(object sender, EventArgs e)
        {
            try
            {
                if (!string.IsNullOrEmpty(this.RblTypeProtocol.SelectedValue))
                {
                    if (this.RblTypeProtocol.SelectedValue.Equals("A"))
                    {
                        this.CallType = RubricaCallType.CALLTYPE_PROTO_IN;
                    }
                    if (this.RblTypeProtocol.SelectedValue.Equals("P"))
                    {
                        this.CallType = RubricaCallType.CALLTYPE_PROTO_OUT_MITT;
                    }
                    if (this.RblTypeProtocol.SelectedValue.Equals("I"))
                    {
                        this.CallType = RubricaCallType.CALLTYPE_PROTO_INT_MITT;
                    }
                }

                HttpContext.Current.Session["AddressBook.from"] = "D_" + this.RblTypeProtocol.SelectedValue + "_S_S";

                ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "UpPnlSender", "ajaxModalPopupAddressBook();", true);
            }
            catch (System.Exception ex)
            {
                UIManager.AdministrationManager.DiagnosticError(ex);
                return;
            }
        }

        protected void DocumentImgSearchProjects_Click(object sender, EventArgs e)
        {
            ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "pPnlBUttonsProject", "ajaxModalPopupSearchProject();", true);
        }

        protected void DocumentImgNewProject_Click(object sender, EventArgs e)
        {
            DocsPaWR.Registro reg = UserManager.getRegistroSelezionato(this);
            if (reg != null && reg.Sospeso)
            {
                ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('CheckRegisterSuspended', 'warning');} else {parent.ajaxDialogModal('CheckRegisterSuspended', 'warning');}", true);
                return;
            }

            if (this.TxtCodeProject.Text.Trim().Equals(""))
            {
                ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('CheckRequiredClassificationSchema', 'warning');} else {parent.ajaxDialogModal('CheckRequiredClassificationSchema', 'warning');}", true);
                return;
            }
            Fascicolo fasc = ProjectManager.getFascicoloSelezionatoFascRapida(this);
            if (fasc != null && fasc.systemID != null && (fasc.tipo.Equals("G") && !fasc.isFascicolazioneConsentita) && this.EnableBlockClassification)
            {
                if(fasc.isFascicolazioneConsentita)
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('WarningDocumentNoDocumentInsert', 'warning');} else {parent.ajaxDialogModal('WarningDocumentNoDocumentInsert', 'warning');}", true);
                else
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('WarningDocumentNoDocumentInsertClassification', 'warning');} else {parent.ajaxDialogModal('WarningDocumentNoDocumentInsertClassification', 'warning');}", true);

                return;
            }
            DocsPaWR.FascicolazioneClassificazione[] titolario = ProjectManager.fascicolazioneGetTitolario2(this, fasc.codice, false, fasc.idTitolario);
            if (titolario == null || titolario.Length < 1)
            {
                ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('WarningDocumentClassificationCodeInvalid', 'warning');} else {parent.ajaxDialogModal('WarningDocumentClassificationCodeInvalid', 'warning');}", true);
                return;
            }
            ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "pPnlBUttonsProject", "ajaxModalPopupNewProject();", true);
            //ClientScript.RegisterStartupScript(this.GetType(), "apreGestNew", "ApriFinestraNewFascNewTit('" + Server.UrlEncode(this.txt_codClass.Text) + "','ricercaFascicoli','fascNewFascicolo.aspx','" + profilazione + "','"+ddl_titolari.SelectedValue+"');", true);
            // ClientScript.RegisterStartupScript(this.GetType(), "apreGestNew", "ApriFinestraNewFascNewTit('" + Server.UrlEncode(this.txt_CodFascicolo.Text) + "','docProfilo','fascNewFascicolo.aspx','" + profilazione + "','" + getIdTitolario(this.txt_CodFascicolo.Text, listaTitolari) + "');", true);
        }

        protected void DocumentImgMultipleSenderAddressBook_Click(object sender, EventArgs e)
        {
            try
            {
                this.CallType = RubricaCallType.CALLTYPE_MITT_MULTIPLI;
                HttpContext.Current.Session["AddressBook.from"] = "D_" + this.RblTypeProtocol.SelectedValue + "_S_M";
                ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "UpPnlSender", "ajaxModalPopupAddressBook();", true);
            }
            catch (System.Exception ex)
            {
                UIManager.AdministrationManager.DiagnosticError(ex);
                return;
            }
        }

        protected void DocumentImgRecipientAddressBook_Click(object sender, EventArgs e)
        {
            try
            {
                if (!string.IsNullOrEmpty(this.RblTypeProtocol.SelectedValue))
                {
                    if (this.RblTypeProtocol.SelectedValue.Equals("A"))
                    {
                        this.CallType = RubricaCallType.CALLTYPE_PROTO_IN;
                    }
                    if (this.RblTypeProtocol.SelectedValue.Equals("P"))
                    {
                        this.CallType = RubricaCallType.CALLTYPE_PROTO_OUT;
                    }
                    if (this.RblTypeProtocol.SelectedValue.Equals("I"))
                    {
                        this.CallType = RubricaCallType.CALLTYPE_PROTO_INT_DEST;
                    }
                }

                HttpContext.Current.Session["AddressBook.from"] = "D_" + this.RblTypeProtocol.SelectedValue + "_R_M";
                ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "UpPnlSender", "ajaxModalPopupAddressBook();", true);
            }
            catch (System.Exception ex)
            {
                UIManager.AdministrationManager.DiagnosticError(ex);
                return;
            }
        }

        protected void DocumentImgGoAnswer_Click(object sender, EventArgs e)
        {
            SchedaDocumento docWIP = null;
            if (HttpContext.Current.Session["Answer.DocumentWIP"] != null) docWIP = HttpContext.Current.Session["Answer.DocumentWIP"] as SchedaDocumento;

            if (docWIP != null)
            {
                if (docWIP.rispostaDocumento != null && !string.IsNullOrEmpty(docWIP.rispostaDocumento.docNumber))
                {
                    SchedaDocumento doc = DocumentManager.getDocumentDetails(this, docWIP.rispostaDocumento.docNumber, docWIP.rispostaDocumento.docNumber);
                    DocumentManager.setSelectedRecord(doc);
                    HttpContext.Current.Session["Answer.DocumentWIP"] = null;
                }
                else
                {
                    SchedaDocumento doc = DocumentManager.getDocumentDetails(this, docWIP.docNumber, docWIP.docNumber);
                    DocumentManager.setSelectedRecord(doc);
                    HttpContext.Current.Session["Answer.DocumentWIP"] = null;
                }
            }
            else
            {
                if (this.DocumentInWorking.rispostaDocumento != null && !string.IsNullOrEmpty(this.DocumentInWorking.rispostaDocumento.docNumber))
                {
                    SchedaDocumento doc = DocumentManager.getDocumentDetails(this, this.DocumentInWorking.rispostaDocumento.docNumber, this.DocumentInWorking.rispostaDocumento.docNumber);
                    if (doc == null)
                    {
                        ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('CheckSmistaDocAcl', 'warning');} else {parent.ajaxDialogModal('CheckSmistaDocAcl', 'warning');}", true);
                        return;
                    }
                    else
                    {
                        DocumentManager.setSelectedRecord(doc);
                        HttpContext.Current.Session["Answer.DocumentWIP"] = null;
                    }
                }
                else
                {
                    SchedaDocumento doc = DocumentManager.getDocumentDetails(this, this.DocumentInWorking.docNumber, this.DocumentInWorking.docNumber);
                    DocumentManager.setSelectedRecord(doc);
                    HttpContext.Current.Session["Answer.DocumentWIP"] = null;
                }
            }

            SchedaDocumento docx = this.DocumentInWorking;
            List<Navigation.NavigationObject> navigationList = Navigation.NavigationUtils.GetNavigationList();
            Navigation.NavigationObject pre = navigationList.Last();
            Navigation.NavigationObject actualPage = new Navigation.NavigationObject();
            if (!string.IsNullOrEmpty(this.DocumentInWorking.systemId) && (pre.CodePage != Navigation.NavigationUtils.NamePage.DOCUMENT.ToString() || pre.IdObject != docx.systemId))
            {
                actualPage.IdObject = docx.systemId;
                actualPage.NamePage = Navigation.NavigationUtils.GetNamePage(Navigation.NavigationUtils.NamePage.DOCUMENT.ToString(), string.Empty);
                actualPage.Link = Navigation.NavigationUtils.GetLink(Navigation.NavigationUtils.NamePage.DOCUMENT.ToString(), true, this.Page);
                actualPage.CodePage = Navigation.NavigationUtils.NamePage.DOCUMENT.ToString();
                actualPage.Page = "DOCUMENT.ASPX";
                navigationList.Add(actualPage);
                Navigation.NavigationUtils.SetNavigationList(navigationList);
            }

            Response.Redirect("Document.aspx");
        }

        private void setParoleChiavi(DocsPaWR.DocumentoParolaChiave[] listaParoleChiavi)
        {

            this.ListKeywords.Attributes.Clear();
            this.ListKeywords.Items.Clear();


            if (listaParoleChiavi != null)
            {
                if (listaParoleChiavi.Length > 0)
                {
                    for (int i = 0; i < listaParoleChiavi.Length; i++)
                    {
                        this.ListKeywords.Items.Add(listaParoleChiavi[i].descrizione);
                        this.ListKeywords.Items[i].Value = listaParoleChiavi[i].systemId;
                    }
                }
            }
        }

        protected void PopulateRecord()
        {
            this.PopulateRecord(false);
        }

        protected void PopulateRecord(bool isRepeatingDocument)
        {
            if (!string.IsNullOrEmpty(System.Configuration.ConfigurationManager.AppSettings[WebConfigKeys.LITEDOCUMENT.ToString()]) && bool.Parse(System.Configuration.ConfigurationManager.AppSettings[WebConfigKeys.LITEDOCUMENT.ToString()]))
            {
                this.PnlDdlOggettario.Visible = true;
                this.LoadOggettarioLite();
                this.DdlOggettario.Enabled = false;
            }

            if (!string.IsNullOrEmpty(this.DocumentInWorking.oggetto.descrizione))
            {
                this.TxtObject.Text = this.DocumentInWorking.oggetto.descrizione;
            }

            if (!string.IsNullOrEmpty(this.DocumentInWorking.privato) && this.DocumentInWorking.privato.Equals("1"))
            {
                this.DocumentCheckPrivate.Checked = true;
            }

            if (this.PnlKeywpords.Visible && this.DocumentInWorking.paroleChiave != null)
            {
                SchedaDocumento doc = DocumentManager.getSelectedRecord();
                setParoleChiavi(doc.paroleChiave);
            }

            switch (this.DocumentInWorking.tipoProto)
            {
                case "A":
                    this.InitializeAddressBooks();
                    this.PopulateDDLRegistry(this.Role);
                    if (this.DocumentInWorking.protocollo != null && ((ProtocolloEntrata)this.DocumentInWorking.protocollo).mittente != null && !isRepeatingDocument)
                    {
                        this.Sender = ((ProtocolloEntrata)this.DocumentInWorking.protocollo).mittente;
                        if (!string.IsNullOrEmpty(((ProtocolloEntrata)this.DocumentInWorking.protocollo).mittente.systemId)) this.IdSender.Value = ((ProtocolloEntrata)this.DocumentInWorking.protocollo).mittente.systemId;
                        if (!string.IsNullOrEmpty(((ProtocolloEntrata)this.DocumentInWorking.protocollo).mittente.codiceRubrica)) this.TxtCodeSender.Text = ((ProtocolloEntrata)this.DocumentInWorking.protocollo).mittente.codiceRubrica;
                        if (!string.IsNullOrEmpty(((ProtocolloEntrata)this.DocumentInWorking.protocollo).mittente.descrizione)) this.TxtDescriptionSender.Text = ((ProtocolloEntrata)this.DocumentInWorking.protocollo).mittente.descrizione;
                    }

                    if (this.DocumentInWorking.protocollo != null && ((ProtocolloEntrata)this.DocumentInWorking.protocollo) != null)
                    {
                        this.TxtProtocolSender.Text = ((ProtocolloEntrata)this.DocumentInWorking.protocollo).descrizioneProtocolloMittente;
                        if (this.DocumentInWorking.interop == "S" || this.DocumentInWorking.interop == "I")
                        {
                            this.TxtProtocolSender.ReadOnly = true;
                        }

                    }
                    if (this.DocumentInWorking.protocollo != null && ((ProtocolloEntrata)this.DocumentInWorking.protocollo) != null)
                    {
                        this.TxtDateProtocol.Text = ((ProtocolloEntrata)this.DocumentInWorking.protocollo).dataProtocolloMittente;
                        if (this.DocumentInWorking.interop == "S" || this.DocumentInWorking.interop == "I")
                        {
                            this.TxtDateProtocol.ReadOnly = true;
                        }
                    }

                    if (this.DocumentInWorking.documenti != null && this.DocumentInWorking.documenti.Length > 0)
                    {
                        string dataArrivoTemp = this.DocumentInWorking.documenti[0].dataArrivo;
                        if (!string.IsNullOrEmpty(dataArrivoTemp))
                        {
                            this.TxtArrivalDate.Text = utils.dateLength(dataArrivoTemp);
                            string oraPerv = utils.getTime(dataArrivoTemp);
                            if (oraPerv == "0.00.00")
                                this.TxtTimeOfArrival.Text = string.Empty;
                            else
                                this.TxtTimeOfArrival.Text = oraPerv;
                        }
                        if (this.DocumentInWorking.interop == "S" || this.DocumentInWorking.interop == "I"
                            || this.DocumentInWorking.interop == "P" || this.DocumentInWorking.interop == "E")
                        {
                            this.TxtArrivalDate.ReadOnly = true;
                            this.TxtTimeOfArrival.ReadOnly = true;
                        }
                    }

                    this.setListBoxMittentiMultipli();
                    this.DocumentBtnPrepared.Visible = false;
                    this.DocumentBtnRemove.Visible = false;
                    this.DocumentBtnSend.Visible = false;
                    this.DocumentBtnTransmit.Visible = false;
                    if (!string.IsNullOrEmpty(this.DocumentInWorking.systemId))
                    {
                        this.DocumentBtnConsolid.Enabled = true;
                    }
                    this.DocumentBtnPrint.Enabled = false;

                    if (MeansSendingRequired && !string.IsNullOrEmpty(this.DocumentInWorking.mezzoSpedizione) && !this.DocumentInWorking.mezzoSpedizione.Equals("0"))
                    {
                        this.DdlMeansSending.SelectedValue = this.DocumentInWorking.mezzoSpedizione;
                    }

                    if (!string.IsNullOrEmpty(this.DocumentInWorking.interop))
                        this.DdlMeansSending.Enabled = false;

                    if (this.DocumentInWorking.protocollo != null && string.IsNullOrEmpty(this.DocumentInWorking.protocollo.segnatura))
                    {
                        this.DocumentBtnUndo.Enabled = false;
                        this.DocumentBtnRepeat.Enabled = false;
                        this.DocumentBtnConsolid.Enabled = false;

                        if (this.DocumentInWorking.protocollo.daProtocollare != null && this.DocumentInWorking.protocollo.daProtocollare.Equals("1"))
                        {
                            this.DocumentBtnAdL.Enabled = true;
                            this.DocumentBtnAdLRole.Enabled = true;
                            this.DocumentBtnUndo.Enabled = true;
                            this.DocumentBtnPrint.Enabled = true;
                            this.DocumentImgPrintEnvelopesRecipients.Enabled = true;
                        }
                        else
                        {
                            this.DocumentBtnAdL.Enabled = false;
                            this.DocumentBtnAdLRole.Enabled = false;
                            this.DocumentImgPrintEnvelopesRecipients.Enabled = false;
                        }

                        this.DocumentBntRecord.Enabled = true;
                        this.DocumentImgAnswerWithProtocol.Enabled = false;
                        this.DocumentImgAnswerWithDocument.Enabled = false;
                        this.DocumentImgViewDocumentExists.Enabled = true;
                        if (string.IsNullOrEmpty(this.DocumentInWorking.systemId))
                        {
                            this.DocumentBtnSave.Enabled = false;
                        }
                        else
                        {
                            this.DocumentBtnSave.Enabled = true;
                        }
                    }
                    else
                    {
                        if (!string.IsNullOrEmpty(this.DocumentInWorking.systemId))
                        {
                            this.DocumentBtnUndo.Enabled = true;
                            this.DocumentBtnRepeat.Enabled = true;
                            this.DocumentBtnAdL.Enabled = true;
                            this.DocumentBtnAdLRole.Enabled = true;
                            this.DocumentBtnSave.Enabled = true;
                            this.DocumentBtnPrint.Enabled = true;
                            this.DocumentImgViewDocumentExists.Enabled = false;
                        }
                        else
                        {
                            this.DocumentBtnUndo.Enabled = false;
                            this.DocumentBtnRepeat.Enabled = false;
                            this.DocumentBtnAdL.Enabled = false;
                            this.DocumentBtnAdLRole.Enabled = false;
                            this.DocumentBtnSave.Enabled = false;
                            this.DocumentBtnPrint.Enabled = true;
                            this.DocumentImgViewDocumentExists.Enabled = true;

                        }
                        if (this.DocumentInWorking.protocollo != null && !string.IsNullOrEmpty(this.DocumentInWorking.protocollo.segnatura))
                        {
                            this.DocumentBntRecord.Enabled = false;
                        }
                        else
                        {
                            this.DocumentBntRecord.Enabled = true;
                        }


                    }

                    break;
                case "P":
                    this.InitializeAddressBooks();
                    this.PopulateDDLRegistry(this.Role);
                    if (this.DocumentInWorking.protocollo != null && ((ProtocolloUscita)this.DocumentInWorking.protocollo).mittente != null && !isRepeatingDocument)
                    {
                        this.Sender = ((ProtocolloUscita)this.DocumentInWorking.protocollo).mittente;
                        if (!string.IsNullOrEmpty(((ProtocolloUscita)this.DocumentInWorking.protocollo).mittente.systemId)) this.IdSender.Value = ((ProtocolloUscita)this.DocumentInWorking.protocollo).mittente.systemId;
                        if (!string.IsNullOrEmpty(((ProtocolloUscita)this.DocumentInWorking.protocollo).mittente.codiceRubrica)) this.TxtCodeSender.Text = ((ProtocolloUscita)this.DocumentInWorking.protocollo).mittente.codiceRubrica;
                        if (!string.IsNullOrEmpty(((ProtocolloUscita)this.DocumentInWorking.protocollo).mittente.descrizione)) this.TxtDescriptionSender.Text = ((ProtocolloUscita)this.DocumentInWorking.protocollo).mittente.descrizione;
                    }

                    this.SetListRecipientsOutProtocol();
                    this.DocumentBtnPrepared.Visible = false;
                    this.DocumentBtnRemove.Visible = false;
                    this.DocumentBtnSend.Visible = true;
                    this.DocumentBtnTransmit.Visible = false;
                    if (!string.IsNullOrEmpty(this.DocumentInWorking.systemId))
                    {
                        this.DocumentBtnConsolid.Enabled = true;
                    }
                    this.DocumentImgPrintEnvelopesRecipients.Enabled = true;
                    if (this.DocumentInWorking.protocollo != null && string.IsNullOrEmpty(this.DocumentInWorking.protocollo.segnatura))
                    {
                        this.DocumentBtnSend.Enabled = false;
                        this.DocumentBtnUndo.Enabled = false;
                        this.DocumentBtnPrint.Enabled = false;
                        this.DocumentBtnConsolid.Enabled = false;

                        this.DocumentBtnRepeat.Enabled = false;
                        if (this.DocumentInWorking.protocollo.daProtocollare != null && this.DocumentInWorking.protocollo.daProtocollare.Equals("1"))
                        {
                            this.DocumentBtnAdL.Enabled = true;
                            this.DocumentBtnAdLRole.Enabled = true;
                            this.DocumentBtnUndo.Enabled = true;
                            this.DocumentBtnPrint.Enabled = true;
                            this.DocumentImgPrintEnvelopesRecipients.Enabled = true;
                        }
                        else
                        {
                            this.DocumentBtnAdL.Enabled = false;
                            this.DocumentBtnAdLRole.Enabled = false;
                            this.DocumentImgPrintEnvelopesRecipients.Enabled = false;
                        }
                        this.DocumentBntRecord.Enabled = true;
                        this.DocumentImgAnswerWithProtocol.Enabled = false;
                        this.DocumentImgAnswerWithDocument.Enabled = false;
                        if (string.IsNullOrEmpty(this.DocumentInWorking.systemId))
                        {
                            this.DocumentBtnSave.Enabled = false;
                        }
                        else
                        {
                            this.DocumentBtnSave.Enabled = true;
                        }

                        if (this.IsForwarded)
                        {
                            this.DocumentBntRecord.Enabled = true;
                            this.DocumentBtnSave.Enabled = true;
                            this.DocumentBtnAdL.Enabled = false;
                            this.DocumentBtnAdLRole.Enabled = false;
                            this.DocumentBtnPrint.Enabled = false;
                            this.DocumentBtnUndo.Enabled = false;
                        }
                    }
                    else
                    {
                        if (!string.IsNullOrEmpty(this.DocumentInWorking.systemId))
                        {
                            this.DocumentBtnSend.Enabled = true;
                            this.DocumentBtnUndo.Enabled = true;
                            this.DocumentBtnConsolid.Enabled = true;
                            this.DocumentBtnRepeat.Enabled = true;
                            this.DocumentBtnAdL.Enabled = true;
                            this.DocumentBtnAdLRole.Enabled = true;
                            this.DocumentBtnSave.Enabled = true;
                            this.DocumentBtnPrint.Enabled = true;
                        }
                        else
                        {
                            this.DocumentBtnSend.Enabled = false;
                            this.DocumentBtnUndo.Enabled = false;
                            this.DocumentBtnConsolid.Enabled = false;
                            this.DocumentBtnRepeat.Enabled = false;
                            this.DocumentBtnAdL.Enabled = false;
                            this.DocumentBtnAdLRole.Enabled = false;
                            this.DocumentBtnSave.Enabled = false;
                            this.DocumentBtnPrint.Enabled = false;
                            if (this.EnableSenderDefault && !isRepeatingDocument)
                            {
                                this.SetSenderDefault();
                            }

                        }
                        if (this.DocumentInWorking.protocollo != null && !string.IsNullOrEmpty(this.DocumentInWorking.protocollo.segnatura))
                        {
                            this.DocumentBntRecord.Enabled = false;
                        }
                        else
                        {
                            this.DocumentBntRecord.Enabled = true;
                        }
                    }
                    break;
                case "I":
                    this.InitializeAddressBooks();
                    this.PopulateDDLRegistry(this.Role);
                    if (this.DocumentInWorking.protocollo != null && ((ProtocolloInterno)this.DocumentInWorking.protocollo).mittente != null && !isRepeatingDocument)
                    {
                        this.Sender = ((ProtocolloInterno)this.DocumentInWorking.protocollo).mittente;
                        if (!string.IsNullOrEmpty(((ProtocolloInterno)this.DocumentInWorking.protocollo).mittente.systemId)) this.IdSender.Value = ((ProtocolloInterno)this.DocumentInWorking.protocollo).mittente.systemId;
                        if (!string.IsNullOrEmpty(((ProtocolloInterno)this.DocumentInWorking.protocollo).mittente.codiceRubrica)) this.TxtCodeSender.Text = ((ProtocolloInterno)this.DocumentInWorking.protocollo).mittente.codiceRubrica;
                        if (!string.IsNullOrEmpty(((ProtocolloInterno)this.DocumentInWorking.protocollo).mittente.descrizione)) this.TxtDescriptionSender.Text = ((ProtocolloInterno)this.DocumentInWorking.protocollo).mittente.descrizione;
                    }

                    this.SetListRecipientsInternalProtocol();
                    this.DocumentBtnPrepared.Visible = false;
                    this.DocumentBtnRemove.Visible = false;
                    this.DocumentBtnSend.Visible = false;
                    this.DocumentBtnTransmit.Visible = true;
                    if (!string.IsNullOrEmpty(this.DocumentInWorking.systemId))
                    {
                        this.DocumentBtnConsolid.Enabled = true;
                    }
                    this.DocumentImgPrintEnvelopesRecipients.Enabled = true;
                    if (this.DocumentInWorking.protocollo != null && string.IsNullOrEmpty(this.DocumentInWorking.protocollo.segnatura))
                    {
                        this.DocumentBtnTransmit.Enabled = false;
                        this.DocumentBtnUndo.Enabled = false;
                        this.DocumentBtnConsolid.Enabled = false;
                        this.DocumentBtnRepeat.Enabled = false;
                        this.DocumentBtnPrint.Enabled = false;
                        if (this.DocumentInWorking.protocollo.daProtocollare != null && this.DocumentInWorking.protocollo.daProtocollare.Equals("1"))
                        {
                            this.DocumentBtnAdL.Enabled = true;
                            this.DocumentBtnAdLRole.Enabled = true;
                            this.DocumentBtnUndo.Enabled = true;
                            this.DocumentBtnPrint.Enabled = true;
                            this.DocumentImgPrintEnvelopesRecipients.Enabled = true;
                        }
                        else
                        {
                            this.DocumentBtnAdL.Enabled = false;
                            this.DocumentBtnAdLRole.Enabled = false;
                            this.DocumentImgPrintEnvelopesRecipients.Enabled = false;
                        }
                        this.DocumentBntRecord.Enabled = true;
                        this.DocumentImgAnswerWithProtocol.Enabled = false;
                        this.DocumentImgAnswerWithDocument.Enabled = false;
                        if (string.IsNullOrEmpty(this.DocumentInWorking.systemId))
                        {
                            this.DocumentBtnSave.Enabled = false;
                        }
                        else
                        {
                            this.DocumentBtnSave.Enabled = true;
                        }
                    }
                    else
                    {
                        if (!string.IsNullOrEmpty(this.DocumentInWorking.systemId))
                        {
                            this.DocumentBtnTransmit.Enabled = true;
                            this.DocumentBtnUndo.Enabled = true;
                            this.DocumentBtnConsolid.Enabled = true;
                            this.DocumentBtnRepeat.Enabled = true;
                            this.DocumentBtnAdL.Enabled = true;
                            this.DocumentBtnAdLRole.Enabled = true;
                            this.DocumentBtnSave.Enabled = true;
                            this.DocumentBtnPrint.Enabled = true;
                        }
                        else
                        {
                            this.DocumentBtnTransmit.Enabled = false;
                            this.DocumentBtnUndo.Enabled = false;
                            this.DocumentBtnConsolid.Enabled = false;
                            this.DocumentBtnRepeat.Enabled = false;
                            this.DocumentBtnAdL.Enabled = false;
                            this.DocumentBtnAdLRole.Enabled = false;
                            this.DocumentBtnSave.Enabled = false;
                            this.DocumentBtnPrint.Enabled = false;
                            if (this.EnableSenderDefault)
                            {
                                this.SetSenderDefault();
                            }
                        }

                        if (this.DocumentInWorking.protocollo != null && !string.IsNullOrEmpty(this.DocumentInWorking.protocollo.segnatura))
                        {
                            this.DocumentBntRecord.Enabled = false;
                        }
                        else
                        {
                            this.DocumentBntRecord.Enabled = true;
                        }
                    }

                    break;
                case "G":
                    this.DocumentBtnSave.Enabled = true;
                    this.TxtObject.Text = this.DocumentInWorking.oggetto.descrizione;
                    if (!string.IsNullOrEmpty(this.DocumentInWorking.personale) && this.DocumentInWorking.personale.Equals("1"))
                    {
                        this.DocumentChekUser.Checked = true;
                    }
                    if (this.EnableForward)
                    {
                        this.DocumentBtnForward.Enabled = true;
                    }
                    if (!string.IsNullOrEmpty(this.DocumentInWorking.systemId))
                    {
                        this.DocumentBtnConsolid.Enabled = true;
                    }
                    break;
            }

            if (this.DocumentInWorking != null && !string.IsNullOrEmpty(this.DocumentInWorking.systemId) && this.DocumentInWorking.ConsolidationState != null && this.DocumentInWorking.ConsolidationState.State != DocumentConsolidationStateEnum.None)
            {
                this.PnlConsolidate.Visible = true;
            }

            if (this.DocumentInWorking.rispostaDocumento != null && (!string.IsNullOrEmpty(this.DocumentInWorking.rispostaDocumento.segnatura) || !string.IsNullOrEmpty(this.DocumentInWorking.rispostaDocumento.docNumber)))
            {
                this.DocumentImgGoAnswer.Visible = true;

                if (!string.IsNullOrEmpty(this.DocumentInWorking.rispostaDocumento.segnatura))
                {
                    this.litAnswerRif.Text = this.DocumentInWorking.rispostaDocumento.segnatura;
                }
                else
                {
                    this.litAnswerRif.Text = this.DocumentInWorking.rispostaDocumento.docNumber;
                }

                string language = UIManager.UserManager.GetUserLanguage();
                this.DocumentLblAnswer.ToolTip = "<div align='left'>" + Utils.Languages.GetLabelFromCode("DocumentLblAnswer", language) + " " + this.litAnswerRif.Text.ToString() + "</div>";
                this.DocumentImgGoAnswer.ToolTip = "<div align='left'>" + Utils.Languages.GetLabelFromCode("DocumentImgGoAnswer", language) + "</div>";
                this.DocumentImgAnswerSearch.ToolTip = Utils.Languages.GetLabelFromCode("DocumentImgAnswerEdit", language);
                this.plcAnswerRif.Visible = true;
                this.UpPnlResponseProtocol.Update();
                this.UpPnlResponse.Update();


            }

            this.UpDocumentButtons.Update();
            this.FetchNote(); // note

            if (!string.IsNullOrEmpty(Utils.InitConfigurationKeys.GetValue("0", DBKeys.FE_FASC_PRIMARIA.ToString())) && Utils.InitConfigurationKeys.GetValue("0", DBKeys.FE_FASC_PRIMARIA.ToString()).Equals("1"))
            {
                this.getLabelFascPrim();
            }
        }

        private void SetListRecipientsOutProtocol()
        {
            if (this.DocumentInWorking.protocollo != null)
            {
                //Valido per i documenti in Partenza
                DocsPaWR.Corrispondente destinatario;
                if ((((DocsPaWR.ProtocolloUscita)this.DocumentInWorking.protocollo).destinatari != null) && (((DocsPaWR.ProtocolloUscita)this.DocumentInWorking.protocollo).destinatari.Length > 0))
                {
                    ((DocsPaWR.ProtocolloUscita)this.DocumentInWorking.protocollo).destinatari = ((DocsPaWR.ProtocolloUscita)this.DocumentInWorking.protocollo).destinatari.OrderBy(d => d.descrizione).ToArray<Corrispondente>();
                    //elenco canali preferenziale /destinatario proto
                    System.Collections.Generic.List<Corrispondente> listPrefChannelDest = new System.Collections.Generic.List<Corrispondente>();
                    if (this.DocumentInWorking.systemId != null)
                        listPrefChannelDest = UserManager.GetPrefChannelAllDest(this.DocumentInWorking.systemId, "D");
                    for (int i = 0; i < ((DocsPaWR.ProtocolloUscita)this.DocumentInWorking.protocollo).destinatari.Length; i++)
                    {
                        destinatario = (((DocsPaWR.ProtocolloUscita)this.DocumentInWorking.protocollo).destinatari[i]);
                        string editMode = Request.QueryString["editMode"];
                        string annullato = string.Empty;
                        bool rtn = CtrlIfDestWithRicevuta_NEW(destinatario, out annullato);
                        if (rtn)
                        {
                            string canaleRef = string.Empty;
                            if (destinatario != null && destinatario.canalePref != null)
                            {
                                // Modifica Lembo: non cerco più il canale originale, ma prendo quello che ha il corrispondente
                                Canale canaleOrig = destinatario.canalePref;

                                if (canaleOrig != null && canaleOrig.tipoCanale != null)
                                {
                                    if (canaleOrig.tipoCanale.ToUpper().Equals("MAIL") ||
                                        canaleOrig.tipoCanale.ToUpper().Equals("INTEROPERABILITA") ||
                                        canaleOrig.tipoCanale.ToUpper().Equals("INTEROPERABILITAPITRE"))
                                    {
                                        canaleRef = "(" + canaleOrig.tipoCanale + ")  ";
                                    }
                                    else
                                        if (canaleOrig.tipoCanale.ToUpper().Equals(SimplifiedInteroperabilityManager.SimplifiedInteroperabilityId))
                                            canaleRef = String.Format("({0})", SimplifiedInteroperabilityManager.ChannelDescription);
                                        else
                                            canaleRef = "  ";
                                }
                                else if (canaleOrig != null && canaleOrig.typeId != null)
                                {
                                    if (canaleOrig.typeId.ToUpper().Equals("MAIL") ||
                                        canaleOrig.typeId.ToUpper().Equals("INTEROPERABILITA") ||
                                        canaleOrig.typeId.ToUpper().Equals("INTEROPERABILITAPITRE"))
                                    {
                                        canaleRef = "(" + canaleOrig.typeId + ")  ";
                                    }
                                    else
                                        if (canaleOrig.typeId.ToUpper().Equals(SimplifiedInteroperabilityManager.SimplifiedInteroperabilityId))
                                            canaleRef = String.Format("({0})", SimplifiedInteroperabilityManager.ChannelDescription);
                                        else
                                            canaleRef = "  ";
                                }
                                else
                                {
                                    canaleRef = "  ";
                                }
                            }
                            if (annullato == string.Empty)
                                this.ListBoxRecipient.Items.Add(new StringBuilder().AppendFormat("(*){0}{1}", canaleRef, AddressBookManager.getDecrizioneCorrispondenteSemplice(destinatario)).ToString());
                            else if (annullato == "1")
                                this.ListBoxRecipient.Items.Add(new StringBuilder().AppendFormat("(*)(A){0}{1}", canaleRef, AddressBookManager.getDecrizioneCorrispondenteSemplice(destinatario)).ToString());
                            else if (annullato == "E")
                                this.ListBoxRecipient.Items.Add(new StringBuilder().AppendFormat("(!){0}{1}", canaleRef, AddressBookManager.getDecrizioneCorrispondenteSemplice(destinatario)).ToString());

                        }
                        else
                        {
                            StringBuilder formatDestinatario = new StringBuilder();
                            if (destinatario != null && destinatario.canalePref != null)
                            {
                                // Modifica Lembo: non cerco più il canale originale, ma prendo quello che ha il corrispondente
                                Canale canaleOrig = destinatario.canalePref;

                                if (canaleOrig != null && canaleOrig.tipoCanale != null)
                                {
                                    if (canaleOrig.tipoCanale.ToUpper().Equals("MAIL") ||
                                        canaleOrig.tipoCanale.ToUpper().Equals("INTEROPERABILITA") ||
                                        canaleOrig.tipoCanale.ToUpper().Equals("INTEROPERABILITAPITRE"))
                                    {

                                        formatDestinatario.AppendFormat("({0})  {1}", canaleOrig.tipoCanale, AddressBookManager.getDecrizioneCorrispondenteSemplice(destinatario));
                                    }
                                    else
                                        if (canaleOrig.tipoCanale.ToUpper().Equals(SimplifiedInteroperabilityManager.SimplifiedInteroperabilityId))
                                            formatDestinatario.AppendFormat("({0})  {1}", SimplifiedInteroperabilityManager.ChannelDescription, AddressBookManager.getDecrizioneCorrispondenteSemplice(destinatario));
                                }
                                else if (canaleOrig != null && canaleOrig.typeId != null)
                                {
                                    if (canaleOrig.typeId.ToUpper().Equals("MAIL") ||
                                        canaleOrig.typeId.ToUpper().Equals("INTEROPERABILITA") ||
                                        canaleOrig.typeId.ToUpper().Equals("INTEROPERABILITAPITRE"))
                                    {

                                        formatDestinatario.AppendFormat("({0})  {1}", canaleOrig.typeId, AddressBookManager.getDecrizioneCorrispondenteSemplice(destinatario));
                                    }
                                    else
                                        if (canaleOrig.typeId.ToUpper().Equals(SimplifiedInteroperabilityManager.SimplifiedInteroperabilityId))
                                            formatDestinatario.AppendFormat("({0})  {1}", SimplifiedInteroperabilityManager.ChannelDescription, AddressBookManager.getDecrizioneCorrispondenteSemplice(destinatario));
                                }
                            }
                            if (string.IsNullOrEmpty(formatDestinatario.ToString()))
                                formatDestinatario.AppendFormat(AddressBookManager.getDecrizioneCorrispondenteSemplice(destinatario));
                            this.ListBoxRecipient.Items.Add(formatDestinatario.ToString());
                        }

                        this.ListBoxRecipient.Items[i].Value = destinatario.codiceRubrica;
                    }
                    this.ListRecipients = (((DocsPaWR.ProtocolloUscita)this.DocumentInWorking.protocollo).destinatari).ToList<Corrispondente>();
                }

                if ((((DocsPaWR.ProtocolloUscita)this.DocumentInWorking.protocollo).destinatariConoscenza != null) && (((DocsPaWR.ProtocolloUscita)this.DocumentInWorking.protocollo).destinatariConoscenza.Length > 0))
                {
                    ((DocsPaWR.ProtocolloUscita)this.DocumentInWorking.protocollo).destinatariConoscenza = ((DocsPaWR.ProtocolloUscita)this.DocumentInWorking.protocollo).destinatariConoscenza.OrderBy(d => d.descrizione).ToArray<Corrispondente>();
                    //elenco canali preferenziale /destinatario proto
                    System.Collections.Generic.List<Corrispondente> listPrefChannelDestCC = new System.Collections.Generic.List<Corrispondente>();
                    if (this.DocumentInWorking.systemId != null)
                        listPrefChannelDestCC = UserManager.GetPrefChannelAllDest(this.DocumentInWorking.systemId, "C");
                    for (int i = 0; i < ((DocsPaWR.ProtocolloUscita)this.DocumentInWorking.protocollo).destinatariConoscenza.Length; i++)
                    {
                        destinatario = (((DocsPaWR.ProtocolloUscita)this.DocumentInWorking.protocollo).destinatariConoscenza[i]);
                        string annullato = string.Empty;
                        bool rtn = CtrlIfDestWithRicevuta_NEW(destinatario, out annullato);
                        if (rtn)
                        {
                            string canaleRef = string.Empty;
                            if (destinatario != null && destinatario.canalePref != null)
                            {
                                // Modifica Lembo: non cerco più il canale originale, ma prendo quello che ha il corrispondente
                                Canale canaleOrig = destinatario.canalePref;

                                if (canaleOrig != null && canaleOrig.tipoCanale != null)
                                {
                                    if (canaleOrig.tipoCanale.ToUpper().Equals("MAIL") ||
                                        canaleOrig.tipoCanale.ToUpper().Equals("INTEROPERABILITA") ||
                                        canaleOrig.tipoCanale.ToUpper().Equals("INTEROPERABILITAPITRE"))
                                    {
                                        canaleRef = "(" + canaleOrig.tipoCanale + ")  ";
                                    }
                                    else
                                        if (canaleOrig.tipoCanale.ToUpper().Equals(SimplifiedInteroperabilityManager.SimplifiedInteroperabilityId))
                                            canaleRef = String.Format("({0})", SimplifiedInteroperabilityManager.ChannelDescription);
                                        else
                                            canaleRef = "  ";
                                }
                                else if (canaleOrig != null && canaleOrig.typeId != null)
                                {
                                    if (canaleOrig.typeId.ToUpper().Equals("MAIL") ||
                                        canaleOrig.typeId.ToUpper().Equals("INTEROPERABILITA") ||
                                        canaleOrig.typeId.ToUpper().Equals("INTEROPERABILITAPITRE"))
                                    {
                                        canaleRef = "(" + canaleOrig.typeId + ")  ";
                                    }
                                    else
                                        if (canaleOrig.typeId.ToUpper().Equals(SimplifiedInteroperabilityManager.SimplifiedInteroperabilityId))
                                            canaleRef = String.Format("({0})", SimplifiedInteroperabilityManager.ChannelDescription);
                                        else
                                            canaleRef = "  ";
                                }
                                else
                                {
                                    canaleRef = "  ";
                                }
                            }
                            else
                            {
                                canaleRef = "  ";
                            }
                            if (annullato == string.Empty)
                                this.ListBoxRecipientCC.Items.Add(new StringBuilder().AppendFormat("(*){0}{1}", canaleRef, AddressBookManager.getDecrizioneCorrispondenteSemplice(destinatario)).ToString());
                            else if (annullato == "1")
                                this.ListBoxRecipientCC.Items.Add(new StringBuilder().AppendFormat("(*)(A){0}{1}", canaleRef, AddressBookManager.getDecrizioneCorrispondenteSemplice(destinatario)).ToString());
                            else if (annullato == "E")
                                this.ListBoxRecipientCC.Items.Add(new StringBuilder().AppendFormat("(!){0}{1}", canaleRef, AddressBookManager.getDecrizioneCorrispondenteSemplice(destinatario)).ToString());

                        }
                        else
                        {
                            StringBuilder formatDestinatario = new StringBuilder();
                            if (destinatario != null && destinatario.canalePref != null)
                            {
                                // Modifica Lembo: non cerco più il canale originale, ma prendo quello che ha il corrispondente
                                Canale canaleOrig = destinatario.canalePref;

                                if (canaleOrig != null && canaleOrig.tipoCanale != null)
                                {
                                    if (canaleOrig.tipoCanale.ToUpper().Equals("MAIL") ||
                                        canaleOrig.tipoCanale.ToUpper().Equals("INTEROPERABILITA") ||
                                        canaleOrig.tipoCanale.ToUpper().Equals("INTEROPERABILITAPITRE"))
                                    {

                                        formatDestinatario.AppendFormat("({0})  {1}", canaleOrig.tipoCanale, AddressBookManager.getDecrizioneCorrispondenteSemplice(destinatario));
                                    }
                                    else
                                        if (canaleOrig.tipoCanale.ToUpper().Equals(SimplifiedInteroperabilityManager.SimplifiedInteroperabilityId))
                                            formatDestinatario.AppendFormat("({0})  {1}", SimplifiedInteroperabilityManager.ChannelDescription, AddressBookManager.getDecrizioneCorrispondenteSemplice(destinatario));
                                }
                                else if (canaleOrig != null && canaleOrig.typeId != null)
                                {
                                    if (canaleOrig.typeId.ToUpper().Equals("MAIL") ||
                                        canaleOrig.typeId.ToUpper().Equals("INTEROPERABILITA") ||
                                        canaleOrig.typeId.ToUpper().Equals("INTEROPERABILITAPITRE"))
                                    {

                                        formatDestinatario.AppendFormat("({0})  {1}", canaleOrig.typeId, AddressBookManager.getDecrizioneCorrispondenteSemplice(destinatario));
                                    }
                                    else
                                        if (canaleOrig.typeId.ToUpper().Equals(SimplifiedInteroperabilityManager.SimplifiedInteroperabilityId))
                                            formatDestinatario.AppendFormat("({0})  {1}", SimplifiedInteroperabilityManager.ChannelDescription, AddressBookManager.getDecrizioneCorrispondenteSemplice(destinatario));
                                }
                            }
                            if (string.IsNullOrEmpty(formatDestinatario.ToString()))
                                formatDestinatario.AppendFormat(AddressBookManager.getDecrizioneCorrispondenteSemplice(destinatario));
                            this.ListBoxRecipientCC.Items.Add(formatDestinatario.ToString());
                        }
                        this.ListBoxRecipientCC.Items[i].Value = destinatario.codiceRubrica;
                    }
                    this.ListRecipientsCC = (((DocsPaWR.ProtocolloUscita)this.DocumentInWorking.protocollo).destinatariConoscenza).ToList<Corrispondente>();
                }
            }
            this.bypassaControlloRicevute = null;
        }

        private void SetListRecipientsOutProtocolFromAddressBook()
        {
            this.ListBoxRecipient.Items.Clear();

            //Valido per i documenti in Partenza
            DocsPaWR.Corrispondente destinatario;
            if (this.ListRecipients != null && this.ListRecipients.Count > 0)
            {
                //elenco canali preferenziale /destinatario proto
                System.Collections.Generic.List<Corrispondente> listPrefChannelDest = new System.Collections.Generic.List<Corrispondente>();
                if (this.DocumentInWorking.systemId != null)
                {
                    listPrefChannelDest = UserManager.GetPrefChannelAllDest(this.DocumentInWorking.systemId, "D");
                }
                for (int i = 0; i < this.ListRecipients.Count; i++)
                {
                    destinatario = this.ListRecipients[i];
                    string annullato = string.Empty;
                    bool rtn = CtrlIfDestWithRicevuta_NEW(destinatario, out annullato);
                    if (rtn)
                    {
                        string canaleRef = string.Empty;
                        if (destinatario != null && destinatario.canalePref != null)
                        {
                            // Modifica Lembo: non cerco più il canale originale, ma prendo quello che ha il corrispondente
                            Canale canaleOrig = destinatario.canalePref;

                            if (canaleOrig != null && canaleOrig.tipoCanale != null)
                            {
                                if (canaleOrig.tipoCanale.ToUpper().Equals("MAIL") ||
                                    canaleOrig.tipoCanale.ToUpper().Equals("INTEROPERABILITA") ||
                                    canaleOrig.tipoCanale.ToUpper().Equals("INTEROPERABILITAPITRE"))
                                {
                                    canaleRef = "(" + canaleOrig.tipoCanale + ")  ";
                                }
                                else
                                    if (canaleOrig.tipoCanale.ToUpper().Equals(SimplifiedInteroperabilityManager.SimplifiedInteroperabilityId))
                                        canaleRef = String.Format("({0})", SimplifiedInteroperabilityManager.ChannelDescription);
                                    else
                                        canaleRef = "  ";
                            }
                            else if (canaleOrig != null && canaleOrig.typeId != null)
                            {
                                if (canaleOrig.typeId.ToUpper().Equals("MAIL") ||
                                    canaleOrig.typeId.ToUpper().Equals("INTEROPERABILITA") ||
                                    canaleOrig.typeId.ToUpper().Equals("INTEROPERABILITAPITRE"))
                                {
                                    canaleRef = "(" + canaleOrig.typeId + ")  ";
                                }
                                else
                                    if (canaleOrig.typeId.ToUpper().Equals(SimplifiedInteroperabilityManager.SimplifiedInteroperabilityId))
                                        canaleRef = String.Format("({0})", SimplifiedInteroperabilityManager.ChannelDescription);
                                    else
                                        canaleRef = "  ";
                            }
                            else
                            {
                                canaleRef = "  ";
                            }
                        }
                        if (annullato == string.Empty)
                            this.ListBoxRecipient.Items.Add(new StringBuilder().AppendFormat("(*){0}{1}", canaleRef, AddressBookManager.getDecrizioneCorrispondenteSemplice(destinatario)).ToString());
                        else if (annullato == "1")
                            this.ListBoxRecipient.Items.Add(new StringBuilder().AppendFormat("(*)(A){0}{1}", canaleRef, AddressBookManager.getDecrizioneCorrispondenteSemplice(destinatario)).ToString());
                        else if (annullato == "E")
                            this.ListBoxRecipient.Items.Add(new StringBuilder().AppendFormat("(!){0}{1}", canaleRef, AddressBookManager.getDecrizioneCorrispondenteSemplice(destinatario)).ToString());

                    }
                    else
                    {
                        StringBuilder formatDestinatario = new StringBuilder();
                        if (destinatario != null && destinatario.canalePref == null)
                        {
                            // Modifica Lembo: non cerco più il canale originale, ma prendo quello che ha il corrispondente
                            Canale canaleOrig = destinatario.canalePref;

                            if (canaleOrig != null && canaleOrig.tipoCanale != null)
                            {
                                if (canaleOrig.tipoCanale.ToUpper().Equals("MAIL") ||
                                    canaleOrig.tipoCanale.ToUpper().Equals("INTEROPERABILITA") ||
                                    canaleOrig.tipoCanale.ToUpper().Equals("INTEROPERABILITAPITRE"))
                                {

                                    formatDestinatario.AppendFormat("({0})  {1}", canaleOrig.tipoCanale, AddressBookManager.getDecrizioneCorrispondenteSemplice(destinatario));
                                }
                                else
                                    if (canaleOrig.tipoCanale.ToUpper().Equals(SimplifiedInteroperabilityManager.SimplifiedInteroperabilityId))
                                        formatDestinatario.AppendFormat("({0})  {1}", SimplifiedInteroperabilityManager.ChannelDescription, AddressBookManager.getDecrizioneCorrispondenteSemplice(destinatario));
                            }
                            else if (canaleOrig != null && canaleOrig.typeId != null)
                            {
                                if (canaleOrig.typeId.ToUpper().Equals("MAIL") ||
                                    canaleOrig.typeId.ToUpper().Equals("INTEROPERABILITA") ||
                                    canaleOrig.typeId.ToUpper().Equals("INTEROPERABILITAPITRE"))
                                {

                                    formatDestinatario.AppendFormat("({0})  {1}", canaleOrig.typeId, AddressBookManager.getDecrizioneCorrispondenteSemplice(destinatario));
                                }
                                else
                                    if (canaleOrig.typeId.ToUpper().Equals(SimplifiedInteroperabilityManager.SimplifiedInteroperabilityId))
                                        formatDestinatario.AppendFormat("({0})  {1}", SimplifiedInteroperabilityManager.ChannelDescription, AddressBookManager.getDecrizioneCorrispondenteSemplice(destinatario));
                            }
                        }
                        else
                        {
                            if (destinatario.canalePref.typeId != null)
                            {
                                if (destinatario.canalePref.typeId.ToUpper().Equals("MAIL") ||
                                    destinatario.canalePref.typeId.ToUpper().Equals("INTEROPERABILITA") ||
                                    destinatario.canalePref.typeId.ToUpper().Equals("INTEROPERABILITAPITRE"))
                                {
                                    formatDestinatario.AppendFormat("({0})  {1}", destinatario.canalePref.typeId, AddressBookManager.getDecrizioneCorrispondenteSemplice(destinatario));
                                }
                                else
                                    if (destinatario.canalePref.typeId.ToUpper().Equals(SimplifiedInteroperabilityManager.SimplifiedInteroperabilityId))
                                        formatDestinatario.AppendFormat("({0})  {1}", SimplifiedInteroperabilityManager.ChannelDescription, AddressBookManager.getDecrizioneCorrispondenteSemplice(destinatario));
                            }
                        }

                        if (string.IsNullOrEmpty(formatDestinatario.ToString()))
                            formatDestinatario.AppendFormat(AddressBookManager.getDecrizioneCorrispondenteSemplice(destinatario));
                        this.ListBoxRecipient.Items.Add(formatDestinatario.ToString());
                    }

                    this.ListBoxRecipient.Items[i].Value = destinatario.codiceRubrica;
                }
            }
            //this.bypassaControlloRicevute = null;
        }

        private void SetListRecipientsOutProtocolCCFromAddressBook()
        {
            //Valido per i documenti in Partenza
            this.ListBoxRecipientCC.Items.Clear();

            DocsPaWR.Corrispondente destinatario;
            if (this.ListRecipientsCC != null && this.ListRecipientsCC.Count > 0)
            {
                //elenco canali preferenziale /destinatario proto
                System.Collections.Generic.List<Corrispondente> listPrefChannelDest = new System.Collections.Generic.List<Corrispondente>();
                if (this.DocumentInWorking.systemId != null)
                {
                    listPrefChannelDest = UserManager.GetPrefChannelAllDest(this.DocumentInWorking.systemId, "D");
                }
                for (int i = 0; i < this.ListRecipientsCC.Count; i++)
                {
                    destinatario = this.ListRecipientsCC[i];
                    string annullato = string.Empty;
                    bool rtn = CtrlIfDestWithRicevuta_NEW(destinatario, out annullato);
                    if (rtn)
                    {
                        string canaleRef = string.Empty;
                        if (destinatario != null && destinatario.canalePref != null)
                        {
                            // Modifica Lembo: non cerco più il canale originale, ma prendo quello che ha il corrispondente
                            Canale canaleOrig = destinatario.canalePref;

                            if (canaleOrig != null && canaleOrig.tipoCanale != null)
                            {
                                if (canaleOrig.tipoCanale.ToUpper().Equals("MAIL") ||
                                    canaleOrig.tipoCanale.ToUpper().Equals("INTEROPERABILITA") ||
                                    canaleOrig.tipoCanale.ToUpper().Equals("INTEROPERABILITAPITRE"))
                                {
                                    canaleRef = "(" + canaleOrig.tipoCanale + ")  ";
                                }
                                else
                                    if (canaleOrig.tipoCanale.ToUpper().Equals(SimplifiedInteroperabilityManager.SimplifiedInteroperabilityId))
                                        canaleRef = String.Format("({0})", SimplifiedInteroperabilityManager.ChannelDescription);
                                    else
                                        canaleRef = "  ";
                            }
                            else if (canaleOrig != null && canaleOrig.typeId != null)
                            {
                                if (canaleOrig.typeId.ToUpper().Equals("MAIL") ||
                                    canaleOrig.typeId.ToUpper().Equals("INTEROPERABILITA") ||
                                    canaleOrig.typeId.ToUpper().Equals("INTEROPERABILITAPITRE"))
                                {
                                    canaleRef = "(" + canaleOrig.typeId + ")  ";
                                }
                                else
                                    if (canaleOrig.typeId.ToUpper().Equals(SimplifiedInteroperabilityManager.SimplifiedInteroperabilityId))
                                        canaleRef = String.Format("({0})", SimplifiedInteroperabilityManager.ChannelDescription);
                                    else
                                        canaleRef = "  ";
                            }
                            else
                            {
                                canaleRef = "  ";
                            }
                        }
                        if (annullato == string.Empty)
                            this.ListBoxRecipientCC.Items.Add(new StringBuilder().AppendFormat("(*){0}{1}", canaleRef, AddressBookManager.getDecrizioneCorrispondenteSemplice(destinatario)).ToString());
                        else if (annullato == "1")
                            this.ListBoxRecipientCC.Items.Add(new StringBuilder().AppendFormat("(*)(A){0}{1}", canaleRef, AddressBookManager.getDecrizioneCorrispondenteSemplice(destinatario)).ToString());
                        else if (annullato == "E")
                            this.ListBoxRecipientCC.Items.Add(new StringBuilder().AppendFormat("(!){0}{1}", canaleRef, AddressBookManager.getDecrizioneCorrispondenteSemplice(destinatario)).ToString());

                    }
                    else
                    {
                        StringBuilder formatDestinatario = new StringBuilder();
                        if (destinatario != null && destinatario.canalePref == null)
                        {
                            // Modifica Lembo: non cerco più il canale originale, ma prendo quello che ha il corrispondente
                            Canale canaleOrig = destinatario.canalePref;

                            if (canaleOrig != null && canaleOrig.tipoCanale != null)
                            {
                                if (canaleOrig.tipoCanale.ToUpper().Equals("MAIL") ||
                                    canaleOrig.tipoCanale.ToUpper().Equals("INTEROPERABILITA") ||
                                    canaleOrig.tipoCanale.ToUpper().Equals("INTEROPERABILITAPITRE"))
                                {

                                    formatDestinatario.AppendFormat("({0})  {1}", canaleOrig.tipoCanale, AddressBookManager.getDecrizioneCorrispondenteSemplice(destinatario));
                                }
                                else
                                    if (canaleOrig.tipoCanale.ToUpper().Equals(SimplifiedInteroperabilityManager.SimplifiedInteroperabilityId))
                                        formatDestinatario.AppendFormat("({0})  {1}", SimplifiedInteroperabilityManager.ChannelDescription, AddressBookManager.getDecrizioneCorrispondenteSemplice(destinatario));
                            }
                            else if (canaleOrig != null && canaleOrig.typeId != null)
                            {
                                if (canaleOrig.typeId.ToUpper().Equals("MAIL") ||
                                    canaleOrig.typeId.ToUpper().Equals("INTEROPERABILITA") ||
                                    canaleOrig.typeId.ToUpper().Equals("INTEROPERABILITAPITRE"))
                                {

                                    formatDestinatario.AppendFormat("({0})  {1}", canaleOrig.typeId, AddressBookManager.getDecrizioneCorrispondenteSemplice(destinatario));
                                }
                                else
                                    if (canaleOrig.typeId.ToUpper().Equals(SimplifiedInteroperabilityManager.SimplifiedInteroperabilityId))
                                        formatDestinatario.AppendFormat("({0})  {1}", SimplifiedInteroperabilityManager.ChannelDescription, AddressBookManager.getDecrizioneCorrispondenteSemplice(destinatario));
                            }
                        }
                        else
                        {
                            if (destinatario.canalePref.typeId != null)
                            {
                                if (destinatario.canalePref.typeId.ToUpper().Equals("MAIL") ||
                                    destinatario.canalePref.typeId.ToUpper().Equals("INTEROPERABILITA") ||
                                    destinatario.canalePref.typeId.ToUpper().Equals("INTEROPERABILITAPITRE"))
                                {
                                    formatDestinatario.AppendFormat("({0})  {1}", destinatario.canalePref.typeId, AddressBookManager.getDecrizioneCorrispondenteSemplice(destinatario));
                                }
                                else
                                    if (destinatario.canalePref.typeId.ToUpper().Equals(SimplifiedInteroperabilityManager.SimplifiedInteroperabilityId))
                                        formatDestinatario.AppendFormat("({0})  {1}", SimplifiedInteroperabilityManager.ChannelDescription, AddressBookManager.getDecrizioneCorrispondenteSemplice(destinatario));
                            }
                            else if (destinatario.canalePref.tipoCanale != null)
                            {
                                if (destinatario.canalePref.tipoCanale.ToUpper().Equals("MAIL") ||
                                    destinatario.canalePref.tipoCanale.ToUpper().Equals("INTEROPERABILITA") ||
                                    destinatario.canalePref.tipoCanale.ToUpper().Equals("INTEROPERABILITAPITRE"))
                                {
                                    formatDestinatario.AppendFormat("({0})  {1}", destinatario.canalePref.tipoCanale, AddressBookManager.getDecrizioneCorrispondenteSemplice(destinatario));
                                }
                                else
                                    if (destinatario.canalePref.tipoCanale.ToUpper().Equals(SimplifiedInteroperabilityManager.SimplifiedInteroperabilityId))
                                        formatDestinatario.AppendFormat("({0})  {1}", SimplifiedInteroperabilityManager.ChannelDescription, AddressBookManager.getDecrizioneCorrispondenteSemplice(destinatario));
                            }
                        }
                        if (string.IsNullOrEmpty(formatDestinatario.ToString()))
                            formatDestinatario.AppendFormat(AddressBookManager.getDecrizioneCorrispondenteSemplice(destinatario));
                        this.ListBoxRecipientCC.Items.Add(formatDestinatario.ToString());
                    }

                    this.ListBoxRecipientCC.Items[i].Value = destinatario.codiceRubrica;
                }
            }
            this.bypassaControlloRicevute = null;
        }

        private void RefreshListRecipientsOutProtocolRecipients()
        {
            if (!string.IsNullOrEmpty(this.DocumentInWorking.systemId) && this.DocumentInWorking.protocollo != null)
            {
                //Valido per i documenti in Partenza
                DocsPaWR.Corrispondente destinatario;
                //if ((((DocsPaWR.ProtocolloUscita)this.DocumentInWorking.protocollo).destinatari != null) && (((DocsPaWR.ProtocolloUscita)this.DocumentInWorking.protocollo).destinatari.Length > 0))
                //{
                //    ((DocsPaWR.ProtocolloUscita)this.DocumentInWorking.protocollo).destinatari = ((DocsPaWR.ProtocolloUscita)this.DocumentInWorking.protocollo).destinatari.OrderBy(d => d.descrizione).ToArray<Corrispondente>();
                //    elenco canali preferenziale /destinatario proto
                //    System.Collections.Generic.List<Corrispondente> listPrefChannelDest = new System.Collections.Generic.List<Corrispondente>();
                //    if (this.DocumentInWorking.systemId != null)
                //        listPrefChannelDest = UserManager.GetPrefChannelAllDest(this.DocumentInWorking.systemId, "D");
                //    for (int i = 0; i < ((DocsPaWR.ProtocolloUscita)this.DocumentInWorking.protocollo).destinatari.Length; i++)
                //    {
                if (this.ListRecipients != null && this.ListRecipients.Count > 0)
                {
                    //((DocsPaWR.ProtocolloUscita)this.DocumentInWorking.protocollo).destinatari = ((DocsPaWR.ProtocolloUscita)this.DocumentInWorking.protocollo).destinatari.OrderBy(d => d.descrizione).ToArray<Corrispondente>();
                    //elenco canali preferenziale /destinatario proto
                    System.Collections.Generic.List<Corrispondente> listPrefChannelDest = new System.Collections.Generic.List<Corrispondente>();
                    if (this.DocumentInWorking.systemId != null)
                        listPrefChannelDest = UserManager.GetPrefChannelAllDest(this.DocumentInWorking.systemId, "D");
                    for (int i = 0; i < this.ListRecipients.Count; i++)
                    {
                        destinatario = this.ListRecipients[i];
                        string editMode = Request.QueryString["editMode"];
                        string annullato = string.Empty;
                        bool rtn = CtrlIfDestWithRicevuta_NEW(destinatario, out annullato);
                        if (rtn)
                        {
                            string canaleRef = string.Empty;
                            if (destinatario != null && destinatario.canalePref != null)
                            {
                                // Modifica Lembo: non cerco più il canale originale, ma prendo quello che ha il corrispondente
                                Canale canaleOrig = destinatario.canalePref;

                                if (canaleOrig != null && canaleOrig.tipoCanale != null)
                                {
                                    if (canaleOrig.tipoCanale.ToUpper().Equals("MAIL") ||
                                        canaleOrig.tipoCanale.ToUpper().Equals("INTEROPERABILITA") ||
                                        canaleOrig.tipoCanale.ToUpper().Equals("INTEROPERABILITAPITRE"))
                                    {
                                        canaleRef = "(" + canaleOrig.tipoCanale + ")  ";
                                    }
                                    else
                                        if (canaleOrig.tipoCanale.ToUpper().Equals(SimplifiedInteroperabilityManager.SimplifiedInteroperabilityId))
                                            canaleRef = String.Format("({0})", SimplifiedInteroperabilityManager.ChannelDescription);
                                        else
                                            canaleRef = "  ";
                                }
                                else if (canaleOrig != null && canaleOrig.typeId != null)
                                {
                                    if (canaleOrig.typeId.ToUpper().Equals("MAIL") ||
                                        canaleOrig.typeId.ToUpper().Equals("INTEROPERABILITA") ||
                                        canaleOrig.typeId.ToUpper().Equals("INTEROPERABILITAPITRE"))
                                    {
                                        canaleRef = "(" + canaleOrig.typeId + ")  ";
                                    }
                                    else
                                        if (canaleOrig.typeId.ToUpper().Equals(SimplifiedInteroperabilityManager.SimplifiedInteroperabilityId))
                                            canaleRef = String.Format("({0})", SimplifiedInteroperabilityManager.ChannelDescription);
                                        else
                                            canaleRef = "  ";
                                }
                                else
                                {
                                    canaleRef = "  ";
                                }
                            }
                            if (annullato == string.Empty)
                                this.ListBoxRecipient.Items.Add(new StringBuilder().AppendFormat("(*){0}{1}", canaleRef, AddressBookManager.getDecrizioneCorrispondenteSemplice(destinatario)).ToString());
                            else if (annullato == "1")
                                this.ListBoxRecipient.Items.Add(new StringBuilder().AppendFormat("(*)(A){0}{1}", canaleRef, AddressBookManager.getDecrizioneCorrispondenteSemplice(destinatario)).ToString());
                            else if (annullato == "E")
                                this.ListBoxRecipient.Items.Add(new StringBuilder().AppendFormat("(!){0}{1}", canaleRef, AddressBookManager.getDecrizioneCorrispondenteSemplice(destinatario)).ToString());

                        }
                        else
                        {
                            StringBuilder formatDestinatario = new StringBuilder();
                            if (destinatario != null && destinatario.canalePref != null)
                            {
                                // Modifica Lembo: non cerco più il canale originale, ma prendo quello che ha il corrispondente
                                Canale canaleOrig = destinatario.canalePref;

                                if (canaleOrig != null && canaleOrig.tipoCanale != null)
                                {
                                    if (canaleOrig.tipoCanale.ToUpper().Equals("MAIL") ||
                                        canaleOrig.tipoCanale.ToUpper().Equals("INTEROPERABILITA") ||
                                        canaleOrig.tipoCanale.ToUpper().Equals("INTEROPERABILITAPITRE"))
                                    {

                                        formatDestinatario.AppendFormat("({0})  {1}", canaleOrig.tipoCanale, AddressBookManager.getDecrizioneCorrispondenteSemplice(destinatario));
                                    }
                                    else
                                        if (canaleOrig.tipoCanale.ToUpper().Equals(SimplifiedInteroperabilityManager.SimplifiedInteroperabilityId))
                                            formatDestinatario.AppendFormat("({0})  {1}", SimplifiedInteroperabilityManager.ChannelDescription, AddressBookManager.getDecrizioneCorrispondenteSemplice(destinatario));
                                }
                                else if (canaleOrig != null && canaleOrig.typeId != null)
                                {
                                    if (canaleOrig.typeId.ToUpper().Equals("MAIL") ||
                                        canaleOrig.typeId.ToUpper().Equals("INTEROPERABILITA") ||
                                        canaleOrig.typeId.ToUpper().Equals("INTEROPERABILITAPITRE"))
                                    {

                                        formatDestinatario.AppendFormat("({0})  {1}", canaleOrig.typeId, AddressBookManager.getDecrizioneCorrispondenteSemplice(destinatario));
                                    }
                                    else
                                        if (canaleOrig.typeId.ToUpper().Equals(SimplifiedInteroperabilityManager.SimplifiedInteroperabilityId))
                                            formatDestinatario.AppendFormat("({0})  {1}", SimplifiedInteroperabilityManager.ChannelDescription, AddressBookManager.getDecrizioneCorrispondenteSemplice(destinatario));
                                }
                            }
                            if (string.IsNullOrEmpty(formatDestinatario.ToString()))
                                formatDestinatario.AppendFormat(AddressBookManager.getDecrizioneCorrispondenteSemplice(destinatario));
                            this.ListBoxRecipient.Items.Add(formatDestinatario.ToString());
                        }

                        this.ListBoxRecipient.Items[i].Value = destinatario.codiceRubrica;
                    }
                    //this.ListRecipients = (((DocsPaWR.ProtocolloUscita)this.DocumentInWorking.protocollo).destinatari).ToList<Corrispondente>();
                }
            }
            this.bypassaControlloRicevute = null;
        }

        private void RefreshListRecipientsOutProtocolRecipientsCC()
        {
            DocsPaWR.Corrispondente destinatario;
            if (this.ListRecipientsCC != null && this.ListRecipientsCC.Count > 0)
            {
                //elenco canali preferenziale /destinatario proto
                System.Collections.Generic.List<Corrispondente> listPrefChannelDestCC = new System.Collections.Generic.List<Corrispondente>();
                if (this.DocumentInWorking.systemId != null)
                    listPrefChannelDestCC = UserManager.GetPrefChannelAllDest(this.DocumentInWorking.systemId, "C");
                for (int i = 0; i < this.ListRecipientsCC.Count; i++)
                {
                    destinatario = this.ListRecipientsCC[i];
                    string annullato = string.Empty;
                    bool rtn = CtrlIfDestWithRicevuta(destinatario, out annullato);
                    if (rtn)
                    {
                        string canaleRef = string.Empty;
                        if (destinatario != null && destinatario.canalePref != null)
                        {
                            // Modifica Lembo: non cerco più il canale originale, ma prendo quello che ha il corrispondente
                            Canale canaleOrig = destinatario.canalePref;

                            if (canaleOrig != null && canaleOrig.tipoCanale != null)
                            {
                                if (canaleOrig.tipoCanale.ToUpper().Equals("MAIL") ||
                                    canaleOrig.tipoCanale.ToUpper().Equals("INTEROPERABILITA") ||
                                    canaleOrig.tipoCanale.ToUpper().Equals("INTEROPERABILITAPITRE"))
                                {
                                    canaleRef = "(" + canaleOrig.tipoCanale + ")  ";
                                }
                                else
                                    if (canaleOrig.tipoCanale.ToUpper().Equals(SimplifiedInteroperabilityManager.SimplifiedInteroperabilityId))
                                        canaleRef = String.Format("({0})", SimplifiedInteroperabilityManager.ChannelDescription);
                                    else
                                        canaleRef = "  ";
                            }
                            else if (canaleOrig != null && canaleOrig.typeId != null)
                            {
                                if (canaleOrig.typeId.ToUpper().Equals("MAIL") ||
                                    canaleOrig.typeId.ToUpper().Equals("INTEROPERABILITA") ||
                                    canaleOrig.typeId.ToUpper().Equals("INTEROPERABILITAPITRE"))
                                {
                                    canaleRef = "(" + canaleOrig.typeId + ")  ";
                                }
                                else
                                    if (canaleOrig.typeId.ToUpper().Equals(SimplifiedInteroperabilityManager.SimplifiedInteroperabilityId))
                                        canaleRef = String.Format("({0})", SimplifiedInteroperabilityManager.ChannelDescription);
                                    else
                                        canaleRef = "  ";
                            }
                            else
                            {
                                canaleRef = "  ";
                            }
                        }
                        else
                        {
                            canaleRef = "  ";
                        }
                        if (annullato == string.Empty)
                            this.ListBoxRecipientCC.Items.Add(new StringBuilder().AppendFormat("(*){0}{1}", canaleRef, AddressBookManager.getDecrizioneCorrispondenteSemplice(destinatario)).ToString());
                        else if (annullato == "1")
                            this.ListBoxRecipientCC.Items.Add(new StringBuilder().AppendFormat("(*)(A){0}{1}", canaleRef, AddressBookManager.getDecrizioneCorrispondenteSemplice(destinatario)).ToString());
                        else if (annullato == "E")
                            this.ListBoxRecipientCC.Items.Add(new StringBuilder().AppendFormat("(!){0}{1}", canaleRef, AddressBookManager.getDecrizioneCorrispondenteSemplice(destinatario)).ToString());

                    }
                    else
                    {
                        StringBuilder formatDestinatario = new StringBuilder();
                        if (destinatario != null && destinatario.canalePref != null)
                        {
                            // Modifica Lembo: non cerco più il canale originale, ma prendo quello che ha il corrispondente
                            Canale canaleOrig = destinatario.canalePref;

                            if (canaleOrig != null && canaleOrig.tipoCanale != null)
                            {
                                if (canaleOrig.tipoCanale.ToUpper().Equals("MAIL") ||
                                    canaleOrig.tipoCanale.ToUpper().Equals("INTEROPERABILITA") ||
                                    canaleOrig.tipoCanale.ToUpper().Equals("INTEROPERABILITAPITRE"))
                                {

                                    formatDestinatario.AppendFormat("({0})  {1}", canaleOrig.tipoCanale, AddressBookManager.getDecrizioneCorrispondenteSemplice(destinatario));
                                }
                                else
                                    if (canaleOrig.tipoCanale.ToUpper().Equals(SimplifiedInteroperabilityManager.SimplifiedInteroperabilityId))
                                        formatDestinatario.AppendFormat("({0})  {1}", SimplifiedInteroperabilityManager.ChannelDescription, AddressBookManager.getDecrizioneCorrispondenteSemplice(destinatario));
                            }
                            else if (canaleOrig != null && canaleOrig.typeId != null)
                            {
                                if (canaleOrig.typeId.ToUpper().Equals("MAIL") ||
                                    canaleOrig.typeId.ToUpper().Equals("INTEROPERABILITA") ||
                                    canaleOrig.typeId.ToUpper().Equals("INTEROPERABILITAPITRE"))
                                {

                                    formatDestinatario.AppendFormat("({0})  {1}", canaleOrig.typeId, AddressBookManager.getDecrizioneCorrispondenteSemplice(destinatario));
                                }
                                else
                                    if (canaleOrig.typeId.ToUpper().Equals(SimplifiedInteroperabilityManager.SimplifiedInteroperabilityId))
                                        formatDestinatario.AppendFormat("({0})  {1}", SimplifiedInteroperabilityManager.ChannelDescription, AddressBookManager.getDecrizioneCorrispondenteSemplice(destinatario));
                            }
                        }
                        if (string.IsNullOrEmpty(formatDestinatario.ToString()))
                            formatDestinatario.AppendFormat(AddressBookManager.getDecrizioneCorrispondenteSemplice(destinatario));
                        this.ListBoxRecipientCC.Items.Add(formatDestinatario.ToString());
                    }
                    this.ListBoxRecipientCC.Items[i].Value = destinatario.codiceRubrica;
                }
            }

        }

        private void SetListRecipientsInternalProtocol()
        {
            if (this.DocumentInWorking.protocollo != null)
            {
                //Valido per i documenti in Partenza
                DocsPaWR.Corrispondente destinatario;
                if ((((DocsPaWR.ProtocolloInterno)this.DocumentInWorking.protocollo).destinatari != null) && (((DocsPaWR.ProtocolloInterno)this.DocumentInWorking.protocollo).destinatari.Length > 0))
                {
                    ((DocsPaWR.ProtocolloInterno)this.DocumentInWorking.protocollo).destinatari = ((DocsPaWR.ProtocolloInterno)this.DocumentInWorking.protocollo).destinatari.OrderBy(d => d.descrizione).ToArray<Corrispondente>();
                    //elenco canali preferenziale /destinatario proto
                    System.Collections.Generic.List<Corrispondente> listPrefChannelDest = new System.Collections.Generic.List<Corrispondente>();
                    if (this.DocumentInWorking.systemId != null)
                        listPrefChannelDest = UserManager.GetPrefChannelAllDest(this.DocumentInWorking.systemId, "D");
                    for (int i = 0; i < ((DocsPaWR.ProtocolloInterno)this.DocumentInWorking.protocollo).destinatari.Length; i++)
                    {
                        destinatario = (((DocsPaWR.ProtocolloInterno)this.DocumentInWorking.protocollo).destinatari[i]);
                        string editMode = Request.QueryString["editMode"];
                        string annullato = string.Empty;
                        bool rtn = CtrlIfDestWithRicevuta_NEW(destinatario, out annullato);
                        if (rtn)
                        {
                            string canaleRef = string.Empty;
                            if (destinatario != null && destinatario.canalePref != null)
                            {
                                // Modifica Lembo: non cerco più il canale originale, ma prendo quello che ha il corrispondente
                                Canale canaleOrig = destinatario.canalePref;

                                if (canaleOrig != null && canaleOrig.tipoCanale != null)
                                {
                                    if (canaleOrig.tipoCanale.ToUpper().Equals("MAIL") ||
                                        canaleOrig.tipoCanale.ToUpper().Equals("INTEROPERABILITA") ||
                                        canaleOrig.tipoCanale.ToUpper().Equals("INTEROPERABILITAPITRE"))
                                    {
                                        canaleRef = "(" + canaleOrig.tipoCanale + ")  ";
                                    }
                                    else
                                        if (canaleOrig.tipoCanale.ToUpper().Equals(SimplifiedInteroperabilityManager.SimplifiedInteroperabilityId))
                                            canaleRef = String.Format("({0})", SimplifiedInteroperabilityManager.ChannelDescription);
                                        else
                                            canaleRef = "  ";
                                }
                                else if (canaleOrig != null && canaleOrig.typeId != null)
                                {
                                    if (canaleOrig.typeId.ToUpper().Equals("MAIL") ||
                                        canaleOrig.typeId.ToUpper().Equals("INTEROPERABILITA") ||
                                        canaleOrig.typeId.ToUpper().Equals("INTEROPERABILITAPITRE"))
                                    {
                                        canaleRef = "(" + canaleOrig.typeId + ")  ";
                                    }
                                    else
                                        if (canaleOrig.typeId.ToUpper().Equals(SimplifiedInteroperabilityManager.SimplifiedInteroperabilityId))
                                            canaleRef = String.Format("({0})", SimplifiedInteroperabilityManager.ChannelDescription);
                                        else
                                            canaleRef = "  ";
                                }
                                else
                                {
                                    canaleRef = "  ";
                                }
                            }
                            if (annullato == string.Empty)
                                this.ListBoxRecipient.Items.Add(new StringBuilder().AppendFormat("(*){0}{1}", canaleRef, AddressBookManager.getDecrizioneCorrispondenteSemplice(destinatario)).ToString());
                            else if (annullato == "1")
                                this.ListBoxRecipient.Items.Add(new StringBuilder().AppendFormat("(*)(A){0}{1}", canaleRef, AddressBookManager.getDecrizioneCorrispondenteSemplice(destinatario)).ToString());
                            else if (annullato == "E")
                                this.ListBoxRecipient.Items.Add(new StringBuilder().AppendFormat("(!){0}{1}", canaleRef, AddressBookManager.getDecrizioneCorrispondenteSemplice(destinatario)).ToString());

                        }
                        else
                        {
                            StringBuilder formatDestinatario = new StringBuilder();
                            if (destinatario != null && destinatario.canalePref != null)
                            {
                                // Modifica Lembo: non cerco più il canale originale, ma prendo quello che ha il corrispondente
                                Canale canaleOrig = destinatario.canalePref;

                                if (canaleOrig != null && canaleOrig.tipoCanale != null)
                                {
                                    if (canaleOrig.tipoCanale.ToUpper().Equals("MAIL") ||
                                        canaleOrig.tipoCanale.ToUpper().Equals("INTEROPERABILITA") ||
                                        canaleOrig.tipoCanale.ToUpper().Equals("INTEROPERABILITAPITRE"))
                                    {

                                        formatDestinatario.AppendFormat("({0})  {1}", canaleOrig.tipoCanale, AddressBookManager.getDecrizioneCorrispondenteSemplice(destinatario));
                                    }
                                    else
                                        if (canaleOrig.tipoCanale.ToUpper().Equals(SimplifiedInteroperabilityManager.SimplifiedInteroperabilityId))
                                            formatDestinatario.AppendFormat("({0})  {1}", SimplifiedInteroperabilityManager.ChannelDescription, AddressBookManager.getDecrizioneCorrispondenteSemplice(destinatario));
                                }
                                else if (canaleOrig != null && canaleOrig.typeId != null)
                                {
                                    if (canaleOrig.typeId.ToUpper().Equals("MAIL") ||
                                        canaleOrig.typeId.ToUpper().Equals("INTEROPERABILITA") ||
                                        canaleOrig.typeId.ToUpper().Equals("INTEROPERABILITAPITRE"))
                                    {

                                        formatDestinatario.AppendFormat("({0})  {1}", canaleOrig.typeId, AddressBookManager.getDecrizioneCorrispondenteSemplice(destinatario));
                                    }
                                    else
                                        if (canaleOrig.typeId.ToUpper().Equals(SimplifiedInteroperabilityManager.SimplifiedInteroperabilityId))
                                            formatDestinatario.AppendFormat("({0})  {1}", SimplifiedInteroperabilityManager.ChannelDescription, AddressBookManager.getDecrizioneCorrispondenteSemplice(destinatario));
                                }
                            }
                            if (string.IsNullOrEmpty(formatDestinatario.ToString()))
                                formatDestinatario.AppendFormat(AddressBookManager.getDecrizioneCorrispondenteSemplice(destinatario));
                            this.ListBoxRecipient.Items.Add(formatDestinatario.ToString());
                        }

                        this.ListBoxRecipient.Items[i].Value = destinatario.codiceRubrica;
                    }
                    this.ListRecipients = (((DocsPaWR.ProtocolloInterno)this.DocumentInWorking.protocollo).destinatari).ToList<Corrispondente>();
                }

                if ((((DocsPaWR.ProtocolloInterno)this.DocumentInWorking.protocollo).destinatariConoscenza != null) && (((DocsPaWR.ProtocolloInterno)this.DocumentInWorking.protocollo).destinatariConoscenza.Length > 0))
                {
                    ((DocsPaWR.ProtocolloInterno)this.DocumentInWorking.protocollo).destinatariConoscenza = ((DocsPaWR.ProtocolloInterno)this.DocumentInWorking.protocollo).destinatariConoscenza.OrderBy(d => d.descrizione).ToArray<Corrispondente>();
                    //elenco canali preferenziale /destinatario proto
                    System.Collections.Generic.List<Corrispondente> listPrefChannelDestCC = new System.Collections.Generic.List<Corrispondente>();
                    if (this.DocumentInWorking.systemId != null)
                        listPrefChannelDestCC = UserManager.GetPrefChannelAllDest(this.DocumentInWorking.systemId, "C");
                    for (int i = 0; i < ((DocsPaWR.ProtocolloInterno)this.DocumentInWorking.protocollo).destinatariConoscenza.Length; i++)
                    {
                        destinatario = (((DocsPaWR.ProtocolloInterno)this.DocumentInWorking.protocollo).destinatariConoscenza[i]);
                        string annullato = string.Empty;
                        bool rtn = CtrlIfDestWithRicevuta(destinatario, out annullato);
                        if (rtn)
                        {
                            string canaleRef = string.Empty;
                            if (destinatario != null && destinatario.canalePref != null)
                            {
                                // Modifica Lembo: non cerco più il canale originale, ma prendo quello che ha il corrispondente
                                Canale canaleOrig = destinatario.canalePref;

                                if (canaleOrig != null && canaleOrig.tipoCanale != null)
                                {
                                    if (canaleOrig.tipoCanale.ToUpper().Equals("MAIL") ||
                                        canaleOrig.tipoCanale.ToUpper().Equals("INTEROPERABILITA") ||
                                        canaleOrig.tipoCanale.ToUpper().Equals("INTEROPERABILITAPITRE"))
                                    {
                                        canaleRef = "(" + canaleOrig.tipoCanale + ")  ";
                                    }
                                    else
                                        if (canaleOrig.tipoCanale.ToUpper().Equals(SimplifiedInteroperabilityManager.SimplifiedInteroperabilityId))
                                            canaleRef = String.Format("({0})", SimplifiedInteroperabilityManager.ChannelDescription);
                                        else
                                            canaleRef = "  ";
                                }
                                else if (canaleOrig != null && canaleOrig.typeId != null)
                                {
                                    if (canaleOrig.typeId.ToUpper().Equals("MAIL") ||
                                        canaleOrig.typeId.ToUpper().Equals("INTEROPERABILITA") ||
                                        canaleOrig.typeId.ToUpper().Equals("INTEROPERABILITAPITRE"))
                                    {
                                        canaleRef = "(" + canaleOrig.typeId + ")  ";
                                    }
                                    else
                                        if (canaleOrig.typeId.ToUpper().Equals(SimplifiedInteroperabilityManager.SimplifiedInteroperabilityId))
                                            canaleRef = String.Format("({0})", SimplifiedInteroperabilityManager.ChannelDescription);
                                        else
                                            canaleRef = "  ";
                                }
                                else
                                {
                                    canaleRef = "  ";
                                }
                            }
                            else
                            {
                                canaleRef = "  ";
                            }
                            if (annullato == string.Empty)
                                this.ListBoxRecipientCC.Items.Add(new StringBuilder().AppendFormat("(*){0}{1}", canaleRef, AddressBookManager.getDecrizioneCorrispondenteSemplice(destinatario)).ToString());
                            else if (annullato == "1")
                                this.ListBoxRecipientCC.Items.Add(new StringBuilder().AppendFormat("(*)(A){0}{1}", canaleRef, AddressBookManager.getDecrizioneCorrispondenteSemplice(destinatario)).ToString());
                            else if (annullato == "E")
                                this.ListBoxRecipientCC.Items.Add(new StringBuilder().AppendFormat("(!){0}{1}", canaleRef, AddressBookManager.getDecrizioneCorrispondenteSemplice(destinatario)).ToString());

                        }
                        else
                        {
                            StringBuilder formatDestinatario = new StringBuilder();
                            if (destinatario != null && destinatario.canalePref != null)
                            {
                                // Modifica Lembo: non cerco più il canale originale, ma prendo quello che ha il corrispondente
                                Canale canaleOrig = destinatario.canalePref;

                                if (canaleOrig != null && canaleOrig.tipoCanale != null)
                                {
                                    if (canaleOrig.tipoCanale.ToUpper().Equals("MAIL") ||
                                        canaleOrig.tipoCanale.ToUpper().Equals("INTEROPERABILITA") ||
                                        canaleOrig.tipoCanale.ToUpper().Equals("INTEROPERABILITAPITRE"))
                                    {

                                        formatDestinatario.AppendFormat("({0})  {1}", canaleOrig.tipoCanale, AddressBookManager.getDecrizioneCorrispondenteSemplice(destinatario));
                                    }
                                    else
                                        if (canaleOrig.tipoCanale.ToUpper().Equals(SimplifiedInteroperabilityManager.SimplifiedInteroperabilityId))
                                            formatDestinatario.AppendFormat("({0})  {1}", SimplifiedInteroperabilityManager.ChannelDescription, AddressBookManager.getDecrizioneCorrispondenteSemplice(destinatario));
                                }
                                else if (canaleOrig != null && canaleOrig.typeId != null)
                                {
                                    if (canaleOrig.typeId.ToUpper().Equals("MAIL") ||
                                        canaleOrig.typeId.ToUpper().Equals("INTEROPERABILITA") ||
                                        canaleOrig.typeId.ToUpper().Equals("INTEROPERABILITAPITRE"))
                                    {

                                        formatDestinatario.AppendFormat("({0})  {1}", canaleOrig.typeId, AddressBookManager.getDecrizioneCorrispondenteSemplice(destinatario));
                                    }
                                    else
                                        if (canaleOrig.typeId.ToUpper().Equals(SimplifiedInteroperabilityManager.SimplifiedInteroperabilityId))
                                            formatDestinatario.AppendFormat("({0})  {1}", SimplifiedInteroperabilityManager.ChannelDescription, AddressBookManager.getDecrizioneCorrispondenteSemplice(destinatario));
                                }
                            }
                            if (string.IsNullOrEmpty(formatDestinatario.ToString()))
                                formatDestinatario.AppendFormat(AddressBookManager.getDecrizioneCorrispondenteSemplice(destinatario));
                            this.ListBoxRecipientCC.Items.Add(formatDestinatario.ToString());
                        }
                        this.ListBoxRecipientCC.Items[i].Value = destinatario.codiceRubrica;
                    }
                    this.ListRecipientsCC = (((DocsPaWR.ProtocolloInterno)this.DocumentInWorking.protocollo).destinatariConoscenza).ToList<Corrispondente>();
                }
            }
            this.bypassaControlloRicevute = null;
        }

        protected void RefreshScript()
        {
            ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "DragAndDrop", "require(['" + Page.ResolveClientUrl("~/Scripts/DocumentDragAndDrop.js") + "']);", true);
            ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "resizeIframe", "resizeIframe();", true);
            ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "refreshSelect", "refreshSelect();", true);
            ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "refreshTipsy", "tooltipTipsy();", true);
            ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "InitializeLengthCharacters", "charsLeft('TxtObject','" + this.MaxLenghtObject + "','Descrizione oggetto');", true);
            ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "refreshPicker", "DatePicker('" + UIManager.UserManager.GetLanguageData() + "');", true);
            ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "refreshHour", "FormatHour();", true);
            ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "refreshNoteChars", "charsLeft('TxtNote', " + this.MaxLenghtNote + ", '" + this.DocumentLitVisibleNotes.Text.Replace("'", "\'") + "');", true);
            this.TxtNote_chars.Attributes["rel"] = "TxtNote_" + this.MaxLenghtNote + "_" + this.DocumentLitVisibleNotes.Text;
        }

        protected void InitializePage()
        {

            this.InfoUser = UIManager.UserManager.GetInfoUser();
            this.UserLog = UIManager.UserManager.GetUserInSession();
            this.Role = UIManager.RoleManager.GetRoleInSession();
            this.Registry = UIManager.RegistryManager.getRegistroBySistemId(this.Role.registri[0].systemId);
            UIManager.RegistryManager.SetRegistryInSession(this.Registry);
            this.Registry = this.Registry;
            if (this.Registry != null)
            {
                string state = UIManager.RegistryManager.getStatoRegistro(this.Registry);
                if (state.Equals("R"))
                {
                    this.DocumentLblRegistry.Attributes.Remove("class");
                    this.DocumentBntRecord.Enabled = false;
                    this.DocumentLblRegistry.Attributes.Add("class", "redWeight");
                }
                else
                {
                    if (state.Equals("V"))
                    {

                        this.DocumentLblRegistry.Attributes.Remove("class");
                        this.DocumentBntRecord.Enabled = true;
                        this.DocumentLblRegistry.Attributes.Add("class", "green");
                    }
                    else
                    {
                        this.DocumentLblRegistry.Attributes.Remove("class");
                        this.DocumentBntRecord.Enabled = false;
                        this.DocumentLblRegistry.Attributes.Add("class", "orange");
                    }
                }
            }
            this.LoadKeys();
            this.InitializeLanguage();
            this.SetAjaxDescriptionProject();

            ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "InitializeLengthCharacters", "charsLeft('TxtObject','" + this.MaxLenghtObject + "','Descrizione oggetto');", true);
            if (this.MeansSendingRequired)
            {
                this.LoadMeansSending();
            }

            this.SetAdminConfiguration();

            // inizializzo il pulsante "permanente" settandolo su invisibile ed inattivo
            this._logger.Debug(">> Inposto pulsante permanente");
            this._attivaPulsanteApponiSegnaturaPermanente(false, false);
        }

        private void DisplayMailIcons()
        {
            this.DocumentImgMailSender.Visible = false;
            this.DocumentImgPecSender.Visible = false;

            if (this.DocumentInWorking != null)
            {
                if (this.DocumentInWorking.typeId != null &&
                    (this.DocumentInWorking.typeId.ToUpper().Equals("INTEROPERABILITA") ||
                     this.DocumentInWorking.typeId.ToUpper().Equals("MAIL")) &&
                    !string.IsNullOrEmpty(this.DocumentInWorking.documento_da_pec))
                {
                    if (this.DocumentInWorking.documento_da_pec.Equals("1"))
                    {
                        this.DocumentImgPecSender.Visible = true;
                    }
                    else
                    {
                        this.DocumentImgMailSender.Visible = true;
                    }
                }
            }

            this.UpPnlImgSender.Update();
        }


        protected void SetAdminConfiguration()
        {
            if (this.CustomDocuments)
            {
                this.LoadCustomDocuments(true);
            }
            else
            {
                this.LoadCustomDocuments(false);
            }

            if (this.RapidClassificationRequired)
            {
                this.LblClassRequired.Visible = true;
            }

            if (this.RapidClassificationRequiredByTypeDoc)
            {
                if (!string.IsNullOrEmpty(this.TypeDocument))
                {
                    if (this.TypeDocument.ToUpper().Equals(NOTPROTOCOL))
                    {
                        this.LblClassRequired.Visible = DocumentManager.IsClassificationRqueredByTypeDoc("G");
                    }
                    else
                    {
                        this.LblClassRequired.Visible = DocumentManager.IsClassificationRqueredByTypeDoc(this.TypeDocument);
                    }
                }
                else if (this.DocumentInWorking != null && !string.IsNullOrEmpty(this.DocumentInWorking.tipoProto))
                    this.LblClassRequired.Visible = DocumentManager.IsClassificationRqueredByTypeDoc(this.DocumentInWorking.tipoProto);
            }
            if (this.TypeDocRequired)
            {
                this.lblTypeDocRequired.Visible = true;
            }

            if (this.EnableCodeObject)
            {
                this.PnlCodeObject.Visible = true;
                this.PnlCodeObject2.Attributes.Add("class", "colHalf2");
                this.PnlCodeObject3.Attributes.Add("class", "colHalf3");
                this.PnlCodeObject.Attributes.Add("class", "colHalf");
                this.TxtObject.Attributes.Remove("class");
                this.TxtObject.Attributes.Add("class", "txt_objectRight");
            }

            if (!UIManager.AdministrationManager.IsEnableRF(this.InfoUser.idAmministrazione) || !UIManager.UserManager.IsAuthorizedFunctions("INSERIMENTO_NOTERF"))
            {
                this.RblTypeNote.Items.RemoveAt(2);
            }
        }

        protected void SetAjaxDescriptionProject()
        {
            string dataUser = this.Role.idGruppo;
            dataUser = dataUser + "-" + this.Registry.systemId;
            if (UIManager.ClassificationSchemeManager.getTitolarioAttivo(UIManager.UserManager.GetInfoUser().idAmministrazione) != null)
            {
                RapidSenderDescriptionProject.ContextKey = dataUser + "-" + this.UserLog.idAmministrazione + "-" + UIManager.ClassificationSchemeManager.getTitolarioAttivo(UIManager.UserManager.GetInfoUser().idAmministrazione).ID + "-" + UserLog.idPeople + "-" + UIManager.UserManager.GetUserInSession().systemId;
            }
        }

        private void InitAnswers()
        {
            if (this.DocumentInWorking != null && this.DocumentInWorking.registro != null && this.DocumentInWorking.registro.stato == "C")
            {
                this.DocumentImgAnswerWithProtocol.Enabled = false;
            }

            //Se protocollo vuoto non abilito i pulsanti
            if (this.DocumentInWorking == null || string.IsNullOrEmpty(this.DocumentInWorking.docNumber))
            {
                this.DocumentImgAnswerWithProtocol.Enabled = false;
                this.DocumentImgViewAnswers.Enabled = false;
                this.DocumentImgAnswerWithDocument.Enabled = false;
                //this.DocumentImgReceivedSending.Visible = false;
                this.DocumentImgReportSpedizioni.Visible = false;
                this.DocumentImgReceivedSendingCC.Visible = false;
            }

            if (this.HideAnswers)
            {
                this.DocumentImgViewAnswers.Visible = true;
            }
            else
            {
                if (this.DocumentInWorking.systemId == null || this.GetCountDocInRisposta(this.DocumentInWorking.systemId) == 0)
                {
                    this.DocumentImgViewAnswers.Visible = false;
                }
                else
                {
                    this.DocumentImgViewAnswers.Visible = true;
                    this.DocumentImgViewAnswers.Visible = true;
                    this.plcViewResponse.Visible = true;
                    this.UpPnlResponse.Update();
                }
            }

        }

        protected void LoadCustomDocuments(bool enableCustom)
        {
            DocsPaWR.TipologiaAtto[] listCustomDocuments = null;

            if (enableCustom)
            {
                listCustomDocuments = UIManager.DocumentManager.GetCustomDocumentsLite(this.InfoUser.idAmministrazione, this.Role.idGruppo, "2");
            }
            else
            {
                listCustomDocuments = UIManager.DocumentManager.GetListCustomDocuments();
            }

            if (listCustomDocuments != null)
            {
                for (int i = 0; i < listCustomDocuments.Length; i++)
                {
                    ListItem item = new ListItem(listCustomDocuments[i].descrizione, listCustomDocuments[i].systemId);
                    this.DocumentDdlTypeDocument.Items.Add(item);
                    //this.DocumentDdlTypeDocument.Items.Add(listCustomDocuments[i].descrizione);
                    //this.DocumentDdlTypeDocument.Items[i + 1].Value = listCustomDocuments[i].systemId;
                }
            }
        }

        protected void InitializeAddressBooks()
        {
            if (this.EnableAjaxAddressBook)
            {
                this.SetAjaxAddressBook();
            }
        }

        protected void LoadKeys()
        {
            if (!string.IsNullOrEmpty(Utils.InitConfigurationKeys.GetValue(this.InfoUser.idAmministrazione, DBKeys.FE_FASC_RAPIDA_REQUIRED.ToString())))
            {
                this.RapidClassificationRequired = bool.Parse(Utils.InitConfigurationKeys.GetValue(this.InfoUser.idAmministrazione, DBKeys.FE_FASC_RAPIDA_REQUIRED.ToString()));
            }
            if (!string.IsNullOrEmpty(Utils.InitConfigurationKeys.GetValue("0", DBKeys.FE_FASC_REQUIRED_TIPI_DOC.ToString())))
            {
                this.RapidClassificationRequiredByTypeDoc = Utils.InitConfigurationKeys.GetValue("0", DBKeys.FE_FASC_REQUIRED_TIPI_DOC.ToString()).Equals("1");
            }

            if (!string.IsNullOrEmpty(Utils.InitConfigurationKeys.GetValue(this.InfoUser.idAmministrazione, DBKeys.FE_RICEVUTA_PROTOCOLLO_PDF.ToString())) && Utils.InitConfigurationKeys.GetValue(this.InfoUser.idAmministrazione, DBKeys.FE_RICEVUTA_PROTOCOLLO_PDF.ToString()).Equals("1"))
            {
                this.PrintReceipt = true;
            }

            if (!string.IsNullOrEmpty(System.Configuration.ConfigurationManager.AppSettings[WebConfigKeys.AUTOCOMPLETE_MINIMUMPREFIXLENGTH.ToString()]))
            {
                this.AjaxAddressBookMinPrefixLenght = int.Parse(System.Configuration.ConfigurationManager.AppSettings[WebConfigKeys.AUTOCOMPLETE_MINIMUMPREFIXLENGTH.ToString()]);
            }

            //if (!string.IsNullOrEmpty(Utils.InitConfigurationKeys.GetValue(this.InfoUser.idAmministrazione, DBKeys.FE_RIPROPONI_CON_CONOSCENZA.ToString())) && Utils.InitConfigurationKeys.GetValue(this.InfoUser.idAmministrazione, DBKeys.FE_RIPROPONI_CON_CONOSCENZA.ToString()).Equals("1"))
            //{
            //    this.IsEnabledRepeatWithKnowledge = true;
            //}

            if (!string.IsNullOrEmpty(System.Configuration.ConfigurationManager.AppSettings[WebConfigKeys.MEZZO_SPEDIZIONE.ToString()]) && System.Configuration.ConfigurationManager.AppSettings[WebConfigKeys.MEZZO_SPEDIZIONE.ToString()].Equals("1"))
            {
                this.MeansSendingRequired = true;
            }

            if (!string.IsNullOrEmpty(System.Configuration.ConfigurationManager.AppSettings[WebConfigKeys.PROT_DATA_ORA_MODIFICA.ToString()]) && System.Configuration.ConfigurationManager.AppSettings[WebConfigKeys.PROT_DATA_ORA_MODIFICA.ToString()].Equals("1"))
            {
                this.ModifyArrivalDate = true;
            }

            if (!string.IsNullOrEmpty(Utils.InitConfigurationKeys.GetValue("0", DBKeys.FE_NUOVO_FASC_DIRECT.ToString())) && Utils.InitConfigurationKeys.GetValue("0", DBKeys.FE_NUOVO_FASC_DIRECT.ToString()).Equals("1"))
            {
                this.DirectClassification = true;
            }

            if (!string.IsNullOrEmpty(Utils.InitConfigurationKeys.GetValue(this.InfoUser.idAmministrazione, DBKeys.FE_INTERNAL_PROTOCOL.ToString())) && Utils.InitConfigurationKeys.GetValue(this.InfoUser.idAmministrazione, DBKeys.FE_INTERNAL_PROTOCOL.ToString()).Equals("1"))
            {
                this.InternalRecordEnable = true;
            }

            if (!string.IsNullOrEmpty(System.Configuration.ConfigurationManager.AppSettings[WebConfigKeys.CATENE_DOCUMENTALI_TRASVERSALI.ToString()]) && System.Configuration.ConfigurationManager.AppSettings[WebConfigKeys.CATENE_DOCUMENTALI_TRASVERSALI.ToString()].Equals("1"))
            {
                this.ChainsOdDocuments = true;
            }

            if (!string.IsNullOrEmpty(System.Configuration.ConfigurationManager.AppSettings[WebConfigKeys.ProfilazioneDinamica.ToString()]) && System.Configuration.ConfigurationManager.AppSettings[WebConfigKeys.ProfilazioneDinamica.ToString()].Equals("1"))
            {
                this.CustomDocuments = true;
            }

            if (!string.IsNullOrEmpty(Utils.InitConfigurationKeys.GetValue("0", DBKeys.FE_NEW_RUBRICA_VELOCE.ToString())) && (Utils.InitConfigurationKeys.GetValue("0", DBKeys.FE_NEW_RUBRICA_VELOCE.ToString())).Equals("1"))
            {
                this.EnableAjaxAddressBook = true;
            }

            if (!string.IsNullOrEmpty(System.Configuration.ConfigurationManager.AppSettings[WebConfigKeys.AUTOCOMPLETE_MINIMUMPREFIXLENGTH.ToString()]))
            {
                this.AjaxAddressBookMinPrefixLenght = int.Parse(System.Configuration.ConfigurationManager.AppSettings[WebConfigKeys.AUTOCOMPLETE_MINIMUMPREFIXLENGTH.ToString()]);
            }

            if (!string.IsNullOrEmpty(Utils.InitConfigurationKeys.GetValue(this.InfoUser.idAmministrazione, DBKeys.FE_MAX_LENGTH_OGGETTO.ToString())))
            {
                this.MaxLenghtObject = int.Parse(Utils.InitConfigurationKeys.GetValue(this.InfoUser.idAmministrazione, DBKeys.FE_MAX_LENGTH_OGGETTO.ToString()));
            }

            if (!string.IsNullOrEmpty(System.Configuration.ConfigurationManager.AppSettings[WebConfigKeys.FE_MAX_LENGTH_NOTE.ToString()]))
            {
                this.MaxLenghtNote = int.Parse(System.Configuration.ConfigurationManager.AppSettings[WebConfigKeys.FE_MAX_LENGTH_NOTE.ToString()]);
            }

            if (!string.IsNullOrEmpty(System.Configuration.ConfigurationManager.AppSettings[WebConfigKeys.AUTOCOMPLETE_MINIMUMPREFIXLENGTH.ToString()]))
            {
                this.AutocompleteMinimumPrefixLength = int.Parse(System.Configuration.ConfigurationManager.AppSettings[WebConfigKeys.AUTOCOMPLETE_MINIMUMPREFIXLENGTH.ToString()]);
            }

            if (!string.IsNullOrEmpty(System.Configuration.ConfigurationManager.AppSettings[WebConfigKeys.USE_CODICE_OGGETTO.ToString()]) && bool.Parse(System.Configuration.ConfigurationManager.AppSettings[WebConfigKeys.USE_CODICE_OGGETTO.ToString()]))
            {
                this.EnableCodeObject = true;
            }

            if (!string.IsNullOrEmpty(System.Configuration.ConfigurationManager.AppSettings[WebConfigKeys.VISUALIZZA_CODICE_MODELLI_TRASM.ToString()]) && System.Configuration.ConfigurationManager.AppSettings[WebConfigKeys.VISUALIZZA_CODICE_MODELLI_TRASM.ToString()].Equals("1"))
            {
                this.ViewCodeTransmissionModels = true;
            }

            if (!string.IsNullOrEmpty(System.Configuration.ConfigurationManager.AppSettings[WebConfigKeys.LISTE_DISTRIBUZIONE.ToString()]) && System.Configuration.ConfigurationManager.AppSettings[WebConfigKeys.LISTE_DISTRIBUZIONE.ToString()].Equals("1"))
            {
                this.EnableDistributionLists = true;
            }

            if (!string.IsNullOrEmpty(System.Configuration.ConfigurationManager.AppSettings[WebConfigKeys.MITTENTE_DEFAULT.ToString()]) && System.Configuration.ConfigurationManager.AppSettings[WebConfigKeys.MITTENTE_DEFAULT.ToString()].Equals("1"))
            {
                this.EnableSenderDefault = true;
            }

            if (!string.IsNullOrEmpty(Utils.InitConfigurationKeys.GetValue(this.InfoUser.idAmministrazione, DBKeys.FE_ENABLE_MITTENTI_MULTIPLI.ToString())) && Utils.InitConfigurationKeys.GetValue(this.InfoUser.idAmministrazione, DBKeys.FE_ENABLE_MITTENTI_MULTIPLI.ToString()).Equals("1"))
            {
                this.EnableMultipleSenders = true;
            }

            if (!string.IsNullOrEmpty(Utils.InitConfigurationKeys.GetValue(this.InfoUser.idAmministrazione, DBKeys.ENABLE_RIFERIMENTI_MITTENTE.ToString())) && Utils.InitConfigurationKeys.GetValue(this.InfoUser.idAmministrazione, DBKeys.ENABLE_RIFERIMENTI_MITTENTE.ToString()).Equals("1"))
            {
                this.EnableRifSender = true;
            }

            if (!string.IsNullOrEmpty(System.Configuration.ConfigurationManager.AppSettings[WebConfigKeys.ENABLE_CODBIS_SEGNATURA.ToString()]) && System.Configuration.ConfigurationManager.AppSettings[WebConfigKeys.ENABLE_CODBIS_SEGNATURA.ToString()].Equals("1"))
            {
                this.EnableRFReferenceCode = true;
            }

            if (RegistryManager.isEnableRepertori(this.InfoUser.idAmministrazione))
            {
                this.EnableRepertory = true;
            }

            if (!string.IsNullOrEmpty(Utils.InitConfigurationKeys.GetValue(this.InfoUser.idAmministrazione, DBKeys.FE_TYPE_DOC_REQUIRED.ToString())) && Utils.InitConfigurationKeys.GetValue(this.InfoUser.idAmministrazione, DBKeys.FE_TYPE_DOC_REQUIRED.ToString()).Equals("1"))
            {
                this.TypeDocRequired = true;
            }

            if (!string.IsNullOrEmpty(Utils.InitConfigurationKeys.GetValue("0", DBKeys.FE_BLOCCA_CLASS.ToString())) && Utils.InitConfigurationKeys.GetValue("0", DBKeys.FE_BLOCCA_CLASS.ToString()).Equals("1"))
            {
                this.EnableBlockClassification = true;
            }

            if (!string.IsNullOrEmpty(System.Configuration.ConfigurationManager.AppSettings[WebConfigKeys.CERCA_DUPLICATI_PROTOCOLLO.ToString()]) && System.Configuration.ConfigurationManager.AppSettings[WebConfigKeys.CERCA_DUPLICATI_PROTOCOLLO.ToString()].Equals("1"))
            {
                this.EnableSearchDuplicateRecord_1 = true;
            }

            if (!string.IsNullOrEmpty(System.Configuration.ConfigurationManager.AppSettings[WebConfigKeys.NON_VISUALIZZA_FRECCIA_RISPOSTA.ToString()]) && System.Configuration.ConfigurationManager.AppSettings[WebConfigKeys.NON_VISUALIZZA_FRECCIA_RISPOSTA.ToString()].Equals("1"))
            {
                this.HideAnswers = true;
            }

            if (!string.IsNullOrEmpty(System.Configuration.ConfigurationManager.AppSettings[WebConfigKeys.DiagrammiStato.ToString()]) && System.Configuration.ConfigurationManager.AppSettings[WebConfigKeys.DiagrammiStato.ToString()].Equals("1"))
            {
                this.EnableStateDiagram = true;
            }

            if (!string.IsNullOrEmpty(System.Configuration.ConfigurationManager.AppSettings[WebConfigKeys.CERCA_DUPLICATI_PROTOCOLLO_2.ToString()]) && bool.Parse(System.Configuration.ConfigurationManager.AppSettings[WebConfigKeys.CERCA_DUPLICATI_PROTOCOLLO_2.ToString()]))
            {
                this.FindDuplicateProtocol2 = true;
            }

            if (!string.IsNullOrEmpty(Utils.InitConfigurationKeys.GetValue(this.InfoUser.idAmministrazione, DBKeys.FE_KEY_WORDS.ToString())) && Utils.InitConfigurationKeys.GetValue(this.InfoUser.idAmministrazione, DBKeys.FE_KEY_WORDS.ToString()).Equals("1"))
            {
                this.PnlKeywpords.Visible = true;
            }

            if (!string.IsNullOrEmpty(System.Configuration.ConfigurationManager.AppSettings[WebConfigKeys.RIPROPONI_AVANZATO_ENABLED.ToString()]) && bool.Parse(System.Configuration.ConfigurationManager.AppSettings[WebConfigKeys.RIPROPONI_AVANZATO_ENABLED.ToString()]))
            {
                this.RepeatAdvancedEnabled = true;
            }

            if (!string.IsNullOrEmpty(System.Configuration.ConfigurationManager.AppSettings[WebConfigKeys.INOLTRA_DOC.ToString()]) && System.Configuration.ConfigurationManager.AppSettings[WebConfigKeys.INOLTRA_DOC.ToString()].Equals("1") && UIManager.UserManager.IsAuthorizedFunctions("DO_PROT_PROTOCOLLA"))
            {
                this.EnableForward = true;
            }
            if (!string.IsNullOrEmpty(System.Configuration.ConfigurationManager.AppSettings[WebConfigKeys.LITEDOCUMENT.ToString()]) && bool.Parse(System.Configuration.ConfigurationManager.AppSettings[WebConfigKeys.LITEDOCUMENT.ToString()]))
            {
                if (!string.IsNullOrEmpty(Request.QueryString["t"]) && (Request.QueryString["t"].Equals("n")))
                {
                    this.LoadOggettarioLite();
                }

                this.DocumentImgSearchProjects.Visible = false;
            }

            if (!string.IsNullOrEmpty(Utils.InitConfigurationKeys.GetValue(this.InfoUser.idAmministrazione, DBKeys.FE_ENABLE_CHECK_MEANS_SENDING.ToString())) && Utils.InitConfigurationKeys.GetValue(this.InfoUser.idAmministrazione, DBKeys.FE_ENABLE_CHECK_MEANS_SENDING.ToString()).Equals("1"))
            {
                this.IsEnableCheckMeansSending = true;
            }
            //abilito il pulsante di creazione diretta dei fascicoli procedimentali
            if (!string.IsNullOrEmpty(Utils.InitConfigurationKeys.GetValue("0", DBKeys.FE_NUOVO_FASC_DIRECT.ToString())) && (Utils.InitConfigurationKeys.GetValue("0", DBKeys.FE_NUOVO_FASC_DIRECT.ToString())).Equals("1"))
            {
                this.DocumentImgNewProject.Visible = true;
            }
            if (!string.IsNullOrEmpty(Utils.InitConfigurationKeys.GetValue("0", DBKeys.FE_ENABLE_FLUSSO_AUTOMATICO.ToString())) && Utils.InitConfigurationKeys.GetValue("0", DBKeys.FE_ENABLE_FLUSSO_AUTOMATICO.ToString()).Equals("1"))
            {
                this.DocumentImgFlussoProcedurale.Visible = true;
            }
            if (!string.IsNullOrEmpty(Utils.InitConfigurationKeys.GetValue("0", DBKeys.BE_ENABLE_PORTALE_PROCEDIMENTI.ToString())) && Utils.InitConfigurationKeys.GetValue("0", DBKeys.BE_ENABLE_PORTALE_PROCEDIMENTI.ToString()).Equals("1"))
            {
                this.ProceedingsEnabled = true;
            }
            else
            {
                this.ProceedingsEnabled = false;
            }

        }
        
        protected void InitializeLanguage()
        {
            string language = UIManager.UserManager.GetUserLanguage();
            this.Object.Title = Utils.Languages.GetLabelFromCode("TitleObjectPopup", language);
            this.Signature.Title = Utils.Languages.GetLabelFromCode("TitleSignaturePopup", language);

            this.SignaturePermanenteConfig.Title = Utils.Languages.GetLabelFromCode("TitleSignaturePermanentePopup", language);

            this.SignatureA4.Title = Utils.Languages.GetLabelFromCode("PopupSignatureA4", language);
            this.DocumentViewer.Title = Utils.Languages.GetLabelFromCode("TitleDocumentViewerPopup", language);
            this.OpenTitolario.Title = Utils.Languages.GetLabelFromCode("TitleClassificationScheme", language);
            this.ModifyVersion.Title = Utils.Languages.GetLabelFromCode("TitleModifyVersion", language);
            this.VersionAdd.Title = Utils.Languages.GetLabelFromCode("TitleVersionAdd", language);
            this.RepositoryView.Title = Utils.Languages.GetLabelFromCode("TitleRepositoryView", language);
            this.DocumentLblCreationDate.Text = Utils.Languages.GetLabelFromCode("DocumentLblCreationDate", language);
            this.DocumentLblRecordDate.Text = Utils.Languages.GetLabelFromCode("DocumentLblRecordDate", language);
            this.DocumentLblEmergencyNum.Text = Utils.Languages.GetLabelFromCode("DocumentLblEmergencyNum", language);
            this.DocumentLblEmergencyDate.Text = Utils.Languages.GetLabelFromCode("DocumentLblEmergencyDate", language);
            this.DocumentLitObject.Text = Utils.Languages.GetLabelFromCode("DocumentLitObject", language);
            this.DocumentImgDesriptionObject.AlternateText = Utils.Languages.GetLabelFromCode("DocumentImgDesriptionObject", language);
            this.DocumentImgDesriptionObject.ToolTip = Utils.Languages.GetLabelFromCode("DocumentImgDesriptionObject", language);
            this.ViewObject.Title = Utils.Languages.GetLabelFromCode("ViewObject", language);
            this.DocumentLitRegistries.Text = Utils.Languages.GetLabelFromCode("DocumentLitRegistries", language);
            this.DocumentCheckPrivate.Text = Utils.Languages.GetLabelFromCode("DocumentCheckPrivate", language);
            this.DocumentLitObjectChAv.Text = Utils.Languages.GetLabelFromCode("DocumentLitObjectChAv", language);
            this.ChooseCorrespondent.Title = Utils.Languages.GetLabelFromCode("ChooseCorrespondent", language);
            this.DocumentLblSender.Text = Utils.Languages.GetLabelFromCode("DocumentLblSender", language);
            this.DocumentImgMailSender.AlternateText = Utils.Languages.GetLabelFromCode("DocumentImgMailSender", language);
            this.DocumentImgMailSender.ToolTip = Utils.Languages.GetLabelFromCode("DocumentImgMailSender", language);
            this.DocumentImgPecSender.AlternateText = Utils.Languages.GetLabelFromCode("DocumentImgPecSender", language);
            this.DocumentImgPecSender.ToolTip = Utils.Languages.GetLabelFromCode("DocumentImgPecSender", language);
            this.DocumentImgSenderAddressBook.AlternateText = Utils.Languages.GetLabelFromCode("DocumentImgSenderAddressBook", language);
            this.DocumentImgSenderAddressBook.ToolTip = Utils.Languages.GetLabelFromCode("DocumentImgSenderAddressBook", language);
            this.DocumentImgSenderDetails.AlternateText = Utils.Languages.GetLabelFromCode("DocumentImgSenderDetails", language);
            this.DocumentImgSenderDetails.ToolTip = Utils.Languages.GetLabelFromCode("DocumentImgSenderDetails", language);
            this.DocumentLitMultipleSender.Text = Utils.Languages.GetLabelFromCode("DocumentLitMultipleSender", language);
            this.DocumentImgDownSender.AlternateText = Utils.Languages.GetLabelFromCode("DocumentImgDownSender", language);
            this.DocumentImgDownSender.ToolTip = Utils.Languages.GetLabelFromCode("DocumentImgDownSender", language);
            this.DocumentImgUpSender.AlternateText = Utils.Languages.GetLabelFromCode("DocumentImgUpSender", language);
            this.DocumentImgUpSender.ToolTip = Utils.Languages.GetLabelFromCode("DocumentImgUpSender", language);
            this.DocumentImgMultipleSenderAddressBook.AlternateText = Utils.Languages.GetLabelFromCode("DocumentImgMultipleSenderAddressBook", language);
            this.DocumentImgMultipleSenderAddressBook.ToolTip = Utils.Languages.GetLabelFromCode("DocumentImgMultipleSenderAddressBook", language);
            this.DocumentImgMultipleSenderDetails.AlternateText = Utils.Languages.GetLabelFromCode("DocumentImgMultipleSenderDetails", language);
            this.DocumentImgMultipleSenderDetails.ToolTip = Utils.Languages.GetLabelFromCode("DocumentImgMultipleSenderDetails", language);
            this.DocumentImgMultipleSenderDelete.AlternateText = Utils.Languages.GetLabelFromCode("DocumentImgMultipleSenderDelete", language);
            this.DocumentImgMultipleSenderDelete.ToolTip = Utils.Languages.GetLabelFromCode("DocumentImgMultipleSenderDelete", language);
            this.DocumentLitRecipient.Text = Utils.Languages.GetLabelFromCode("DocumentLitRecipient", language);
            this.DocumentImgPrintEnvelopesRecipients.AlternateText = Utils.Languages.GetLabelFromCode("DocumentImgPrintEnvelopesRecipients", language);
            this.DocumentImgPrintEnvelopesRecipients.ToolTip = Utils.Languages.GetLabelFromCode("DocumentImgPrintEnvelopesRecipients", language);
            this.DocumentImgRecipientAddressBook.AlternateText = Utils.Languages.GetLabelFromCode("DocumentImgRecipientAddressBook", language);
            this.DocumentImgRecipientAddressBook.ToolTip = Utils.Languages.GetLabelFromCode("DocumentImgRecipientAddressBook", language);
            this.DocumentImgAddRecipient.AlternateText = Utils.Languages.GetLabelFromCode("DocumentImgAddRecipient", language);
            this.DocumentImgAddRecipient.ToolTip = Utils.Languages.GetLabelFromCode("DocumentImgAddRecipient", language);
            this.DocumentLitRecipients.Text = Utils.Languages.GetLabelFromCode("DocumentLitRecipients", language);
            this.DocumentImgSending.AlternateText = Utils.Languages.GetLabelFromCode("DocumentImgSending", language);
            this.DocumentImgSending.ToolTip = Utils.Languages.GetLabelFromCode("DocumentImgSending", language);
            //PEC4 - requisito 6 <
            this.DocumentImgReportSpedizioni.AlternateText = Utils.Languages.GetLabelFromCode("DocumentImgReceivedSending", language);
            this.DocumentImgReportSpedizioni.ToolTip = Utils.Languages.GetLabelFromCode("DocumentImgReceivedSending", language);
            //this.DocumentImgReceivedSending.AlternateText = Utils.Languages.GetLabelFromCode("DocumentImgReceivedSending", language);
            //this.DocumentImgReceivedSending.ToolTip = Utils.Languages.GetLabelFromCode("DocumentImgReceivedSending", language);
            //>
            this.DocumentImgReportSpedizioni.AlternateText = Utils.Languages.GetLabelFromCode("DocumentImgReceivedSending", language);
            this.DocumentImgReportSpedizioni.ToolTip = Utils.Languages.GetLabelFromCode("DocumentImgReceivedSending", language);
            this.DocumentImgReceivedSendingCC.AlternateText = Utils.Languages.GetLabelFromCode("DocumentImgReceivedSending", language);
            this.DocumentImgReceivedSendingCC.ToolTip = Utils.Languages.GetLabelFromCode("DocumentImgReceivedSending", language);
            this.DocumentImgRecipientsDetails.AlternateText = Utils.Languages.GetLabelFromCode("DocumentImgRecipientsDetails", language);
            this.DocumentImgRecipientsDetails.ToolTip = Utils.Languages.GetLabelFromCode("DocumentImgRecipientsDetails", language);
            this.DocumentImgRecipientDetails.AlternateText = Utils.Languages.GetLabelFromCode("DocumentImgRecipientDetails", language);
            this.DocumentImgRecipientDetails.ToolTip = Utils.Languages.GetLabelFromCode("DocumentImgRecipientDetails", language);
            this.DocumentImgDeleteRecipient.AlternateText = Utils.Languages.GetLabelFromCode("DocumentImgDeleteRecipient", language);
            this.DocumentImgDeleteRecipient.ToolTip = Utils.Languages.GetLabelFromCode("DocumentImgDeleteRecipient", language);
            this.DocumentLitRecipientsCC.Text = Utils.Languages.GetLabelFromCode("DocumentLitRecipientsCC", language);
            this.DocumentImgAddRecipientToCC.AlternateText = Utils.Languages.GetLabelFromCode("DocumentImgAddRecipientToCC", language);
            this.DocumentImgAddRecipientToCC.ToolTip = Utils.Languages.GetLabelFromCode("DocumentImgAddRecipientToCC", language);
            this.DocumentImgAddRecipientFromCC.AlternateText = Utils.Languages.GetLabelFromCode("DocumentImgAddRecipientFromCC", language);
            this.DocumentImgAddRecipientFromCC.ToolTip = Utils.Languages.GetLabelFromCode("DocumentImgAddRecipientFromCC", language);
            this.DocumentImgRecipientsDetailsCC.AlternateText = Utils.Languages.GetLabelFromCode("DocumentImgRecipientsDetailsCC", language);
            this.DocumentImgRecipientsDetailsCC.ToolTip = Utils.Languages.GetLabelFromCode("DocumentImgRecipientsDetailsCC", language);
            this.DocumentImgRecipientDetailsCC.AlternateText = Utils.Languages.GetLabelFromCode("DocumentImgRecipientDetailsCC", language);
            this.DocumentImgRecipientDetailsCC.ToolTip = Utils.Languages.GetLabelFromCode("DocumentImgRecipientDetailsCC", language);
            this.DocumentImgDeleteRecipientCC.AlternateText = Utils.Languages.GetLabelFromCode("DocumentImgDeleteRecipientCC", language);
            this.DocumentImgDeleteRecipientCC.ToolTip = Utils.Languages.GetLabelFromCode("DocumentImgDeleteRecipientCC", language);
            this.DocumentLblAnswer.Text = Utils.Languages.GetLabelFromCode("DocumentLblAnswerText", language);
            this.AnswerSearchDocuments.Title = Utils.Languages.GetLabelFromCode("DocumentLblAnswerText", language);
            this.DocumentImgAnswerSearch.AlternateText = Utils.Languages.GetLabelFromCode("DocumentLblAnswerText", language);
            this.DocumentImgAnswerSearch.ToolTip = Utils.Languages.GetLabelFromCode("DocumentLblAnswerText", language);
            this.DocumentImgAnswerWithProtocol.AlternateText = Utils.Languages.GetLabelFromCode("DocumentImgAnswerWithProtocol", language);
            this.DocumentImgAnswerWithProtocol.ToolTip = Utils.Languages.GetLabelFromCode("DocumentImgAnswerWithProtocol", language);
            this.DocumentImgAnswerWithDocument.AlternateText = Utils.Languages.GetLabelFromCode("DocumentImgAnswerWithDocument", language);
            this.DocumentImgAnswerWithDocument.ToolTip = Utils.Languages.GetLabelFromCode("DocumentImgAnswerWithDocument", language);
            this.DocumentImgViewAnswers.AlternateText = Utils.Languages.GetLabelFromCode("DocumentImgViewAnswers", language);
            this.DocumentImgViewAnswers.ToolTip = Utils.Languages.GetLabelFromCode("DocumentImgViewAnswers", language);
            this.DocumentLitMeansSender.Text = Utils.Languages.GetLabelFromCode("DocumentLitMeansSender", language);
            this.DdlMeansSending.Attributes.Add("data-placeholder", Utils.Languages.GetLabelFromCode("DdlMeansSending", language));
            this.DocumentLitVisibleNotes.Text = Utils.Languages.GetLabelFromCode("DocumentLitVisibleNotes", language);
            this.DocumentLitVisibleNotesChars.Text = Utils.Languages.GetLabelFromCode("DocumentLitVisibleNotesChars", language);
            this.DocumentImgNotedetails.AlternateText = Utils.Languages.GetLabelFromCode("DocumentImgNotedetails", language);
            this.DocumentImgNotedetails.ToolTip = Utils.Languages.GetLabelFromCode("DocumentImgNotedetails", language);
            this.DocumentItemNotePersonal.Text = Utils.Languages.GetLabelFromCode("DocumentItemNotePersonal", language);
            this.DocumentItemNoteRole.Text = Utils.Languages.GetLabelFromCode("DocumentItemNoteRole", language);
            this.DocumentItemNoteRF.Text = Utils.Languages.GetLabelFromCode("DocumentItemNoteRF", language);
            this.DocumentItemNoteAll.Text = Utils.Languages.GetLabelFromCode("DocumentItemNoteAll", language);
            this.DocumentChekUser.Text = Utils.Languages.GetLabelFromCode("DocumentChekUser", language);
            this.DocumentLitTypeDocument.Text = Utils.Languages.GetLabelFromCode("DocumentLitTypeDocument", language);
            this.DocumentDdlTypeDocument.Attributes.Add("data-placeholder", Utils.Languages.GetLabelFromCode("DocumentDdlTypeDocument", language));
            this.DocumentLitProtocolSender.Text = Utils.Languages.GetLabelFromCode("DocumentLitProtocolSender", language);
            this.DocumentLitDateProtocolSender.Text = Utils.Languages.GetLabelFromCode("DocumentLitDateProtocolSender", language);
            this.DocumentLitArrivalDate.Text = Utils.Languages.GetLabelFromCode("DocumentLitArrivalDate", language);
            this.DocumentLitTimeOfArrival.Text = Utils.Languages.GetLabelFromCode("DocumentLitTimeOfArrival", language);
            this.DocumentDdlTransmissionsModel.Attributes.Add("data-placeholder", Utils.Languages.GetLabelFromCode("DocumentDdlTransmissionsModel", language));
            this.DocumentBtnCreateDocument.Text = Utils.Languages.GetLabelFromCode("DocumentBtnCreateDocument", language);
            this.DocumentBtnApponiSegnaturaPermanente.Text = Utils.Languages.GetLabelFromCode("DocumentBtnApponiSegnaturaPermanente", language);
            this.DocumentBtnSave.Text = Utils.Languages.GetLabelFromCode("DocumentBtnSave", language);
            this.DocumentBntRecord.Text = Utils.Languages.GetLabelFromCode("DocumentBntRecord", language);
            this.DocumentBtnRepeat.Text = Utils.Languages.GetLabelFromCode("DocumentBtnRepeat", language);
            this.DocumentBtnForward.Text = Utils.Languages.GetLabelFromCode("DocumentBtnForward", language);
            this.DocumentBtnSend.Text = Utils.Languages.GetLabelFromCode("DocumentBtnSend", language);
            this.DocumentBtnTransmit.Text = Utils.Languages.GetLabelFromCode("DocumentBtnTransmit", language);
            this.DocumentBtnAdL.Text = Utils.Languages.GetLabelFromCode("DocumentBtnAdL", language);
            this.DocumentBtnPrepared.Text = Utils.Languages.GetLabelFromCode("DocumentBtnPrepared", language);
            this.DocumentBtnPrint.Text = Utils.Languages.GetLabelFromCode("DocumentBtnPrint", language);
            this.DocumentBtnRemove.Text = Utils.Languages.GetLabelFromCode("DocumentBtnRemove", language);
            this.DocumentBtnUndo.Text = Utils.Languages.GetLabelFromCode("DocumentBtnUndo", language);
            this.DocumentBtnConsolid.Text = Utils.Languages.GetLabelFromCode("DocumentBtnConsolid", language);
            this.DocumentLitStateDiagram.Text = Utils.Languages.GetLabelFromCode("DocumentLitStateDiagram", language);
            this.DocumentDdlStateDiagram.Attributes.Add("data-placeholder", Utils.Languages.GetLabelFromCode("DocumentDdlStateDiagram", language));
            this.DocumentDateStateDiagram.Text = Utils.Languages.GetLabelFromCode("DocumentDateStateDiagram", language);
            this.AbortCounter.Title = Utils.Languages.GetLabelFromCode("AbortCounter", language);
            this.DocumentLitClassificationRapid.Text = Utils.Languages.GetLabelFromCode("ClassificationsTitleClassification", language);
            this.DocumentLitTransmRapid.Text = Utils.Languages.GetLabelFromCode("DocumentLitTransmRapid", language);
            this.DocumentImgObjectary.AlternateText = Utils.Languages.GetLabelFromCode("DocumentImgObjectary", language);
            this.DocumentImgObjectary.ToolTip = Utils.Languages.GetLabelFromCode("DocumentImgObjectary", language);
            this.DocumentImgViewDocumentExists.AlternateText = Utils.Languages.GetLabelFromCode("DocumentImgViewDocumentExists", language);
            this.DocumentImgViewDocumentExists.ToolTip = Utils.Languages.GetLabelFromCode("DocumentImgViewDocumentExists", language);
            this.btnclassificationschema.AlternateText = Utils.Languages.GetLabelFromCode("btnclassificationschema", language);
            this.btnclassificationschema.ToolTip = Utils.Languages.GetLabelFromCode("btnclassificationschema", language);
            this.DocumentImgSearchProjects.AlternateText = Utils.Languages.GetLabelFromCode("DocumentImgSearchProjects", language);
            this.DocumentImgSearchProjects.ToolTip = Utils.Languages.GetLabelFromCode("DocumentImgSearchProjects", language);
            this.AnswerShowAnswers.Title = Utils.Languages.GetLabelFromCode("ChainsAnswerDocuments", language);
            this.Note.Title = Utils.Languages.GetLabelFromCode("BaseMasterNotes", language);
            this.UplodadFile.Title = Utils.Languages.GetLabelFromCode("UplodadFile", language);
            //Pec4 - requisito 6
            this.SendingReportDocument.Title = Utils.Languages.GetLabelFromCode("DocumentImgReceivedSending", language);
            this.CorrespondentDetails.Title = Utils.Languages.GetLabelFromCode("CorrespondentDetailsTitle", language);
            this.RecipientsDetails.Title = Utils.Languages.GetLabelFromCode("RecipientsDetailsTitle", language);
            this.RecipientsCCDetails.Title = Utils.Languages.GetLabelFromCode("RecipientsCCDetailsTitle", language);
            this.ChoiceTypeDelivery.Title = Utils.Languages.GetLabelFromCode("ChoiceTypeDeliveryTitle", language);
            this.AbortRecord.Title = Utils.Languages.GetLabelFromCode("AbortRecordTitle", language);
            this.SelectRF.Title = Utils.Languages.GetLabelFromCode("DocumentLblTitle", language);
            this.LitDocumentAbortRecord.Text = Utils.Languages.GetLabelFromCode("LitDocumentAbortRecord", language);
            this.LitDocumentAbortRecordData.Text = Utils.Languages.GetLabelFromCode("LitDocumentAbortRecordData", language);
            this.LitDocumentAbortRecordReason.Text = Utils.Languages.GetLabelFromCode("LitDocumentAbortRecordReason", language);
            this.Consolidation.Title = Utils.Languages.GetLabelFromCode("ConsolidationLblTitle", language);
            this.RemoveProfile.Title = Utils.Languages.GetLabelFromCode("RemoveProfileTitle", language);
            this.AddressBook.Title = Utils.Languages.GetLabelFromCode("AddressBookTitle", language);
            this.AddressBookFromPopup.Title = Utils.Languages.GetLabelFromCode("AddressBookTitle", language);
            this.VerifyPrevious.Title = Utils.Languages.GetLabelFromCode("VerifyPreviousTitle", language);
            this.LitDocumentConsolidate.Text = Utils.Languages.GetLabelFromCode("LitDocumentConsolidateTitle", language);
            this.DocumentLitKeyword.Text = Utils.Languages.GetLabelFromCode("DocumentLitKeyword", language);
            this.DocumentImgSelectKeyword.ToolTip = Utils.Languages.GetLabelFromCode("DocumentImgSelectKeywordTooltip", language);
            this.DocumentImgSelectKeyword.AlternateText = Utils.Languages.GetLabelFromCode("DocumentImgSelectKeywordTooltip", language);
            this.SelectKeyword.Title = Utils.Languages.GetLabelFromCode("SelectKeywordLblTitle", language);
            this.Visibility.Title = Utils.Languages.GetLabelFromCode("LinkVisibility", language);
            this.DocumentImgDeleteKeyword.AlternateText = Utils.Languages.GetLabelFromCode("DocumentImgDeleteKeyword", language);
            this.DocumentImgDeleteKeyword.ToolTip = Utils.Languages.GetLabelFromCode("DocumentImgDeleteKeyword", language);
            this.DocumentImgObjectHistory.ToolTip = Utils.Languages.GetLabelFromCode("DocumentImgObjectHistory", language);
            this.DocumentImgHistorySender.ToolTip = Utils.Languages.GetLabelFromCode("DocumentImgHistorySender", language);
            this.DocumentImgHistoryMultipleSender.ToolTip = Utils.Languages.GetLabelFromCode("DocumentImgHistoryMultipleSender", language);
            this.DocumentImgHistoryRecipient.ToolTip = Utils.Languages.GetLabelFromCode("DocumentImgHistoryRecipient", language);
            this.DocumentImgHistoryTipology.ToolTip = Utils.Languages.GetLabelFromCode("DocumentImgHistoryTipology", language);
            this.DocumentImgHistoryState.ToolTip = Utils.Languages.GetLabelFromCode("DocumentImgHistoryState", language);
            this.History.Title = Utils.Languages.GetLabelFromCode("HistoryTitle", language);
            this.DocumentImgHistoryDate.ToolTip = Utils.Languages.GetLabelFromCode("DocumentImgHistoryDate", language);
            this.DocumentBtnAdLRole.Text = Utils.Languages.GetLabelFromCode("DocumentBtnAdLRole", language);
            this.DocumentCheckPrivate.ToolTip = Utils.Languages.GetLabelFromCode("DocumentCheckPrivateTooltip", language);
            this.DocumentChekUser.ToolTip = Utils.Languages.GetLabelFromCode("DocumentChekUserTooltip", language);
            this.imgMainDoc.ToolTip = Utils.Languages.GetLabelFromCode("imgMainDoc", language);
            this.ltlPrimaryFascText.Text = Utils.Languages.GetLabelFromCode("DocumentltlPrimaryFascText", language);
            this.LtlCreateResponse.Text = Utils.Languages.GetLabelFromCode("LtlCreateResponseText", language);
            this.LblViewResponse.Text = Utils.Languages.GetLabelFromCode("LblViewResponseText", language);
            this.LblViewResponse.ToolTip = "<div align='left'>" + Utils.Languages.GetLabelFromCode("LblViewResponse", language) + "</div>";
            this.DocumentImgDelAnswer.ToolTip = Utils.Languages.GetLabelFromCode("DocumentImgDelAnswer", language);
            this.SearchProject.Title = Utils.Languages.GetLabelFromCode("SearchProjectTitle", language);
            this.DocumentImgSenderInt.AlternateText = Utils.Languages.GetLabelFromCode("DocumentImgSenderIntToolTipSenderIntOk", language);
            this.DocumentImgSenderInt.ToolTip = Utils.Languages.GetLabelFromCode("DocumentImgSenderIntToolTipSenderIntOk", language);
            this.DocumentImgAddNewCorrispondent.AlternateText = Utils.Languages.GetLabelFromCode("DocumentImgAddCorrispondent", language);
            this.DocumentImgAddNewCorrispondent.ToolTip = Utils.Languages.GetLabelFromCode("DocumentImgAddCorrispondent", language);
            this.AddressBook_New.Title = Utils.Languages.GetLabelFromCode("AddressBook_New", language);
            this.DdlOggettario.Attributes.Add("data-placeholder", Utils.Languages.GetLabelFromCode("DocumentDdlOggettario", language));
            this.DetailsSenderK1.Title = Utils.Languages.GetLabelFromCode("DocumentAddreAddressBook_DetailsTitleModify", language);
            this.DetailsSenderK2.Title = Utils.Languages.GetLabelFromCode("DocumentAddreAddressBook_DetailsTitleChoice", language);

            this.SaveDialog.Title = Utils.Languages.GetLabelFromCode("CheckInOutTitle_SaveFile", language);
            this.CheckOutDocument.Title = Utils.Languages.GetLabelFromCode("CheckInOutTitle_CheckOut", language);
            this.UndoCheckOut.Title = Utils.Languages.GetLabelFromCode("CheckInOutTitle_UndoCheckOut", language);
            this.CheckInDocument.Title = Utils.Languages.GetLabelFromCode("CheckInOutTitle_CheckIn", language);
            this.OpenLocalCheckOutFile.Title = Utils.Languages.GetLabelFromCode("CheckInOutTitle_OpenFile", language);
            this.ShowCheckOutStatus.Title = Utils.Languages.GetLabelFromCode("CheckInOutTitle_Status", language);

            this.CheckOutModelActiveX.Title = this.CheckOutModelApplet.Title = Utils.Languages.GetLabelFromCode("CheckInOutTitle_Model", language);
            this.DigitalSignDetails.Title = Utils.Languages.GetLabelFromCode("DigitalSignDetailsTitle", language);

            this.OpenAddDocCustom.Title = Utils.Languages.GetLabelFromCode("OpenAddDocTitleCustom", language);
            this.SearchProjectCustom.Title = Utils.Languages.GetLabelFromCode("SearchProjectTitleCustom", language);
            this.HierarchyVisibility.Title = "Avviso estensione visibilità";
            this.HSMSignature.Title = Utils.Languages.GetLabelFromCode("HSMSignature", language);
            this.DigitalSignSelector.Title = Utils.Languages.GetLabelFromCode("DigitalSignSelectorTitle", language);
            this.DigitalVisureSelector.Title = Utils.Languages.GetLabelFromCode("DigitalVisureTitle", language);
            this.StartProcessSignature.Title = Utils.Languages.GetLabelFromCode("StartProcessSignature", language);
            this.DetailsLFAutomaticMode.Title = Utils.Languages.GetLabelFromCode("DetailsLFAutomaticModeTitle", language);

            // Gabriele Melini 05-03-2014
            // stampa etichette
            this.PrintLabel.Title = Utils.Languages.GetLabelFromCode("PrintLabelPopUpTitle", language);
            //Report Drag and drop
            this.MassiveReportDragAndDrop.Title = Utils.Languages.GetLabelFromCode("MassiveReportDragAndDropTitle", language);
            this.DocumentImgNewProject.ToolTip = Utils.Languages.GetLabelFromCode("DocumentImgNewProjectToolTip", language);
            this.NewProject.Title = Utils.Languages.GetLabelFromCode("DocumentImgNewProjectToolTip", language);
            this.FlussoAutomatico.Title = Utils.Languages.GetLabelFromCode("FlussoAutomaticoTitle", language);
            this.DocumentImgFlussoProcedurale.ToolTip = Utils.Languages.GetLabelFromCode("FlussoAutomaticoTitle", language); 
        }

        /// <summary>
        /// Verifica se ci sono corrispondenti interni che non siano utenti dunque soggetti ad ereditarietà
        /// </summary>
        /// <returns></returns>
        private bool CheckDestinatariInterni()
        {
            DocsPaWR.Corrispondente[] listaDest = null;
            DocsPaWR.Corrispondente[] listaDestCC = null;

            //se è abilitato l'ufficio referente invio trasmissioni con la ragione dell'amministrazione
            //if (this.e != null && enableUfficioRef.Equals("1"))
            //{
            //    return true;
            //}

            if (this.DocumentInWorking != null && this.DocumentInWorking.protocollo != null)
            {
                if (this.DocumentInWorking.protocollo.GetType() == typeof(DocsPaWR.ProtocolloInterno))
                {
                    listaDest = ((DocsPaWR.ProtocolloInterno)this.DocumentInWorking.protocollo).destinatari;
                    listaDestCC = ((DocsPaWR.ProtocolloInterno)this.DocumentInWorking.protocollo).destinatariConoscenza;
                }

                if (this.DocumentInWorking.protocollo.GetType() == typeof(DocsPaWR.ProtocolloUscita))
                {
                    listaDest = ((DocsPaWR.ProtocolloUscita)this.DocumentInWorking.protocollo).destinatari;
                    listaDestCC = ((DocsPaWR.ProtocolloUscita)this.DocumentInWorking.protocollo).destinatariConoscenza;
                }
            }

            if (listaDest != null && listaDest.Length > 0)
            {
                for (int i = 0; i < listaDest.Length; i++)
                {
                    if (listaDest[i].GetType() == typeof(DocsPaWR.UnitaOrganizzativa))
                    {
                        DocsPaWR.UnitaOrganizzativa UO = (DocsPaWR.UnitaOrganizzativa)listaDest[i];
                        //Controlla se almeno uno dei registri del ruolo è uguale a quello corrente
                        //foreach (DocsPAWA.DocsPaWR.Registro regUO in UO.registri)
                        //{
                        //    if (regUO.systemId == regSelezionato.systemId)
                        if (UO.tipoIE == "I")
                        {
                            return true;
                        }
                        //}
                    }

                    if (listaDest[i].GetType() == typeof(DocsPaWR.Ruolo))
                    {
                        DocsPaWR.Ruolo ruolo = (DocsPaWR.Ruolo)listaDest[i];
                        //Controlla se almeno uno dei registri del ruolo è uguale a quello corrente
                        //foreach(DocsPAWA.DocsPaWR.Registro reg in ruolo.registri)
                        //{
                        //    if (reg.systemId == regSelezionato.systemId)
                        if (ruolo.tipoIE == "I")
                        {
                            return true;
                        }
                        //}
                    }
                }
            }

            if (listaDestCC != null && listaDestCC.Length > 0)
            {
                for (int i = 0; i < listaDestCC.Length; i++)
                {
                    if (listaDestCC[i].GetType() == typeof(DocsPaWR.UnitaOrganizzativa))
                    {
                        DocsPaWR.UnitaOrganizzativa UOcc = (DocsPaWR.UnitaOrganizzativa)listaDestCC[i];
                        //Controlla se almeno uno dei registri del ruolo è uguale a quello corrente
                        //foreach (DocsPAWA.DocsPaWR.Registro regUOcc in UOcc.registri)
                        //{
                        //    if (regUOcc.systemId == regSelezionato.systemId)
                        if (UOcc.tipoIE == "I")
                        {
                            return true;
                        }
                        //}
                    }

                    if (listaDestCC[i].GetType() == typeof(DocsPaWR.Ruolo))
                    {
                        DocsPaWR.Ruolo ruoloCC = (DocsPaWR.Ruolo)listaDestCC[i];
                        //Controlla se almeno uno dei registri del ruolo è uguale a quello corrente
                        //foreach (DocsPAWA.DocsPaWR.Registro regCC in ruoloCC.registri)
                        //{
                        //    if (regCC.systemId == regSelezionato.systemId)
                        if (ruoloCC.tipoIE == "I")
                        {
                            return true;
                        }
                        //}
                    }
                }
            }
            return false;
        }


        protected void PopulateDDLRegistry(DocsPaWR.Ruolo role)
        {
            foreach (DocsPaWR.Registro reg in role.registri)
            {
                if (!reg.flag_pregresso)
                {
                    ListItem item = new ListItem();
                    item.Text = reg.codRegistro;
                    item.Value = reg.systemId;
                    this.DdlRegistries.Items.Add(item);
                }
            }
        }

        protected void RblTypeProtocol_OnSelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                // save in session
                this.TypeProtocol = this.RblTypeProtocol.SelectedValue;
                this.DocumentInWorking.tipoProto = this.TypeProtocol;
                if (this.RapidClassificationRequiredByTypeDoc)
                {
                    this.LblClassRequired.Visible = DocumentManager.IsClassificationRqueredByTypeDoc(this.TypeProtocol);
                }
                if (!string.IsNullOrEmpty(this.RblTypeProtocol.SelectedValue))
                {
                    SchedaDocumento document = DocumentManager.getSelectedRecord();
                    if (this.RblTypeProtocol.SelectedValue.Equals("A"))
                    {
                        this.Sender = null;
                        this.ListRecipients = null;
                        this.ListRecipientsCC = null;
                        this.RblTypeProtocol.Items[0].Attributes.Add("class", "orange");
                        this.container.Attributes.Add("class", "borderOrange");
                        this.containerDocumentTabDxBorder.Attributes.Add("class", "containerDocumentTabOrangeDxBorder");
                        this.containerDocumentTab.Attributes.Add("class", "containerDocumentTabOrange");
                        if (this.EnableMultipleSenders)
                        {
                            this.PnlMultipleSender.Visible = true;
                        }
                        if (this.MeansSendingRequired)
                        {
                            this.PnlMeansSender.Visible = true;
                        }
                        this.PnlRecipients.Visible = false;
                        this.DocumentBtnSend.Visible = false;
                        if (this.EnableForward)
                        {
                            this.DocumentBtnForward.Visible = true;
                            this.DocumentBtnForward.Enabled = false;
                        }
                        else
                        {
                            this.DocumentBtnForward.Visible = false;
                        }
                        this.DocumentBtnTransmit.Visible = false;
                        this.PnlArrivaleDate.Visible = true;
                        this.PnlSenderProtocol.Visible = true;
                        this.TxtCodeSender.Text = string.Empty;
                        this.TxtDescriptionSender.Text = string.Empty;
                        this.HeaderDocument.TypeRecord = "A";
                        if (document != null && document.protocollo != null && string.IsNullOrEmpty(document.protocollo.segnatura))
                        {
                            this.DocumentInWorking.protocollo = new DocsPaWR.ProtocolloEntrata();
                        }
                    }
                    else
                    {
                        if (this.RblTypeProtocol.SelectedValue.Equals("P"))
                        {
                            this.Sender = null;
                            this.ListRecipients = null;
                            this.ListRecipientsCC = null;

                            this.RblTypeProtocol.Items[1].Attributes.Add("class", "green");

                            this.container.Attributes.Add("class", "borderGreen");

                            this.containerDocumentTabDxBorder.Attributes.Add("class", "containerDocumentTabGreenDxBorder");
                            this.containerDocumentTab.Attributes.Add("class", "containerDocumentTabGreen");
                            this.PnlMultipleSender.Visible = false;
                            this.PnlMeansSender.Visible = false;
                            this.PnlRecipients.Visible = true;
                            this.DocumentBtnSend.Visible = true;
                            this.DocumentBtnSend.Enabled = false;
                            this.DocumentBtnTransmit.Visible = false;
                            this.PnlArrivaleDate.Visible = false;
                            this.PnlSenderProtocol.Visible = false;
                            this.DocumentBtnForward.Visible = false;
                            this.HeaderDocument.TypeRecord = "P";
                            this.DocumentImgPrintEnvelopesRecipients.Enabled = false;

                            if (this.EnableSenderDefault)
                            {
                                this.SetSenderDefault();
                            }
                            else
                            {
                                this.TxtCodeSender.Text = string.Empty;
                                this.TxtDescriptionSender.Text = string.Empty;
                            }
                            if (document != null && document.protocollo != null && string.IsNullOrEmpty(document.protocollo.segnatura))
                            {
                                this.DocumentInWorking.protocollo = new DocsPaWR.ProtocolloUscita();
                            }
                        }
                        else
                        {
                            if (this.RblTypeProtocol.SelectedValue.Equals("I"))
                            {
                                this.Sender = null;
                                this.ListRecipients = null;
                                this.ListRecipientsCC = null;
                                this.RblTypeProtocol.Items[2].Attributes.Add("class", "blue");
                                this.container.Attributes.Add("class", "borderBlue");
                                this.containerDocumentTabDxBorder.Attributes.Add("class", "containerDocumentTabBlueDxBorder");
                                this.containerDocumentTab.Attributes.Add("class", "containerDocumentTabBlue");
                                this.PnlMultipleSender.Visible = false;
                                this.PnlMeansSender.Visible = false;
                                this.PnlRecipients.Visible = true;
                                this.DocumentBtnSend.Visible = false;
                                this.DocumentBtnTransmit.Visible = true;
                                this.DocumentBtnTransmit.Enabled = false;
                                this.PnlArrivaleDate.Visible = false;
                                this.PnlSenderProtocol.Visible = false;
                                this.DocumentBtnForward.Visible = false;
                                this.DocumentImgPrintEnvelopesRecipients.Enabled = false;
                                this.HeaderDocument.TypeRecord = "I";
                                if (this.EnableSenderDefault)
                                {
                                    this.SetSenderDefault();
                                }
                                else
                                {
                                    this.TxtCodeSender.Text = string.Empty;
                                    this.TxtDescriptionSender.Text = string.Empty;
                                }

                                if (document != null && document.protocollo != null && string.IsNullOrEmpty(document.protocollo.segnatura))
                                {
                                    this.DocumentInWorking.protocollo = new DocsPaWR.ProtocolloInterno();
                                }
                            }
                        }
                    }

                    this.UpContainer.Update();
                    this.UpcontainerDocumentTabDxBorder.Update();
                    this.UpContainerDocumentTab.Update();
                    this.UpPnlMultipleSender.Update();
                    this.UpPnlMeansSender.Update();
                    this.UpPnlRecipients.Update();
                    this.UpDocumentButtons.Update();
                    this.UpPnlArrivaleDate.Update();
                    this.UpPnlSenderProtocol.Update();
                    this.SetAjaxAddressBook();
                    this.ListRecipients = null;
                    this.ListRecipientsCC = null;
                    this.ListBoxRecipient.Items.Clear();
                    this.ListBoxRecipientCC.Items.Clear();
                    this.HeaderDocument.RefreshLayoutHeader();
                    this.UpcontainerDocumentTabLeftBorder.Update();

                }
            }
            catch (System.Exception ex)
            {
                UIManager.AdministrationManager.DiagnosticError(ex);
                return;
            }
        }

        private void SetSenderDefault()
        {
            DocsPaWR.Ruolo role = UIManager.RoleManager.GetRoleInSession();
            DocsPaWR.Corrispondente corr = role.uo;
            if (corr != null)
            {
                this.IdSender.Value = corr.systemId;
                this.TxtCodeSender.Text = corr.codiceRubrica;
                this.TxtDescriptionSender.Text = corr.descrizione;
                this.Sender = corr;
            }
        }

        protected SchedaDocumento SetTypeRecord(SchedaDocumento doc)
        {
            SchedaDocumento result = doc;
            result.oggetto = new Oggetto();
            result.oggetto.descrizione = this.TxtObject.Text;
            result.oggetto.daAggiornare = true;
            result.tipoProto = this.RblTypeProtocol.SelectedValue;

            this.Sender = this.VerifySender();

            if (this.RblTypeProtocol.SelectedValue.Equals("A"))
            {
                string emailMittente = string.Empty;
                if (doc.protocollo != null)
                    emailMittente = ((ProtocolloEntrata)doc.protocollo).emailMittente;
                doc.protocollo = new DocsPaWR.ProtocolloEntrata();
                ((ProtocolloEntrata)doc.protocollo).mittente = this.Sender;
                ((ProtocolloEntrata)doc.protocollo).daAggiornareMittente = true;
                ((ProtocolloEntrata)doc.protocollo).emailMittente = emailMittente;
                if (this.EnableMultipleSenders)
                {
                    if (this.MultipleSenders != null && this.MultipleSenders.Count > 0)
                    {
                        ((ProtocolloEntrata)doc.protocollo).mittenti = this.MultipleSenders.ToArray<Corrispondente>();
                        ((ProtocolloEntrata)doc.protocollo).daAggiornareMittentiMultipli = true;
                    }
                }
                if (this.MeansSendingRequired)
                {
                    if (!string.IsNullOrEmpty(this.DdlMeansSending.SelectedItem.Value))
                    {
                        doc.mezzoSpedizione = this.DdlMeansSending.SelectedItem.Value;
                        doc.descMezzoSpedizione = this.DdlMeansSending.SelectedItem.Text;
                    }
                    else
                    {
                        doc.mezzoSpedizione = "0";
                        doc.descMezzoSpedizione = string.Empty;
                    }
                }
            }
            else
            {
                if (this.RblTypeProtocol.SelectedValue.Equals("P"))
                {
                    doc.protocollo = new DocsPaWR.ProtocolloUscita();
                    ((ProtocolloUscita)doc.protocollo).mittente = this.Sender;
                    ((ProtocolloUscita)doc.protocollo).daAggiornareMittente = true;
                    ((ProtocolloUscita)doc.protocollo).destinatari = this.ListRecipients.ToArray<Corrispondente>();
                    if (this.ListRecipientsCC != null && this.ListRecipientsCC.Count > 0)
                    {
                        ((ProtocolloUscita)doc.protocollo).destinatariConoscenza = this.ListRecipientsCC.ToArray<Corrispondente>();
                    }
                }
                else
                {
                    if (this.RblTypeProtocol.SelectedValue.Equals("I"))
                    {
                        doc.protocollo = new DocsPaWR.ProtocolloInterno();
                        ((ProtocolloInterno)doc.protocollo).mittente = this.Sender;
                        ((ProtocolloInterno)doc.protocollo).daAggiornareMittente = true;
                        ((ProtocolloInterno)doc.protocollo).destinatari = this.ListRecipients.ToArray<Corrispondente>();
                        if (this.ListRecipientsCC != null && this.ListRecipientsCC.Count > 0)
                        {
                            ((ProtocolloInterno)doc.protocollo).destinatariConoscenza = this.ListRecipientsCC.ToArray<Corrispondente>();
                        }
                    }


                }
            }

            if (this.DocumentCheckPrivate.Checked)
            {
                result.privato = "1";
            }
            else
            {
                result.privato = "0";
            }

            if (this.DocumentChekUser.Visible && this.DocumentChekUser.Checked)
            {
                result.personale = "1";
            }

            result.registro = UIManager.RegistryManager.GetRegistryInSession();

            return result;
        }

        protected SchedaDocumento SetEditDocument(SchedaDocumento doc)
        {
            SchedaDocumento result = doc;
            bool refresh = false;

            //EMANUELA  20/03/2015: modificato if seguente per il ticket incid.574558. !string.IsNullOrEmpty(result.oggetto.descrizione) non va bene nel caso
            //di predisposti in arrivo via mail senza oggetto perchè se la descrizione è vuota ma sto aggiornando l'oggetto, !string.IsNullOrEmpty(result.oggetto.descrizione)
            //fa saltare la condizione e quindi non imposta result.oggetto.daAggiornare = true;
            //if (result.oggetto != null && !string.IsNullOrEmpty(result.oggetto.descrizione) && !string.IsNullOrEmpty(this.TxtObject.Text) && !result.oggetto.descrizione.Equals(this.TxtObject.Text))
            if (result.oggetto != null && result.oggetto.descrizione != null && !string.IsNullOrEmpty(this.TxtObject.Text) && !result.oggetto.descrizione.Equals(this.TxtObject.Text))
            {
                result.oggetto = new Oggetto();
                result.oggetto.descrizione = this.TxtObject.Text;
                result.oggetto.daAggiornare = true;
            }
            else
            {
                result.oggetto.descrizione = this.TxtObject.Text;
            }

            if (this.RblTypeProtocol.Visible)
            {
                result.tipoProto = this.RblTypeProtocol.SelectedValue;

                if (this.RblTypeProtocol.SelectedValue.Equals("A"))
                {
                    if (result.protocollo == null)
                    {
                        result.protocollo = new DocsPaWR.ProtocolloEntrata();
                    }

                    ((ProtocolloEntrata)result.protocollo).mittente = this.VerifyEditSender(result, out refresh);
                    ((ProtocolloEntrata)result.protocollo).daAggiornareMittente = (refresh || this.EditSender);
                    if (this.EnableMultipleSenders)
                    {
                        if (this.MultipleSenders != null)
                        {
                            ((ProtocolloEntrata)result.protocollo).mittenti = this.MultipleSenders.ToArray<Corrispondente>();
                            ((ProtocolloEntrata)result.protocollo).daAggiornareMittentiMultipli = this.EditMultipleSender;
                        }
                    }
                    if (!string.IsNullOrEmpty(result.documenti[0].dataArrivo) &&
                       !(utils.dateLength(result.documenti[0].dataArrivo).Equals(this.TxtArrivalDate.Text) &&
                        ((string.IsNullOrEmpty(utils.getTime(result.documenti[0].dataArrivo)) && string.IsNullOrEmpty(this.TxtTimeOfArrival.Text)) ||
                          (!string.IsNullOrEmpty(utils.getTime(result.documenti[0].dataArrivo)) && utils.getTime(result.documenti[0].dataArrivo).Equals(this.TxtTimeOfArrival.Text)))
                       ))
                    {
                        result.dtaArrivoDaStoricizzare = "1";
                    }
                    else if (string.IsNullOrEmpty(result.documenti[0].dataArrivo) && !string.IsNullOrEmpty(this.TxtArrivalDate.Text))
                    {
                        result.dtaArrivoDaStoricizzare = "1";
                    }
                }
                else
                {
                    if (this.RblTypeProtocol.SelectedValue.Equals("P"))
                    {
                        if (result.protocollo == null)
                        {
                            result.protocollo = new DocsPaWR.ProtocolloUscita();
                        }
                        ((ProtocolloUscita)result.protocollo).mittente = this.VerifyEditSender(result, out refresh);
                        ((ProtocolloUscita)result.protocollo).daAggiornareMittente = (refresh || this.EditSender);
                        ((ProtocolloUscita)result.protocollo).destinatari = this.ListRecipients.ToArray<Corrispondente>();
                        //((ProtocolloUscita)result.protocollo).daAggiornareDestinatari = this.EditRecipients;
                        //((ProtocolloUscita)result.protocollo).daAggiornareDestinatariConoscenza = this.EditRecipientsCC;
                        // MODIFICA LEMBO. Forzo la modifica dei destinatari ogni volta che salvo il documento. 
                        ((ProtocolloUscita)result.protocollo).daAggiornareDestinatari = IsNotEqualListRecipients(EditListRecipients, ListRecipients);
                        ((ProtocolloUscita)result.protocollo).daAggiornareDestinatariConoscenza = IsNotEqualListRecipients(EditListRecipientsCC, ListRecipientsCC);
                        if (this.modificaDestDaChoiceTypeDelivery)
                        {
                            ((ProtocolloUscita)result.protocollo).daAggiornareDestinatari = true;
                            ((ProtocolloUscita)result.protocollo).daAggiornareDestinatariConoscenza = true;
                            this.modificaDestDaChoiceTypeDelivery = false;
                        }

                        if (this.ListRecipientsCC != null && this.ListRecipientsCC.Count > 0)
                        {
                            ((ProtocolloUscita)result.protocollo).destinatariConoscenza = this.ListRecipientsCC.ToArray<Corrispondente>();
                        }
                        else
                        {
                            ((ProtocolloUscita)result.protocollo).destinatariConoscenza = null;
                        }

                        if (!string.IsNullOrEmpty(result.protocollo.segnatura))
                        {
                            this.DocumentBtnSend.Enabled = true;
                        }
                    }
                    else
                    {
                        if (this.RblTypeProtocol.SelectedValue.Equals("I"))
                        {
                            if (result.protocollo == null)
                            {
                                result.protocollo = new DocsPaWR.ProtocolloInterno();
                            }
                            ((ProtocolloInterno)result.protocollo).mittente = this.VerifyEditSender(result, out refresh);
                            ((ProtocolloInterno)result.protocollo).daAggiornareMittente = (refresh || this.EditSender);
                            ((ProtocolloInterno)result.protocollo).destinatari = this.ListRecipients.ToArray<Corrispondente>();
                            //((ProtocolloInterno)result.protocollo).daAggiornareDestinatari = this.EditRecipients;
                            //((ProtocolloInterno)result.protocollo).daAggiornareDestinatariConoscenza = this.EditRecipientsCC;
                            ((ProtocolloInterno)result.protocollo).daAggiornareDestinatari = IsNotEqualListRecipients(EditListRecipients, ListRecipients);
                            //this.EditListRecipients = ListRecipients;
                            ((ProtocolloInterno)result.protocollo).daAggiornareDestinatariConoscenza = IsNotEqualListRecipients(EditListRecipientsCC, ListRecipientsCC);
                            //this.EditListRecipientsCC = ListRecipientsCC;
                            if (this.ListRecipientsCC != null && this.ListRecipientsCC.Count > 0)
                            {
                                ((ProtocolloInterno)result.protocollo).destinatariConoscenza = this.ListRecipientsCC.ToArray<Corrispondente>();
                            }
                            else
                            {
                                ((ProtocolloUscita)result.protocollo).destinatariConoscenza = null;
                            }
                        }
                    }
                }

            }
            else
            {
                result.tipoProto = "G";
            }


            if (this.DocumentCheckPrivate.Checked)
            {
                result.privato = "1";
            }

            if (this.DocumentChekUser.Visible && this.DocumentChekUser.Checked)
            {
                result.personale = "1";
            }

            result.registro = UIManager.RegistryManager.GetRegistryInSession();

            return result;
        }

        protected Templates PopulateTemplate()
        {

            Templates result = this.Template;
            for (int i = 0; i < result.ELENCO_OGGETTI.Length; i++)
            {
                DocsPaWR.OggettoCustom oggettoCustom = (DocsPaWR.OggettoCustom)result.ELENCO_OGGETTI[i];
                this.salvaValoreCampo(oggettoCustom, oggettoCustom.SYSTEM_ID.ToString());

            }
            this.Template = result;

            return result;
        }




















        private void salvaValoreCampo(DocsPaWR.OggettoCustom oggettoCustom, string idOggetto)
        {
            //In questo metodo, oltre al controllo si salvano i valori dei campi inseriti 
            //dall'utente nel template in sessione. Solo successivamente, quanto verra' salvato 
            //il documento i suddetti valori verranno riportai nel Db vedi metodo "btn_salva_Click" della "docProfilo.aspx"

            //Label_Avviso.Visible = false;
            switch (oggettoCustom.TIPO.DESCRIZIONE_TIPO)
            {
                case "CampoDiTesto":
                    CustomTextArea textBox = (CustomTextArea)this.PnlTypeDocument.FindControl(idOggetto);
                    if (textBox != null)
                    {
                        oggettoCustom.VALORE_DATABASE = textBox.Text;
                    }
                    /* Emanuela 03-11-2014: commentato perchè se un utente non ha visibilita sui campi ed effettua un salvataggio/protocollazione
                     * del documento, i campi sul DB vengono svuotati(eliminando il valore precedente)
                else
                {
                    oggettoCustom.VALORE_DATABASE = string.Empty;
                }
                     * */
                    break;
                case "CasellaDiSelezione":
                    CheckBoxList casellaSelezione = (CheckBoxList)this.PnlTypeDocument.FindControl(idOggetto);
                    //Nessuna selezione
                    if (casellaSelezione != null)
                    {
                        if (casellaSelezione.SelectedIndex == -1 && oggettoCustom.CAMPO_OBBLIGATORIO.Equals("SI"))
                        {
                            for (int i = 0; i < oggettoCustom.VALORI_SELEZIONATI.Length; i++)
                                oggettoCustom.VALORI_SELEZIONATI[i] = null;
                            return;
                        }

                        //Controllo eventuali selezioni
                        oggettoCustom.VALORI_SELEZIONATI = new string[oggettoCustom.ELENCO_VALORI.Length];
                        oggettoCustom.VALORE_DATABASE = string.Empty;

                        for (int i = 0; i < oggettoCustom.ELENCO_VALORI.Length; i++)
                        {
                            DocsPaWR.ValoreOggetto valoreOggetto = (DocsPaWR.ValoreOggetto)oggettoCustom.ELENCO_VALORI[i];
                            foreach (ListItem valoreSelezionato in casellaSelezione.Items)
                            {
                                if (valoreOggetto.VALORE == valoreSelezionato.Text && valoreSelezionato.Selected)
                                    oggettoCustom.VALORI_SELEZIONATI[i] = valoreSelezionato.Text;
                            }
                        }
                    }
                    /*Emanuela 03-11-2014: commentato perchè se un utente non ha visibilita sui campi ed effettua un salvataggio/protocollazione
                     * del documento, i campi sul DB vengono svuotati(eliminando il valore precedente)
                else
                {
                    //Controllo eventuali selezioni
                    oggettoCustom.VALORI_SELEZIONATI = new string[oggettoCustom.ELENCO_VALORI.Length];
                    oggettoCustom.VALORE_DATABASE = string.Empty;
                }
                     */
                    break;
                case "MenuATendina":
                    DropDownList dropDwonList = (DropDownList)this.PnlTypeDocument.FindControl(idOggetto);
                    if (dropDwonList != null)
                    {
                        oggettoCustom.VALORE_DATABASE = dropDwonList.SelectedItem.Text;
                    }
                    /*Emanuela 03-11-2014: commentato perchè se un utente non ha visibilita sui campi ed effettua un salvataggio/protocollazione
                         * del documento, i campi sul DB vengono svuotati(eliminando il valore precedente)
                    else
                    {
                        oggettoCustom.VALORE_DATABASE = string.Empty;
                    }
                     * */
                    break;
                case "SelezioneEsclusiva":
                    RadioButtonList radioButtonList = (RadioButtonList)this.PnlTypeDocument.FindControl(idOggetto);
                    if (radioButtonList != null)
                    {
                        if ((oggettoCustom.VALORE_DATABASE == "-1" && oggettoCustom.CAMPO_OBBLIGATORIO.Equals("SI")))
                        {
                            oggettoCustom.VALORE_DATABASE = string.Empty;
                            return;
                        }
                        if (oggettoCustom.VALORE_DATABASE == "-1")
                        {
                            oggettoCustom.VALORE_DATABASE = string.Empty;
                        }
                        else
                        {
                            if (radioButtonList.SelectedItem != null)
                                oggettoCustom.VALORE_DATABASE = radioButtonList.SelectedItem.Text;
                        }
                    }
                    /*Emanuela 03-11-2014: commentato perchè se un utente non ha visibilita sui campi ed effettua un salvataggio/protocollazione
                         * del documento, i campi sul DB vengono svuotati(eliminando il valore precedente)
                    else
                    {
                        oggettoCustom.VALORE_DATABASE = string.Empty;
                    }
                     * */
                    break;
                case "Data":
                    UserControls.Calendar data = (UserControls.Calendar)this.PnlTypeDocument.FindControl(oggettoCustom.SYSTEM_ID.ToString());
                    if (data != null)
                    {
                        if (string.IsNullOrEmpty(data.Text) && oggettoCustom.CAMPO_OBBLIGATORIO.Equals("SI"))
                        {
                            oggettoCustom.VALORE_DATABASE = string.Empty;
                            return;
                        }
                        if (string.IsNullOrEmpty(data.Text))
                            oggettoCustom.VALORE_DATABASE = string.Empty;
                        else
                            oggettoCustom.VALORE_DATABASE = data.Text;
                    }
                    /*Emanuela 03-11-2014: commentato perchè se un utente non ha visibilita sui campi ed effettua un salvataggio/protocollazione
                         * del documento, i campi sul DB vengono svuotati(eliminando il valore precedente)
                    else
                    {
                        oggettoCustom.VALORE_DATABASE = string.Empty;
                    }
                     * */
                    break;
                case "Corrispondente":
                    UserControls.CorrespondentCustom corr = (UserControls.CorrespondentCustom)this.PnlTypeDocument.FindControl(oggettoCustom.SYSTEM_ID.ToString());
                    if (corr != null)
                    {
                        oggettoCustom.VALORE_DATABASE = corr.IdCorrespondentCustom;
                    }
                    /*Emanuela 03-11-2014: commentato perchè se un utente non ha visibilita sui campi ed effettua un salvataggio/protocollazione
                         * del documento, i campi sul DB vengono svuotati(eliminando il valore precedente)
                    else
                    {
                        oggettoCustom.VALORE_DATABASE = string.Empty;
                    }
                     * */
                    break;
                case "Contatore":
                case "ContatoreSottocontatore":
                    if (string.IsNullOrEmpty(oggettoCustom.VALORE_DATABASE))
                    {
                        switch (oggettoCustom.TIPO_CONTATORE)
                        {
                            case "A":
                                DropDownList ddlAoo = (DropDownList)this.PnlTypeDocument.FindControl(oggettoCustom.SYSTEM_ID.ToString() + "_menu"); if (ddlAoo != null)
                                {
                                    oggettoCustom.ID_AOO_RF = ddlAoo.SelectedValue;
                                }
                                break;
                            case "R":
                                DropDownList ddlRf = (DropDownList)this.PnlTypeDocument.FindControl(oggettoCustom.SYSTEM_ID.ToString() + "_menu"); if (ddlRf != null)
                                {
                                    oggettoCustom.ID_AOO_RF = ddlRf.SelectedValue;
                                }
                                break;
                        }
                        if (oggettoCustom.CONTA_DOPO == "1")
                        {
                            CheckBox cbContaDopo = (CheckBox)this.PnlTypeDocument.FindControl(oggettoCustom.SYSTEM_ID.ToString() + "_contaDopo");
                            if (cbContaDopo != null)
                            {
                                // se il documento è stato già creato
                                if (this.DocumentInWorking != null && this.DocumentInWorking.docNumber != null)
                                {
                                    DocsPaWR.Stato stato = DiagrammiManager.GetStateDocument(this.DocumentInWorking.docNumber);
                                    if (stato != null && stato.STATO_FINALE)
                                    // il documento è in stato finale dunque non devo inibire l'incremento del contatore
                                    {
                                        oggettoCustom.CONTATORE_DA_FAR_SCATTARE = false;
                                    }
                                    else
                                    {
                                        oggettoCustom.CONTATORE_DA_FAR_SCATTARE = cbContaDopo.Checked;
                                    }
                                }
                                //caso documento in creazione
                                else
                                {
                                    oggettoCustom.CONTATORE_DA_FAR_SCATTARE = cbContaDopo.Checked;
                                }
                            }
                        }
                        else
                        {
                            oggettoCustom.CONTATORE_DA_FAR_SCATTARE = true;
                        }
                        if (!string.IsNullOrEmpty(oggettoCustom.FORMATO_CONTATORE) && oggettoCustom.FORMATO_CONTATORE.LastIndexOf("COD_UO") != -1)
                        {
                            if (this.Role != null && this.Role.uo != null)
                                oggettoCustom.CODICE_DB = this.Role.uo.codice;
                        }
                    }
                    break;
                case "Link":
                    LinkDocFasc link = (LinkDocFasc)this.PnlTypeDocument.FindControl(oggettoCustom.SYSTEM_ID.ToString());
                    if (link != null)
                    {
                        oggettoCustom.VALORE_DATABASE = link.Value;
                    }
                    /*Emanuela 03-11-2014: commentato perchè se un utente non ha visibilita sui campi ed effettua un salvataggio/protocollazione
                         * del documento, i campi sul DB vengono svuotati(eliminando il valore precedente)
                    else
                    {
                        oggettoCustom.VALORE_DATABASE = "";
                    }
                     * */
                    break;
                case "OggettoEsterno":
                    IntegrationAdapter intAd = (IntegrationAdapter)this.PnlTypeDocument.FindControl(oggettoCustom.SYSTEM_ID.ToString());
                    IntegrationAdapterValue value = intAd.Value;
                    if (value != null)
                    {
                        oggettoCustom.VALORE_DATABASE = value.Descrizione;
                        oggettoCustom.CODICE_DB = value.Codice;
                        oggettoCustom.MANUAL_INSERT = value.ManualInsert;
                    }
                    else
                    {
                        oggettoCustom.VALORE_DATABASE = "";
                        oggettoCustom.CODICE_DB = "";
                        oggettoCustom.MANUAL_INSERT = false;
                    }
                    break;
            }
        }

        private void PopulateRecordSender()
        {
            this.Sender = ((ProtocolloEntrata)this.DocumentInWorking.protocollo).mittente;
            if (!string.IsNullOrEmpty(((ProtocolloEntrata)this.DocumentInWorking.protocollo).mittente.systemId)) this.IdSender.Value = ((ProtocolloEntrata)this.DocumentInWorking.protocollo).mittente.systemId;
            if (!string.IsNullOrEmpty(((ProtocolloEntrata)this.DocumentInWorking.protocollo).mittente.codiceRubrica)) this.TxtCodeSender.Text = ((ProtocolloEntrata)this.DocumentInWorking.protocollo).mittente.codiceRubrica;
            if (!string.IsNullOrEmpty(((ProtocolloEntrata)this.DocumentInWorking.protocollo).mittente.descrizione)) this.TxtDescriptionSender.Text = ((ProtocolloEntrata)this.DocumentInWorking.protocollo).mittente.descrizione;
            this.UpPnlImgSender.Update();
        }

        private bool ControlPrivateDocumentWarning()
        {
            bool result = true;
            string msg = string.Empty;
            if ((this.DocumentDdlTransmissionsModel.SelectedIndex != 0) && !string.IsNullOrEmpty(this.DocumentDdlTransmissionsModel.SelectedValue) && string.IsNullOrEmpty(this.HiddenControlPrivateTrans.Value))
            {
                msg = "WarningDocumentPrivateTransmission";
                ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxConfirmModal", "if (parent.fra_main) {parent.fra_main.ajaxConfirmModal('" + msg.Replace("'", @"\'") + "', 'HiddenControlPrivateTrans', '');} else {parent.ajaxConfirmModal('" + msg.Replace("'", @"\'") + "', 'HiddenControlPrivateTrans', '');}", true);
                this.UpPnlTransmissionsModel.Update();
                result = false;
            }
            else
            {
                if (!string.IsNullOrEmpty(this.TxtCodeProject.Text) && this.Project != null && this.Project.tipo != "G" && string.IsNullOrEmpty(this.HiddenControlPrivateClass.Value) && string.IsNullOrEmpty(this.HiddenControlPrivateClass.Value))
                {
                    msg = "WarningDocumentPrivateClassification";
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxConfirmModal", "if (parent.fra_main) {parent.fra_main.ajaxConfirmModal('" + msg.Replace("'", @"\'") + "', 'HiddenControlPrivateClass', '');} else {parent.ajaxConfirmModal('" + msg.Replace("'", @"\'") + "', 'HiddenControlPrivateClass', '');}", true);
                    this.UpPnlTransmissionsModel.Update();
                    result = false;
                }
            }

            return result;
        }

        private bool ControlPublicFolderWarning()
        {
            bool result = true;
            if (this.Project != null && this.Project.pubblico && string.IsNullOrEmpty(this.HiddenPublicFolder.Value))
            {
                string msgConfirm = "WarningDocumentConfirmPublicFolder";
                ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxConfirmModal", "ajaxConfirmModal('" + msgConfirm.Replace("'", @"\'") + "', 'HiddenPublicFolder', '');", true);
                this.UpPnlProject.Update();
                result = false;
            }
            return result;
        }

        private bool ControlUserDocumentWarning()
        {
            bool result = true;
            string msg = string.Empty;
            if ((this.DocumentDdlTransmissionsModel.SelectedIndex != 0) && !string.IsNullOrEmpty(this.DocumentDdlTransmissionsModel.SelectedValue) && string.IsNullOrEmpty(this.HiddenControlPrivateClass.Value))
            {
                msg = "WarningDocumentPrivateTransmission";
                ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxConfirmModal", "if (parent.fra_main) {parent.fra_main.ajaxConfirmModal('" + msg.Replace("'", @"\'") + "', 'HiddenControlPrivateClass', '');} else {parent.ajaxConfirmModal('" + msg.Replace("'", @"\'") + "', 'HiddenControlPrivateClass', '');}", true);
                this.UpPnlTransmissionsModel.Update();
                result = false;
            }
            else
            {
                if (!string.IsNullOrEmpty(this.TxtCodeProject.Text) && this.Project != null && this.Project.tipo != "G" && string.IsNullOrEmpty(this.HiddenControlPrivateClass.Value) && string.IsNullOrEmpty(this.HiddenControlPrivateClass.Value))
                {
                    msg = "WarningDocumentPrivateTransmission";
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxConfirmModal", "if (parent.fra_main) {parent.fra_main.ajaxConfirmModal('" + msg + "', 'HiddenControlPrivateClass', '');} else {parent.ajaxConfirmModal('" + msg + "', 'HiddenControlPrivateClass', '');}", true);
                    this.UpPnlTransmissionsModel.Update();
                    result = false;
                }
            }

            return result;
        }

        protected void ResetControlPrivateDocumentWarning()
        {
            this.HiddenControlPrivateTrans.Value = string.Empty;
            this.HiddenControlPrivateClass.Value = string.Empty;
            this.HiddenControlPrivateTypeOperation.Value = string.Empty;
        }

        /// <summary>
        /// 
        /// </summary>
        private bool protocollaDoc()
        {
            this._logger.Info("START");
            SchedaDocumento newDoc = this.DocumentInWorking;

            if (this.DocumentCheckPrivate.Checked && !this.ControlPrivateDocumentWarning())
            {
                //PROFILAZIONE DINAMICA
                if (!string.IsNullOrEmpty(this.DocumentDdlTypeDocument.SelectedValue))
                {
                    this.Template = this.PopulateTemplate();
                }
                this.HiddenControlPrivateTypeOperation.Value = "RECORD";
                return false;
            }

            //Verifico se si stà fascicolando all'interno di un fascicolo pubblico
            if (!ControlPublicFolderWarning())
            {
                this.HiddenPublicFolderTypeOperation.Value = "RECORD";
                return false;
            }
            else
            {
                this.HiddenPublicFolder.Value = string.Empty;
            }

            if (this.DocumentCheckPrivate.Checked)
            {
                this.ResetControlPrivateDocumentWarning();
            }

            newDoc = this.SetTypeRecord(newDoc);

            if (newDoc.checkOutStatus != null)
            {
                string msgDesc = "WarningDocumentBlocked";
                ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + msgDesc.Replace("'", @"\'") + "', 'warning', '');} else {parent.ajaxDialogModal('" + msgDesc.Replace("'", @"\'") + "', 'warning', '');}", true);
            }
            else
            {
                //PROFILAZIONE DINAMICA
                if (!string.IsNullOrEmpty(this.DocumentDdlTypeDocument.SelectedValue))
                {
                    newDoc.template = this.PopulateTemplate();
                    newDoc.tipologiaAtto = new TipologiaAtto();
                    newDoc.tipologiaAtto.systemId = this.DocumentDdlTypeDocument.SelectedValue;
                    newDoc.tipologiaAtto.descrizione = this.DocumentDdlTypeDocument.SelectedItem.Text;
                    newDoc.daAggiornareTipoAtto = true;
                    if (ProfilerDocManager.verificaCampiObbligatori(this.Template))
                    {
                        string msgDesc = "WarningDocumentRequestfields";

                        ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + msgDesc.Replace("'", @"\'") + "', 'warning', '');} else {parent.ajaxDialogModal('" + msgDesc.Replace("'", @"\'") + "', 'warning', '');}", true);
                        return false;
                    }

                    string customMessaget = string.Empty;
                    string messag = ProfilerDocManager.verificaOkContatore(this.Template, out customMessaget);
                    if (messag != string.Empty)
                    {
                        if (!string.IsNullOrEmpty(customMessaget) && messag.Equals("CUSTOMERROR"))
                        {
                            string msgDesc = "WarningDocumentCustom";
                            string errFormt = Server.UrlEncode(customMessaget);
                            ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + utils.FormatJs(msgDesc) + "', 'warning', '', '" + utils.FormatJs(errFormt) + "');} else {parent.ajaxDialogModal('" + utils.FormatJs(msgDesc) + "', 'warning', '', '" + utils.FormatJs(errFormt) + "');}; ", true);
                        }
                        else
                        {
                            ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + messag.Replace("'", @"\'") + "', 'warning', '');} else {parent.ajaxDialogModal('" + messag.Replace("'", @"\'") + "', 'warning', '" + messag.Replace("'", @"\'") + "');}", true);
                        }
                        return false;
                    }
                    //FINE PROFILAZIONE DINAMICA  	

                }

                Fascicolo m_fascicoloSelezionato = this.Project;

                string codice = string.Empty;
                string descrizione = string.Empty;
                string ver_descrizione = string.Empty;
                string ver_codice = string.Empty;

                if (this.Project != null && !string.IsNullOrEmpty(this.TxtCodeProject.Text) && !string.IsNullOrEmpty(this.TxtDescriptionProject.Text))
                {
                    DocsPaWR.Fascicolo SottoFascicolo = getFolder(null, ref codice, ref descrizione);
                    if (SottoFascicolo != null)
                    {
                        if (SottoFascicolo.folderSelezionato != null && codice != string.Empty && descrizione != string.Empty)
                        {
                            ver_descrizione = descrizione;
                            ver_codice = codice;
                        }
                    }
                    else
                    {
                        if (Project != null)
                        {
                            ver_descrizione = Project.descrizione;
                            ver_codice = Project.codice;
                        }
                    }
                }

                //Controllo se la descrizione coincide con il codice
                if (this.Project != null && !string.IsNullOrEmpty(this.TxtCodeProject.Text) && !string.IsNullOrEmpty(this.TxtDescriptionProject.Text) &&
                    utils.DO_AdattaString(this.TxtDescriptionProject.Text) != utils.DO_AdattaString(ver_descrizione))
                {
                    //string msg = "La descrizione non coincide con quella del fascicolo.";
                    string msgDesc = "WarningDocumentDescrFasc";
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + msgDesc.Replace("'", @"\'") + "', 'warning', '');} else {parent.ajaxDialogModal('" + msgDesc.Replace("'", @"\'") + "', 'warning', '');}", true);
                    return false;
                }

                //Per protocolli e predisposti in ingresso, controllo se al mezzo di spedizione del documento corrisponde un mittente
                //avente popolati i campi neccessari per quel mezzo di spedizione (es. se è mail il mittente deve avere una mail)
                if (!string.IsNullOrEmpty(newDoc.tipoProto) && newDoc.tipoProto.Equals("A") && IsEnableCheckMeansSending)
                {
                    if (this.DdlMeansSending.Items[DdlMeansSending.SelectedIndex].Text.Equals("INTEROPERABILITA"))
                    {
                        Corrispondente sender = (newDoc.protocollo as ProtocolloEntrata).mittente;
                        if (string.IsNullOrEmpty(sender.codiceAOO) || string.IsNullOrEmpty(sender.codiceAmm) || string.IsNullOrEmpty(sender.email))
                        {
                            string msgDesc = "WarningDocumentSenderInterop";

                            ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + msgDesc.Replace("'", @"\'") + "', 'warning', '');} else {parent.ajaxDialogModal('" + msgDesc.Replace("'", @"\'") + "', 'warning', '');}", true);
                            return false;
                        }
                    }

                    if (this.DdlMeansSending.Items[DdlMeansSending.SelectedIndex].Text.Equals("MAIL"))
                    {
                        Corrispondente sender = (newDoc.protocollo as ProtocolloEntrata).mittente;
                        if (string.IsNullOrEmpty(sender.email))
                        {
                            string msgDesc = "WarningDocumentSenderMail";

                            ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + msgDesc.Replace("'", @"\'") + "', 'warning', '');} else {parent.ajaxDialogModal('" + msgDesc.Replace("'", @"\'") + "', 'warning', '');}", true);
                            return false;
                        }
                    }

                    if (this.DdlMeansSending.Items[DdlMeansSending.SelectedIndex].Text.Equals(SimplifiedInteroperabilityManager.ChannelDescription))
                    {
                        Corrispondente sender = (newDoc.protocollo as ProtocolloEntrata).mittente;
                        if (sender.canalePref == null || !sender.canalePref.typeId.ToUpper().Equals(SimplifiedInteroperabilityManager.SimplifiedInteroperabilityId))
                        {
                            string msgDesc = "WarningDocumentSenderInteroperabilityPitre";

                            ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + msgDesc.Replace("'", @"\'") + "', 'warning', '');} else {parent.ajaxDialogModal('" + msgDesc.Replace("'", @"\'") + "', 'warning', '');}", true);
                            return false;
                        }
                    }
                }

                //controllo sulla fascicolazione obbligatoria
                //MEV calssificazione rapida obbligatoria per tipo documento
                //se è attiva la chiave FE_FASC_REQUIRED_TIPI_DOC vado a vedere se per il tipo documento è attiva la fascicolazione obbligatoria indipendentemente 
                //dalla chiave già esistente
                if (IsRapidClassificationRequired())
                {
                    if (string.IsNullOrEmpty(newDoc.systemId))
                    {
                        if (string.IsNullOrEmpty(this.TxtCodeProject.Text) || string.IsNullOrEmpty(this.TxtDescriptionProject.Text) || this.Project == null)
                        {
                            string msgDesc = "WarningDocumentRequestProject";

                            ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + msgDesc.Replace("'", @"\'") + "', 'warning', '');} else {parent.ajaxDialogModal('" + msgDesc.Replace("'", @"\'") + "', 'warning', '');}", true);
                            return false;
                        }
                    }
                    else
                    {
                        if (!DocumentManager.getSeDocFascicolato(newDoc) && string.IsNullOrEmpty(this.TxtCodeProject.Text))
                        {
                            string msgDesc = "WarningDocumentRequestProject";
                            ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + msgDesc.Replace("'", @"\'") + "', 'warning', '');} else {parent.ajaxDialogModal('" + msgDesc.Replace("'", @"\'") + "', 'warning', '');}", true);
                            return false;
                        }
                    }

                    Fascicolo fasc = this.Project;
                    if (fasc != null)
                    {
                        if (fasc.stato == "C")
                        {
                            string msgDesc = "WarningDocumentProjectClosed";
                            ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + msgDesc.Replace("'", @"\'") + "', 'warning', '');} else {parent.ajaxDialogModal('" + msgDesc.Replace("'", @"\'") + "', 'warning', '');}", true);
                            return false;
                        }
                    }
                }
                // fine controllo fascicolazione obbligatoria
                
                //Modifica effettuta da EPanici 
                if (this.Project != null && this.Project.systemID != null && this.EnableBlockClassification)
                {

                    if (this.Project.tipo.Equals("G") && this.Project.isFascConsentita != null && this.Project.isFascConsentita == "0")
                    {
                        string msgDesc = this.Project.isFascicolazioneConsentita ? "WarningDocumentNoDocumentInsert" : "WarningDocumentNoDocumentInsertClassification";
                        ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + msgDesc.Replace("'", @"\'") + "', 'warning', '');} else {parent.ajaxDialogModal('" + msgDesc.Replace("'", @"\'") + "', 'warning', '');}", true);
                        return false;
                    }
                    if (this.Project.tipo.Equals("P") && !this.Project.isFascicolazioneConsentita)
                    {
                        string msgDesc = "WarningDocumentNoDocumentInsertFolder";
                        ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + msgDesc.Replace("'", @"\'") + "', 'warning', '');} else {parent.ajaxDialogModal('" + msgDesc.Replace("'", @"\'") + "', 'warning', '');}", true);
                        return false;
                    }
                }
                //fine modifiche EPanici

                if (this.Project != null && this.Project.systemID != null && this.EnableBlockClassification)
                {

                    if (this.Project.tipo.Equals("G") && this.Project.isFascConsentita != null && this.Project.isFascConsentita == "0")
                    {
                        string msgDesc = this.Project.isFascicolazioneConsentita ? "WarningDocumentNoDocumentInsert" : "WarningDocumentNoDocumentInsertClassification";
                        ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + msgDesc.Replace("'", @"\'") + "', 'warning', '');} else {parent.ajaxDialogModal('" + msgDesc.Replace("'", @"\'") + "', 'warning', '');}", true);
                        return false;
                    }
                    if (this.Project.tipo.Equals("P") && !this.Project.isFascicolazioneConsentita)
                    {
                        string msgDesc = "WarningDocumentNoDocumentInsertFolder";
                        ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + msgDesc.Replace("'", @"\'") + "', 'warning', '');} else {parent.ajaxDialogModal('" + msgDesc.Replace("'", @"\'") + "', 'warning', '');}", true);
                        return false;
                    }
                }

                DocsPaWR.Registro[] listaRF = RegistryManager.GetListRegistriesAndRF(this.Role.systemId, "1", this.Registry.systemId);

                //// verifico se è stata selezionata una nota di RF e se si sia selezionato un RF corretto nel caso di utenti con 2 RF almeno
                string msg = string.Empty;
                this.SaveNote(out msg);
                if (!string.IsNullOrEmpty(msg))
                {
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + msg.Replace("'", "\\'") + "', 'error');} else {parent.ajaxDialogModal('" + msg.Replace("'", "\\'") + "', 'error');}", true);
                    return false;
                }

                //if (wws.isEnableRiferimentiMittente() && rbl_InOut_P.SelectedItem.Value == "In")
                //{
                //    schedaDocumento.riferimentoMittente = txt_riferimentoMittente.Text;
                //}

                string descrMsg = string.Empty;
                if (!VerificaRispostaDocumento(ref descrMsg))
                {
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + descrMsg.Replace("'", @"\'") + "', 'warning', '');} else {parent.ajaxDialogModal('" + descrMsg.Replace("'", @"\'") + "', 'warning', '');}", true);
                    return false;
                }

                msg = CheckFields("P");

                msg += ProfilerDocManager.VerifyAndSetTipoDoc(this.InfoUser, ref newDoc);

                if (string.IsNullOrEmpty(msg) && newDoc.tipoProto.Equals("I"))
                {
                    if (!this.CheckDestinatari())
                    {
                        msg = "WarningDocumentCheckRecipients";
                        ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + msg.Replace("'", @"\'") + "', 'warning', '');} else {parent.ajaxDialogModal('" + msg.Replace("'", @"\'") + "', 'warning', '');}", true);
                        return false;
                    }
                }

                if (!string.IsNullOrEmpty(msg))
                {
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + msg.Replace("'", @"\'") + "', 'warning', '');} else {parent.ajaxDialogModal('" + msg.Replace("'", @"\'") + "', 'warning', '');}", true);
                    return false;
                }

                if (this.Registry.Sospeso)
                {
                    string msgDesc = "WarningDocumentRegistryPause";
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + msgDesc.Replace("'", @"\'") + "', 'warning', '');} else {parent.ajaxDialogModal('" + msgDesc.Replace("'", @"\'") + "', 'warning', '');}", true);
                    return false;
                }

                if (!this.IsRoleInternalEnabled())
                {
                    if (this.RblTypeProtocol.SelectedValue.Equals("I"))
                    {
                        string msgDesc = "WarningDocumentUserNotAbility";
                        ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + msgDesc.Replace("'", @"\'") + "', 'warning', '');} else {parent.ajaxDialogModal('" + msgDesc.Replace("'", @"\'") + "', 'warning', '');}", true);
                        return false;
                    }
                }

                if (!this.IsRoleInwardEnabled())
                {
                    if (this.RblTypeProtocol.SelectedValue.Equals("A"))
                    {
                        string msgDesc = "WarningDocumentUserNotAbilityIn";
                        ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + msgDesc.Replace("'", @"\'") + "', 'warning', '');} else {parent.ajaxDialogModal('" + msgDesc.Replace("'", @"\'") + "', 'warning', '');}", true);
                        return false;
                    }
                }

                if (!this.IsRoleOutwardEnabled())
                {
                    if (this.RblTypeProtocol.SelectedValue.Equals("P"))
                    {
                        string msgDesc = "WarningDocumentUserNotAbilityOut";
                        ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + msgDesc.Replace("'", @"\'") + "', 'warning', '');} else {parent.ajaxDialogModal('" + msgDesc.Replace("'", @"\'") + "', 'warning', '');}", true);
                        return false;
                    }
                }

                bool protoOk = false;
                string messaggio = string.Empty;

                bool destTo = false;
                bool destCC = false;

                if ((newDoc.privato == "1") && (newDoc.tipoProto != "A"))
                {
                    //se il protocollo è in uscita verifico che ci siano destinatari interni
                    if (newDoc.tipoProto.Equals("P"))
                    {
                        DocsPaWR.Corrispondente[] listaDest = this.ListRecipients.ToArray<Corrispondente>();
                        if (listaDest != null && listaDest.Length > 0)
                        {
                            for (int i = 0; i < listaDest.Length; i++)
                            {
                                if (listaDest[i].tipoIE == "I")
                                    destTo = true;
                            }
                            if (!destTo)
                            {
                                DocsPaWR.Corrispondente[] listaDestCC = this.ListRecipientsCC.ToArray<Corrispondente>();

                                if (listaDestCC != null && listaDestCC.Length > 0)
                                {
                                    for (int i = 0; i < listaDestCC.Length; i++)
                                    {
                                        if (listaDestCC[i].tipoIE == "I")
                                            destCC = true;
                                    }
                                }
                            }
                        }
                    }
                    //se il protocollo è interno verifico che ci siano destinatari interni
                    if (newDoc.tipoProto.Equals("I"))
                    {
                        DocsPaWR.Corrispondente[] listaDest = this.ListRecipients.ToArray<Corrispondente>();
                        if (listaDest != null && listaDest.Length > 0)
                        {
                            for (int i = 0; i < listaDest.Length; i++)
                            {
                                if (listaDest[i].tipoIE == "I")
                                    destTo = true;
                            }
                            if (!destTo)
                            {
                                DocsPaWR.Corrispondente[] listaDestCC = this.ListRecipientsCC.ToArray<Corrispondente>();
                                if (listaDestCC != null && listaDestCC.Length > 0)
                                {
                                    for (int i = 0; i < listaDestCC.Length; i++)
                                    {
                                        if (listaDestCC[i].tipoIE == "I")
                                            destCC = true;
                                    }
                                }
                            }
                        }
                    }
                }

                if (this.EnableStateDiagram && this.PnlScadenza.Visible && !string.IsNullOrEmpty(this.DocumentStateDiagramDataValue.Text))
                {
                    DateTime dataInserita = Convert.ToDateTime(this.DocumentStateDiagramDataValue.Text);
                    newDoc.dataScadenza = Utils.utils.formatDataDocsPa(dataInserita);
                }


                if (!protoOk)
                {
                    this.protocollaOk(newDoc);
                    if (this.DocumentImgAddNewCorrispondent.Visible)
                    {
                        this.DocumentImgAddNewCorrispondent.Visible = false;
                        this.DocumentImgSenderInt.Visible = false;
                        this.UpPnlImgSender.Update();
                    }
                }

            }

            this._logger.Info("END");
            return true;
        }

        private bool protocollaOk(SchedaDocumento newDoc)
        {
            this._logger.Info("START");
            //prima di effettuare la protocollazione se il documento è personale deve essere
            //trasformato in privato
            if (newDoc.personale == "1")
            {
                newDoc.personale = "0";
                newDoc.privato = "1";
                newDoc.accessRights = "0";
                //visibilità al ruolo
                DocumentManager.cambiaDocumentoPersonalePrivato(newDoc);
            }

            //    bool documentoProtocollato = false;
            //    //isEnableUffRef = false;
            //    //if (enableUfficioRef != null && enableUfficioRef.Equals("1"))
            //    //    isEnableUffRef = true;

            bool continueRecord = this.VerifyPopupControlDocument(newDoc);
            this._errorRequirePopUp = !continueRecord;
            if (continueRecord)
            {
                newDoc = this.SetValuePopupControlDocument(newDoc);

                this.protocolla(newDoc);

                this.completaProtocollazione(false);

                this.IsForwarded = false;
            }
            this._logger.Info("END");
            return true;
        }

        private SchedaDocumento SetValuePopupControlDocument(SchedaDocumento newDoc)
        {
            SchedaDocumento doc = newDoc;

            if (!string.IsNullOrEmpty(this.VerifyPrevious.ReturnValue))
            {
                this.VerifyPrevious.ReturnValue = string.Empty;
                ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "setReturnValue1", "SetRetValue('VerifyPrevious','');", true);
            }


            if (!string.IsNullOrEmpty(this.SelectRF.ReturnValue))
            {
                //Ho una lista di RF, ho selezionato il radio RF e ho selezionato un valore dalla Ddl 
                doc.id_rf_prot = this.SelectRF.ReturnValue;
                //c'è un solo RF, quindi la ricevuta la posso inviare solo con questo.
                doc.id_rf_invio_ricevuta = this.SelectRF.ReturnValue;
                Registro reg = RegistryManager.getRegistroBySistemId(this.SelectRF.ReturnValue);

                doc.cod_rf_prot = reg.codRegistro;
                this.SelectRF.ReturnValue = string.Empty;
                ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "setReturnValue2", "SetRetValue('SelectRF','');", true);
            }


            if (!string.IsNullOrEmpty(this.ChooseRFSegnatureFromRecord.ReturnValue))
            {
                Registro newReg = UserManager.getRegistroBySistemId(this.Page, this.ChooseRFSegnatureFromRecord.ReturnValue);

                bool resInvioRicevuta = DocumentManager.DocumentoInvioRicevuta(Page, doc, newReg);
                if (resInvioRicevuta)
                {
                    string msg = "InfoSendReceiptCorrectly";
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "ajaxDialogModal('" + msg.Replace("'", "\\'") + "', 'check');", true);
                }
                this.ChooseRFSegnatureFromRecord.ReturnValue = string.Empty;
                ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "setReturnValue3", "SetRetValue('ChooseRFSegnatureFromRecord','');", true);
            }

            if (!string.IsNullOrEmpty(this.DetailsSenderK1.ReturnValue) || !string.IsNullOrEmpty(this.DetailsSenderK2.ReturnValue))
            {
                ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "setReturnValue4", "SetRetValue('DetailsSenderK1','');", true);
                ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "setReturnValue5", "SetRetValue('DetailsSenderK2','');", true);
            }


            return doc;
        }

        private bool VerifyPopupControlDocument(SchedaDocumento newDoc)
        {

            bool retVal = true;

            // verifica precedenti
            if ((this.EnableSearchDuplicateRecord_1 || this.FindDuplicateProtocol2) && this.CheckIfDocumentExists(false) && string.IsNullOrEmpty(this.VerifyPrevious.ReturnValue) && retVal)
            {
                DocumentManager.setSelectedRecord(newDoc);
                retVal = false;
            }


            // verifico che sia richiesta la presenza del codice RF nella segnatura
            // se è presente e se il registro del documento ha 1 o più RF associati,
            // apro la popup di selezione RF (SelectRF.aspx)
            if (this.EnableRFReferenceCode && string.IsNullOrEmpty(this.SelectRF.ReturnValue) && retVal)
            {
                // se nella segnatura è stato richiesto il codice RF
                InfoAmministrazione infAmm = AdministrationManager.AmmGetInfoAmmCorrente(this.InfoUser.idAmministrazione);
                if (infAmm.Segnatura.Contains("COD_RF_PROT"))
                {
                    DocsPaWR.Registro[] listaRF = RegistryManager.GetListRegistriesAndRF(this.Role.systemId, "1", this.Registry.systemId);
                    // **** APRI POPUP ****
                    if (listaRF != null && listaRF.Length > 0)
                    {
                        // se ci sono uno o più RF associati al registro
                        if (listaRF.Length == 1) //se un solo RF non apro popup, ma selec direttamente.
                        {
                            newDoc.id_rf_prot = listaRF[0].systemId;
                            //c'è un solo RF, quindi la ricevuta la posso inviare solo con questo.
                            newDoc.id_rf_invio_ricevuta = listaRF[0].systemId;
                            newDoc.cod_rf_prot = listaRF[0].codRegistro;
                        }
                        else
                        {
                            if (this.RblTypeNote.SelectedValue.Equals("RF") && this.ddlNoteRF.SelectedIndex != 0)
                            {
                                //Ho una lista di RF, ho selezionato il radio RF e ho selezionato un valore dalla Ddl 
                                newDoc.id_rf_prot = this.ddlNoteRF.SelectedItem.Value;
                                //c'è un solo RF, quindi la ricevuta la posso inviare solo con questo.
                                newDoc.id_rf_invio_ricevuta = this.ddlNoteRF.SelectedItem.Value;

                                newDoc.cod_rf_prot = this.ddlNoteRF.SelectedItem.Text;
                            }
                            else
                            {
                                ScriptManager.RegisterStartupScript(this, this.GetType(), "SelectRF", "ajaxModalPopupSelectRF();", true);
                                DocumentManager.setSelectedRecord(newDoc);
                                retVal = false;
                            }
                        }
                    }
                }
            }


            //1)verifico che si tratti di un predisposto
            if (!string.IsNullOrEmpty(newDoc.systemId) && newDoc.protocollo != null && string.IsNullOrEmpty(newDoc.protocollo.numero) && string.IsNullOrEmpty(this.ChooseRFSegnatureFromRecord.ReturnValue) && retVal)
            {
                if (
                    ((!string.IsNullOrEmpty(newDoc.typeId)
                        && (newDoc.typeId.ToUpper().Equals("INTEROPERABILITA")
                   || newDoc.typeId.ToUpper().Equals("MAIL"))) ||

                   (newDoc.descMezzoSpedizione != null
                    && (newDoc.descMezzoSpedizione.ToUpper().Equals("INTEROPERABILITA")
                    || newDoc.descMezzoSpedizione.ToUpper().Equals("MAIL")))

                    )
                    && UserManager.IsAuthorizedFunctions("DO_INVIO_RICEVUTE")
                    )
                {
                    // 3) verifico che il registro abbia settato da amministrazione l'invio manuale o meno della ricevuta 
                    if (newDoc.registro.invioRicevutaManuale.ToUpper().Equals("1"))
                    {
                        DocsPaWR.Registro[] listaRF = RegistryManager.GetListRegistriesAndRF(this.Role.systemId, "1", this.Registry.systemId);

                        // 4) calcolo gli RF associati al registro
                        if (listaRF != null && listaRF.Length > 0)
                        {
                            // 5) nel caso di un solo RF associato al registro
                            if (listaRF.Length == 1 && !listaRF[0].invioRicevutaManuale.ToUpper().Equals("1"))
                            {
                                newDoc.id_rf_invio_ricevuta = listaRF[0].systemId;
                            }
                            else
                            {
                                // 6) caso di più RF associati al registro e con invio automatico
                                if (listaRF.Length > 1)
                                {
                                    bool daMostrarePopUp = false;
                                    for (int i = 0; i < listaRF.Length; i++)
                                    {
                                        if (!listaRF[i].invioRicevutaManuale.ToUpper().Equals("1"))
                                            daMostrarePopUp = true;
                                    }
                                    if (newDoc.interop == "S" || newDoc.interop == "P" || newDoc.interop == "E")
                                    {
                                        daMostrarePopUp = false;
                                        if (newDoc.protocollo.GetType() == typeof(DocsPaWR.ProtocolloEntrata))
                                        {
                                            string idrf = ((DocsPaWR.ProtocolloEntrata)newDoc.protocollo).mittente.idRegistro;
                                            newDoc.id_rf_invio_ricevuta = idrf;
                                        }
                                    }

                                    // apro la popup di selezione RF
                                    if (daMostrarePopUp)
                                    {
                                        Session["ChooseRFSegnature_code"] = "ricevuta";
                                        ScriptManager.RegisterStartupScript(this, this.GetType(), "SelectRF", "ajaxModalPopupChooseRFSegnatureFromRecord();", true);
                                        DocumentManager.setSelectedRecord(newDoc);
                                        retVal = false;
                                    }
                                }
                            }
                        }
                    }
                }
            }

            #region Controllo Interoperabilità

            if (newDoc != null && !string.IsNullOrEmpty(newDoc.systemId) && !string.IsNullOrEmpty(newDoc.interop) && !NotOpenK1K2 && retVal &&
                string.IsNullOrEmpty(this.DetailsSenderK1.ReturnValue) && string.IsNullOrEmpty(this.DetailsSenderK2.ReturnValue))
            {
                string checkInteroperante = string.Empty;
                string checkSameMail = string.Empty;

                string allRegs = string.Empty;
                //Check chiave interop
                checkInteroperante = Utils.InitConfigurationKeys.GetValue(this.InfoUser.idAmministrazione, DBKeys.CHECK_MITT_INTEROPERANTE.ToString());
                // Se il documento è stato ricevuto per IS, K1 viene disablitato
                if (this.FromInteropPecOrSimpInterop(newDoc) &&
                    this.Sender != null &&
                    this.Sender.inRubricaComune)
                {
                    checkInteroperante = "0";
                }

                // Replicato il metodo FromInteropPecOrSimpInterop con aggiunta dei controlli interop=p || interop=e e typeId.equals("MAIL")
                //In questi casi K1 spento.
                if (this.FromInteropPecOrSimpInteropOrMail(newDoc) &&
                    this.Sender != null &&
                    this.Sender.inRubricaComune)
                {
                    checkInteroperante = "0";
                }

                /* nel caso in cui le mail della casella istituzionale  vengano INOLTRATE da un utente interno, 
                il mittente del predisposto può risultare interno, in questo caso non deve scattare k1 e k2 quindi
                metto le chiavi a 0 prima che partano i controlli. */
                Corrispondente mittIE = this.Sender;
                /* nel caso in cui le mail della casella istituzionale  vengano INOLTRATE da un utente interno, 
                il mittente del predisposto può risultare interno, in questo caso non deve scattare k1 e k2 quindi
                metto le chiavi a 0 prima che partano i controlli. */
                if ((mittIE != null && (!string.IsNullOrEmpty(mittIE.tipoCorrispondente)) && mittIE.tipoCorrispondente.Equals("O")) ||
                    (mittIE != null && mittIE.tipoIE.Equals("I")) ||
                   (newDoc.tipoProto.Equals("A") && this.EditSender)
                    )
                {
                    checkInteroperante = "0";
                    checkSameMail = "0";
                    mittIE = null;
                }
                if (mittIE != null && mittIE.tipoIE.Equals("I"))
                {
                    checkInteroperante = "0";
                    checkSameMail = "0";
                    mittIE = null;
                }

                //Check chiave stessa mail
                checkSameMail =
                    Utils.InitConfigurationKeys.GetValue(this.InfoUser.idAmministrazione, DBKeys.CHECK_MAILBOX_INTEROPERANTE.ToString());


                // Se il documento è stato ricevuto per IS, K2 deve essere spento
                if (this.FromInteropPecOrSimpInterop(newDoc) &&
                    this.Sender != null &&
                    this.Sender.inRubricaComune)
                {
                    checkSameMail = "0";
                }

                // Replicato il metodo FromInteropPecOrSimpInterop con aggiunta dei controlli interop=p || interop=e e typeId.equals("MAIL")
                //In questi casi K2 spento.
                if (this.FromInteropPecOrSimpInteropOrMail(newDoc) &&
                    this.Sender != null &&
                    this.Sender.inRubricaComune)
                {
                    checkSameMail = "0";
                }

                if (!((string.IsNullOrEmpty(checkInteroperante) || checkInteroperante.Equals("0"))
                    && (string.IsNullOrEmpty(checkSameMail) || checkSameMail.Equals("0"))))
                {
                    string check = string.Empty;
                    Parameter = new Dictionary<string, string>();
                    Corrispondente mitt = this.Sender;
                    string sysid = mitt.systemId;
                    //necessito della vecchia descrizione del corrispondente
                    mitt.oldDescrizione = AddressBookManager.getOldDescByCorr(mitt.systemId);
                    //se descOld è empty la setto ugugale a var_desc_corr
                    if (string.IsNullOrEmpty(mitt.oldDescrizione))
                        mitt.oldDescrizione = mitt.descrizione;
                    string var_insert = AddressBookManager.getCheckInteropFromSysIdCorrGlob(sysid);
                    //Session.Add("IdRegistro", mitt.idRegistro);
                    string idAOOColl = newDoc.registro.systemId;
                    Registro[] regs = RegistryManager.GetListRegistriesAndRF(this.Role.systemId, string.Empty, string.Empty);
                    foreach (Registro registro in regs)
                    {
                        allRegs += registro.systemId + "','";
                    }
                    if (!string.IsNullOrEmpty(allRegs) && allRegs.EndsWith("','"))
                        allRegs = allRegs.Substring(0, allRegs.Length - 3);
                    DataSet datas = new DataSet();
                    //Andrea De Marco - Modifica per Gestioni Eccezioni - interop = E viene trattato come MAIL
                    //Per ripristino commentare De Marco e ripristinare il codice commentato sottostante
                    string email = mitt.email;
                    if (newDoc.protocollo != null && !string.IsNullOrEmpty((newDoc.protocollo as ProtocolloEntrata).emailMittente) && mitt.Emails != null &&
                        (from e in mitt.Emails where e.Email.Equals((newDoc.protocollo as ProtocolloEntrata).emailMittente) select e).FirstOrDefault() != null)
                    {
                        email = (newDoc.protocollo as ProtocolloEntrata).emailMittente;
                    }
                    if (newDoc.interop == "P" || newDoc.interop == "E")
                    {
                        datas = AddressBookManager.GetCorrByEmail(email, allRegs);
                    }
                    else if (newDoc.interop == "S")
                    {
                        datas = AddressBookManager.GetCorrByEmailAndDescr(email, mitt.oldDescrizione, allRegs);
                    }

                    Parameter.Add("DescrizioneMitt", mitt.descrizione);
                    Parameter.Add("OldDescrizioneMitt", mitt.oldDescrizione);
                    Parameter.Add("Mail", mitt.email);
                    Parameter.Add("IdRegistro", mitt.idRegistro);

                    if (datas != null)
                    {
                        check = (datas.Tables[0].Rows.Count).ToString();
                    }

                    if (newDoc.interop == "S" && !check.Equals("0"))
                    {
                        if (((from r in datas.Tables[0].AsEnumerable() where r.Field<Int32>("SYSTEM_ID").ToString().Equals(mitt.systemId) select r).Count()) < 1)
                            check = "0";
                    }

                    #region K1 ON , K2 OFF

                    if (checkInteroperante.Equals("1") && checkSameMail.Equals("0"))
                    {
                        //se apro la maschera K1/K2 allora salvo in sessione le note
                        //if (Convert.ToInt32(check.ToString()) == 0 || Convert.ToInt32(check.ToString()) > 1)
                        //{
                        //    if (this.dettaglioNota != null && !this.dettaglioNota.Testo.Equals(""))
                        //        Session.Add("dettaglioNota", this.dettaglioNota);
                        //}
                        if (check.Equals("0"))
                        {
                            /*Emanuela : Se il ruolo non è abilitato a modificare i corrispondenti presenti in questo registro
                            inibisco l'apertura di K1 */
                            Registro regM = RegistryManager.getRegistroBySistemId(mitt.idRegistro);
                            if (regM != null && regM.chaRF != null &&
                               ((regM.chaRF.Equals("0") && UserManager.IsAuthorizedFunctions("DO_MOD_CORR_REG")) ||
                               (regM.chaRF.Equals("1") && UserManager.IsAuthorizedFunctions("DO_MOD_CORR_RF")))
                               )
                            {
                                string idDoc = newDoc.systemId;
                                Parameter.Add("codiceRubrica", mitt.codiceRubrica);
                                Parameter.Add("tipoIE", mitt.tipoIE);
                                Parameter.Add("tipoCorrispondente", mitt.tipoCorrispondente);
                                Parameter.Add("systemId", mitt.systemId);
                                Parameter.Add("idDoc", idDoc);
                                Parameter.Add("tipoAvviso", "avviso1");
                                //TODO chiamare in modal la maschera
                                SenderDetail = mitt;
                                ScriptManager.RegisterStartupScript(this, this.GetType(), "CorrespondentDetails", "ajaxModalPopupDetailsSenderK1();", true);
                                retVal = false;
                            }
                            else if (regM == null && UserManager.IsAuthorizedFunctions("DO_MOD_CORR_TUTTI"))
                            {
                                string idDoc = newDoc.systemId;
                                Parameter.Add("codiceRubrica", mitt.codiceRubrica);
                                Parameter.Add("tipoIE", mitt.tipoIE);
                                Parameter.Add("tipoCorrispondente", mitt.tipoCorrispondente);
                                Parameter.Add("systemId", mitt.systemId);
                                Parameter.Add("idDoc", idDoc);
                                Parameter.Add("tipoAvviso", "avviso1");
                                //TODO chiamare in modal la maschera
                                SenderDetail = mitt;
                                ScriptManager.RegisterStartupScript(this, this.GetType(), "CorrespondentDetails", "ajaxModalPopupDetailsSenderK1();", true);
                                retVal = false;
                            }
                            else if (UserManager.IsAuthorizedFunctions("DO_OCC_IN_K1") && (newDoc.interop == "P" || newDoc.interop == "E"))
                            {
                                string idDoc = newDoc.systemId;
                                Parameter.Add("codiceRubrica", mitt.codiceRubrica);
                                Parameter.Add("tipoIE", mitt.tipoIE);
                                Parameter.Add("tipoCorrispondente", mitt.tipoCorrispondente);
                                Parameter.Add("systemId", mitt.systemId);
                                Parameter.Add("idDoc", idDoc);
                                Parameter.Add("tipoAvviso", "avviso1");
                                //TODO chiamare in modal la maschera
                                SenderDetail = mitt;
                                ScriptManager.RegisterStartupScript(this, this.GetType(), "CorrespondentDetails", "ajaxModalPopupDetailsSenderK1();", true);
                                retVal = false;
                            }
                        }
                        else if (!check.Equals("0") && !check.Equals("1"))
                        {
                            //TODO MASCHERA 2
                            string idDoc = newDoc.systemId;
                            Parameter.Add("codiceRubrica", mitt.codiceRubrica);
                            Parameter.Add("tipoIE", mitt.tipoIE);
                            Parameter.Add("tipoCorrispondente", mitt.tipoCorrispondente);
                            Parameter.Add("systemId", mitt.systemId);
                            Parameter.Add("idDoc", idDoc);
                            Parameter.Add("tipoAvviso", "avviso2");
                            Parameter.Add("same_mail", "same_mail");
                            Parameter.Add("idAOOColl", idAOOColl);
                            Parameter.Add("btn_nuovo", "btn_nuovo");
                            //TODO chiamare in modal la maschera
                            SenderDetail = mitt;
                            ScriptManager.RegisterStartupScript(this, this.GetType(), "CorrespondentDetails", "ajaxModalPopupDetailsSenderK2();", true);
                            retVal = false;
                        }

                    }

                    #endregion

                    #region K1 OFF , K2 ON

                    else if (checkInteroperante.Equals("0") && checkSameMail.Equals("1"))
                    {
                        if (check.Equals("1"))
                        {
                            /*Se il ruolo non è abilitato a modificare i corrispondenti presenti in questo registro
                            inibisco l'apertura di K2 */
                            Registro regM = RegistryManager.getRegistroBySistemId(mitt.idRegistro);
                            if (regM != null && regM.chaRF != null &&
                                ((regM.chaRF.Equals("0") && UserManager.IsAuthorizedFunctions("DO_MOD_CORR_REG")) ||
                                (regM.chaRF.Equals("1") && UserManager.IsAuthorizedFunctions("DO_MOD_CORR_RF")))
                                )
                            {
                                //if (this.dettaglioNota != null && !this.dettaglioNota.Testo.Equals(""))
                                //    Session.Add("dettaglioNota", this.dettaglioNota);
                                string idDoc = newDoc.systemId;
                                Parameter.Add("codiceRubrica", mitt.codiceRubrica);
                                Parameter.Add("tipoIE", mitt.tipoIE);
                                Parameter.Add("tipoCorrispondente", mitt.tipoCorrispondente);
                                Parameter.Add("systemId", mitt.systemId);
                                Parameter.Add("idDoc", idDoc);
                                Parameter.Add("tipoAvviso", "avviso2");
                                Parameter.Add("btn_nuovo", "btn_nuovo");
                                //TODO chiamare in modal la maschera
                                SenderDetail = mitt;
                                ScriptManager.RegisterStartupScript(this, this.GetType(), "CorrespondentDetails", "ajaxModalPopupDetailsSenderK2();", true);
                                retVal = false;
                            }
                            else if (regM == null && UserManager.IsAuthorizedFunctions("DO_MOD_CORR_TUTTI"))
                            {
                                //if (this.dettaglioNota != null && !this.dettaglioNota.Testo.Equals(""))
                                //    Session.Add("dettaglioNota", this.dettaglioNota);
                                string idDoc = newDoc.systemId;
                                Parameter.Add("codiceRubrica", mitt.codiceRubrica);
                                Parameter.Add("tipoIE", mitt.tipoIE);
                                Parameter.Add("tipoCorrispondente", mitt.tipoCorrispondente);
                                Parameter.Add("systemId", mitt.systemId);
                                Parameter.Add("idDoc", idDoc);
                                Parameter.Add("tipoAvviso", "avviso2");
                                Parameter.Add("btn_nuovo", "btn_nuovo");
                                //TODO chiamare in modal la maschera
                                SenderDetail = mitt;
                                ScriptManager.RegisterStartupScript(this, this.GetType(), "CorrespondentDetails", "ajaxModalPopupDetailsSenderK2();", true);
                                retVal = false;
                            }
                        }
                        else if (!check.Equals("1") && !check.Equals("0"))
                        {
                            //TODO MASCHERA 2
                            //if (this.dettaglioNota != null && !this.dettaglioNota.Testo.Equals(""))
                            //    Session.Add("dettaglioNota", this.dettaglioNota);
                            string idDoc = newDoc.systemId;
                            Parameter.Add("codiceRubrica", mitt.codiceRubrica);
                            Parameter.Add("tipoIE", mitt.tipoIE);
                            Parameter.Add("tipoCorrispondente", mitt.tipoCorrispondente);
                            Parameter.Add("systemId", mitt.systemId);
                            Parameter.Add("idDoc", idDoc);
                            Parameter.Add("tipoAvviso", "avviso2");
                            Parameter.Add("same_mail", "same_mail");
                            Parameter.Add("idAOOColl", idAOOColl);
                            Parameter.Add("btn_nuovo", "btn_nuovo");
                            //TODO chiamare in modal la maschera
                            SenderDetail = mitt;
                            ScriptManager.RegisterStartupScript(this, this.GetType(), "CorrespondentDetails", "ajaxModalPopupDetailsSenderK2();", true);
                            retVal = false;

                        }
                        else if (check.Equals("0") && newDoc.interop == "S")
                        {
                            //ws.ResetCorrVarInsertIterop(mitt.systemId, "0");
                            datas = AddressBookManager.GetCorrByEmail(mitt.email, allRegs);

                            check = datas.Tables[0].Rows.Count.ToString();

                            #region K1 OFF , K2 ON

                            if (checkInteroperante.Equals("0") && checkSameMail.Equals("1"))
                            {
                                if (check.Equals("1"))
                                {
                                    /*Se il ruolo non è abilitato a modificare i corrispondenti presenti in questo registro
                                    inibisco l'apertura di K2 */
                                    Registro regM = RegistryManager.getRegistroBySistemId(mitt.idRegistro);
                                    if (regM != null && regM.chaRF != null &&
                                        ((regM.chaRF.Equals("0") && UserManager.IsAuthorizedFunctions("DO_MOD_CORR_REG")) ||
                                        (regM.chaRF.Equals("1") && UserManager.IsAuthorizedFunctions("DO_MOD_CORR_RF")))
                                        )
                                    {
                                        //if (this.dettaglioNota != null && !this.dettaglioNota.Testo.Equals(""))
                                        //    Session.Add("dettaglioNota", this.dettaglioNota);
                                        string idDoc = newDoc.systemId;
                                        Parameter.Add("codiceRubrica", mitt.codiceRubrica);
                                        Parameter.Add("tipoIE", mitt.tipoIE);
                                        Parameter.Add("tipoCorrispondente", mitt.tipoCorrispondente);
                                        Parameter.Add("systemId", mitt.systemId);
                                        Parameter.Add("idDoc", idDoc);
                                        Parameter.Add("tipoAvviso", "avviso2");
                                        Parameter.Add("btn_nuovo", "btn_nuovo");
                                        //TODO chiamare in modal la maschera
                                        SenderDetail = mitt;
                                        ScriptManager.RegisterStartupScript(this, this.GetType(), "CorrespondentDetails", "ajaxModalPopupDetailsSenderK2();", true);
                                        retVal = false;
                                    }
                                    else if (regM == null && UserManager.IsAuthorizedFunctions("DO_MOD_CORR_TUTTI"))
                                    {
                                        //if (this.dettaglioNota != null && !this.dettaglioNota.Testo.Equals(""))
                                        //    Session.Add("dettaglioNota", this.dettaglioNota);
                                        string idDoc = newDoc.systemId;
                                        Parameter.Add("codiceRubrica", mitt.codiceRubrica);
                                        Parameter.Add("tipoIE", mitt.tipoIE);
                                        Parameter.Add("tipoCorrispondente", mitt.tipoCorrispondente);
                                        Parameter.Add("systemId", mitt.systemId);
                                        Parameter.Add("idDoc", idDoc);
                                        Parameter.Add("tipoAvviso", "avviso2");
                                        Parameter.Add("btn_nuovo", "btn_nuovo");
                                        //TODO chiamare in modal la maschera
                                        SenderDetail = mitt;
                                        ScriptManager.RegisterStartupScript(this, this.GetType(), "CorrespondentDetails", "ajaxModalPopupDetailsSenderK2();", true);
                                        retVal = false;
                                    }
                                }
                                else if (!check.Equals("1") && !check.Equals("0"))
                                {
                                    //TODO MASCHERA 2
                                    //if (this.dettaglioNota != null && !this.dettaglioNota.Testo.Equals(""))
                                    //    Session.Add("dettaglioNota", this.dettaglioNota);
                                    string idDoc = newDoc.systemId;
                                    Parameter.Add("codiceRubrica", mitt.codiceRubrica);
                                    Parameter.Add("tipoIE", mitt.tipoIE);
                                    Parameter.Add("tipoCorrispondente", mitt.tipoCorrispondente);
                                    Parameter.Add("systemId", mitt.systemId);
                                    Parameter.Add("idDoc", idDoc);
                                    Parameter.Add("tipoAvviso", "avviso2");
                                    Parameter.Add("same_mail", "same_mail");
                                    Parameter.Add("idAOOColl", idAOOColl);
                                    Parameter.Add("btn_nuovo", "btn_nuovo");
                                    //TODO chiamare in modal la maschera
                                    SenderDetail = mitt;
                                    ScriptManager.RegisterStartupScript(this, this.GetType(), "CorrespondentDetails", "ajaxModalPopupDetailsSenderK2();", true);
                                    retVal = false;

                                }
                                else
                                {
                                    if (!String.IsNullOrEmpty(mitt.email) || !mitt.inRubricaComune)
                                    {
                                        AddressBookManager.ResetCodRubCorrIterop(mitt.systemId, mitt.email + "_2");
                                        this.Sender = AddressBookManager.GetCorrespondentBySystemId(mitt.systemId.ToString());
                                        ((ProtocolloEntrata)newDoc.protocollo).mittente = this.Sender;
                                        ((ProtocolloEntrata)newDoc.protocollo).daAggiornareMittente = true;
                                        //Session.Remove("NewIdCorrNoInteropK2");
                                    }
                                }

                            }
                            #endregion

                        }
                        //Andrea De Marco - Modifica per MEV Gestione Eccezioni PEC - schedaDocumento.interop = E viene equiparato a schedaDocumento.interop = P
                        //Per ripristino commentare De Marco e decommentare il codice sottostante
                        else if (check.Equals("0") && (newDoc.interop == "P" || newDoc.interop == "E"))
                        //End De Marco
                        //else if (check.Equals("0") && schedaDocumento.interop == "P")
                        {
                            if (!string.IsNullOrEmpty(mitt.systemId))
                                this.Sender = AddressBookManager.GetCorrespondentBySystemId(mitt.systemId.ToString());
                            if (newDoc.protocollo.GetType() != typeof(ProtocolloUscita))
                            {
                                ((ProtocolloEntrata)newDoc.protocollo).mittente = this.Sender;
                                ((ProtocolloEntrata)newDoc.protocollo).daAggiornareMittente = true;
                            }
                            else
                            {
                                ((ProtocolloUscita)newDoc.protocollo).mittente = this.Sender;
                                ((ProtocolloUscita)newDoc.protocollo).daAggiornareMittente = true;
                            }
                            //NewIdCorrNoInteropK2 = mitt.systemId;
                            if (!string.IsNullOrEmpty(mitt.codiceRubrica))
                            {
                                string[] splitted = mitt.codiceRubrica.Split('@');
                                if (splitted.Length > 1)
                                {
                                    AddressBookManager.ResetCodRubCorrIterop(mitt.systemId, splitted[0] + "_" + splitted[1]);
                                }
                            }
                        }

                    }
                    #endregion

                    #region K1 ON , K2 ON

                    else if (checkInteroperante.Equals("1") && checkSameMail.Equals("1"))
                    {
                        if (check.Equals("0"))
                        {
                            //if (this.dettaglioNota != null && !this.dettaglioNota.Testo.Equals(""))
                            //    Session.Add("dettaglioNota", this.dettaglioNota);
                            Registro regM = RegistryManager.getRegistroBySistemId(mitt.idRegistro);
                            if (regM != null && regM.chaRF != null &&
                                ((regM.chaRF.Equals("0") && UserManager.IsAuthorizedFunctions("DO_MOD_CORR_REG")) ||
                                (regM.chaRF.Equals("1") && UserManager.IsAuthorizedFunctions("DO_MOD_CORR_RF")))
                                )
                            {
                                string idDoc = newDoc.systemId;
                                Parameter.Add("codiceRubrica", mitt.codiceRubrica);
                                Parameter.Add("tipoIE", mitt.tipoIE);
                                Parameter.Add("tipoCorrispondente", mitt.tipoCorrispondente);
                                Parameter.Add("systemId", mitt.systemId);
                                Parameter.Add("idDoc", idDoc);
                                Parameter.Add("tipoAvviso", "avviso1");
                                //TODO chiamare in modal la maschera
                                SenderDetail = mitt;
                                ScriptManager.RegisterStartupScript(this, this.GetType(), "CorrespondentDetails", "ajaxModalPopupDetailsSenderK1();", true);
                                retVal = false;
                            }
                            else if (regM == null && UserManager.IsAuthorizedFunctions("DO_MOD_CORR_TUTTI"))
                            {
                                string idDoc = newDoc.systemId;
                                Parameter.Add("codiceRubrica", mitt.codiceRubrica);
                                Parameter.Add("tipoIE", mitt.tipoIE);
                                Parameter.Add("tipoCorrispondente", mitt.tipoCorrispondente);
                                Parameter.Add("systemId", mitt.systemId);
                                Parameter.Add("idDoc", idDoc);
                                Parameter.Add("tipoAvviso", "avviso1");
                                //TODO chiamare in modal la maschera
                                SenderDetail = mitt;
                                ScriptManager.RegisterStartupScript(this, this.GetType(), "CorrespondentDetails", "ajaxModalPopupDetailsSenderK1();", true);
                                retVal = false;
                            }
                            else if (UserManager.IsAuthorizedFunctions("DO_OCC_IN_K1") && (newDoc.interop == "P" || newDoc.interop == "E"))
                            {
                                string idDoc = newDoc.systemId;
                                Parameter.Add("codiceRubrica", mitt.codiceRubrica);
                                Parameter.Add("tipoIE", mitt.tipoIE);
                                Parameter.Add("tipoCorrispondente", mitt.tipoCorrispondente);
                                Parameter.Add("systemId", mitt.systemId);
                                Parameter.Add("idDoc", idDoc);
                                Parameter.Add("tipoAvviso", "avviso1");
                                //TODO chiamare in modal la maschera
                                SenderDetail = mitt;
                                ScriptManager.RegisterStartupScript(this, this.GetType(), "CorrespondentDetails", "ajaxModalPopupDetailsSenderK1();", true);
                                retVal = false;
                            }
                        }
                        else if (check.Equals("1"))
                        {
                            /*Se il ruolo non è abilitato a modificare i corrispondenti presenti in questo registro
                            inibisco l'apertura di K2 */
                            Registro regM = RegistryManager.getRegistroBySistemId(mitt.idRegistro);
                            if (regM != null && regM.chaRF != null &&
                                ((regM.chaRF.Equals("0") && UserManager.IsAuthorizedFunctions("DO_MOD_CORR_REG")) ||
                                (regM.chaRF.Equals("1") && UserManager.IsAuthorizedFunctions("DO_MOD_CORR_RF")))
                                )
                            {
                                //if (this.dettaglioNota != null && !this.dettaglioNota.Testo.Equals(""))
                                //    Session.Add("dettaglioNota", this.dettaglioNota);
                                string idDoc = newDoc.systemId;
                                Parameter.Add("codiceRubrica", mitt.codiceRubrica);
                                Parameter.Add("tipoIE", mitt.tipoIE);
                                Parameter.Add("tipoCorrispondente", mitt.tipoCorrispondente);
                                Parameter.Add("systemId", mitt.systemId);
                                Parameter.Add("idDoc", idDoc);
                                Parameter.Add("tipoAvviso", "avviso2");
                                Parameter.Add("btn_nuovo", "btn_nuovo");
                                //TODO chiamare in modal la maschera
                                SenderDetail = mitt;
                                ScriptManager.RegisterStartupScript(this, this.GetType(), "CorrespondentDetails", "ajaxModalPopupDetailsSenderK2();", true);
                                retVal = false;
                            }
                            else if (regM == null && UserManager.IsAuthorizedFunctions("DO_MOD_CORR_TUTTI"))
                            {
                                //if (this.dettaglioNota != null && !this.dettaglioNota.Testo.Equals(""))
                                //    Session.Add("dettaglioNota", this.dettaglioNota);
                                string idDoc = newDoc.systemId;
                                Parameter.Add("codiceRubrica", mitt.codiceRubrica);
                                Parameter.Add("tipoIE", mitt.tipoIE);
                                Parameter.Add("tipoCorrispondente", mitt.tipoCorrispondente);
                                Parameter.Add("systemId", mitt.systemId);
                                Parameter.Add("idDoc", idDoc);
                                Parameter.Add("tipoAvviso", "avviso2");
                                Parameter.Add("btn_nuovo", "btn_nuovo");
                                //TODO chiamare in modal la maschera
                                SenderDetail = mitt;
                                ScriptManager.RegisterStartupScript(this, this.GetType(), "CorrespondentDetails", "ajaxModalPopupDetailsSenderK2();", true);
                                retVal = false;
                            }
                        }
                        else if (!check.Equals("0") && !check.Equals("1"))
                        {
                            //TODO MASCHERA 2
                            //if (this.dettaglioNota != null && !this.dettaglioNota.Testo.Equals(""))
                            //    Session.Add("dettaglioNota", this.dettaglioNota);
                            string idDoc = newDoc.systemId;
                            Parameter.Add("codiceRubrica", mitt.codiceRubrica);
                            Parameter.Add("tipoIE", mitt.tipoIE);
                            Parameter.Add("tipoCorrispondente", mitt.tipoCorrispondente);
                            Parameter.Add("systemId", mitt.systemId);
                            Parameter.Add("idDoc", idDoc);
                            Parameter.Add("tipoAvviso", "avviso2");
                            Parameter.Add("same_mail", "same_mail");
                            Parameter.Add("idAOOColl", idAOOColl);
                            Parameter.Add("btn_nuovo", "btn_nuovo");
                            //TODO chiamare in modal la maschera
                            SenderDetail = mitt;
                            ScriptManager.RegisterStartupScript(this, this.GetType(), "CorrespondentDetails", "ajaxModalPopupDetailsSenderK2();", true);
                            retVal = false;
                        }
                    }
                    #endregion
                }
                HttpContext.Current.Session.Remove("notOpenK1K2");
            }
            #endregion



            return retVal;
        }

        protected void DocumentImgDesriptionObject_Click(object o, EventArgs e)
        {
            try
            {
                this.TxtObjectViewer = this.TxtObject.Text;
                ScriptManager.RegisterStartupScript(this, this.GetType(), "ViewObject", "ajaxModalPopupViewObject();", true);
            }
            catch (System.Exception ex)
            {
                UIManager.AdministrationManager.DiagnosticError(ex);
                return;
            }
        }

        private bool VerifyAndExecuteAutomaticTransm(bool isEnableUffRef, ref List<string> errors)
        {
            bool result = true;
            string message = string.Empty;

            string language = UIManager.UserManager.GetUserLanguage();

            if (this.DocumentInWorking.tipoProto == "P")
            {
                DocsPaWR.ConfigSpedizioneDocumento config = SenderManager.GetConfigSpedizioneDocumento();

                if (config.SpedizioneAutomaticaDocumento || config.TrasmissioneAutomaticaDocumento)
                {
                    if (config.SpedizioneAutomaticaDocumento)
                    {
                        bool fileAcquisito = (this.DocumentInWorking.documenti != null && this.DocumentInWorking.documenti[0].fileSize != "0");
                        if (!fileAcquisito && config.AvvisaSuSpedizioneDocumento)
                        {
                            // Creazione di una chiave di sessione temporanea
                            // per gestire la visualizzazione del messaggio
                            // di conferma di spedizione automatica
                            //this.Session["showConfirmSpedizioneAutomatica"] = true;
                            if (!string.IsNullOrEmpty(this.HiddenSendNoFile.Value))
                            {
                                message = this.SpedisciDocumento();
                                if (!string.IsNullOrEmpty(message))
                                {
                                    message = Utils.Languages.GetLabelFromCode(message, language);
                                    errors.Add(message);
                                }
                                this.HiddenSendNoFile.Value = string.Empty;
                                this.UpHiddenField.Update();
                                return true;
                            }
                            else
                            {
                                string msgConfirm = "WarningDocumentConfirmSenderNoFile";
                                ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxConfirmModal", "if (parent.fra_main) {parent.fra_main.ajaxConfirmModal('" + msgConfirm.Replace("'", @"\'") + "', 'HiddenSendNoFile', '');} else {parent.ajaxConfirmModal('" + msgConfirm.Replace("'", @"\'") + "', 'HiddenSendNoFile', '');}", true);
                                this.UpHiddenField.Update();
                                return false;
                            }
                        }
                        else
                        {
                            // Spedizione del documento
                            message = this.SpedisciDocumento();
                            if (!string.IsNullOrEmpty(message))
                            {
                                message = Utils.Languages.GetLabelFromCode(message, language);
                                errors.Add(message);
                            }
                        }
                    }
                    else
                    {
                        message = this.SpedisciDocumento();
                        if (!string.IsNullOrEmpty(message))
                        {
                            message = Utils.Languages.GetLabelFromCode(message, language);
                            errors.Add(message);
                        }
                    }
                }
            }
            else
            {
                if (this.DocumentInWorking.tipoProto == "I")
                {
                    string serverName = utils.getHttpFullPath();
                    bool verificaRagioni;

                    if (DocumentManager.TrasmettiProtocolloInterno(this, serverName, this.DocumentInWorking, isEnableUffRef, out verificaRagioni, out message))
                    {
                        if (!string.IsNullOrEmpty(message))
                        {
                            errors.Add(message);
                        }

                        if (!verificaRagioni)
                        {
                            string msg = Utils.Languages.GetLabelFromCode("WarningDocumentNoTransmissionReason", language);
                            message = msg + " " + message;
                            errors.Add(message);
                        }
                    }
                    else
                    {
                        message = Utils.Languages.GetLabelFromCode("WarningDocumentNotTransmissionRecord", language);
                        errors.Add(message);
                    }
                }
            }
            return result;
        }

        private void completaProtocollazione(bool isEnableUffRef)
        {
            if (this.DocumentCheckPrivate.Checked && string.IsNullOrEmpty(this.HiddenControlPrivateHierarchyTransmission.Value) && this.CheckDestinatariInterni())
            {
                string idModel = string.Empty;
                if (string.IsNullOrEmpty(this.DocumentDdlTransmissionsModel.SelectedValue))
                {
                    idModel = "null";
                }
                else
                {
                    idModel = this.DocumentDdlTransmissionsModel.SelectedValue;
                }

                if (UIManager.DocumentManager.ereditaVisibilita(UIManager.UserManager.GetInfoUser().idAmministrazione, idModel))
                {
                    this.HiddenControlPrivateHierarchyTransmission.Value = "up";
                    ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "hierarchyVisibility", "ajaxModalPopupHierarchyVisibility();", true);
                    return;
                }
            }

            // Trasmissione documento interno e uscita o arrivo
            List<string> errors = new List<string>();
            //aggiunto perchè se la protocollazione fallisce comunque sia venivano create trasmissioni
            if (!string.IsNullOrEmpty(this.DocumentInWorking.systemId))
            {
                if (!this.VerifyAndExecuteAutomaticTransm(isEnableUffRef, ref errors))
                {
                    return;
                }

                ////metodo per la trasmissione rapida (templ & Modelli)
                this.execTrasmRapida(ref errors);

                this.DocumentDdlTransmissionsModel.SelectedValue = string.Empty;
                this.UpPnlTransmissionsModel.Update();

                string errorInPopup = string.Empty;

                if (errors != null && errors.Count > 0)
                {
                    foreach (string err in errors)
                    {
                        errorInPopup += err + "<br/>";
                    }

                    string msgDesc = "WarningDocumentCustom";
                    string errFormt = Server.UrlEncode(errorInPopup);
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + utils.FormatJs(msgDesc) + "', 'warning', '', '" + utils.FormatJs(errFormt) + "');} else {parent.ajaxDialogModal('" + utils.FormatJs(msgDesc) + "', 'warning', '', '" + utils.FormatJs(errFormt) + "');}; ", true);
                }

                //if (enableUfficioRef != null && enableUfficioRef.Equals("1"))
                //{
                //    spedisciUfficioReferente();
                //}
            }

            //Verifico se il cha_interop del protocollo è = "P", questo caso se
            //esiste un mittente intermedio effettuo una trasmissione a quest'ultimo 
            //con la ragione predefinita dell'amministrazione

            ////Andrea De Marco - Modifica per MEV Gestione Eccezioni PEC - equipariamo i protocolli con interop = E a quelli interop = P
            ////Per ripristino commentare De Marco e decommentare il codice sottostante
            //if ((newDoc.interop == "P" && newDoc.tipoProto == "A") || (newDoc.interop == "E" && newDoc.tipoProto == "A"))
            //{
            //    Corrispondente mittInt = ((ProtocolloEntrata)newDoc.protocollo).mittenteIntermedio;
            //    if (mittInt != null)
            //    {
            //        Trasmissione trasmissione = new Trasmissione();
            //        trasmissione.noteGenerali = "Protocollato documento nr. " + newDoc.docNumber;
            //        trasmissione.tipoOggetto = DocsPaWR.TrasmissioneTipoOggetto.DOCUMENTO;
            //        trasmissione.infoDocumento = DocumentManager.getInfoDocumento(newDoc);
            //        trasmissione.utente = this.UserLog;
            //        trasmissione.ruolo = this.Role;

            //        //RagioneTrasmissione ragione = new RagioneTrasmissione();
            //        //RagioneTrasmissione[] listaRagioni = wws.SmistamentoGetRagioniTrasmissione(trasmissione.ruolo.idAmministrazione);
            //        //for (int i = 0; i < listaRagioni.Length; i++)
            //        //{
            //        //    if (((RagioneTrasmissione)listaRagioni[i]).descrizione.ToUpper() == "COMPETENZA")
            //        //    {
            //        //        ragione = (RagioneTrasmissione)listaRagioni[i];
            //        //        break;
            //        //    }
            //        //}

            //        //if (ragione.systemId != null && ragione.systemId != "")
            //        //{
            //        //    trasmissione = TrasmManager.addTrasmissioneSingola(trasmissione, mittInt, ragione, "Protocollato documento nr. " + newDoc.docNumber, "T", 0, this);
            //        //    trasmissione = this.impostaNotificheUtentiDaModello(trasmissione);
            //        //    DocsPaWR.InfoUtente infoUtente = this.InfoUser;
            //        //    if (infoUtente.delegato != null)
            //        //        trasmissione.delegato = ((DocsPaWR.InfoUtente)(infoUtente.delegato)).idPeople;

            //        //    //Nuovo metodo saveExecuteTrasm
            //        //    trasmissione = TrasmManager.saveExecuteTrasm(this, trasmissione, infoUtente);
            //        //}
            //    }
            //}
        }

        private void execTrasmRapida(ref List<string> errors)
        {
            //logger.Info("BEGIN");

            SchedaDocumento newDoc = this.DocumentInWorking;

            if (!string.IsNullOrEmpty(this.DocumentDdlTransmissionsModel.SelectedValue))
            {
                Dictionary<string, DocsPaWR.RagioneTrasmissione> reason = new Dictionary<string, RagioneTrasmissione>();
                string language = UIManager.UserManager.GetUserLanguage();
                string msg = string.Empty;

                DocsPaWR.ModelloTrasmissione modello = UIManager.TransmissionModelsManager.GetTemplateById(this.InfoUser.idAmministrazione, this.DocumentDdlTransmissionsModel.SelectedValue);
                Trasmissione trasmissione = new DocsPaWR.Trasmissione();

                //Parametri della trasmissione
                trasmissione.noteGenerali = modello.VAR_NOTE_GENERALI;
                trasmissione.tipoOggetto = DocsPaWR.TrasmissioneTipoOggetto.DOCUMENTO;
                trasmissione.infoDocumento = DocumentManager.getInfoDocumento(newDoc);
                trasmissione.utente = this.UserLog;
                trasmissione.ruolo = this.Role;
                if (modello != null)
                    trasmissione.NO_NOTIFY = modello.NO_NOTIFY;
                //Parametri delle trasmissioni singole
                for (int i = 0; i < modello.RAGIONI_DESTINATARI.Length; i++)
                {
                    DocsPaWR.RagioneDest ragDest = (DocsPaWR.RagioneDest)modello.RAGIONI_DESTINATARI[i];
                    ArrayList destinatari = new ArrayList(ragDest.DESTINATARI);
                    for (int j = 0; j < destinatari.Count; j++)
                    {
                        DocsPaWR.MittDest mittDest = (DocsPaWR.MittDest)destinatari[j];
                        DocsPaWR.Corrispondente corr = new Corrispondente();
                        if (mittDest.CHA_TIPO_MITT_DEST == "D")
                        {
                            corr = UserManager.getCorrispondenteByCodRubricaIENotdisabled(this, mittDest.VAR_COD_RUBRICA, DocsPaWR.AddressbookTipoUtente.INTERNO);
                        }
                        else
                        {
                            corr = TrasmManager.getCorrispondenti(mittDest.CHA_TIPO_MITT_DEST, newDoc, null, this);
                        }

                        if (corr != null)
                        {   //il corr è null se non esiste o se è stato disabiltato.    
                            DocsPaWR.RagioneTrasmissione ragione = null;

                            if (reason != null && reason.Count > 0)
                            {
                                if (reason.ContainsKey(mittDest.ID_RAGIONE.ToString()))
                                {
                                    ragione = reason[mittDest.ID_RAGIONE.ToString()];
                                }
                                else
                                {
                                    ragione = TransmissionModelsManager.GetReasonById(mittDest.ID_RAGIONE.ToString(), this.InfoUser);
                                    reason.Add(mittDest.ID_RAGIONE.ToString(), ragione);
                                }
                            }
                            else
                            {
                                ragione = TransmissionModelsManager.GetReasonById(mittDest.ID_RAGIONE.ToString(), this.InfoUser);
                                reason.Add(mittDest.ID_RAGIONE.ToString(), ragione);
                            }

                            if (ragione.prevedeCessione != null && ragione.prevedeCessione.Equals("R"))
                            {
                                this.IsCosolidato = true;   //FACCIO IL REDIRECT SULLA PAGINA PER AGGIORNARLA COMPLETAMENTE(QUESTO NEL CASO IN CUI IL MODELLO PREVEDE LA CESSIONE DEI
                                //DIRITTI E QUINDI DISABILITARE TUTTO)
                            }

                            try
                            {
                                trasmissione = TrasmManager.addTrasmissioneSingola(trasmissione, corr, ragione, mittDest.VAR_NOTE_SING, mittDest.CHA_TIPO_TRASM, mittDest.SCADENZA, mittDest.NASCONDI_VERSIONI_PRECEDENTI, this);
                            }
                            catch (ExceptionTrasmissioni e)
                            {
                                errors.Add(e.Messaggio);
                            }
                        }
                    }
                }

                DocsPaWR.Trasmissione t_rs = null;
                if (trasmissione.trasmissioniSingole != null && trasmissione.trasmissioniSingole.Length > 0)
                {
                    TrasmissioneSingola[] appoTrasmSingole = new TrasmissioneSingola[trasmissione.trasmissioniSingole.Length];
                    if (!string.IsNullOrEmpty(this.DocumentInWorking.eredita) && this.DocumentInWorking.eredita == "0")
                    {
                        for (int i = 0; i < trasmissione.trasmissioniSingole.Length; i++)
                        {
                            TrasmissioneSingola trasmSing = new TrasmissioneSingola();
                            trasmSing = trasmissione.trasmissioniSingole[i];
                            trasmSing.ragione.eredita = "0";
                            appoTrasmSingole[i] = trasmSing;
                        }
                        trasmissione.trasmissioniSingole = appoTrasmSingole;
                    }

                    trasmissione = this.impostaNotificheUtentiDaModello(trasmissione, modello);
                    DocsPaWR.InfoUtente infoUtente = this.InfoUser; ;
                    if (infoUtente.delegato != null)
                        trasmissione.delegato = ((DocsPaWR.InfoUtente)(infoUtente.delegato)).idPeople;

                    //Modifica per cessione diritti

                    if (this.cessioneDirittiAbilitato(trasmissione, modello, newDoc))
                    {
                        // verifica se esistono ruoli tra i destinatari
                        int numeroRuoliDestInTrasmissione = this.verificaRuoliDestInTrasmissione(trasmissione);

                        switch (numeroRuoliDestInTrasmissione)
                        {
                            case 0:
                                // non ci sono ruoli tra i destinatari! avvisa...
                                msg = Utils.Languages.GetMessageFromCode("WarningDocumentNoNewOwner", language);
                                errors.Add(msg);
                                break;

                            case 1:
                                // ce n'è 1, verifica se un solo utente del ruolo ha la notifica...
                                string idPeopleNewOwner = string.Empty;
                                int numeroUtentiConNotifica = this.utentiConNotifica(trasmissione, out idPeopleNewOwner);
                                if (numeroUtentiConNotifica > 1)
                                {
                                    msg = Utils.Languages.GetMessageFromCode("WarningDocumentNoNewOwner", language);
                                    errors.Add(msg);
                                }
                                else
                                {
                                    // 1 solo utente con notifica, il sistema ha già memorizzato il suo id_people...
                                    trasmissione.cessione.idPeopleNewPropr = idPeopleNewOwner;
                                    trasmissione.cessione.idRuoloNewPropr = ((DocsPaWR.Ruolo)trasmissione.trasmissioniSingole[0].corrispondenteInterno).idGruppo;

                                    modello.CEDE_DIRITTI = "1";
                                    modello.ID_PEOPLE_NEW_OWNER = trasmissione.cessione.idPeopleNewPropr;
                                    modello.ID_GROUP_NEW_OWNER = trasmissione.cessione.idRuoloNewPropr;
                                }
                                break;

                            default:
                                msg = Utils.Languages.GetMessageFromCode("WarningDocumentNoNewOwner", language);
                                errors.Add(msg);
                                break;
                        }
                    }

                    if (this.verificaNotificheUtentiDaModello(trasmissione, modello))
                    {
                        t_rs = TrasmManager.saveExecuteTrasm(this, trasmissione, infoUtente);
                    }
                    else
                    {
                        msg = Utils.Languages.GetMessageFromCode("WarningDocumentNoTransmit", language);
                        errors.Add(msg);
                    }
                }
                if (t_rs != null && t_rs.ErrorSendingEmails)
                {
                    msg = Utils.Languages.GetMessageFromCode("ErrorTransmissionSendingEmails", language);
                    errors.Add(msg);
                }

                //Salvataggio del system_id della trasm per il cambio di stato automatico
                if (this.EnableStateDiagram)
                {
                    DocsPaWR.Stato stato = DiagrammiManager.GetStateDocument(newDoc.docNumber);
                    bool trasmWF = false;
                    if (trasmissione != null && trasmissione.trasmissioniSingole != null)
                        for (int i = 0; i < trasmissione.trasmissioniSingole.Length; i++)
                        {
                            DocsPaWR.TrasmissioneSingola trasmSing = (DocsPaWR.TrasmissioneSingola)trasmissione.trasmissioniSingole[i];
                            if (trasmSing.ragione.tipo == "W")
                                trasmWF = true;
                        }
                    if (stato != null && trasmWF)
                    {
                        DiagrammiManager.salvaStoricoTrasmDiagrammi(trasmissione.systemId, newDoc.docNumber, Convert.ToString(stato.SYSTEM_ID));
                    }
                }

                if (trasmissione.cessione != null)
                {
                    newDoc = DocumentManager.getDocumentDetails(this, newDoc.systemId, newDoc.docNumber);
                    DocumentManager.setSelectedRecord(newDoc);
                    this.DocumentInWorking = newDoc;

                    if (newDoc == null)
                        ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "function RedirectHome(){$(location).attr('href','" + this.ResolveUrl("~/Index.aspx") + "');} if (parent.fra_main) {parent.fra_main.ajaxDialogModal('RevocationAcl', 'warning', '','',null,null,'RedirectHome()')} else {parent.parent.ajaxDialogModal('RevocationAcl', 'warning', '','',null,null,'RedirectHome()');}", true);
                    else if (!trasmissione.mantieniScrittura)
                        this.EnableEditMode();
                }
            }

            this.DocumentTabs.RefreshLayoutTab();
            this.UpContainerDocumentTab.Update();

            //logger.Info("END");
        }

        private bool verificaNotificheUtentiDaModello(DocsPaWR.Trasmissione objTrasm, DocsPaWR.ModelloTrasmissione modello)
        {
            if (objTrasm.trasmissioniSingole != null && objTrasm.trasmissioniSingole.Length > 0)
            {
                for (int cts = 0; cts < objTrasm.trasmissioniSingole.Length; cts++)
                {
                    if (objTrasm.trasmissioniSingole[cts].trasmissioneUtente.Length > 0)
                    {
                        bool boolUtente = false;
                        for (int ctu = 0; ctu < objTrasm.trasmissioniSingole[cts].trasmissioneUtente.Length; ctu++)
                        {
                            if (this.daNotificareSuModello(objTrasm.trasmissioniSingole[cts].trasmissioneUtente[ctu].utente.idPeople, objTrasm.trasmissioniSingole[cts].corrispondenteInterno.systemId, modello))
                            {
                                boolUtente = true;
                            }
                        }
                        if (!boolUtente)
                            return false;
                    }
                }
            }

            return true;
        }

        /// <summary>
        /// Verifica se ci sono utenti con notifica, quanti sono e, nel caso di 1, ne memorizza l'ID
        /// </summary>
        private int utentiConNotifica(DocsPaWR.Trasmissione trasm, out string idPeopleNewOwner)
        {
            idPeopleNewOwner = string.Empty;
            int numeroUtentiConNotifica = 0;
            foreach (DocsPaWR.TrasmissioneSingola trasmy in trasm.trasmissioniSingole)
                foreach (DocsPaWR.TrasmissioneUtente trasmUt in trasmy.trasmissioneUtente)
                    if (trasmUt.daNotificare)
                    {
                        numeroUtentiConNotifica++;
                        idPeopleNewOwner = trasmUt.utente.idPeople; // memorizza l'id people... da utilizzare nel caso di un solo utente con notifica                        
                    }

            return numeroUtentiConNotifica;
        }

        /// <summary>
        /// Verifica se esistono RUOLI tra i destinatari della trasmissione 
        /// ed imposta quanti sono
        /// </summary>
        private int verificaRuoliDestInTrasmissione(DocsPaWR.Trasmissione trasm)
        {
            int result = 0;
            foreach (DocsPaWR.TrasmissioneSingola trasmy in trasm.trasmissioniSingole)
            {
                if (trasmy.tipoDest.ToString().ToUpper().Equals("RUOLO"))
                {
                    result++;
                }
            }
            return result;
        }

        /// <summary>
        /// Verifica se è una trasmissione con cessione dei diritti sull'oggetto.
        /// Ritorna True se:
        /// 
        ///     1 - la trasmissione è generata da un modello di trasmissione con cessione diritti (anche se l'utente non è abilitato all'editing ACL)
        ///     
        /// </summary>
        /// <returns>True, False</returns>
        private bool cessioneDirittiAbilitato(DocsPaWR.Trasmissione trasm, DocsPaWR.ModelloTrasmissione modello, SchedaDocumento newDoc)
        {
            bool retValue = false;
            if (modello != null)
                trasm.NO_NOTIFY = modello.NO_NOTIFY;
            if (modello != null && modello.CEDE_DIRITTI.Equals("1"))
            {
                if (trasm.cessione == null)
                {
                    DocsPaWR.CessioneDocumento cessione = new DocsPaWR.CessioneDocumento();
                    cessione.docCeduto = true;
                    //*******************************************************************************************
                    // MODIFICA IACOZZILLI GIORDANO 18/07/2012
                    // Modifica inerente la cessione dei diritti di un doc da parte di un utente non proprietario ma 
                    // nel ruolo del proprietario, in quel caso non posso valorizzare l'IDPEOPLE  con il corrente perchè
                    // il proprietario può essere un altro utente del mio ruolo, quindi andrei a generare un errore nella security,
                    // devo quindi controllare che nell'idpeople venga inserito l'id corretto del proprietario.
                    if (!string.IsNullOrEmpty(Utils.InitConfigurationKeys.GetValue(this.InfoUser.idAmministrazione, DBKeys.FE_CEDI_DIRITTI_IN_RUOLO.ToString())) && Utils.InitConfigurationKeys.GetValue(this.InfoUser.idAmministrazione, DBKeys.FE_CEDI_DIRITTI_IN_RUOLO.ToString()).Equals("1"))
                    {
                        //Devo istanziare una classe utente.
                        string idProprietario = string.Empty;
                        if (!string.IsNullOrEmpty(newDoc.systemId) && !string.IsNullOrEmpty(newDoc.docNumber))
                            idProprietario = this.GetAnagUtenteProprietario(newDoc.docNumber);
                        else
                            idProprietario = this.InfoUser.idPeople;
                        //idProprietario = GetAnagUtenteProprietario();
                        Utente _utproprietario = UserManager.GetUtenteByIdPeople(idProprietario);

                        cessione.idPeople = idProprietario;
                        cessione.idRuolo = this.InfoUser.idGruppo;
                        cessione.userId = _utproprietario.cognome + " " + _utproprietario.nome;


                        if (string.IsNullOrEmpty(cessione.idPeople))
                            cessione.idPeople = idProprietario;

                        if (string.IsNullOrEmpty(cessione.idRuolo))
                            cessione.idRuolo = this.InfoUser.idGruppo;

                        if (string.IsNullOrEmpty(cessione.userId))
                            cessione.userId = _utproprietario.cognome + " " + _utproprietario.nome;
                    }
                    else
                    {
                        //OLD CODE:
                        cessione.idPeople = this.InfoUser.idPeople;
                        cessione.idRuolo = this.InfoUser.idGruppo;
                        cessione.userId = this.InfoUser.userId;
                    }
                    //*******************************************************************************************
                    // FINE MODIFICA
                    //********************************************************************************************
                    cessione.idPeopleNewPropr = modello.ID_PEOPLE_NEW_OWNER;
                    cessione.idRuoloNewPropr = modello.ID_GROUP_NEW_OWNER;

                    if (!string.IsNullOrEmpty(modello.MANTIENI_SCRITTURA) && !string.IsNullOrEmpty(modello.MANTIENI_LETTURA))
                        if (Convert.ToBoolean(int.Parse(modello.MANTIENI_SCRITTURA)))
                        {
                            trasm.mantieniLettura = true;
                            trasm.mantieniScrittura = true;
                        }
                        else
                        {
                            trasm.mantieniScrittura = false;
                            if (Convert.ToBoolean(int.Parse(modello.MANTIENI_LETTURA)))
                                trasm.mantieniLettura = true;
                            else
                                trasm.mantieniLettura = false;
                        }

                    trasm.cessione = cessione;
                }
            }
            else
                retValue = (trasm.cessione != null && trasm.cessione.docCeduto);

            return retValue;
        }

        /// <summary>
        /// Iacozzilli: Faccio la Get dell'idProprietario del doc!
        /// </summary>
        /// <returns></returns>
        private string GetAnagUtenteProprietario(string docnumber)
        {
            DocumentoDiritto[] listaVisibilita = null;
            string idProprietario = string.Empty;
            listaVisibilita = DocumentManager.getListaVisibilitaSemplificata(this, docnumber, true);
            if (listaVisibilita != null && listaVisibilita.Length > 0)
            {
                for (int i = 0; i < listaVisibilita.Length; i++)
                {
                    if (listaVisibilita[i].accessRights == 0)
                    {
                        return idProprietario = listaVisibilita[i].personorgroup;
                    }
                }
            }

            return string.Empty;
        }




        private DocsPaWR.Trasmissione impostaNotificheUtentiDaModello(DocsPaWR.Trasmissione objTrasm, DocsPaWR.ModelloTrasmissione modello)
        {
            if (objTrasm.trasmissioniSingole != null && objTrasm.trasmissioniSingole.Length > 0)
            {
                for (int cts = 0; cts < objTrasm.trasmissioniSingole.Length; cts++)
                {
                    if (objTrasm.trasmissioniSingole[cts].trasmissioneUtente.Length > 0)
                    {
                        for (int ctu = 0; ctu < objTrasm.trasmissioniSingole[cts].trasmissioneUtente.Length; ctu++)
                        {
                            objTrasm.trasmissioniSingole[cts].trasmissioneUtente[ctu].daNotificare = this.daNotificareSuModello(objTrasm.trasmissioniSingole[cts].trasmissioneUtente[ctu].utente.idPeople, objTrasm.trasmissioniSingole[cts].corrispondenteInterno.systemId, modello);
                        }
                    }
                }
            }

            return objTrasm;
        }

        private bool daNotificareSuModello(string currentIDPeople, string currentIDCorrGlobRuolo, DocsPaWR.ModelloTrasmissione modello)
        {
            bool retValue = true;

            for (int i = 0; i < modello.RAGIONI_DESTINATARI.Length; i++)
            {
                DocsPaWR.RagioneDest ragDest = (DocsPaWR.RagioneDest)modello.RAGIONI_DESTINATARI[i];
                ArrayList destinatari = new ArrayList(ragDest.DESTINATARI);
                for (int j = 0; j < destinatari.Count; j++)
                {
                    DocsPaWR.MittDest mittDest = (DocsPaWR.MittDest)destinatari[j];
                    if (mittDest.ID_CORR_GLOBALI.Equals(Convert.ToInt32(currentIDCorrGlobRuolo)))
                    {
                        if (mittDest.UTENTI_NOTIFICA != null && mittDest.UTENTI_NOTIFICA.Length > 0)
                        {
                            for (int cut = 0; cut < mittDest.UTENTI_NOTIFICA.Length; cut++)
                            {
                                if (mittDest.UTENTI_NOTIFICA[cut].ID_PEOPLE.Equals(currentIDPeople))
                                {
                                    if (mittDest.UTENTI_NOTIFICA[cut].FLAG_NOTIFICA.Equals("1"))
                                        retValue = true;
                                    else
                                        retValue = false;

                                    return retValue;
                                }
                            }
                        }
                    }
                }
            }
            return retValue;
        }

        /// <summary>
        /// Spedizione del documento corrente
        /// </summary>
        private string SpedisciDocumento()
        {
            string result = string.Empty;
            // Se il documento è in partenza, viene effettuata la spedizione automatica
            DocsPaWR.SpedizioneDocumento infoSpedizione = SenderManager.SpedisciDocumento(this.DocumentInWorking);
            if (!infoSpedizione.Spedito)
            {
                result = "WarningDocumentNoSendDocument";
            }

            return result;
        }

        /// <summary>
        /// 
        /// </summary>
        private bool protocolla(SchedaDocumento newDoc)
        {
            this._logger.Info("START");
            //try
            //{
            string result = "Operazione avvenuta con successo.\\n\\n";
            bool daAggiornareTipoAtto = (this.DocumentDdlTypeDocument.Enabled && !string.IsNullOrEmpty(this.DocumentDdlTypeDocument.SelectedValue) || newDoc.daAggiornareTipoAtto);
            DocsPaWR.ResultProtocollazione risultatoProtocollazione = DocsPaWR.ResultProtocollazione.OK;
            string systemID = newDoc.systemId;
            string resFunz = string.Empty;
            //if (systemID != null)
            //{
            //    //setMittentiDaAggiornare();
            //}

            string msg = string.Empty;
            //this.SaveNote(out msg);
            if (!string.IsNullOrEmpty(msg))
            {
                ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + msg.Replace("'", "\\'") + "', 'error');} else {parent.ajaxDialogModal('" + msg.Replace("'", "\\'") + "', 'error');}", true);
                return false;
            }

            //if (!DocumentManager.getBlockQuickProt(this))
            //{
            //    DocumentManager.setBlockQuickProt(this, true);
            //    //gestione fascicolazione veloce se il doc non è nuovo protocollo soltanto / altrimenti protocollo e classifico (se è stato selezionato un codice)


            if (newDoc.tipoProto.Equals("A") && !string.IsNullOrEmpty(this.TxtProtocolSender.Text))
            {
                ((DocsPaWR.ProtocolloEntrata)newDoc.protocollo).descrizioneProtocolloMittente = this.TxtProtocolSender.Text;
            }

            if (newDoc.tipoProto.Equals("A") && !string.IsNullOrEmpty(this.TxtDateProtocol.Text))
            {
                ((DocsPaWR.ProtocolloEntrata)newDoc.protocollo).dataProtocolloMittente = this.TxtDateProtocol.Text;
            }

            if (newDoc.tipoProto.Equals("A") && !string.IsNullOrEmpty(this.TxtArrivalDate.Text))
            {
                newDoc.documenti[0].dataArrivo = this.TxtArrivalDate.Text + " " + this.TxtTimeOfArrival.Text;
            }
            else if (newDoc.tipoProto.Equals("A") && string.IsNullOrEmpty(this.TxtArrivalDate.Text))
            {
                newDoc.documenti[0].dataArrivo = null;
            }

            bool predisposto = false;

            if (newDoc != null && !string.IsNullOrEmpty(newDoc.systemId))
            {
                predisposto = true;
            }

            newDoc = DocumentManager.protocolla(this, newDoc, this.Project, null, out risultatoProtocollazione, ref resFunz);

            if (risultatoProtocollazione != DocsPaWR.ResultProtocollazione.OK)
            {
                string message = string.Empty;

                switch (risultatoProtocollazione)
                {

                    case DocsPaWR.ResultProtocollazione.AMMINISTRAZIONE_MANCANTE:
                        message = "ErrorCreationDocumentAdmin";
                        break;
                    case DocsPaWR.ResultProtocollazione.DESTINATARIO_MANCANTE:
                        message = "ErrorCreationDocumentSender";
                        break;
                    case DocsPaWR.ResultProtocollazione.MITTENTE_MANCANTE:
                        message = "ErrorCreationDocumentSenderRequired";
                        break;
                    case DocsPaWR.ResultProtocollazione.OGGETTO_MANCANTE:
                        message = "ErrorCreationDocumentObjecetRequired";
                        break;
                    case DocsPaWR.ResultProtocollazione.REGISTRO_MANCANTE:
                        message = "ErrorCreationDocumentRegistryRequired";
                        break;
                    case DocsPaWR.ResultProtocollazione.REGISTRO_CHIUSO:
                        message = "ErrorCreationDocumentRegistryClosed";
                        break;
                    case DocsPaWR.ResultProtocollazione.STATO_REGISTRO_ERRATO:
                        message = "ErrorCreationDocumentRegistryFault";
                        break;
                    case DocsPaWR.ResultProtocollazione.DATA_SUCCESSIVA_ATTUALE:
                        message = "ErrorCreationDocumentCreationDate";
                        break;
                    case DocsPaWR.ResultProtocollazione.DATA_ERRATA:
                        message = "ErrorCreationDocumentFaultDate";
                        break;
                    case DocsPaWR.ResultProtocollazione.APPLICATION_ERROR:
                        //message = "Errore imprevisto dell'applicazione. Ritentare l'operazione.";
                        message = "ErrorCreationDocumentApplicationError";
                        break;
                    case DocsPaWR.ResultProtocollazione.DOCUMENTO_GIA_PROTOCOLLATO: //TODO: Se predisposto già protocollato
                        //message = "Errore imprevisto dell'applicazione. Ritentare l'operazione.";
                        message = "ErrorCreationDocumentAlreadyProtocol";
                        break;
                    case DocsPaWR.ResultProtocollazione.FORMATO_SEGNATURA_MANCANTE:
                        message = "ErrorCreationDocumentReferenceCode";
                        break;
                    case DocsPaWR.ResultProtocollazione.ERRORE_WSPIA_PROTOCOLLO_ENTRATA_MITTENTE:
                        message = "ErrorCreationDocumentWSPIASender";
                        break;

                    case DocsPaWR.ResultProtocollazione.ERRORE_WSPIA_CLASSIFICA_NODO_FOGLIA:
                        message = "ErrorCreationDocumentWSPIACLassification";
                        break;
                    case DocsPaWR.ResultProtocollazione.ERRORE_WSPIA_PROTOCOLLAZIONE_SEMPLICE:
                        message = "ErrorCreationDocumentWSPIANull";
                        break;
                    case DocsPaWR.ResultProtocollazione.ERRORE_DURANTE_LA_FASCICOLAZIONE:
                        message = "ErrorChildProjects";
                        break;
                }

                ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + message.Replace("'", "\\'") + "', 'error');} else {parent.ajaxDialogModal('" + message.Replace("'", "\\'") + "', 'error');}", true);
                this._logger.Info("END");
                return false;

            }
            ////Per sviluppo estensione delle funzionalità di fascicolazione e trasmissione rapida
            //FascicoliManager.removeFascicoloSelezionatoFascRapida(this);
            //FascicoliManager.removeCodiceFascRapida(this);
            //FascicoliManager.removeDescrizioneFascRapida(this);
            // }
            //Dopo la protocollazione mettiamo le variabili per l'aggiornamento del mitt/dest a false

            //if (isEnableUffRef)
            //{
            //    schedaDocumento.protocollo.ModUffRef = false;
            //}

            if (risultatoProtocollazione == DocsPaWR.ResultProtocollazione.OK)
            {
                NttDataWA.MasterPages.Base master = this.Master as NttDataWA.MasterPages.Base;
                //this._logger.Debug(">> Inposto pulsante permanente");
                //this._attivaPulsanteApponiSegnaturaPermanente("0".Equals(newDoc.DettaglioSegnatura.Segnato));


                master.InitializeLastDocumentsView();
                //UpdatePanel pnl = master.FindControl("UpnlLastDocumentView") as UpdatePanel;
                //pnl.Update();

                //Mev TASK (vado associare il documento creato al TASK)
                if (this.Task != null)
                {
                    TaskManager.AssociaContributoAlTask(this.Task, newDoc);
                    this.Task = null;
                }
                else
                {
                    List<Navigation.NavigationObject> navigationList = Navigation.NavigationUtils.GetNavigationList();
                    Navigation.NavigationObject tempPage = navigationList.Last();
                    Navigation.NavigationObject actualPage = new Navigation.NavigationObject();
                    actualPage.IdObject = newDoc.systemId;
                    actualPage.NamePage = Navigation.NavigationUtils.GetNamePage(Navigation.NavigationUtils.NamePage.DOCUMENT.ToString(), string.Empty);
                    actualPage.Link = Navigation.NavigationUtils.GetLink(Navigation.NavigationUtils.NamePage.DOCUMENT.ToString(), true, this.Page);
                    actualPage.CodePage = Navigation.NavigationUtils.NamePage.DOCUMENT.ToString();
                    actualPage.Page = "DOCUMENT.ASPX";
                    if (tempPage.CodePage != Navigation.NavigationUtils.NamePage.SEARCH_DOCUMENTS_ADVANCED.ToString() && tempPage.CodePage != Navigation.NavigationUtils.NamePage.SEARCH_DOCUMENTS_ADVANCED_ADL.ToString() && tempPage.CodePage != Navigation.NavigationUtils.NamePage.HOME.ToString() && tempPage.CodePage != Navigation.NavigationUtils.NamePage.HOME_ADL_DOCUMENT.ToString() && tempPage.CodePage != Navigation.NavigationUtils.NamePage.HOME_ADL_PROJECT.ToString())
                    {
                        navigationList.Add(actualPage);
                    }
                    Navigation.NavigationUtils.SetNavigationList(navigationList);
                }

                #region Aggiornamento delle notifiche legate al documento

                //Nel caso in cui si stà protocollando un predisposto, effettuo il popolamento oggetto TypeOperation per il successivo aggiornamento delle notifiche:
                //verifica se è stata modificata
                //la descrizione o la tipologia del fascicolo; in tal caso vengono riportate sulle notifiche legate al fascicolo stesso, qualora esse esistano
                if (!string.IsNullOrEmpty(DocumentInWorking.systemId) && DocumentInWorking.protocollo != null && string.IsNullOrEmpty(DocumentInWorking.protocollo.segnatura))
                {
                    List<TypeOperation> typeOperation = new List<TypeOperation>();
                    if (DocumentInWorking.oggetto.daAggiornare)
                    {
                        typeOperation.Add(TypeOperation.CHANGE_OBJECT);
                    }

                    if (daAggiornareTipoAtto)
                    {
                        typeOperation.Add(TypeOperation.CHANGE_TYPE_DOC);
                    }

                    switch (DocumentInWorking.tipoProto)
                    {
                        case "P":
                            if ((DocumentInWorking.protocollo as ProtocolloUscita).daAggiornareMittente)
                                typeOperation.Add(TypeOperation.CHANGE_SENDER);
                            break;
                        case "A":
                            if ((DocumentInWorking.protocollo as ProtocolloEntrata).daAggiornareMittente)
                                typeOperation.Add(TypeOperation.CHANGE_SENDER);
                            break;
                        case "I":
                            if ((DocumentInWorking.protocollo as ProtocolloInterno).daAggiornareMittente)
                                typeOperation.Add(TypeOperation.CHANGE_SENDER);
                            break;
                    }

                    typeOperation.Add(TypeOperation.RECORD_PREDISPOSED);

                    if (typeOperation != null && typeOperation.Count > 0)
                    {
                        NotificationManager.ModifyNotificationDelegate modifyNotification = new NotificationManager.ModifyNotificationDelegate(NotificationManager.ModifyNotification);
                        modifyNotification.BeginInvoke(UserManager.GetInfoUser(), typeOperation.ToArray(), newDoc.systemId, NotificationManager.ListDomainObject.DOCUMENT, null, null);
                    }
                }
                #endregion
            }

            // inserimento in tabella per il mezzo di spedizione (se presente)
            if (risultatoProtocollazione == DocsPaWR.ResultProtocollazione.OK && newDoc.tipoProto.Equals("A") && this.MeansSendingRequired)
            {
                if (newDoc.mezzoSpedizione != null && !newDoc.mezzoSpedizione.Equals("0"))
                {
                    InfoUtente info = this.InfoUser;
                    if (!DocumentManager.inserisciMetodoSpedizione(info, newDoc.mezzoSpedizione.ToString(), newDoc.systemId))
                    {
                        //string theAlert = "alert('Attenzione! mancato collegamento tra il documento e il mezzo di spedizione');";

                        //string msg = "Attenzione, mancato collegamento tra il documento e il mezzo di spedizione.";
                        string msgDesc = "WarningDocumentRequestLink";

                        ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + msgDesc.Replace("'", @"\'") + "', 'warning', '');} else {parent.ajaxDialogModal('" + msgDesc.Replace("'", @"\'") + "', 'warning', '');}", true);
                        //ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "no_prole", "alert('" + theAlert + "');", true);
                    }
                }
            }
            //else
            //{
            //    newDoc.descMezzoSpedizione = "Errore";
            //}
            // fine inserimento in tabella per il mezzo di spedizione

            //DIAGRAMMI DI STATO
            if (this.EnableStateDiagram && this.CustomDocuments && this.Template != null)
            {
                if (this.DocumentDdlStateDiagram.SelectedItem != null)
                {
                    if (!string.IsNullOrEmpty(this.DocumentDdlStateDiagram.SelectedItem.Value))
                    {
                        bool statoFinale = false;
                        Session.Add("statoSelezionato", this.DocumentDdlStateDiagram.SelectedItem.Value);

                        //Controllo se lo stato selezionato è finale
                        if (controllaStatoFinale())
                        {
                            /* APPLET_G */
                            if (CheckInOut.CheckInOutServices.IsCheckedOutDocument(newDoc.systemId, newDoc.docNumber, this.InfoUser, true, DocumentManager.getSelectedRecord())
                                || CheckInOutApplet.CheckInOutServices.IsCheckedOutDocument(newDoc.systemId, newDoc.docNumber, this.InfoUser, true))
                            {
                                string msgDesc = "WarningDocumentFinaleStatBLocked";
                                ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + msgDesc.Replace("'", "\\'") + "', 'warning');} else {parent.ajaxDialogModal('" + msgDesc.Replace("'", "\\'") + "', 'warning');}", true);
                                return false;
                            }
                            statoFinale = true;
                        }
                        //Controllo se lo stato selezionato è uno stato automatico
                        if (DiagrammiManager.isStatoAuto(this.DocumentDdlStateDiagram.SelectedItem.Value, Convert.ToString(this.StateDiagram.SYSTEM_ID)))
                        {
                            string msgConfirm = "WarningDocumentConfirmAutomaticState";
                            ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxConfirmModal", "if (parent.fra_main) {parent.fra_main.ajaxConfirmModal('" + msgConfirm.Replace("'", @"\'") + "', 'HiddenAutomaticState', '');} else {parent.ajaxConfirmModal('" + msgConfirm.Replace("'", @"\'") + "', 'HiddenAutomaticState', '');}", true);
                            this.UpConfirmStateDiagram.Update();
                            return false;
                        }

                        if (statoFinale)
                        {
                            statoFinale = false;
                            string msgConfirm = "WarningDocumentConfirmFinalState";
                            ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxConfirmModal", "if (parent.fra_main) {parent.fra_main.ajaxConfirmModal('" + msgConfirm.Replace("'", @"\'") + "', 'HiddenFinalState', '');} else {parent.ajaxConfirmModal('" + msgConfirm.Replace("'", @"\'") + "', 'HiddenFinalState', '');}", true);
                            this.UpConfirmStateDiagram.Update();
                            return false;
                        }
                        else
                        {
                            DiagrammiManager.salvaModificaStato(newDoc.docNumber, this.DocumentDdlStateDiagram.SelectedItem.Value, this.StateDiagram, this.InfoUser.userId, this.InfoUser, this.DocumentStateDiagramDataValue.Text, this.Page);

                            // Aggiornamento stato di consolidamento del documento successivamente al passaggio ad uno stato successivo
                            newDoc.ConsolidationState = DiagrammiManager.GetDocumentConsolidationState(newDoc.systemId);
                            if (newDoc.ConsolidationState != null && !newDoc.ConsolidationState.State.Equals(DocumentConsolidationStateEnum.None))
                                this.IsCosolidato = true;
                            Stato state = (from s in StateDiagram.STATI where s.SYSTEM_ID.ToString() == this.DocumentDdlStateDiagram.SelectedValue select s).FirstOrDefault();
                            if (state.CONVERSIONE_PDF)
                                this.IsCosolidato = true;   //FACCIO IL REDIRECT SULLA PAGINA PER AGGIORNARE NEL CASO DI CONVERSIONE PDF
                            string idTemplate = this.Template.SYSTEM_ID.ToString();

                            InfoDocumento infoDoc = new InfoDocumento();
                            ArrayList modelli = new ArrayList(DiagrammiManager.isStatoTrasmAuto(this.InfoUser.idAmministrazione, this.DocumentDdlStateDiagram.SelectedItem.Value, this.Template.SYSTEM_ID.ToString()));
                            for (int i = 0; i < modelli.Count; i++)
                            {
                                DocsPaWR.ModelloTrasmissione mod = (DocsPaWR.ModelloTrasmissione)modelli[i];
                                if (mod.SINGLE == "1")
                                {
                                    infoDoc = DocumentManager.getInfoDocumento(newDoc);
                                    TrasmManager.effettuaTrasmissioneDocDaModello(mod, this.DocumentDdlStateDiagram.SelectedItem.Value, infoDoc, this);
                                }
                                else
                                {
                                    for (int k = 0; k < mod.MITTENTE.Length; k++)
                                    {
                                        if (mod.MITTENTE[k].ID_CORR_GLOBALI.ToString() == this.Role.systemId)
                                        {
                                            infoDoc = DocumentManager.getInfoDocumento(newDoc);
                                            TrasmManager.effettuaTrasmissioneDocDaModello(mod, this.DocumentDdlStateDiagram.SelectedItem.Value, infoDoc, this);
                                            break;
                                        }
                                    }
                                }
                            }

                        }
                    }
                }

            }
            //FINE DIAGRAMMI DI STATO 

            if (this.PnlScadenza.Visible &&
                       !string.IsNullOrEmpty(newDoc.dataScadenza) &&
                       newDoc.tipologiaAtto != null &&
                       !string.IsNullOrEmpty(newDoc.tipologiaAtto.systemId))
            {

                DiagrammiManager.salvaDataScadenzaDoc(newDoc.docNumber, newDoc.dataScadenza, newDoc.tipologiaAtto.systemId);
            }

            //alert per confermare l'avvenuta operazione
            //se questo parametro nel web.config della wa non è presente o è a "0" allora niente alert!

            string alert_conferma_creazione = System.Configuration.ConfigurationManager.AppSettings[WebConfigKeys.VISUALIZZA_ALERT_PROTOCOLLO_CREATO.ToString()];
            if ((alert_conferma_creazione != null) && (alert_conferma_creazione.Equals("1")))
            {
                if (newDoc.protocollo != null && newDoc.protocollo.numero != null)
                {
                    if (risultatoProtocollazione == DocsPaWR.ResultProtocollazione.OK)
                    {
                        result = result + " num. di protocollo: [ " + newDoc.protocollo.numero + " ]";

                        string msgDesc = "ErrorCustom";
                        ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + utils.FormatJs(msgDesc) + "', 'warning', '', '" + utils.FormatJs(result) + "');} else {parent.ajaxDialogModal('" + utils.FormatJs(msgDesc) + "', 'warning', '', '" + utils.FormatJs(result) + "');}; ", true);
                    }
                }
            }

            if (!string.IsNullOrEmpty(resFunz))
            {
                string msgDesc = "ErrorCustom";
                ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + utils.FormatJs(msgDesc) + "', 'warning', '', '" + utils.FormatJs(resFunz) + "');} else {parent.ajaxDialogModal('" + utils.FormatJs(msgDesc) + "', 'warning', '', '" + utils.FormatJs(resFunz) + "');}; ", true);
            }

            if (risultatoProtocollazione == DocsPaWR.ResultProtocollazione.OK)
            {
                UIManager.DocumentManager.setSelectedRecord(newDoc);
                this.DocumentInWorking = newDoc;
                if (this.DocumentInWorking.tipoProto.ToUpper() == "A") this.DocumentBtnForward.Enabled = true;
                FileManager.getInstance(Session.SessionID).setFile(newDoc.documenti[0]);

                if (predisposto && ((System.Web.UI.HtmlControls.HtmlGenericControl)this.ViewDocument.FindControl("divFrame")) != null)
                {
                    this.ViewDocument.ShowDocumentAcquired(((System.Web.UI.HtmlControls.HtmlGenericControl)this.ViewDocument.FindControl("divFrame")).Visible);
                    ((UpdatePanel)this.ViewDocument.FindControl("UpBottomButtons")).Update();
                    ((UpdatePanel)this.ViewDocument.FindControl("UpPnlContentDxSx")).Update();
                    ((UpdatePanel)this.ViewDocument.FindControl("UpPnlContentDxDx")).Update();
                }

                this.UpdateDataCreationDocument();

                this.UpPnlResponseProtocol.Update();
                this.UpPnlResponse.Update();
                this.UpDocumentButtons.Update();
                this.UpTypeProtocol.Update();
                this.UpContainerDocumentTab.Update();
                this.UpPnlDataDocument.Update();
                this.HeaderDocument.RefreshDataDocument();
                this.DocumentTabs.RefreshLayoutTab();
                if (newDoc.documenti[0].fileSize.Equals("0"))
                {
                    this.DocumentButtons.RefreshButtons(NttDataWA.UserControls.DocumentButtons.TypeRefresh.D_ALL);
                    this.DocumentButtons.RefreshButtons(NttDataWA.UserControls.DocumentButtons.TypeRefresh.E_UPLOADFILE);
                }
                this.UpContainerDocumentTab.Update();
                this.UpPnlRegistry.Update();

                if (this.DocumentInWorking.tipoProto.ToUpper() == "P")
                {
                    this.EditListRecipients = (DocumentInWorking.protocollo as ProtocolloUscita).destinatari.ToList();
                    this.EditListRecipientsCC = (DocumentInWorking.protocollo as ProtocolloUscita).destinatariConoscenza.ToList();
                    this.DocumentImgReportSpedizioni.Visible = true;
                }
                if (this.DocumentInWorking.tipoProto.ToUpper() == "I")
                {
                    this.EditListRecipients = (DocumentInWorking.protocollo as ProtocolloInterno).destinatari.ToList();
                    this.EditListRecipientsCC = (DocumentInWorking.protocollo as ProtocolloInterno).destinatariConoscenza.ToList();
                }
            }

            //Response.Write("<script language='javascript'>top.principale.iFrame_sx.document.location='tabGestioneDoc.aspx?tab=protocollo'; </script>");				
            //documentoProtocollato = true;
            //Session.Add("isDocProtocollato", true);
            //if (Session["multiCorr"] != null)
            //    Session.Remove("multiCorr");

            //DocsPaWR.InfoDocumento infoDocumento = DocumentManager.getInfoDocumento(schedaDocumento);
            //DocsPaWR.Fascicolo[] listaFascicoli = DocumentManager.GetFascicoliDaDoc(this, infoDocumento.idProfile);
            //if (listaFascicoli != null && listaFascicoli.Length > 0)
            //    FascicoliManager.SetDoFascRapida(this, listaFascicoli[listaFascicoli.Length - 1]);

            //}
            //catch (Exception ex)
            //{

            //    ErrorManager.OpenErrorPage(this, ex, "protocollazione");
            //}

            return true;
        }

        private bool controllaStatoFinale()
        {
            if (this.StateDiagram != null)
            {
                for (int i = 0; i < this.StateDiagram.STATI.Length; i++)
                {
                    DocsPaWR.Stato st = (DocsPaWR.Stato)this.StateDiagram.STATI[i];
                    if (st.SYSTEM_ID.ToString() == this.DocumentDdlStateDiagram.SelectedValue && st.STATO_FINALE)
                        return true;
                }
            }
            return false;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        private bool CheckDestinatari()
        {
            bool result = true;

            // Controlla destinatari
            foreach (DocsPaWR.Corrispondente destinatario in this.ListRecipients)
            {
                if (destinatario.GetType() == typeof(DocsPaWR.UnitaOrganizzativa))
                {
                    if (!AddressBookManager.UOHasReferenceRole(destinatario.systemId))
                    {
                        result = false;
                        break;
                    }
                }
            }

            // Controlla destinatari CC
            if (result)
            {
                if (this.ListBoxRecipientCC != null)
                {
                    foreach (DocsPaWR.Corrispondente destinatario in this.ListRecipientsCC)
                    {
                        if (destinatario.GetType() == typeof(DocsPaWR.UnitaOrganizzativa))
                        {
                            if (!AddressBookManager.UOHasReferenceRole(destinatario.systemId))
                            {
                                result = false;
                                break;
                            }
                        }
                    }
                }
            }
            return result;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="action"></param>
        /// <returns></returns>
        private string CheckFields(string action)
        {
            string msg = string.Empty;

            string today = DateTime.Now.ToString("dd/MM/yyyy");

            // action:  S = salva   -  P = protocolla

            //controllo la data solo se sto protocollando
            if (action.Equals("P"))
            {

                //tipo atto se obligatorio
                string idAmm = this.InfoUser.idAmministrazione;
                if (this.TypeDocRequired)
                {
                    if (this.DocumentDdlTypeDocument.Visible && string.IsNullOrEmpty(this.DocumentDdlTypeDocument.SelectedValue))
                    {
                        //msg = "Inserire un valore per il campo Tipologia documento.";
                        msg = "WarningDocumentInsertTipDoc";
                    }
                }

                //Controllo su ora pervenuto
                if (this.TxtTimeOfArrival.Text.Length > 0)
                {
                    if (!Utils.utils.isTime(this.TxtTimeOfArrival.Text))
                    {
                        //msg = "Orario Pervenuto non valido";
                        msg = "WarningDocumentTimeNotValid";
                        return msg;
                    }
                }

                //controllo sul range di date
                if (msg == string.Empty) // se c'è già un errore è inutile controllare anche le date
                {
                    msg = this.CheckDate();
                    if (!string.IsNullOrEmpty(msg))
                        return msg;
                }

                //controllo sulla data di arrivo
                if (this.TxtArrivalDate.Text.Length > 0)
                {
                    if (!Utils.utils.isDate(this.TxtArrivalDate.Text))
                    {
                        //msg = "Errore nel formato della data di arrivo. \\nIl formato richiesto è gg/mm/aaaa";
                        msg = "WarningDocumentDataFormat";
                        return msg;
                    }

                    if (!this.TxtArrivalDate.Text.Equals(today))
                    {
                        if (Utils.utils.getMaxDate(this.TxtArrivalDate.Text, today).Equals(this.TxtArrivalDate.Text))
                        {
                            //msg = "La data di arrivo deve essere minore della data di segnatura";
                            msg = "WarningDocumentDataMinNotValid";
                            return msg;
                        }
                    }
                }
            }

            //if (string.IsNullOrEmpty(this.TxtObject.Text))
            //{
            //    if (this.TxtObject.Text.Trim().Length == 0)
            //    {
            //        //msg = "Inserire il valore: oggetto";
            //        msg = "WarningDocumentObjectNotFound";
            //        return msg;
            //    }
            //}

            //controllo sull'inserimento dell'oggetto

            if (string.IsNullOrEmpty(this.TxtObject.Text.Trim()))
            {

                //msg = "Inserire un valore per il campo oggetto.";
                msg = "WarningDocumentObjectNotFound";

                //this.ctrl_oggetto.oggetto_SetControlFocus();
                return msg;
            }

            if (this.RblTypeProtocol.Visible)
            {
                switch (this.RblTypeProtocol.SelectedValue)
                {
                    case "A":
                        //controllo sull'inserimento del mittente
                        if ((string.IsNullOrEmpty(TxtCodeSender.Text) || string.IsNullOrEmpty(this.TxtCodeSender.Text.Trim())) || (string.IsNullOrEmpty(this.TxtDescriptionSender.Text) || string.IsNullOrEmpty(this.TxtDescriptionSender.Text.Trim())))
                        {
                            if (string.IsNullOrEmpty(this.TxtDescriptionSender.Text.Trim()) || string.IsNullOrEmpty(this.TxtDescriptionSender.Text))
                            {
                                //msg = "Inserire il valore: mittente";
                                msg = "WarningDocumentInsertMitt";
                                return msg;
                            }
                        }

                        if (this.TxtDateProtocol.Text.Length > 0)
                        {
                            if (!Utils.utils.isDate(this.TxtDateProtocol.Text))
                            {
                                //msg = "Errore nel formato della data del Prot Mittente";
                                msg = "WarningDocumentDataFormatMitt";
                                return msg;
                            }
                        }

                        if (!string.IsNullOrEmpty(this.TxtDateProtocol.Text))
                        {
                            if ((Convert.ToDateTime(this.TxtDateProtocol.Text)) > Convert.ToDateTime(today))
                            {
                                //msg = "La data del protocollo mittente deve essere minore della data protocollo";
                                msg = "WarningDocumentDataNotValidProt";
                                return msg;
                            }
                        }

                        //controllo sulla data di arrivo
                        if (this.TxtArrivalDate.Text.Length > 0)
                        {
                            if (!Utils.utils.isDate(TxtArrivalDate.Text))
                            {
                                //msg = "Errore nel formato della data di arrivo. \\nIl formato richiesto è gg/mm/aaaa";
                                msg = "WarningDocumentDataFormat";

                                return msg;
                            }
                        }

                        if (this.TxtArrivalDate.Text.Length > 0 && this.TxtDateProtocol.Text.Length > 0)
                        {
                            if (!Utils.utils.verificaIntervalloDateSenzaOra(this.TxtArrivalDate.Text, this.TxtDateProtocol.Text))
                            {
                                //msg = "La data di arrivo deve essere maggiore della data di protocollo mittente";
                                msg = "WarningDocumentDataMagNotValid";
                                return msg;
                            }
                        }

                        //Controllo su ora pervenuto
                        if (this.TxtTimeOfArrival.Text.Length > 0)
                        {
                            if (!Utils.utils.isTime(this.TxtTimeOfArrival.Text))
                            {
                                //msg = "Orario Pervenuto non valido";
                                msg = "WarningDocumentTimeNotValid";
                                return msg;
                            }
                            if (this.TxtArrivalDate.Text.Length == 0)
                            {
                                //msg = "Inserire anche la data arrivo";
                                msg = "WarningDocumentInsertDataArr";
                                return msg;
                            }
                        }

                        break;
                    case "P":
                        //protocollo in uscita - controllo sui destinatari
                        if (this.ListBoxRecipient.Items.Count <= 0)
                        {
                            //msg = "Inserire il valore: destinatario";
                            msg = "WarningDocumentInsertDest";
                            return msg;
                        }

                        break;
                    case "I":
                        //protocollo interno - controllo sul mittente obbligatorio
                        if (string.IsNullOrEmpty(this.TxtCodeSender.Text))
                        {
                            if (string.IsNullOrEmpty(this.TxtDescriptionSender.Text))
                            {
                                //msg = "Inserire il valore: mittente";
                                msg = "WarningDocumentInsertMitt";
                                return msg;
                            }
                        }
                        //protocollo interno - controllo sui destinatari
                        if (this.ListBoxRecipient.Items.Count <= 0)
                        {
                            //msg = "Inserire il valore: destinatario";
                            msg = "WarningDocumentInsertDest";
                            return msg;
                        }
                        break;
                }
            }

            ////controllo sull'inserimento del mittente
            //if (enableUfficioRef != null && enableUfficioRef.Equals("1"))
            //{
            //    if ((this.txt_cod_uffRef.Text.Equals("") || this.txt_cod_uffRef.Text == null) || (this.txt_desc_uffRef.Text.Equals("") || this.txt_desc_uffRef.Text == null))
            //    {

            //        msg = "Inserire il valore: ufficio referente";
            //        string s = "<SCRIPT language='javascript'>document.getElementById('" + txt_cod_uffRef.ID + "').focus() </SCRIPT>";
            //        RegisterStartupScript("focus", s);
            //        return msg;
            //    }
            //    else
            //    {
            //        if (!CheckUoReferente(schedaDocumento.tipoProto))
            //        {
            //            if (schedaDocumento.tipoProto.Equals("A"))
            //            {
            //                this.txt_cod_uffRef.ReadOnly = false;
            //                //							this.txt_desc_uffRef.ReadOnly = false;
            //                this.txt_cod_uffRef.BackColor = Color.White;
            //                this.txt_desc_uffRef.BackColor = Color.White;
            //                this.btn_Rubrica_ref.Enabled = true;
            //                this.btn_Rubrica_ref.Attributes.Add("onclick", "ApriRubrica('proto','U');");
            //            }

            //            msg = "L\\'Ufficio Referente non possiede ruoli di riferimento.";
            //            if (action.Equals("S"))
            //            {
            //                msg = msg + "\\nIl salvataggio dei dati non verrà effettuato";
            //            }
            //            string s = "<SCRIPT language='javascript'>document.getElementById('" + txt_cod_uffRef.ID + "').focus() </SCRIPT>";
            //            RegisterStartupScript("focus", s);

            //            return msg;
            //        }
            //    }
            //}

            if (this.EnableStateDiagram && this.PnlScadenza.Visible && !string.IsNullOrEmpty(this.DocumentStateDiagramDataValue.Text))
            {

                DateTime dataInserita = Convert.ToDateTime(this.DocumentStateDiagramDataValue.Text);
                DateTime dataOdierna = System.DateTime.Now;
                if ((dataInserita < dataOdierna) && !this.DocumentStateDiagramDataValue.ReadOnly)
                {
                    msg = "WarningDocumentDateState";
                    return msg;
                }
            }

            return msg;
        }

        private bool VerificaRispostaDocumento(ref string msg)
        {
            //bool rispostaOK = true;
            //bool registroOK = true;
            //int registroDocCorrente = 0;
            //string msgR = string.Empty;
            //if (schedaDocumento != null && schedaDocumento.registro != null && !string.IsNullOrEmpty(schedaDocumento.registro.systemId))
            //{
            //    if (schedaDocumento.rispostaDocumento != null && !string.IsNullOrEmpty(schedaDocumento.rispostaDocumento.codRegistro))
            //    {
            //        if (!schedaDocumento.registro.codRegistro.Equals(schedaDocumento.rispostaDocumento.codRegistro) && !UserManager.isFiltroAooEnabled(this))
            //        {
            //            registroOK = false;
            //            msgR = "Attenzione si stanno collegando documenti su registri diversi.";
            //        }
            //    }
            //}
            //if (registroOK)
            //{
            //    if (schedaDocumento != null && !string.IsNullOrEmpty(schedaDocumento.docNumber)) //doc creato
            //    {
            //        //controllo sui documenti precedenti     
            //        string tipoProtoDocCorrente = string.Empty;
            //        switch (this.rbl_InOut_P.SelectedItem.Value)
            //        {
            //            case "Out":
            //                tipoProtoDocCorrente = "P";
            //                break;
            //            case "In":
            //                tipoProtoDocCorrente = "A";
            //                break;
            //            default:
            //                tipoProtoDocCorrente = "";
            //                break;

            //        }
            //        if (!string.IsNullOrEmpty(tipoProtoDocCorrente))
            //        {
            //            String[] tipoProtoPrec = DocumentManager.GetTipoProtoRisposta(schedaDocumento.systemId);
            //            for (int i = 0; i < tipoProtoPrec.Length; i++)
            //            {
            //                if (!tipoProtoPrec[i].Equals(tipoProtoDocCorrente))
            //                {
            //                    rispostaOK = true;
            //                }
            //                else
            //                {//dovrebbe essere false, ma il collegamento di doc dello stesso tipo non viene gestito

            //                    rispostaOK = true;
            //                    break;
            //                }
            //            }
            //        }
            //        //fine

            //        //controllo sui doc successivi
            //        if (rispostaOK)
            //        {
            //            if (schedaDocumento.rispostaDocumento != null && !string.IsNullOrEmpty(schedaDocumento.rispostaDocumento.docNumber)) //esiste una risposta
            //            {
            //                DocsPAWA.DocsPaWR.InfoDocumento risposta = schedaDocumento.rispostaDocumento;
            //                SchedaDocumento schedaDocRisposta = DocumentManager.getDettaglioDocumento(this, risposta.idProfile, risposta.docNumber);
            //                if (risposta.tipoProto != "G")
            //                {
            //                    if (!string.IsNullOrEmpty(risposta.tipoProto))
            //                    {
            //                        if (!risposta.tipoProto.Equals(tipoProtoDocCorrente))
            //                        {
            //                            rispostaOK = true;
            //                        }
            //                        else
            //                        {//dovrebbe essere false, ma il collegamento di doc dello stesso tipo non viene gestito

            //                            rispostaOK = true;
            //                        }
            //                    }
            //                }
            //                else
            //                    rispostaOK = true;
            //            }
            //        }
            //    }

            //}
            //if (!registroOK)
            //{
            //    msg = msgR;
            //    return false;
            //}
            //if (!rispostaOK)
            //{
            //    msg = "Attenzione, si stanno collegando documenti dello stesso tipo: \\nIngresso/Ingresso Uscita/Uscita";
            //    return false;
            //}

            return true;
        }

        protected void DocumentBntRecord_Click(object sender, EventArgs e)
        {
            this._logger.Info("START");
            bool _result = true;
            try
            {
                // Se il documento è stato trasmesso per IS ed è stato inviato come privato, viene mostrato un
                // popup che informa l'utente e richiede all'utente se lasciarlo marcato privato
                if (!string.IsNullOrEmpty(this.DocumentInWorking.systemId) &&
                    this.DocumentInWorking.privato == "1" &&
                    SimplifiedInteroperabilityManager.IsDocumentReceivedPrivate(DocumentInWorking.systemId))
                {
                    string msgConfirm = "WarningDocumentPrivateInteroperability";
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxConfirmModal", "if (parent.fra_main) {parent.fra_main.ajaxConfirmModal('" + msgConfirm.Replace("'", @"\'") + "', 'HiddenISPrivate', '');} else {parent.ajaxConfirmModal('" + msgConfirm.Replace("'", @"\'") + "', 'HiddenISPrivate', '');}", true);
                    this.UpDocumentPrivate.Update();
                }
                else
                {
                    string errorMessage = string.Empty;
                    if (string.IsNullOrEmpty(this.DocumentInWorking.systemId))
                    {
                        _result = this.protocollaDoc();
                    }
                    else
                    {
                        _result = this.protocollaDoc();
                    }
                }
                this.DisabledDocumentChekUser.Attributes.Remove("class");
                this.DisabledDocumentCheckPrivate.Attributes.Remove("class");
                this.DisabledDocumentChekUser.Attributes.Add("class", "check_disabled");
                this.DisabledDocumentCheckPrivate.Attributes.Add("class", "check_disabled");

                // Alessandro Aiello 04/02/2019
                // nel caso di modifiche  (fascicolo o tipologia) resetto la segnatura così da ricalcolarla
                this.DocumentInWorking.DettaglioSegnatura = null;
            }
            catch (System.Exception ex)
            {
                this._logger.Error(ex.Message, ex);
                UIManager.AdministrationManager.DiagnosticError(ex);
                return;
            }

            if (IsCosolidato)
            {
                HttpContext.Current.Session.Remove("IsCosolidato");
                
            }

            this._logger.Info("END");
            if (_result && (!this._errorRequirePopUp ?? true ))
            {
                Response.Redirect("Document.aspx");
            }
        }

        protected Corrispondente VerifySender()
        {
            Corrispondente result = this.Sender;

            //Se NewIdCorr è diverso da null, siamo di ritorno dalla maschera K1/K2 e quindi result.descrizione
            // potrebbe essere diverso this.TxtDescriptionSender.Text in base a quello che si è scelto dalla maschera;
            if ((result == null || !this.Sender.descrizione.Equals(this.TxtDescriptionSender.Text)) && string.IsNullOrEmpty(NewIdCorr))
            {
                result = new DocsPaWR.Corrispondente();
                result.descrizione = this.TxtDescriptionSender.Text;
                result.tipoCorrispondente = "O";
                result.idAmministrazione = this.InfoUser.idAmministrazione;
            }

            return result;
        }

        protected Corrispondente VerifyEditSender(SchedaDocumento doc, out bool refresh)
        {
            refresh = false;
            Corrispondente result = this.Sender;

            if (!string.IsNullOrEmpty(doc.tipoProto))
            {
                switch (doc.tipoProto)
                {
                    case "A":

                        if (this.Sender == null || !this.Sender.descrizione.Equals(this.TxtDescriptionSender.Text))
                        {
                            result = new DocsPaWR.Corrispondente();
                            result.descrizione = this.TxtDescriptionSender.Text;
                            result.tipoCorrispondente = "O";
                            result.idAmministrazione = this.InfoUser.idAmministrazione;
                            refresh = true;
                            this.Sender = result;
                        }

                        break;
                    case "P":

                        if (this.Sender == null || !this.Sender.descrizione.Equals(this.TxtDescriptionSender.Text))
                        {
                            result = new DocsPaWR.Corrispondente();
                            result.descrizione = this.TxtDescriptionSender.Text;
                            result.tipoCorrispondente = "O";
                            result.idAmministrazione = this.InfoUser.idAmministrazione;
                            refresh = true;
                            this.Sender = result;

                        }
                        break;
                    case "I":

                        if (this.Sender == null || !this.Sender.descrizione.Equals(this.TxtDescriptionSender.Text))
                        {
                            result = new DocsPaWR.Corrispondente();
                            result.descrizione = this.TxtDescriptionSender.Text;
                            result.tipoCorrispondente = "O";
                            result.idAmministrazione = this.InfoUser.idAmministrazione;
                            refresh = true;
                            this.Sender = result;
                        }

                        break;
                }
            }

            return result;
        }

        protected void Record()
        {
            DocsPaWR.ResultProtocollazione result = DocsPaWR.ResultProtocollazione.OK;
            string resFunz = string.Empty;
            this.DocumentInWorking.oggetto = new Oggetto();
            this.DocumentInWorking.oggetto.descrizione = this.TxtObject.Text;
            this.DocumentInWorking.oggetto.daAggiornare = true;
            this.DocumentInWorking.tipoProto = this.RblTypeProtocol.SelectedValue;

            this.Sender = this.VerifySender();

            if (this.DocumentCheckPrivate.Checked)
            {
                this.DocumentInWorking.privato = "1";
            }

            if (this.DocumentChekUser.Visible && this.DocumentChekUser.Checked)
            {
                this.DocumentInWorking.personale = "1";
            }

            if (this.RblTypeProtocol.SelectedValue.Equals("A"))
            {
                this.DocumentInWorking.protocollo = new DocsPaWR.ProtocolloEntrata();
                ((ProtocolloEntrata)this.DocumentInWorking.protocollo).mittente = this.Sender;
                ((ProtocolloEntrata)this.DocumentInWorking.protocollo).daAggiornareMittente = true;
                if (this.EnableMultipleSenders)
                {
                    if (this.MultipleSenders != null)
                    {
                        ((ProtocolloEntrata)this.DocumentInWorking.protocollo).mittenti = this.MultipleSenders.ToArray<Corrispondente>();
                        ((ProtocolloEntrata)this.DocumentInWorking.protocollo).daAggiornareMittentiMultipli = true;
                    }
                }
                if (this.MeansSendingRequired)
                {
                    if (!string.IsNullOrEmpty(this.DdlMeansSending.SelectedItem.Value))
                    {
                        this.DocumentInWorking.mezzoSpedizione = this.DdlMeansSending.SelectedItem.Value;
                        this.DocumentInWorking.descMezzoSpedizione = this.DdlMeansSending.SelectedItem.Text;
                    }
                    else
                    {
                        this.DocumentInWorking.mezzoSpedizione = "0";
                        this.DocumentInWorking.descMezzoSpedizione = string.Empty;
                    }
                }
            }
            else
            {
                if (this.RblTypeProtocol.SelectedValue.Equals("P"))
                {
                    this.DocumentInWorking.protocollo = new DocsPaWR.ProtocolloUscita();
                    ((ProtocolloUscita)this.DocumentInWorking.protocollo).mittente = this.Sender;
                    ((ProtocolloUscita)this.DocumentInWorking.protocollo).daAggiornareMittente = true;
                    ((ProtocolloUscita)this.DocumentInWorking.protocollo).destinatari = this.ListRecipients.ToArray<Corrispondente>();
                    if (this.ListRecipientsCC != null && this.ListRecipientsCC.Count > 0)
                    {
                        ((ProtocolloUscita)this.DocumentInWorking.protocollo).destinatariConoscenza = this.ListRecipientsCC.ToArray<Corrispondente>();
                    }

                    this.DocumentBtnSend.Enabled = true;
                }
                else
                {
                    if (this.RblTypeProtocol.SelectedValue.Equals("I"))
                    {
                        this.DocumentInWorking.protocollo = new DocsPaWR.ProtocolloInterno();
                        ((ProtocolloInterno)this.DocumentInWorking.protocollo).mittente = this.Sender;
                        ((ProtocolloInterno)this.DocumentInWorking.protocollo).daAggiornareMittente = true;
                        ((ProtocolloInterno)this.DocumentInWorking.protocollo).destinatari = this.ListRecipients.ToArray<Corrispondente>();
                        if (this.ListRecipientsCC != null && this.ListRecipientsCC.Count > 0)
                        {
                            ((ProtocolloInterno)this.DocumentInWorking.protocollo).destinatariConoscenza = this.ListRecipientsCC.ToArray<Corrispondente>();
                        }
                    }
                }
            }
            this.DocumentInWorking.registro = UIManager.RegistryManager.GetRegistryInSession();
            //  fasc = FascicoliManager.getFascicoloById(this.Page, this.id_Fasc.Value);
            SchedaDocumento resultDoc = new SchedaDocumento();

            this.DocumentInWorking.id_rf_prot = "347392";
            this.DocumentInWorking.id_rf_invio_ricevuta = "347392";
            this.DocumentInWorking.cod_rf_prot = "RFD320";

            resultDoc = UIManager.DocumentManager.Record(this.Page, this.DocumentInWorking, this.Project, null, out result, ref resFunz);

            // inserimento in tabella per il mezzo di spedizione (se presente)
            if (result == DocsPaWR.ResultProtocollazione.OK && resultDoc.tipoProto.Equals("A") && this.MeansSendingRequired)
            {
                if (this.DocumentInWorking.mezzoSpedizione != null && !this.DocumentInWorking.mezzoSpedizione.Equals("0"))
                {
                    if (!DocumentManager.inserisciMetodoSpedizione(this.InfoUser, this.DocumentInWorking.mezzoSpedizione.ToString(), resultDoc.systemId))
                    {
                        //string msg = "Attenzione, mancato collegamento tra il documento e il mezzo di spedizione.";
                        string msgDesc = "WarningDocumentRequestLink";

                        ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + msgDesc.Replace("'", @"\'") + "', 'warning', '');} else {parent.ajaxDialogModal('" + msgDesc.Replace("'", @"\'") + "', 'warning', '');}", true);
                        //ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "no_prole", "alert('Attenzione! mancato collegamento tra il documento e il mezzo di spedizione');", true);
                    }
                }
            }



            UIManager.DocumentManager.setSelectedRecord(resultDoc);
            this.DocumentInWorking = resultDoc;

            //Per acquisitrione file

            FileManager.setSelectedFile(resultDoc.documenti[0]);

            //Crea il file o se esistente una nuova versione
            // 5. Acquisizione del file al documento

            //FileRequest versioneCorrente = (FileRequest)resultDoc.documenti[0];

            //string txtPathFile = Server.MapPath("~/images/demo/documento_principale.pdf");

            ////Acquisisco il documento
            //byte[] content = null;
            //content = File.ReadAllBytes(txtPathFile);

            //FileDocumento fileDocumento = new FileDocumento
            //{
            //    name = "documento_principale.pdf",
            //    fullName = "documento_principale.pdf",
            //    content = content,
            //    length = content.Length,
            //    bypassFileContentValidation = true
            //};


            //docsPaWS.DocumentoPutFile(versioneCorrente, fileDocumento, UserManager.getInfoUtente(this));


            //this.Document = resultDoc;

            this.UpdateDataCreationDocument();


        }

        //protected SchedaDocumento GetDocumentDataForRecord()
        //{
        //    SchedaDocumento result = new SchedaDocumento();

        //    result.oggetto = new Oggetto();
        //    result.oggetto.descrizione = this.TxtObject.Text;
        //    result.oggetto.daAggiornare = true;

        //    result.tipoProto = this.RblTypeProtocol.SelectedValue;

        //    this.Sender = this.VerifySender();

        //    if (this.DocumentCheckPrivate.Checked)
        //    {
        //        this.DocumentInWorking.privato = "1";
        //    }

        //    if (this.DocumentChekUser.Visible && this.DocumentChekUser.Checked)
        //    {
        //        this.DocumentInWorking.personale = "1";
        //    }

        //    if (this.RblTypeProtocol.SelectedValue.Equals("A"))
        //    {
        //        this.DocumentInWorking.protocollo = new DocsPaWR.ProtocolloEntrata();
        //        ((ProtocolloEntrata)this.DocumentInWorking.protocollo).mittente = this.Sender;
        //        ((ProtocolloEntrata)this.DocumentInWorking.protocollo).daAggiornareMittente = true;
        //        if (this.EnableMultipleSenders)
        //        {
        //            if (this.MultipleSenders != null)
        //            {
        //                ((ProtocolloEntrata)this.DocumentInWorking.protocollo).mittenti = this.MultipleSenders.ToArray<Corrispondente>();
        //                ((ProtocolloEntrata)this.DocumentInWorking.protocollo).daAggiornareMittentiMultipli = true;
        //            }
        //        }
        //        if (this.MeansSendingRequired)
        //        {
        //            if (!string.IsNullOrEmpty(this.DdlMeansSending.SelectedItem.Value))
        //            {
        //                this.DocumentInWorking.mezzoSpedizione = this.DdlMeansSending.SelectedItem.Value;
        //                this.DocumentInWorking.descMezzoSpedizione = this.DdlMeansSending.SelectedItem.Text;
        //            }
        //            else
        //            {
        //                this.DocumentInWorking.mezzoSpedizione = "0";
        //                this.DocumentInWorking.descMezzoSpedizione = string.Empty;
        //            }
        //        }
        //    }
        //    else
        //    {
        //        if (this.RblTypeProtocol.SelectedValue.Equals("P"))
        //        {
        //            this.DocumentInWorking.protocollo = new DocsPaWR.ProtocolloUscita();
        //            ((ProtocolloUscita)this.DocumentInWorking.protocollo).mittente = this.Sender;
        //            ((ProtocolloUscita)this.DocumentInWorking.protocollo).daAggiornareMittente = true;
        //            ((ProtocolloUscita)this.DocumentInWorking.protocollo).destinatari = this.ListRecipients.ToArray<Corrispondente>();
        //            if (this.ListRecipientsCC != null && this.ListRecipientsCC.Count > 0)
        //            {
        //                ((ProtocolloUscita)this.DocumentInWorking.protocollo).destinatariConoscenza = this.ListRecipientsCC.ToArray<Corrispondente>();
        //            }

        //            this.DocumentBtnSend.Enabled = true;
        //        }
        //        else
        //        {
        //            if (this.RblTypeProtocol.SelectedValue.Equals("I"))
        //            {
        //                this.DocumentInWorking.protocollo = new DocsPaWR.ProtocolloInterno();
        //                ((ProtocolloInterno)this.DocumentInWorking.protocollo).mittente = this.Sender;
        //                ((ProtocolloInterno)this.DocumentInWorking.protocollo).daAggiornareMittente = true;
        //                ((ProtocolloInterno)this.DocumentInWorking.protocollo).destinatari = this.ListRecipients.ToArray<Corrispondente>();
        //                if (this.ListRecipientsCC != null && this.ListRecipientsCC.Count > 0)
        //                {
        //                    ((ProtocolloInterno)this.DocumentInWorking.protocollo).destinatariConoscenza = this.ListRecipientsCC.ToArray<Corrispondente>();
        //                }
        //            }
        //        }
        //    }
        //    this.DocumentInWorking.registro = UIManager.RegistryManager.GetRegistryInSession();
        //    //  fasc = FascicoliManager.getFascicoloById(this.Page, this.id_Fasc.Value);
        //    SchedaDocumento resultDoc = new SchedaDocumento();

        //    this.DocumentInWorking.id_rf_prot = "347392";
        //    this.DocumentInWorking.id_rf_invio_ricevuta = "347392";
        //    this.DocumentInWorking.cod_rf_prot = "RFD320";

        //    //resultDoc = UIManager.DocumentManager.Record(this.Page, this.DocumentInWorking, this.Project, null, out result, ref resFunz);


        //    //// inserimento in tabella per il mezzo di spedizione (se presente)
        //    //if (result == DocsPaWR.ResultProtocollazione.OK && resultDoc.tipoProto.Equals("A") && this.MeansSendingRequired)
        //    //{
        //    //    if (this.DocumentInWorking.mezzoSpedizione != null && !this.DocumentInWorking.mezzoSpedizione.Equals("0"))
        //    //    {
        //    //        if (!DocumentManager.inserisciMetodoSpedizione(this.InfoUser, this.DocumentInWorking.mezzoSpedizione.ToString(), resultDoc.systemId))
        //    //        {
        //    //            ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "no_prole", "alert('Attenzione! mancato collegamento tra il documento e il mezzo di spedizione');", true);
        //    //        }
        //    //    }
        //    //}



        //    UIManager.DocumentManager.setSelectedRecord(resultDoc);
        //    this.DocumentInWorking = resultDoc;

        //    //Per acquisitrione file

        //    FileManager.setSelectedFile(resultDoc.documenti[0]);

        //    //Crea il file o se esistente una nuova versione
        //    // 5. Acquisizione del file al documento

        //    //FileRequest versioneCorrente = (FileRequest)resultDoc.documenti[0];

        //    //string txtPathFile = Server.MapPath("~/images/demo/documento_principale.pdf");

        //    ////Acquisisco il documento
        //    //byte[] content = null;
        //    //content = File.ReadAllBytes(txtPathFile);

        //    //FileDocumento fileDocumento = new FileDocumento
        //    //{
        //    //    name = "documento_principale.pdf",
        //    //    fullName = "documento_principale.pdf",
        //    //    content = content,
        //    //    length = content.Length,
        //    //    bypassFileContentValidation = true
        //    //};


        //    //docsPaWS.DocumentoPutFile(versioneCorrente, fileDocumento, UserManager.getInfoUtente(this));


        //    //this.Document = resultDoc;

        //    this.UpdateDataCreationDocument();


        //}

        protected void UpdateDataCreationDocument()
        {
            this.LblCreationDate.Text = this.DocumentInWorking.dataCreazione;
            this.DocumentInWorking.oggetto.daAggiornare = false;
            this.DocumentBtnPrint.Enabled = true;
            this.DocumentBtnSave.Enabled = true;
            this.LblCreationDate.Visible = true;
            this.DocumentLblCreationDate.Visible = true;
            this.DocumentBtnAdL.Enabled = true;
            this.DocumentBtnAdLRole.Enabled = true;
            this.PnlDataDocument.Visible = true;
            this.DocumentBtnUndo.Enabled = true;
            this.DocumentCheckPrivate.Enabled = false;

            this.Project = null;
            //Laura 19 Marzo
            ProjectManager.setProjectInSessionForRicFasc(null);
            ProjectManager.setFascicoloSelezionatoFascRapida(this, null);
            this.TxtCodeProject.Text = string.Empty;
            this.TxtDescriptionProject.Text = string.Empty;
            if (!string.IsNullOrEmpty(Utils.InitConfigurationKeys.GetValue("0", DBKeys.FE_FASC_PRIMARIA.ToString())) && Utils.InitConfigurationKeys.GetValue("0", DBKeys.FE_FASC_PRIMARIA.ToString()).Equals("1"))
            {
                this.getLabelFascPrim();
                this.UpPnlPrimaryClassification.Update();
            }

            this.UpPnlProject.Update();

            if (this.DocumentInWorking.protocollo != null)
            {
                if (!string.IsNullOrEmpty(this.DocumentInWorking.protocollo.dataProtocollazione))
                {

                    if (!string.IsNullOrEmpty(this.DocumentInWorking.oraCreazione))
                        this.LblRecordDate.Text = Utils.dateformat.dateLength(this.DocumentInWorking.protocollo.dataProtocollazione) + " " + Utils.dateformat.TimeLength(this.DocumentInWorking.oraCreazione);
                    else
                        this.LblRecordDate.Text = Utils.dateformat.dateLength(this.DocumentInWorking.protocollo.dataProtocollazione);
                }

                //protocollo emergenza
                if (this.DocumentInWorking.datiEmergenza != null && this.DocumentInWorking.datiEmergenza.dataProtocollazioneEmergenza != null && !this.DocumentInWorking.datiEmergenza.dataProtocollazioneEmergenza.Equals(""))
                {
                    this.LblEmergencyDate.Text = Utils.dateformat.dateLength(this.DocumentInWorking.datiEmergenza.dataProtocollazioneEmergenza) + " " + Utils.dateformat.TimeLength(this.DocumentInWorking.datiEmergenza.dataProtocollazioneEmergenza);
                    this.LblEmergencyNum.Text = this.DocumentInWorking.datiEmergenza.protocolloEmergenza;
                    this.plcEmergency.Visible = true;
                }

                this.SetSenderValueAfterRecord(this.DocumentInWorking);
                this.SetMultipleSenderValueAfterRecord(this.DocumentInWorking);
                this.SetRecipientsValueAfterRecord(this.DocumentInWorking);
                this.SetRecipientsCCValueAfterRecord(this.DocumentInWorking);

                this.RblTypeProtocol.Enabled = false;

                if (!string.IsNullOrEmpty(this.DocumentInWorking.protocollo.segnatura))
                {
                    this.DocumentLblRecordDate.Visible = true;
                    this.LblRecordDate.Visible = true;
                    this.DocumentBntRecord.Enabled = false;
                    if (UIManager.UserManager.IsAuthorizedFunctions("DO_PROT_PROTOCOLLA"))
                    {
                        this.DocumentBtnRepeat.Enabled = true;
                    }
                    this.DocumentBtnConsolid.Enabled = true;

                    if (this.DocumentInWorking.tipoProto.Equals("P"))
                    {
                        this.DocumentBtnSend.Enabled = true;
                        this.DocumentImgPrintEnvelopesRecipients.Enabled = true;
                        this.UpPnlRecipients.Update();
                    }
                    if (this.DocumentInWorking.tipoProto.Equals("I"))
                    {
                        this.DocumentBtnTransmit.Enabled = true;
                        this.DocumentImgPrintEnvelopesRecipients.Enabled = true;
                        this.UpPnlRecipients.Update();
                    }
                    if (this.DocumentInWorking.tipoProto.Equals("A"))
                    {
                        this.DocumentImgViewDocumentExists.Enabled = false;
                        this.UpPnlSenderProtocol.Update();
                    }
                }
                if (this.DocumentInWorking.registro != null)
                {
                    this.DdlRegistries.SelectedValue = this.DocumentInWorking.registro.systemId;
                    this.DdlRegistries.Enabled = false;
                }

                this.ControlConsolidatioDocument();
                this.HeaderDocument.RefreshLayoutHeader();
            }
            else
            {
                //Caso documento grigio
                this.DocumentBtnPrepared.Enabled = true;
                this.DocumentBtnPrint.Enabled = true;

                string result = DocumentManager.verificaDirittiCestinaDocumento(this, this.DocumentInWorking);
                bool visibility = (result == "Del");
                this.DocumentBtnRemove.Enabled = visibility;
                if (!visibility)
                {
                    this.DocumentBtnRemove.CssClass += " clickable";
                    this.DocumentBtnRemove.ToolTip = result;
                }

                if (UIManager.UserManager.IsAuthorizedFunctions("DO_NUOVODOC"))
                {
                    this.DocumentBtnRepeat.Enabled = true;
                }
                this.DocumentBtnAdL.Enabled = true;
                this.DocumentBtnAdLRole.Enabled = true;
                this.DocumentBtnSave.Visible = true;
                this.DocumentBtnCreateDocument.Visible = false;
                this.DocumentChekUser.Enabled = false;
                this.DocumentBtnConsolid.Enabled = true;
                this.DocumentBtnForward.Enabled = true;

                string language = UIManager.UserManager.GetUserLanguage();
                this.DocumentImgAnswerWithProtocol.AlternateText = Utils.Languages.GetLabelFromCode("DocumentImgAnswerWithDocument", language);
                this.DocumentImgAnswerWithProtocol.ToolTip = Utils.Languages.GetLabelFromCode("DocumentImgAnswerWithDocument", language);
                this.DocumentImgAnswerWithDocument.AlternateText = Utils.Languages.GetLabelFromCode("DocumentImgAnswerWithProtocol", language);
                this.DocumentImgAnswerWithDocument.ToolTip = Utils.Languages.GetLabelFromCode("DocumentImgAnswerWithProtocol", language);
            }

            if (this.DocumentInWorking.template != null)
            {
                this.Template = this.DocumentInWorking.template;
                this.DocumentDdlTypeDocument.Enabled = false;
                if (this.EnableStateDiagram && this.StateDiagram != null)
                {
                    if (!string.IsNullOrEmpty(DocumentInWorking.accessRights) && Convert.ToInt32(DocumentInWorking.accessRights) > Convert.ToInt32(HMdiritti.HMdiritti_Read))
                        this.LoadDiagramAndState("1");
                    else
                        this.LoadDiagramAndState();
                    this.DocumentDdlStateDiagram.SelectedIndex = -1;
                }
                this.PopulateProfiledDocument();
                this.UpPnlTypeDocument.Update();
            }

            if (this.DocumentInWorking.protocollo != null && !string.IsNullOrEmpty(this.DocumentInWorking.protocollo.segnatura) && !UIManager.UserManager.IsAuthorizedFunctions("DO_PROT_ANNULLA"))
            {
                this.DocumentBtnUndo.Visible = false;
            }

            this.DocumentImgAnswerWithProtocol.Enabled = true;
            this.DocumentImgAnswerWithDocument.Enabled = true;

            this.UpPnlResponseProtocol.Update();
            this.UpPnlResponse.Update();
            this.UpDocumentPrivate.Update();
        }

        private void PopulateDataDocument()
        {
            if (!string.IsNullOrEmpty(this.DocumentInWorking.dataCreazione))
            {
                this.LblCreationDate.Text = this.DocumentInWorking.dataCreazione;
                this.DocumentLblCreationDate.Visible = true;
                this.LblCreationDate.Visible = true;
                this.PnlDataDocument.Visible = true;
            }

            if (this.DocumentInWorking.protocollo != null)
            {
                if (!string.IsNullOrEmpty(this.DocumentInWorking.protocollo.segnatura))
                {
                    this.DocumentLblRecordDate.Visible = true;
                    this.LblRecordDate.Visible = true;
                    if (!string.IsNullOrEmpty(this.DocumentInWorking.protocollo.dataProtocollazione))
                    {

                        if (!string.IsNullOrEmpty(this.DocumentInWorking.oraCreazione))
                            this.LblRecordDate.Text = Utils.dateformat.dateLength(this.DocumentInWorking.protocollo.dataProtocollazione) + " " + Utils.dateformat.TimeLength(this.DocumentInWorking.oraCreazione);
                        else
                            this.LblRecordDate.Text = Utils.dateformat.dateLength(this.DocumentInWorking.protocollo.dataProtocollazione);
                    }
                    if (this.DocumentInWorking.registro != null)
                    {
                        this.DdlRegistries.SelectedValue = this.DocumentInWorking.registro.systemId;
                        this.DdlRegistries.Enabled = false;
                    }
                    this.RblTypeProtocol.Enabled = false;
                }
                else
                {
                    if (!DocumentInWorking.predisponiProtocollazione)
                    {
                        this.RblTypeProtocol.Enabled = false;
                    }
                }

                if (this.DocumentInWorking.registro != null)
                {
                    if (this.DdlRegistries.Items.Count > 0 && this.DdlRegistries.Items.FindByValue(this.DocumentInWorking.registro.systemId) != null)
                    {
                        this.DdlRegistries.SelectedValue = this.DocumentInWorking.registro.systemId;
                        UIManager.RegistryManager.SetRegistryInSession(this.DocumentInWorking.registro);
                        this.Registry = this.DocumentInWorking.registro;
                    }
                }

                //protocollo emergenza
                if (this.DocumentInWorking.datiEmergenza != null && this.DocumentInWorking.datiEmergenza.dataProtocollazioneEmergenza != null && !this.DocumentInWorking.datiEmergenza.dataProtocollazioneEmergenza.Equals(""))
                {
                    this.LblEmergencyDate.Text = Utils.dateformat.dateLength(this.DocumentInWorking.datiEmergenza.dataProtocollazioneEmergenza) + " " + Utils.dateformat.TimeLength(this.DocumentInWorking.datiEmergenza.dataProtocollazioneEmergenza);
                    this.LblEmergencyNum.Text = this.DocumentInWorking.datiEmergenza.protocolloEmergenza;
                    this.plcEmergency.Visible = true;
                }
            }
            else
            {
                //Caso documento grigio
                if (this.DocumentInWorking != null && !string.IsNullOrEmpty(this.DocumentInWorking.systemId))
                {
                    this.DocumentBtnPrepared.Enabled = true;
                    this.DocumentBtnPrint.Enabled = true;

                    string result = DocumentManager.verificaDirittiCestinaDocumento(this, this.DocumentInWorking);
                    bool visibility = (result == "Del");
                    this.DocumentBtnRemove.Enabled = visibility;
                    if (!visibility)
                    {
                        this.DocumentBtnRemove.CssClass += " clickable";
                        this.DocumentBtnRemove.ToolTip = result;
                    }

                    this.DocumentBtnRepeat.Enabled = true;
                    this.DocumentBtnAdL.Enabled = true;
                    this.DocumentBtnAdLRole.Enabled = true;
                    //nel caso di allegato non utente, nascondo il pulsante salva
                    if (this.Page.Request["typeAttachment"] != null &&
                        Convert.ToInt32(this.Page.Request["typeAttachment"]) != 1 &&
                        this.DocumentInWorking.documentoPrincipale != null)
                    {
                        this.DocumentBtnSave.Visible = false;
                    }
                    //nel caso di allegato utente, se il doc principale è stato annullato, nascondo il pulsante salva
                    else if (this.Page.Request["typeAttachment"] != null &&
                                Convert.ToInt32(this.Page.Request["typeAttachment"]) == 1 &&
                                this.DocumentInWorking.documentoPrincipale != null &&
                                DocumentManager.IsDocumentAnnul(this.DocumentInWorking.documentoPrincipale.idProfile))
                    {
                        this.DocumentBtnSave.Visible = false;
                    }
                    else
                    {
                        this.DocumentBtnSave.Visible = true;
                    }
                    this.DocumentBtnCreateDocument.Visible = false;
                }
                else
                {
                    this.DocumentBtnPrepared.Enabled = false;
                    this.DocumentBtnPrint.Enabled = false;
                    this.DocumentBtnRemove.Enabled = false;
                    this.DocumentBtnRepeat.Enabled = false;
                    this.DocumentBtnAdL.Enabled = false;
                    this.DocumentBtnAdLRole.Enabled = false;
                    if (this.DocumentInWorking.tipoProto.Equals("G"))
                    {
                        this.DocumentBtnSave.Visible = false;
                        this.DocumentBtnCreateDocument.Visible = true;
                    }
                    else
                    {
                        this.DocumentBtnSave.Visible = true;
                        this.DocumentBtnCreateDocument.Visible = false;
                    }
                }

            }
        }

        protected void SetSenderValueAfterRecord(SchedaDocumento doc)
        {
            switch (doc.tipoProto)
            {
                case "A":
                    if (((ProtocolloEntrata)doc.protocollo).mittente != null)
                    {
                        this.TxtCodeSender.Text = ((ProtocolloEntrata)doc.protocollo).mittente.codiceRubrica;
                        this.TxtDescriptionSender.Text = ((ProtocolloEntrata)doc.protocollo).mittente.descrizione;
                        this.IdSender.Value = ((ProtocolloEntrata)doc.protocollo).mittente.systemId;
                        this.Sender = ((ProtocolloEntrata)doc.protocollo).mittente;
                    }
                    break;

                case "P":
                    if (((ProtocolloUscita)doc.protocollo).mittente != null)
                    {
                        this.TxtCodeSender.Text = ((ProtocolloUscita)doc.protocollo).mittente.codiceRubrica;
                        this.TxtDescriptionSender.Text = ((ProtocolloUscita)doc.protocollo).mittente.descrizione;
                        this.IdSender.Value = ((ProtocolloUscita)doc.protocollo).mittente.systemId;
                        this.Sender = ((ProtocolloUscita)doc.protocollo).mittente;
                    }
                    break;

                case "I":
                    if (((ProtocolloInterno)doc.protocollo).mittente != null)
                    {
                        this.TxtCodeSender.Text = ((ProtocolloInterno)doc.protocollo).mittente.codiceRubrica;
                        this.TxtDescriptionSender.Text = ((ProtocolloInterno)doc.protocollo).mittente.descrizione;
                        this.IdSender.Value = ((ProtocolloInterno)doc.protocollo).mittente.systemId;
                        this.Sender = ((ProtocolloInterno)doc.protocollo).mittente;
                    }
                    break;
            }

            this.UpPnlSender.Update();
        }

        protected void SetMultipleSenderValueAfterRecord(SchedaDocumento doc)
        {
            switch (doc.tipoProto)
            {
                case "A":
                    if (((ProtocolloEntrata)doc.protocollo).mittenti != null)
                    {
                        this.MultipleSenders = (((DocsPaWR.ProtocolloEntrata)doc.protocollo).mittenti).ToList<Corrispondente>();
                    }
                    break;
            }
        }

        protected void SetRecipientsValueAfterRecord(SchedaDocumento doc)
        {
            switch (doc.tipoProto)
            {
                case "P":
                    if (((ProtocolloUscita)doc.protocollo).destinatari != null)
                    {
                        this.ListRecipients = (((DocsPaWR.ProtocolloUscita)doc.protocollo).destinatari).ToList<Corrispondente>();
                    }
                    break;

                case "I":
                    if (((ProtocolloUscita)doc.protocollo).destinatari != null)
                    {
                        this.ListRecipients = (((DocsPaWR.ProtocolloUscita)doc.protocollo).destinatari).ToList<Corrispondente>();
                    }
                    break;
            }
        }

        protected void SetRecipientsCCValueAfterRecord(SchedaDocumento doc)
        {
            switch (doc.tipoProto)
            {
                case "P":
                    if (((ProtocolloUscita)doc.protocollo).destinatariConoscenza != null)
                    {
                        this.ListRecipientsCC = (((DocsPaWR.ProtocolloUscita)doc.protocollo).destinatariConoscenza).ToList<Corrispondente>();
                    }
                    break;

                case "I":
                    if (((ProtocolloUscita)doc.protocollo).destinatariConoscenza != null)
                    {
                        this.ListRecipientsCC = (((DocsPaWR.ProtocolloUscita)doc.protocollo).destinatariConoscenza).ToList<Corrispondente>();
                    }
                    break;
            }
        }

        protected void TxtCode_OnTextChanged(object sender, EventArgs e)
        {
            try
            {
                CustomTextArea caller = sender as CustomTextArea;
                string codeAddressBook = string.Empty;
                if (caller.ID == "TxtCodeSender")
                {
                    codeAddressBook = this.TxtCodeSender.Text;
                }
                else
                {
                    if (caller.ID == "TxtRecipientCode")
                    {
                        codeAddressBook = this.TxtRecipientCode.Text;
                    }
                }

                if (!string.IsNullOrEmpty(codeAddressBook))
                {
                    this.SearchCorrespondent(codeAddressBook, caller.ID, true);
                    if (caller.ID == "TxtCodeSender")
                    {
                        if (this.DocumentInWorking != null && !string.IsNullOrEmpty(this.DocumentInWorking.systemId))
                        {
                            //Nel caso di un predisposto in arrivo, applico i controlli K1/K2 per il nuovo mittente inserito
                            if (this.DocumentInWorking.tipoProto != null && this.DocumentInWorking.tipoProto.ToUpper().Equals("A"))
                            {
                                if (DocumentInWorking != null && !string.IsNullOrEmpty(DocumentInWorking.interop) && DocumentInWorking.protocollo != null && string.IsNullOrEmpty(DocumentInWorking.protocollo.segnatura) && Sender != null)
                                    SetButtonsCheckSender();
                            }

                            this.UpPnlSender.Update();

                            this.EditSender = true;
                        }
                    }
                    else
                    {
                        if (caller.ID == "TxtRecipientCode")
                        {

                            //if (this.DocumentInWorking != null && !string.IsNullOrEmpty(this.DocumentInWorking.systemId))
                            //{
                            //    this.EditRecipients = true;
                            //}
                        }
                    }
                }
                else
                {
                    if (caller.ID == "TxtCodeSender")
                    {
                        this.TxtCodeSender.Text = string.Empty;
                        this.TxtDescriptionSender.Text = string.Empty;
                        this.IdSender.Value = string.Empty;
                        this.UpPnlSender.Update();
                        if (this.DocumentInWorking != null && !string.IsNullOrEmpty(this.DocumentInWorking.systemId))
                        {
                            this.EditSender = true;
                        }
                    }
                    else
                    {
                        if (caller.ID == "TxtRecipientCode")
                        {
                            this.TxtRecipientCode.Text = string.Empty;
                            this.TxtRecipientDescription.Text = string.Empty;
                            this.IdRecipient.Value = string.Empty;
                            this.UpPnlRecipients.Update();
                            //if (this.DocumentInWorking != null && !string.IsNullOrEmpty(this.DocumentInWorking.systemId))
                            //{
                            //    this.EditRecipients = true;
                            //}
                        }
                    }
                }
            }
            catch (System.Exception ex)
            {
                UIManager.AdministrationManager.DiagnosticError(ex);
                return;
            }
        }

        protected void TxtCodeObject_Click(object sender, EventArgs e)
        {
            try
            {
                List<DocsPaWR.Registro> registries = new List<Registro>();
                registries = UIManager.RegistryManager.GetListRegistriesAndRF(this.Role.systemId, "1", string.Empty).ToList<DocsPaWR.Registro>();
                registries.Add(UIManager.RegistryManager.GetRegistryInSession());

                List<string> aL = new List<string>();
                if (registries != null)
                {
                    for (int i = 0; i < registries.Count; i++)
                    {
                        aL.Add(registries[i].systemId);
                    }
                }

                DocsPaWR.Oggetto[] listaObj = null;

                // E' inutile finire nel backend se la casella di testo è vuota (a parte il fatto che 
                // la funzione, in questo caso, restituisce tutto l'oggettario)
                if (!string.IsNullOrEmpty(this.TxtCodeObject.Text.Trim()))
                {
                    //In questo momento tralascio la descrizione oggetto che metto come stringa vuota
                    listaObj = DocumentManager.getListaOggettiByCod(aL.ToArray<string>(), string.Empty, this.TxtCodeObject.Text);
                }
                else
                {
                    listaObj = new DocsPaWR.Oggetto[] { 
                            new DocsPaWR.Oggetto()
                            {
                                descrizione = String.Empty,
                                codOggetto = String.Empty
                            }};
                }

                if (listaObj != null && listaObj.Length > 0)
                {
                    this.TxtObject.Text = listaObj[0].descrizione;
                    this.TxtCodeObject.Text = listaObj[0].codOggetto;
                }
                else
                {
                    this.TxtObject.Text = string.Empty;
                    this.TxtCodeObject.Text = string.Empty;
                }

                this.UpdPnlObject.Update();
                ScriptManager.RegisterStartupScript(this, this.GetType(), "focus", "$('#" + this.TxtCodeSender.ClientID + "').focus();", true);
            }
            catch (System.Exception ex)
            {
                UIManager.AdministrationManager.DiagnosticError(ex);
                return;
            }
        }

        protected void SearchCorrespondent(string addressCode, string idControl, bool endOfValidity)
        {
            if (!string.IsNullOrEmpty(this.RblTypeProtocol.SelectedValue))
            {
                DocsPaWR.Corrispondente corr = null;
                RubricaCallType calltype = this.GetCallType(idControl);
                ElementoRubrica[] listaCorr = null;
                bool multiCorr = false;

                switch (this.RblTypeProtocol.SelectedValue.ToUpper())
                {
                    case "A":
                        listaCorr = UIManager.AddressBookManager.getElementiRubricaMultipli(addressCode, calltype, true);
                        if (listaCorr != null && listaCorr.Length > 0)
                        {
                            if (listaCorr.Length == 1)
                            {
                                if (!string.IsNullOrEmpty(listaCorr[0].systemId))
                                {
                                    corr = UIManager.AddressBookManager.GetCorrespondentBySystemId(listaCorr[0].systemId);
                                }
                                else
                                {
                                    corr = UIManager.AddressBookManager.getCorrispondenteByCodRubricaRubricaComune(listaCorr[0].codice);
                                }
                            }
                            else
                            {
                                corr = null;
                                multiCorr = true;
                                this.FoundCorr = listaCorr;
                                this.TypeChooseCorrespondent = "Sender";
                                this.TypeRecord = "A";
                                ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "chooseCorrespondent", "ajaxModalPopupChooseCorrespondent();", true);
                            }
                        }

                        break;
                    case "P":
                        if (idControl == "TxtCodeSender")
                        {
                            listaCorr = UIManager.AddressBookManager.getElementiRubricaMultipli(addressCode, calltype, true);
                            if (listaCorr != null && listaCorr.Length > 0)
                            {
                                if (listaCorr.Length == 1)
                                {
                                    if (!string.IsNullOrEmpty(listaCorr[0].systemId))
                                    {
                                        corr = UIManager.AddressBookManager.GetCorrespondentBySystemId(listaCorr[0].systemId);
                                        this.Sender = corr;
                                    }
                                    else
                                    {
                                        corr = UIManager.AddressBookManager.getCorrispondenteByCodRubricaRubricaComune(listaCorr[0].codice);
                                    }
                                }
                                else
                                {
                                    corr = null;
                                    multiCorr = true;
                                    this.FoundCorr = listaCorr;
                                    this.TypeChooseCorrespondent = "Sender";
                                    this.TypeRecord = "P";
                                    ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "chooseCorrespondent", "ajaxModalPopupChooseCorrespondent();", true);
                                }
                            }
                        }
                        else
                        {
                            //Per le liste
                            ArrayList lsCorr = new ArrayList();
                            if (this.EnableDistributionLists)
                            {
                                string idAmm = UIManager.UserManager.GetInfoUser().idAmministrazione;
                                lsCorr = UIManager.AddressBookManager.getCorrispondentiByCodListaByUtente(addressCode, idAmm);
                                if (lsCorr.Count != 0)
                                {
                                    corr = new DocsPaWR.Corrispondente();
                                    corr.codiceRubrica = addressCode;
                                    corr.descrizione = UIManager.AddressBookManager.getNomeLista(addressCode, idAmm);
                                    corr.tipoCorrispondente = "L";
                                }
                                else
                                {
                                    lsCorr = UIManager.AddressBookManager.getCorrispondentiByCodRFIdAmm(addressCode, idAmm);
                                    if (lsCorr.Count != 0)
                                    {
                                        corr = new DocsPaWR.Corrispondente();
                                        corr.codiceRubrica = addressCode;
                                        corr.descrizione = UIManager.AddressBookManager.getNomeRF(addressCode);
                                        corr.tipoCorrispondente = "F";
                                    }
                                    else
                                    {
                                        listaCorr = UIManager.AddressBookManager.getElementiRubricaMultipli(addressCode, calltype, true);
                                        if (listaCorr != null && listaCorr.Length > 0)
                                        {
                                            if (listaCorr.Length == 1)
                                            {
                                                if (!string.IsNullOrEmpty(listaCorr[0].systemId))
                                                {
                                                    corr = UIManager.AddressBookManager.GetCorrespondentBySystemId(listaCorr[0].systemId);
                                                }
                                                else
                                                {
                                                    corr = UIManager.AddressBookManager.getCorrispondenteByCodRubricaRubricaComune(listaCorr[0].codice);
                                                }
                                            }
                                            else
                                            {
                                                corr = null;
                                                multiCorr = true;
                                                this.FoundCorr = listaCorr;
                                                this.TypeChooseCorrespondent = "Recipient";
                                                this.TypeRecord = "P";
                                                ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "chooseCorrespondent", "ajaxModalPopupChooseCorrespondent();", true);
                                            }
                                        }
                                    }
                                }
                            }
                            else
                            {
                                corr = UIManager.AddressBookManager.getCorrispondenteRubrica(addressCode, calltype);
                            }
                        }
                        break;
                    case "I":
                        //Per le liste
                        if (this.EnableDistributionLists)
                        {
                            ArrayList lsCorr = new ArrayList();
                            string idAmm = UIManager.UserManager.GetInfoUser().idAmministrazione;
                            lsCorr = UIManager.AddressBookManager.getCorrispondentiByCodListaByUtente(addressCode, idAmm);
                            if (lsCorr.Count != 0)
                            {
                                if (idControl != "TxtCodeSender")
                                {
                                    corr = new DocsPaWR.Corrispondente();
                                    corr.codiceRubrica = addressCode;
                                    corr.descrizione = UIManager.AddressBookManager.getNomeLista(addressCode, idAmm);
                                    corr.tipoCorrispondente = "L";
                                }
                            }
                            else
                            {
                                listaCorr = UIManager.AddressBookManager.getElementiRubricaMultipli(addressCode, calltype, true);
                                if (listaCorr != null && listaCorr.Length > 0)
                                {
                                    if (listaCorr.Length == 1)
                                    {
                                        if (!string.IsNullOrEmpty(listaCorr[0].systemId))
                                        {
                                            corr = UIManager.AddressBookManager.GetCorrespondentBySystemId(listaCorr[0].systemId);
                                        }
                                        else
                                        {
                                            corr = UIManager.AddressBookManager.getCorrispondenteByCodRubricaRubricaComune(listaCorr[0].codice);
                                        }
                                    }
                                    else
                                    {
                                        if (idControl == "TxtCodeSender")
                                        {
                                            this.TypeChooseCorrespondent = "Sender";
                                        }
                                        else
                                        {
                                            this.TypeChooseCorrespondent = "Recipient";
                                        }
                                        corr = null;
                                        multiCorr = true;
                                        this.FoundCorr = listaCorr;
                                        this.TypeRecord = "I";
                                        ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "chooseCorrespondent", "ajaxModalPopupChooseCorrespondent();", true);
                                    }
                                }
                            }
                        }
                        else
                        {
                            listaCorr = UIManager.AddressBookManager.getElementiRubricaMultipli(addressCode, calltype, true);
                            if (listaCorr != null && listaCorr.Length > 0)
                            {
                                if (listaCorr.Length == 1)
                                {
                                    if (!string.IsNullOrEmpty(listaCorr[0].systemId))
                                    {
                                        corr = UIManager.AddressBookManager.GetCorrespondentBySystemId(listaCorr[0].systemId);
                                    }
                                    else
                                    {
                                        corr = UIManager.AddressBookManager.getCorrispondenteByCodRubricaRubricaComune(listaCorr[0].codice);
                                    }
                                }
                                else
                                {
                                    if (idControl == "TxtCodeSender")
                                    {
                                        this.TypeChooseCorrespondent = "Sender";
                                    }
                                    else
                                    {
                                        this.TypeChooseCorrespondent = "Recipient";
                                    }
                                    corr = null;
                                    multiCorr = true;
                                    this.FoundCorr = listaCorr;
                                    this.TypeRecord = "I";
                                    ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "chooseCorrespondent", "ajaxModalPopupChooseCorrespondent();", true);
                                }
                            }
                        }
                        break;
                }


                if (corr == null)
                {
                    if (idControl == "TxtCodeSender")
                    {
                        this.TxtCodeSender.Text = string.Empty;
                        this.TxtDescriptionSender.Text = string.Empty;
                        this.IdSender.Value = string.Empty;

                        this.Sender = null;
                    }
                    else
                    {
                        if (idControl == "TxtRecipientCode")
                        {
                            this.TxtRecipientCode.Text = string.Empty;
                            this.TxtRecipientDescription.Text = string.Empty;
                            this.IdRecipient.Value = string.Empty;

                            this.ListBoxRecipient = null;
                        }
                    }

                    if (!multiCorr)
                    {

                        //string msg = Corrispondente non trovato.";
                        string msgDesc = "WarningDocumentCorrNotFound";

                        ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + msgDesc.Replace("'", @"\'") + "', 'warning', '');} else {parent.ajaxDialogModal('" + msgDesc.Replace("'", @"\'") + "', 'warning', '');}", true);
                    }
                }

                else
                {
                    if (idControl == "TxtCodeSender")
                    {
                        if (this.RblTypeProtocol.SelectedValue.Equals("A") && this.EnableMultipleSenders)
                        {
                            if (this.MultipleSenders != null && !this.CheckDuplicatiMittMultipli(corr))
                            {
                                this.TxtCodeSender.Text = string.Empty;
                                this.TxtDescriptionSender.Text = string.Empty;
                                this.IdSender.Value = string.Empty;

                                this.Sender = null;
                                //string msg = Corrispondente già presente nei mittenti multipli.";
                                string msgDesc = "WarningDocumentCorrFound";

                                ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + msgDesc.Replace("'", @"\'") + "', 'warning', '');} else {parent.ajaxDialogModal('" + msgDesc.Replace("'", @"\'") + "', 'warning', '');}", true);
                                //ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "no_found", "alert('Corrispondente già presente nei mittenti multipli');", true);
                            }
                            else
                            {
                                this.TxtCodeSender.Text = corr.codiceRubrica;
                                this.TxtDescriptionSender.Text = corr.descrizione;
                                this.IdSender.Value = corr.systemId;

                                this.Sender = corr;
                            }
                        }
                        else
                        {
                            this.TxtCodeSender.Text = corr.codiceRubrica;
                            this.TxtDescriptionSender.Text = corr.descrizione;
                            this.IdSender.Value = corr.systemId;
                            this.Sender = corr;
                        }


                    }
                    else
                    {
                        if (idControl == "TxtRecipientCode")
                        {
                            this.SetRecipient(corr);
                            this.TxtRecipientCode.Text = string.Empty;
                            this.TxtRecipientDescription.Text = string.Empty;
                            this.IdRecipient.Value = string.Empty;

                        }
                    }
                }

                if (idControl == "TxtCodeSender")
                {
                    this.UpPnlSender.Update();
                }
                else
                {
                    if (idControl == "TxtRecipientCode")
                    {
                        this.UpPnlRecipients.Update();
                    }
                }

            }
        }

        private void SetRecipientInListBox(DocsPaWR.Corrispondente corr)
        {
            System.Collections.Generic.List<Corrispondente> listPrefChannelDest = new System.Collections.Generic.List<Corrispondente>();
            DocsPaWR.Corrispondente[] listaDestCC = this.ListRecipientsCC.ToArray<Corrispondente>();

            if (!AddressBookManager.esisteCorrispondente(listaDestCC, corr))
            {
                DocsPaWR.Corrispondente[] listaDest = this.ListRecipients.ToArray<Corrispondente>();
                if (!AddressBookManager.esisteCorrispondente(listaDest, corr))
                {
                    ListItem item = new ListItem();
                    this.ListRecipients = AddressBookManager.AddCorrespondet(this.ListRecipients, this.ListRecipientsCC, corr);
                    string annullato = string.Empty;
                    bool rtn = CtrlIfDestWithRicevuta_NEW(corr, out annullato);
                    if (rtn)
                    {
                        string canaleRef = string.Empty;
                        if (corr != null && corr.canalePref != null)
                        {
                            Canale canaleOrig = corr.canalePref = (from c in listPrefChannelDest where c.systemId.Equals(corr.systemId) select c.canalePref).FirstOrDefault();
                            //non abbiamo ancora salvato quindi il canale preferenziale è uguale al mezzo di spedizione
                            if (canaleOrig == null)
                            {
                                canaleOrig = corr.canalePref;
                            }
                            if (canaleOrig != null && canaleOrig.typeId != null)
                            {
                                if (canaleOrig.typeId.ToUpper().Equals("MAIL") ||
                                    canaleOrig.typeId.ToUpper().Equals("INTEROPERABILITA") ||
                                    canaleOrig.typeId.ToUpper().Equals("INTEROPERABILITAPITRE"))
                                {
                                    canaleRef = "(" + canaleOrig.typeId + ")  ";
                                }
                                else
                                    if (canaleOrig.typeId.ToUpper().Equals(SimplifiedInteroperabilityManager.SimplifiedInteroperabilityId))
                                        canaleRef = String.Format("({0})", SimplifiedInteroperabilityManager.ChannelDescription);
                                    else
                                        canaleRef = "  ";
                            }
                            else
                            {
                                canaleRef = "  ";
                            }
                        }
                        if (annullato == string.Empty)
                            item.Text = new StringBuilder().AppendFormat("(*){0}{1}", canaleRef, AddressBookManager.getDecrizioneCorrispondenteSemplice(corr)).ToString();
                        else if (annullato == "1")
                            item.Text = new StringBuilder().AppendFormat("(*)(A){0}{1}", canaleRef, AddressBookManager.getDecrizioneCorrispondenteSemplice(corr)).ToString();
                        else if (annullato == "E")
                            item.Text = new StringBuilder().AppendFormat("(!){0}{1}", canaleRef, AddressBookManager.getDecrizioneCorrispondenteSemplice(corr)).ToString();
                    }
                    else
                    {
                        StringBuilder formatDestinatario = new StringBuilder();
                        if (corr != null && corr.canalePref != null)
                        {
                            Canale canaleOrig = (from c in listPrefChannelDest where c.systemId.Equals(corr.systemId) select c.canalePref).FirstOrDefault();
                            //non abbiamo ancora salvato quindi il canale preferenziale è uguale al mezzo di spedizione
                            if (canaleOrig == null)
                            {
                                canaleOrig = corr.canalePref;
                            }
                            if (canaleOrig != null && canaleOrig.typeId != null)
                            {
                                if (canaleOrig.typeId.ToUpper().Equals("MAIL") ||
                                    canaleOrig.typeId.ToUpper().Equals("INTEROPERABILITA") ||
                                    canaleOrig.typeId.ToUpper().Equals("INTEROPERABILITAPITRE"))
                                {

                                    formatDestinatario.AppendFormat("({0})  {1}", canaleOrig.typeId, AddressBookManager.getDecrizioneCorrispondenteSemplice(corr));
                                    item.Text = formatDestinatario.ToString();
                                }
                                else
                                    if (canaleOrig.typeId.ToUpper().Equals(SimplifiedInteroperabilityManager.SimplifiedInteroperabilityId))
                                    {
                                        formatDestinatario.AppendFormat("({0})  {1}", SimplifiedInteroperabilityManager.ChannelDescription, AddressBookManager.getDecrizioneCorrispondenteSemplice(corr));
                                        item.Text = formatDestinatario.ToString();
                                    }
                            }
                        }
                        if (string.IsNullOrEmpty(formatDestinatario.ToString()))
                        {
                            formatDestinatario.AppendFormat(AddressBookManager.getDecrizioneCorrispondenteSemplice(corr));
                            item.Text = formatDestinatario.ToString();
                        }
                    }

                    item.Value = corr.systemId;
                    this.ListBoxRecipient.Items.Insert(0, item);
                    this.ListBoxRecipient.SelectedIndex = 0;
                    this.ListBoxRecipient.Focus();
                }
            }
            this.bypassaControlloRicevute = null;
        }

        private void SetRecipient(DocsPaWR.Corrispondente corr)
        {
            bool esterniInListaInt = false;
            if (corr != null && corr.tipoCorrispondente.Equals("L"))
            {
                ArrayList lsCorr = UserManager.getCorrispondentiByCodLista(new Page(), corr.codiceRubrica, this.InfoUser.idAmministrazione);
                if (this.TypeDocument.ToUpper() != "I")
                {
                    foreach (Corrispondente cr in lsCorr)
                    {
                        this.SetRecipientInListBox(cr);
                    }
                }
                else
                {
                    foreach (Corrispondente cr in lsCorr)
                    {
                        if (!string.IsNullOrEmpty(cr.tipoIE) && cr.tipoIE.ToUpper() == "I")
                        {
                            this.SetRecipientInListBox(cr);
                        }
                        else
                        {
                            esterniInListaInt = true;
                        }
                    }
                }
            }
            else
            {
                if (corr != null && corr.tipoCorrispondente.Equals("F") && !corr.inRubricaComune)
                {
                    ArrayList lsCorr = UserManager.getCorrispondentiByCodRF(this.Page, corr.codiceRubrica);
                    foreach (Corrispondente cr in lsCorr)
                    {
                        this.SetRecipientInListBox(cr);
                    }
                }
                else
                {
                    this.SetRecipientInListBox(corr);
                }
            }

            if (esterniInListaInt)
            {
                string msgDesc = "WarningDocumentCorrExtInListProtInt";

                ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + msgDesc.Replace("'", @"\'") + "', 'warning', '');} else {parent.ajaxDialogModal('" + msgDesc.Replace("'", @"\'") + "', 'warning', '');}", true);

            }
        }

        protected bool CtrlIfDestWithRicevuta_NEW(DocsPaWR.Corrispondente recipient, out string annullato)
        {
            bool rtn = false;
            annullato = string.Empty;
            // Per rendere possibile la modifica del mezzo di spedizione.
            if (this.bypassaControlloRicevute != null && this.bypassaControlloRicevute.Length > 0 && this.bypassaControlloRicevute.Contains(recipient.systemId))
            {
                return false;
            }
            DocsPaWR.ProtocolloDestinatario protoDest;

            DocsPaWR.SchedaDocumento document = DocumentManager.getSelectedRecord();
            if (document == null || document.systemId == null || recipient == null || (recipient != null && recipient.systemId == null))
            {
                return rtn;
            }

            protoDest = (DocsPaWR.ProtocolloDestinatario)recipient.protocolloDestinatario;
            if (protoDest != null)
            {
                if (protoDest.annullato != null && protoDest.annullato.Equals("E"))
                {
                    rtn = true;
                    annullato = "E";
                }
            }

            if (protoDest != null && protoDest.dataProtocolloDestinatario != null && !protoDest.dataProtocolloDestinatario.Equals(""))
            {
                if (protoDest.descrizioneCorr == recipient.descrizione)
                    rtn = true;
                if (protoDest.annullato != null && protoDest.annullato.Equals("1"))
                    annullato = "1";

            }

            return rtn;
        }

        protected void TxtCodeProject_OnTextChanged(object sender, EventArgs e)
        {
            try
            {
                ProjectManager.removeFascicoloSelezionatoFascRapida(this);

                if (!string.IsNullOrEmpty(this.TxtCodeProject.Text))
                {
                    SchedaDocumento documentoSelezionato = UIManager.DocumentManager.getSelectedRecord();

                    if (this.Registry == null)
                    {
                        this.SearchProjectNoRegistro();
                    }
                    else
                    {
                        this.SearchProjectRegistro();
                    }
                }
                else
                {
                    this.TxtCodeProject.Text = string.Empty;
                    this.TxtDescriptionProject.Text = string.Empty;
                    this.IdProject.Value = string.Empty;
                    this.Project = null;
                    //Laura 25 Marzo
                    ProjectManager.setProjectInSessionForRicFasc(null);
                    ProjectManager.setProjectInSessionForRicFasc(String.Empty);
                }

                this.UpPnlProject.Update();
            }
            catch (System.Exception ex)
            {
                UIManager.AdministrationManager.DiagnosticError(ex);
                return;
            }
        }

        protected void SearchProjectNoRegistro()
        {

            this.TxtDescriptionProject.Text = string.Empty;
            if (string.IsNullOrEmpty(this.TxtCodeProject.Text))
            {
                this.TxtDescriptionProject.Text = string.Empty;
                return;
            }
            //su DocProfilo devo cercare senza condizione sul registro.
            //Basta che il fascicolo sia visibile al ruolo loggato

            if (this.TxtCodeProject.Text.IndexOf("//") > -1)
            {

                string codice = string.Empty;
                string descrizione = string.Empty;

                DocsPaWR.Fascicolo SottoFascicolo = getFolder(null, ref codice, ref descrizione);
                if (SottoFascicolo != null)
                {
                    if (SottoFascicolo.folderSelezionato != null && codice != string.Empty && descrizione != string.Empty)
                    {
                        TxtDescriptionProject.Text = descrizione;
                        this.TxtDescriptionProject.Focus();
                        TxtCodeProject.Text = codice;
                        this.Project = SottoFascicolo;
                        DocsPaWR.FascicolazioneClassifica[] gerClassifica = ProjectManager.getGerarchia(this, SottoFascicolo.idClassificazione, UserManager.GetUserInSession().idAmministrazione);
                        // DocsPaWR.Fascicolo fascForRicFasc = ProjectManager.getFascicoloById(gerClassifica[gerClassifica.Length - 1].systemId);
                        ProjectManager.setProjectInSessionForRicFasc(gerClassifica[gerClassifica.Length - 1].codice);
                        ProjectManager.setFascicoloSelezionatoFascRapida(this, SottoFascicolo);

                    }
                    else
                    {
                        //string msg = @"Attenzione, sottofascicolo non presente.";
                        string msg = "WarningDocumentSubFileNoFound";

                        ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + msg.Replace("'", @"\'") + "', 'warning', '');} else {parent.ajaxDialogModal('" + msg.Replace("'", @"\'") + "', 'warning', '');}", true);

                        this.TxtDescriptionProject.Text = string.Empty;
                        this.TxtCodeProject.Text = string.Empty;

                    }
                }
                else
                {
                    //string msg = @"Attenzione, sottofascicolo non presente.";
                    string msg = "WarningDocumentSubFileNoFound";

                    ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + msg.Replace("'", @"\'") + "', 'warning', '');} else {parent.ajaxDialogModal('" + msg.Replace("'", @"\'") + "', 'warning', '');}", true);
                    this.TxtDescriptionProject.Text = string.Empty;
                    this.TxtCodeProject.Text = string.Empty;
                }
            }
            else
            {

                DocsPaWR.Fascicolo[] listaFasc = getFascicolo(this.Registry);
                string codClassifica = string.Empty;
                if (listaFasc != null)
                {
                    if (listaFasc.Length > 0)
                    {
                        //caso 1: al codice digitato corrisponde un solo fascicolo
                        if (listaFasc.Length == 1)
                        {
                            this.TxtDescriptionProject.Text = listaFasc[0].descrizione;
                            this.TxtDescriptionProject.Focus();
                            //metto il fascicolo in sessione
                            if (listaFasc[0].tipo.Equals("G"))
                            {
                                codClassifica = listaFasc[0].codice;
                            }
                            else
                            {
                                //se il fascicolo è procedimentale, ricerco la classifica a cui appartiene
                                DocsPaWR.FascicolazioneClassifica[] gerClassifica = ProjectManager.getGerarchia(this, listaFasc[0].idClassificazione, UserManager.GetUserInSession().idAmministrazione);

                                string codiceGerarchia = gerClassifica[gerClassifica.Length - 1].codice;
                                codClassifica = codiceGerarchia;
                            }
                            this.Project = listaFasc[0];
                            ProjectManager.setProjectInSessionForRicFasc(codClassifica);
                            ProjectManager.setFascicoloSelezionatoFascRapida(this, listaFasc[0]);
                            //IL SECONDO PARAMETRO INDICA SE IL NODO è PRESENTE SU PIU REGISTRI
                            //this.imgFasc.Attributes.Add("onclick","ApriRicercaFascicoli('"+codClassifica+"', 'N');");
                        }
                        else
                        {
                            codClassifica = this.TxtCodeProject.Text;
                            if (listaFasc[0].tipo.Equals("G"))
                            {
                                //codClassifica = codClassifica;
                            }
                            else
                            {
                                //se il fascicolo è procedimentale, ricerco la classifica a cui appartiene
                                DocsPaWR.FascicolazioneClassifica[] gerClassifica = ProjectManager.getGerarchia(this, listaFasc[0].idClassificazione, UserManager.GetUserInSession().idAmministrazione);
                                string codiceGerarchia = gerClassifica[gerClassifica.Length - 1].codice;
                                codClassifica = codiceGerarchia;
                            }
                            //Page.RegisterStartupScript("openListaFasc","<SCRIPT>ApriSceltaFascicolo();</SCRIPT>");
                            //Session.Add("hasRegistriNodi",hasRegistriNodi);

                            //IL SECONDO PARAMETRO INDICA SE IL NODO è PRESENTE SU PIU REGISTRI
                            //this.imgFasc.Attributes.Add("onclick","ApriRicercaFascicoli('"+codClassifica+"', 'Y');");

                            //Da Fare
                            //RegisterStartupScript("openModale", "<script>ApriRicercaFascicoli2('" + codClassifica + "', 'Y')</script>");                            

                            return;
                        }
                    }
                    else
                    {
                        //caso 0: al codice digitato non corrisponde alcun fascicolo
                        if (listaFasc.Length == 0)
                        {
                            //Provo il caso in cui il fascicolo è chiuso
                            Fascicolo chiusoFasc = ProjectManager.getFascicoloDaCodice(this.Page, this.TxtCodeProject.Text);
                            if (chiusoFasc != null && !string.IsNullOrEmpty(chiusoFasc.stato) && chiusoFasc.stato.Equals("C"))
                            {
                                //string msg = @"Attenzione, il fascicolo scelto è chiuso. Pertanto il documento non può essere inserito nel fascicolo selezionato.";
                                string msg = "WarningDocumentFileNoOpen";

                                ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + msg.Replace("'", @"\'") + "', 'warning', '');} else {parent.ajaxDialogModal('" + msg.Replace("'", @"\'") + "', 'warning', '');}", true);
                            }
                            else
                            {
                                //string msg = @"Attenzione, codice fascicolo non presente.";
                                string msg = "WarningDocumentCodFileNoFound";

                                ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + msg.Replace("'", @"\'") + "', 'warning', '');} else {parent.ajaxDialogModal('" + msg.Replace("'", @"\'") + "', 'warning', '');}", true);

                            }

                            this.TxtDescriptionProject.Text = string.Empty;
                            this.TxtCodeProject.Text = string.Empty;
                        }
                        //IL SECONDO PARAMETRO INDICA SE IL NODO è PRESENTE SU PIU REGISTRI
                        //this.imgFasc.Attributes.Add("onclick","ApriRicercaFascicoli('"+codClassifica+"', '');");
                    }
                }
            }
        }

        protected void SearchProjectRegistro()
        {
            this.TxtDescriptionProject.Text = string.Empty;
            string codClassifica = string.Empty;

            if (string.IsNullOrEmpty(this.TxtCodeProject.Text))
            {
                this.TxtDescriptionProject.Text = string.Empty;
                this.Project = null;
                //Laura 25 Marzo
                ProjectManager.setProjectInSessionForRicFasc(null);
                ProjectManager.setFascicoloSelezionatoFascRapida(this, null);
                return;
            }

            //FASCICOLAZIONE IN SOTTOFASCICOLI

            if (this.TxtCodeProject.Text.IndexOf("//") > -1)
            {
                #region FASCICOLAZIONE IN SOTTOFASCICOLI
                string codice = string.Empty;
                string descrizione = string.Empty;
                DocsPaWR.Fascicolo SottoFascicolo = getFolder(this.Registry, ref codice, ref descrizione);
                if (SottoFascicolo != null)
                {

                    if (SottoFascicolo.folderSelezionato != null && codice != string.Empty && descrizione != string.Empty)
                    {
                        TxtDescriptionProject.Text = descrizione;
                        this.TxtDescriptionProject.Focus();
                        TxtCodeProject.Text = codice;
                        this.Project = SottoFascicolo;
                        DocsPaWR.FascicolazioneClassifica[] gerClassifica = ProjectManager.getGerarchia(this, SottoFascicolo.idClassificazione, UserManager.GetUserInSession().idAmministrazione);
                        ProjectManager.setProjectInSessionForRicFasc(gerClassifica[gerClassifica.Length - 1].codice);
                        ProjectManager.setFascicoloSelezionatoFascRapida(this, SottoFascicolo);
                    }
                    else
                    {

                        //string msg = @"Attenzione, sottofascicolo non presente.";
                        string msg = "WarningDocumentSubFileNoFound";

                        ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + msg.Replace("'", @"\'") + "', 'warning', '');} else {parent.ajaxDialogModal('" + msg.Replace("'", @"\'") + "', 'warning', '');}", true);
                        this.TxtDescriptionProject.Text = string.Empty;
                        this.TxtCodeProject.Text = string.Empty;
                        this.Project = null;
                        ProjectManager.setProjectInSessionForRicFasc(null);
                        ProjectManager.setFascicoloSelezionatoFascRapida(this, null);
                    }
                }
                else
                {
                    Session["validCodeFasc"] = "false";

                    //string msg = @"Attenzione, sottofascicolo non presente.";
                    string msg = "WarningDocumentSubFileNoFound";

                    ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + msg.Replace("'", @"\'") + "', 'warning', '');} else {parent.ajaxDialogModal('" + msg.Replace("'", @"\'") + "', 'warning', '');}", true);
                    this.TxtDescriptionProject.Text = string.Empty;
                    this.TxtCodeProject.Text = string.Empty;
                    this.Project = null;
                    ProjectManager.setProjectInSessionForRicFasc(null);
                    ProjectManager.setFascicoloSelezionatoFascRapida(this, null);
                }

                #endregion
            }
            else
            {
                DocsPaWR.Fascicolo[] listaFasc = getFascicoli(this.Registry);

                if (listaFasc != null)
                {
                    if (listaFasc.Length > 0)
                    {
                        //caso 1: al codice digitato corrisponde un solo fascicolo
                        if (listaFasc.Length == 1)
                        {
                            this.Project = listaFasc[0];
                            this.TxtDescriptionProject.Text = listaFasc[0].descrizione;
                            this.TxtDescriptionProject.Focus();
                            if (listaFasc[0].tipo.Equals("G"))
                            {
                                codClassifica = listaFasc[0].codice;
                            }
                            else
                            {
                                //se il fascicolo è procedimentale, ricerco la classifica a cui appartiene
                                DocsPaWR.FascicolazioneClassifica[] gerClassifica = ProjectManager.getGerarchia(this, listaFasc[0].idClassificazione, UserManager.GetUserInSession().idAmministrazione);
                                string codiceGerarchia = gerClassifica[gerClassifica.Length - 1].codice;
                                codClassifica = codiceGerarchia;
                            }
                            ProjectManager.setProjectInSessionForRicFasc(codClassifica);
                            ProjectManager.setFascicoloSelezionatoFascRapida(this, listaFasc[0]);
                        }
                        else
                        {
                            //caso 2: al codice digitato corrispondono piu fascicoli
                            codClassifica = this.TxtCodeProject.Text;
                            if (listaFasc[0].tipo.Equals("G"))
                            {
                                //codClassifica = codClassifica;
                            }
                            else
                            {
                                //se il fascicolo è procedimentale, ricerco la classifica a cui appartiene
                                DocsPaWR.FascicolazioneClassifica[] gerClassifica = ProjectManager.getGerarchia(this, listaFasc[0].idClassificazione, UserManager.GetUserInSession().idAmministrazione);
                                string codiceGerarchia = gerClassifica[gerClassifica.Length - 1].codice;
                                codClassifica = codiceGerarchia;
                            }

                            ////Da Fare
                            //RegisterStartupScript("openModale", "<script>ApriRicercaFascicoli('" + codClassifica + "', 'Y')</script>");
                            return;
                        }
                    }
                    else
                    {
                        //caso 0: al codice digitato non corrisponde alcun fascicolo
                        if (listaFasc.Length == 0)
                        {
                            //Provo il caso in cui il fascicolo è chiuso
                            Fascicolo chiusoFasc = ProjectManager.getFascicoloDaCodice(this.Page, this.TxtCodeProject.Text);
                            if (chiusoFasc != null && !string.IsNullOrEmpty(chiusoFasc.stato) && chiusoFasc.stato.Equals("C"))
                            {
                                //string msg = @"Attenzione, il fascicolo scelto è chiuso. Pertanto il documento non può essere inserito nel fascicolo selezionato.";
                                string msg = "WarningDocumentFileNoOpen";

                                ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + msg.Replace("'", @"\'") + "', 'warning', '');} else {parent.ajaxDialogModal('" + msg.Replace("'", @"\'") + "', 'warning', '');}", true);
                            }
                            else
                            {
                                //string msg = @"Attenzione, codice fascicolo non presente.";
                                string msg = "WarningDocumentCodFileNoFound";

                                ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + msg.Replace("'", @"\'") + "', 'warning', '');} else {parent.ajaxDialogModal('" + msg.Replace("'", @"\'") + "', 'warning', '');}", true);
                            }
                            this.TxtDescriptionProject.Text = string.Empty;
                            this.TxtCodeProject.Text = string.Empty;
                            this.Project = null;
                            ProjectManager.setProjectInSessionForRicFasc(null);
                            ProjectManager.setFascicoloSelezionatoFascRapida(this, null);
                        }
                    }
                }
            }
        }

        private DocsPaWR.Fascicolo[] getFascicolo(DocsPaWR.Registro registro)
        {
            DocsPaWR.Fascicolo[] listaFasc = null;
            if (!string.IsNullOrEmpty(this.TxtCodeProject.Text))
            {
                string codiceFascicolo = TxtCodeProject.Text;
                listaFasc = ProjectManager.getListaFascicoliDaCodice(this, codiceFascicolo, registro, "I");
            }
            if (listaFasc != null)
            {
                return listaFasc;
            }
            else
            {
                return null;
            }
        }

        private DocsPaWR.Fascicolo[] getFascicoli(DocsPaWR.Registro registro)
        {
            DocsPaWR.Fascicolo[] listaFasc = null;
            if (!this.TxtCodeProject.Text.Equals(""))
            {
                string codiceFascicolo = TxtCodeProject.Text;
                listaFasc = ProjectManager.getListaFascicoliDaCodice(this, codiceFascicolo, registro, "I");
            }
            if (listaFasc != null)
            {
                return listaFasc;
            }
            else
            {
                return null;
            }
        }

        private DocsPaWR.Fascicolo getFolder(DocsPaWR.Registro registro, ref string codice, ref string descrizione)
        {
            DocsPaWR.Folder[] listaFolder = null;
            DocsPaWR.Fascicolo fasc = null;
            string separatore = "//";
            int posSep = this.TxtCodeProject.Text.IndexOf("//");
            if (this.TxtCodeProject.Text != string.Empty && posSep > -1)
            {

                string codiceFascicolo = TxtCodeProject.Text.Substring(0, posSep);
                string descrFolder = TxtCodeProject.Text.Substring(posSep + separatore.Length);

                listaFolder = ProjectManager.getListaFolderDaCodiceFascicolo(this, codiceFascicolo, descrFolder, registro, "I");
                if (listaFolder != null && listaFolder.Length > 0)
                {
                    //calcolo fascicolazionerapida
                    InfoUtente infoUtente = UserManager.GetInfoUser();
                    fasc = ProjectManager.getFascicoloById(listaFolder[0].idFascicolo, infoUtente);

                    if (fasc != null)
                    {
                        //folder selezionato è l'ultimo
                        fasc.folderSelezionato = listaFolder[listaFolder.Length - 1];
                    }
                    codice = fasc.codice + separatore;
                    descrizione = fasc.descrizione + separatore;
                    for (int i = 0; i < listaFolder.Length; i++)
                    {
                        codice += listaFolder[i].descrizione + "//";
                        descrizione += listaFolder[i].descrizione + "//";
                    }
                    codice = codice.Substring(0, codice.Length - 2);
                    descrizione = descrizione.Substring(0, descrizione.Length - 2);

                }
            }
            if (fasc != null)
            {

                return fasc;

            }
            else
            {
                return null;
            }
        }

        //protected void SearchProject()
        //{
        //    Fascicolo[] projectList;

        //    projectList = UIManager.ProjectManager.GetProjectFromCodeNoSecurity(this.TxtCodeProject.Text, this.UserLog.idAmministrazione, this.titolario, true);

        //    if (projectList == null || projectList.Length == 0)
        //    {
        //        ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "no_project", "alert('Nessun fascicolo trovato con questo codice');", true);
        //    }
        //    else
        //    {
        //        this.Project = projectList[1];
        //        this.TxtCodeProject.Text = projectList[1].codice;
        //        this.TxtDescriptionProject.Text = projectList[1].descrizione;
        //        this.IdProject.Value = projectList[1].systemID;
        //    }

        //}

        protected void DocumentDdlTypeDocument_OnSelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                //DocsPaWR.TipologiaAtto typeDocument = new DocsPaWR.TipologiaAtto();
                //typeDocument.systemId = this.DocumentDdlTypeDocument.SelectedItem.Value;
                //typeDocument.descrizione = this.DocumentDdlTypeDocument.SelectedItem.Text;

                //this.DocumentInWorking.daAggiornareTipoAtto = true;
                //this.DocumentInWorking.tipologiaAtto = typeDocument;

                if (!string.IsNullOrEmpty(this.DocumentDdlTypeDocument.SelectedValue))
                {
                    this.DocumentImgHistoryTipology.Visible = true;
                    if (this.CustomDocuments)
                    {
                        this.Template = ProfilerDocManager.getTemplateById(this.DocumentDdlTypeDocument.SelectedItem.Value);

                        if (this.Template != null)
                        {
                            if (this.Template.PRIVATO != null && this.Template.PRIVATO == "1")
                            {
                                this.DocumentCheckPrivate.Checked = true;
                                this.UpDocumentPrivate.Update();
                            }

                            if (this.EnableStateDiagram)
                            {
                                this.DocumentDdlStateDiagram.ClearSelection();
                                //Verifico se esiste un diagramma di stato associato al tipo di documento
                                this.StateDiagram = DiagrammiManager.getDgByIdTipoDoc(this.DocumentDdlTypeDocument.SelectedItem.Value, this.InfoUser.idAmministrazione);
                                if (this.StateDiagram != null)
                                {
                                    this.PnlStateDiagram.Visible = true;
                                    this.popolaComboBoxStatiSuccessivi(null, this.StateDiagram);

                                    if (this.Template != null && !string.IsNullOrEmpty(this.Template.SCADENZA) && this.Template.SCADENZA != "0")
                                    {
                                        this.PnlDocumentStateDiagramDate.Visible = true;
                                        this.PnlScadenza.Visible = true;
                                        this.DocumentStateDiagramDataValue.Text = this.DocumentInWorking.dataScadenza;

                                        DateTime dataOdierna = System.DateTime.Now;
                                        int scadenza = Convert.ToInt32(this.Template.SCADENZA);
                                        DateTime dataCalcolata = dataOdierna.AddDays(scadenza);
                                        this.PnlScadenza.Visible = true;
                                        if (string.IsNullOrEmpty(this.DocumentInWorking.dataScadenza))
                                        {
                                            this.DocumentStateDiagramDataValue.Text = utils.formatDataDocsPa(dataCalcolata);

                                            //this.DocumentInWorking.dataScadenza = Utils.formatDataDocsPa(dataCalcolata);
                                        }
                                        else
                                        {
                                            this.DocumentStateDiagramDataValue.Text = this.DocumentInWorking.dataScadenza.Substring(0, 10);
                                            this.DocumentStateDiagramDataValue.ReadOnly = true;
                                        }

                                    }
                                    else
                                    {
                                        this.PnlDocumentStateDiagramDate.Visible = false;
                                        this.PnlScadenza.Visible = false;
                                        this.DocumentStateDiagramDataValue.Text = string.Empty;
                                    }
                                }
                                else
                                {
                                    this.PnlStateDiagram.Visible = false;
                                }
                            }
                            #region Associazione automatica
                            if (this.Template.CHA_ASSOC_MANUALE == "1")
                            {
                                //ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('Tipologia consente associazione automatica.', 'warning', '');} else {parent.ajaxDialogModal('Tipologia consente associazione automatica.', 'warning', '');};", true);

                                FileRequest x1assoc = UIManager.FileManager.getSelectedFile();

                                if (x1assoc != null && !string.IsNullOrEmpty(x1assoc.fileName))
                                {
                                    FileManager x1fm = new FileManager();
                                    FileDocumento x1doc = x1fm.getFile(this);

                                    if (!string.IsNullOrEmpty(x1doc.fullName) && x1doc.fullName.ToUpper().EndsWith("XML"))
                                    {
                                        try
                                        {
                                            string stringaXml = Encoding.UTF8.GetString(x1doc.content);

                                            stringaXml = stringaXml.Trim();
                                            System.Xml.XmlDocument xmlDoc = new System.Xml.XmlDocument();
                                            if (stringaXml.Contains("xml version=\"1.1\""))
                                            {
                                                //logger.Debug("Versione XML 1.1. Provo conversione");
                                                stringaXml = stringaXml.Replace("xml version=\"1.1\"", "xml version=\"1.0\"");
                                            }

                                            try
                                            {
                                                xmlDoc.LoadXml(stringaXml);
                                            }
                                            catch (Exception bomUTF8)
                                            {
                                                string byteOrderMarkUtf8 = Encoding.UTF8.GetString(Encoding.UTF8.GetPreamble());
                                                if (stringaXml.StartsWith(byteOrderMarkUtf8))
                                                {
                                                    stringaXml = stringaXml.Remove(0, byteOrderMarkUtf8.Length);
                                                }
                                                xmlDoc.LoadXml(stringaXml);
                                            }

                                            // Controlli aggiuntivi fattura elettronica. Namespace e controllo lotto
                                            bool continuaElaborazioneXML = true;
                                            if (this.Template.DESCRIZIONE.ToUpper() == "FATTURA ELETTRONICA")
                                            {
                                                if (xmlDoc.DocumentElement.NamespaceURI.ToLower().Contains("http://www.fatturapa.gov.it/sdi/fatturapa/v1") ||
                        xmlDoc.DocumentElement.NamespaceURI.ToLower().Contains("http://ivaservizi.agenziaentrate.gov.it/docs/xsd/fatture/"))
                                                {
                                                    System.Xml.XmlNodeList fatture = xmlDoc.DocumentElement.SelectNodes("//*[name()='FatturaElettronicaBody']");

                                                    if (fatture.Count > 1)
                                                    {
                                                        continuaElaborazioneXML = false;
                                                        //ErrorManualAssociationNoFatturaLotto
                                                        string msg = "ErrorManualAssociationNoFatturaLotto";
                                                        ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + msg.Replace("'", @"\'") + "', 'warning', '');} else {parent.ajaxDialogModal('" + msg.Replace("'", @"\'") + "', 'warning', '');}", true);

                                                    }
                                                }
                                                else
                                                {
                                                    continuaElaborazioneXML = false;
                                                    //ErrorManualAssociationNoFattura
                                                    string msg = "ErrorManualAssociationNoFattura";
                                                    ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + msg.Replace("'", @"\'") + "', 'warning', '');} else {parent.ajaxDialogModal('" + msg.Replace("'", @"\'") + "', 'warning', '');}", true);

                                                }

                                            }
                                            if (continuaElaborazioneXML)
                                            {
                                                string notePerElaborazioneXML = "";
                                                foreach (OggettoCustom oggettoCustom in this.Template.ELENCO_OGGETTI)
                                                {
                                                    try
                                                    {

                                                        if (!string.IsNullOrEmpty(oggettoCustom.CAMPO_XML_ASSOC))
                                                        {
                                                            bool associaSecondo = false;
                                                            string[] mappings = oggettoCustom.CAMPO_XML_ASSOC.Split('<');
                                                            string[] mappingXml = mappings[0].Split('>');
                                                            string mappingElemento = String.Format("//*[name()='{0}']", mappingXml[0]);
                                                            for (int i = 1; i < mappingXml.Length; i++)
                                                            {
                                                                mappingElemento += String.Format("/*[name()='{0}']", mappingXml[i]);
                                                            }
                                                            string valore = "";
                                                            try
                                                            {
                                                                System.Xml.XmlNode node = xmlDoc.DocumentElement.SelectSingleNode(mappingElemento);
                                                                valore = node.InnerXml; // valore dell'xml estratto
                                                            }
                                                            catch (Exception nodo)
                                                            {
                                                                if (mappings.Length > 1 && !string.IsNullOrEmpty(mappings[1]))
                                                                    associaSecondo = true;
                                                                else if (!string.IsNullOrEmpty(oggettoCustom.OPZIONI_XML_ASSOC) && oggettoCustom.OPZIONI_XML_ASSOC.ToUpper().Contains("FATT_EL_FORNITORE_1"))
                                                                {
                                                                    valore = "";
                                                                }
                                                                else if (!string.IsNullOrEmpty(oggettoCustom.OPZIONI_XML_ASSOC) && oggettoCustom.OPZIONI_XML_ASSOC.ToUpper().Contains("FATT_EL_NOTE_VER_FIRMA_1"))
                                                                {
                                                                    //valore = "Verifica firma digitale effettuata da SDI, secondo le Specifiche tecniche operative delle Regole tecniche di cui all’allegato B del D.M. n. 55 del 3 aprile 2013 e ss.mm.ii.";
                                                                    valore = "";
                                                                }
                                                                else if (!string.IsNullOrEmpty(oggettoCustom.OPZIONI_XML_ASSOC) && oggettoCustom.OPZIONI_XML_ASSOC.ToUpper().Contains("FATT_EL_IDSDI"))
                                                                {
                                                                    valore = "";
                                                                }
                                                                else if (!string.IsNullOrEmpty(oggettoCustom.OPZIONI_XML_ASSOC) && oggettoCustom.OPZIONI_XML_ASSOC.ToUpper().Contains("FATT_EL_VERSIONE_1"))
                                                                {
                                                                    System.Xml.XmlElement root = xmlDoc.DocumentElement;
                                                                    valore = root.Attributes["versione"].Value;
                                                                }
                                                                else
                                                                {
                                                                    notePerElaborazioneXML += "XML " + oggettoCustom.DESCRIZIONE + ". ";
                                                                    //if (oggettoCustom.CAMPO_OBBLIGATORIO == "SI")
                                                                    //{
                                                                    //    throw new Exception("Elaborazione XML: Nodo XML mancante per il campo " + oggettoCustom.DESCRIZIONE);
                                                                    //}
                                                                }
                                                            }

                                                            if (!string.IsNullOrEmpty(valore) && !string.IsNullOrEmpty(oggettoCustom.OPZIONI_XML_ASSOC) && oggettoCustom.OPZIONI_XML_ASSOC.ToUpper().Contains("FATT_EL_CODFISC_1"))
                                                            {
                                                                if (!Char.IsLetter(valore[0]) || !Char.IsLetter(valore[1]) || !Char.IsLetter(valore[2]))
                                                                    valore = "";
                                                            }

                                                            if (associaSecondo)
                                                            {
                                                                int associaSecondoI = 1;
                                                                while (string.IsNullOrEmpty(valore) && mappings.Length > associaSecondoI && !string.IsNullOrEmpty(mappings[associaSecondoI]))
                                                                {
                                                                    mappingXml = mappings[associaSecondoI].Split('>');
                                                                    mappingElemento = String.Format("//*[name()='{0}']", mappingXml[0]);
                                                                    for (int i = 1; i < mappingXml.Length; i++)
                                                                    {
                                                                        mappingElemento += String.Format("/*[name()='{0}']", mappingXml[i]);
                                                                    }
                                                                    valore = "";
                                                                    try
                                                                    {
                                                                        System.Xml.XmlNode node = xmlDoc.DocumentElement.SelectSingleNode(mappingElemento);
                                                                        valore = node.InnerXml; // valore dell'xml estratto
                                                                    }
                                                                    catch (Exception nodo)
                                                                    {

                                                                    }
                                                                    associaSecondoI++;
                                                                }
                                                                if (string.IsNullOrEmpty(valore))
                                                                {
                                                                    notePerElaborazioneXML += "XML " + oggettoCustom.DESCRIZIONE + ". ";
                                                                    //if (oggettoCustom.CAMPO_OBBLIGATORIO == "SI")
                                                                    //{
                                                                    //    throw new Exception("Elaborazione XML: Nodo XML mancante per il campo " + oggettoCustom.DESCRIZIONE);
                                                                    //}

                                                                }
                                                            }

                                                            // Estrazione dei campi CDATA
                                                            if (valore.Contains("<![CDATA["))
                                                            {
                                                                valore = valore.Replace("<![CDATA[", "");
                                                                valore = valore.Replace("]]>", "");
                                                            }

                                                            oggettoCustom.VALORE_DATABASE = valore;

                                                            if (oggettoCustom.TIPO.DESCRIZIONE_TIPO == "CampoDiTesto")
                                                            {
                                                                if (!string.IsNullOrEmpty(oggettoCustom.OPZIONI_XML_ASSOC) && oggettoCustom.OPZIONI_XML_ASSOC.ToUpper().Contains("MULTINODE"))
                                                                {
                                                                    string separatore = oggettoCustom.OPZIONI_XML_ASSOC.Split('>')[1];

                                                                    System.Xml.XmlNodeList multinode = xmlDoc.SelectNodes(mappingElemento);
                                                                    if (multinode.Count > 1)
                                                                    {
                                                                        valore = "";
                                                                        foreach (System.Xml.XmlNode nodoX in multinode)
                                                                        {
                                                                            if (!valore.Contains(nodoX.InnerXml))
                                                                            {
                                                                                valore += nodoX.InnerXml + separatore;
                                                                            }
                                                                        }
                                                                    }
                                                                    if (valore.Length > 180) valore = valore.Substring(0, 180);

                                                                }
                                                                #region Fornitore fattura elettronica
                                                                if (!string.IsNullOrEmpty(oggettoCustom.OPZIONI_XML_ASSOC) && oggettoCustom.OPZIONI_XML_ASSOC.ToUpper().Contains("FATT_EL_FORNITORE_1"))
                                                                {
                                                                    if (string.IsNullOrEmpty(valore))
                                                                    {
                                                                        string mappingNome = "CedentePrestatore>DatiAnagrafici>Anagrafica>Nome";
                                                                        mappingXml = mappingNome.Split('>');
                                                                        mappingElemento = String.Format("//*[name()='{0}']", mappingXml[0]);
                                                                        for (int i = 1; i < mappingXml.Length; i++)
                                                                        {
                                                                            mappingElemento += String.Format("/*[name()='{0}']", mappingXml[i]);
                                                                        }
                                                                        valore = "";
                                                                        try
                                                                        {
                                                                            System.Xml.XmlNode node = xmlDoc.DocumentElement.SelectSingleNode(mappingElemento);
                                                                            valore = node.InnerXml; // valore dell'xml estratto
                                                                        }
                                                                        catch (Exception nodo)
                                                                        {
                                                                            notePerElaborazioneXML += "XML " + oggettoCustom.DESCRIZIONE + ". ";
                                                                            //if (oggettoCustom.CAMPO_OBBLIGATORIO == "SI")
                                                                            //{
                                                                            //    throw new Exception("Elaborazione XML: Nodo XML mancante per il campo " + oggettoCustom.DESCRIZIONE);
                                                                            //}
                                                                        }

                                                                        string mappingCognome = "CedentePrestatore>DatiAnagrafici>Anagrafica>Cognome";
                                                                        mappingXml = mappingCognome.Split('>');
                                                                        mappingElemento = String.Format("//*[name()='{0}']", mappingXml[0]);
                                                                        for (int i = 1; i < mappingXml.Length; i++)
                                                                        {
                                                                            mappingElemento += String.Format("/*[name()='{0}']", mappingXml[i]);
                                                                        }
                                                                        try
                                                                        {
                                                                            System.Xml.XmlNode node = xmlDoc.DocumentElement.SelectSingleNode(mappingElemento);
                                                                            valore += (" " + node.InnerXml); // valore dell'xml estratto
                                                                        }
                                                                        catch (Exception nodo)
                                                                        {
                                                                            notePerElaborazioneXML += "XML " + oggettoCustom.DESCRIZIONE + ". ";
                                                                            //if (oggettoCustom.CAMPO_OBBLIGATORIO == "SI")
                                                                            //{
                                                                            //    throw new Exception("Elaborazione XML: Nodo XML mancante per il campo " + oggettoCustom.DESCRIZIONE);
                                                                            //}
                                                                        }
                                                                    }
                                                                }
                                                                #endregion
                                                                oggettoCustom.VALORE_DATABASE = valore;
                                                            }
                                                            if (!string.IsNullOrEmpty(valore))
                                                            {
                                                                if (oggettoCustom.TIPO.DESCRIZIONE_TIPO == "MenuATendina" || oggettoCustom.TIPO.DESCRIZIONE_TIPO == "SelezioneEsclusiva")
                                                                {
                                                                    string[] valoriAssociati1 = oggettoCustom.OPZIONI_XML_ASSOC.Split('>');
                                                                    bool trovato = false;
                                                                    for (int i = 0; i < valoriAssociati1.Length; i++)
                                                                    {
                                                                        string[] valoriAssociati2 = valoriAssociati1[i].Split('<');
                                                                        if (valoriAssociati2[1] == valore)
                                                                        {
                                                                            oggettoCustom.VALORE_DATABASE = valoriAssociati2[0];
                                                                            trovato = true;
                                                                        }
                                                                    }
                                                                    if (!trovato)
                                                                    {
                                                                        notePerElaborazioneXML += "Errore " + oggettoCustom.DESCRIZIONE + ". " + valore + " non valido. ";
                                                                        //if (oggettoCustom.CAMPO_OBBLIGATORIO == "SI")
                                                                        //{
                                                                        //    throw new Exception("Elaborazione XML: Errore di associazione del campo " + oggettoCustom.DESCRIZIONE + ". Il valore " + valore + " non ha un campo associato configurato");
                                                                        //}
                                                                    }

                                                                }
                                                                else if (oggettoCustom.TIPO.DESCRIZIONE_TIPO == "Data")
                                                                {
                                                                    string conversione = oggettoCustom.OPZIONI_XML_ASSOC;
                                                                    try
                                                                    {

                                                                        //DateTime dtp = DateTime.ParseExact(valore, conversione, System.Globalization.CultureInfo.InvariantCulture);
                                                                        DateTime dtp = DateTime.ParseExact(valore.Substring(0, conversione.Length), conversione, System.Globalization.CultureInfo.InvariantCulture);

                                                                        oggettoCustom.VALORE_DATABASE = dtp.ToString("dd/MM/yyyy");
                                                                        if (!string.IsNullOrEmpty(oggettoCustom.FORMATO_ORA))
                                                                        {
                                                                            oggettoCustom.VALORE_DATABASE = dtp.ToString("dd/MM/yyyy " + oggettoCustom.FORMATO_ORA);
                                                                        }
                                                                    }
                                                                    catch (Exception exData)
                                                                    {
                                                                        oggettoCustom.VALORE_DATABASE = "";
                                                                        notePerElaborazioneXML += "Errore " + oggettoCustom.DESCRIZIONE + ". " + valore + " non valido. ";
                                                                        //if (oggettoCustom.CAMPO_OBBLIGATORIO == "SI")
                                                                        //{
                                                                        //    throw new Exception("Elaborazione XML: Errore di associazione del campo " + oggettoCustom.DESCRIZIONE + ". Il valore " + valore + " non è compatibile con la stringa di conversione " + conversione);
                                                                        //}
                                                                    }

                                                                }
                                                                else if (oggettoCustom.TIPO.DESCRIZIONE_TIPO == "Corrispondente")
                                                                {
                                                                    #region Da rifare con metodi da Frontend
                                                                    //DocsPaVO.rubrica.ParametriRicercaRubrica filtriRic = new DocsPaVO.rubrica.ParametriRicercaRubrica();
                                                                    ////filtriRic.doUo = true;
                                                                    ////filtriRic.doRuoli = true;
                                                                    //filtriRic.doRubricaComune = true;
                                                                    ////filtriRic.doUtenti = true;
                                                                    ////filtriRic.doRF = true;
                                                                    //filtriRic.tipoIE = DocsPaVO.addressbook.TipoUtente.ESTERNO;
                                                                    //filtriRic.caller = new DocsPaVO.rubrica.ParametriRicercaRubrica.CallerIdentity();
                                                                    //filtriRic.caller.IdRuolo = infoUtente.idGruppo;
                                                                    //filtriRic.caller.IdUtente = infoUtente.idPeople;
                                                                    //filtriRic.caller.filtroRegistroPerRicerca = string.Empty;
                                                                    //string tipoRicerca = oggettoCustom.OPZIONI_XML_ASSOC.Split('§')[0];
                                                                    ////if (tipoRicerca == "CODE")
                                                                    ////    filtriRic.codice = valore;
                                                                    //switch (tipoRicerca)
                                                                    //{
                                                                    //    case "CODE":
                                                                    //        filtriRic.codice = valore;
                                                                    //        break;
                                                                    //    case "DESCRIZIONE":
                                                                    //        filtriRic.descrizione = valore;
                                                                    //        break;
                                                                    //    case "PIVA":
                                                                    //        filtriRic.partitaIva = valore;
                                                                    //        break;
                                                                    //    case "CF":
                                                                    //        filtriRic.codiceFiscale = valore;
                                                                    //        break;
                                                                    //    case "MAIL":
                                                                    //        filtriRic.email = valore;
                                                                    //        break;
                                                                    //}
                                                                    //BusinessLogic.Rubrica.DPA3_RubricaSearchAgent corrSearcher = new BusinessLogic.Rubrica.DPA3_RubricaSearchAgent(infoUtente);

                                                                    //// DocsPaDB.Query_DocsPAWS.Rubrica query = new DocsPaDB.Query_DocsPAWS.Rubrica(infoUtente);
                                                                    //DocsPaVO.rubrica.SmistamentoRubrica smistamentoRubrica = new DocsPaVO.rubrica.SmistamentoRubrica();
                                                                    //ArrayList objElementiRubrica = corrSearcher.Search(filtriRic, smistamentoRubrica);
                                                                    //if (objElementiRubrica != null && objElementiRubrica.Count > 0)
                                                                    //{
                                                                    //    string sysId = "";

                                                                    //    if (!string.IsNullOrEmpty(((DocsPaVO.rubrica.ElementoRubrica)objElementiRubrica[0]).systemId))
                                                                    //    {
                                                                    //        sysId = ((DocsPaVO.rubrica.ElementoRubrica)objElementiRubrica[0]).systemId;
                                                                    //    }
                                                                    //    else
                                                                    //    {
                                                                    //        DocsPaVO.utente.Corrispondente corr = BusinessLogic.Utenti.UserManager.getCorrispondenteBySystemID(((DocsPaVO.rubrica.ElementoRubrica)objElementiRubrica[0]).codice);

                                                                    //        if ((corr == null) || (corr != null && string.IsNullOrEmpty(corr.systemId) && string.IsNullOrEmpty(corr.codiceRubrica)))
                                                                    //        {
                                                                    //            bool rubricaComuneAbilitata = BusinessLogic.RubricaComune.Configurazioni.GetConfigurazioni(infoUtente).GestioneAbilitata;
                                                                    //            if (rubricaComuneAbilitata)
                                                                    //            {
                                                                    //                corr = BusinessLogic.Utenti.UserManager.getCorrispondenteByCodRubricaRubricaComune(((DocsPaVO.rubrica.ElementoRubrica)objElementiRubrica[0]).codice, infoUtente);
                                                                    //            }

                                                                    //            if (corr != null)
                                                                    //                sysId = corr.systemId;
                                                                    //        }
                                                                    //    }
                                                                    //    oggettoCustom.VALORE_DATABASE = sysId;
                                                                    //}
                                                                    //else
                                                                    //{
                                                                    //    oggettoCustom.VALORE_DATABASE = string.Empty;
                                                                    //    //if (oggettoCustom.CAMPO_OBBLIGATORIO == "SI")
                                                                    //    //    throw new Exception("Elaborazione XML: Errore nell'associazione del campo " + oggettoCustom.DESCRIZIONE + ", Corrispondente non trovato con i dati presenti nello XML.");
                                                                    //    //else
                                                                    //        notePerElaborazioneXML += "Errore di associazione del campo " + oggettoCustom.DESCRIZIONE + ". Il valore è presente nel file XML ma non è stato possibile associarlo automaticamente ad un corrispondente.  L’eventuale integrazione avviene manualmente. ";
                                                                    //}
                                                                    #endregion
                                                                }
                                                                else if ((oggettoCustom.TIPO.DESCRIZIONE_TIPO).Equals("CasellaDiSelezione"))
                                                                {

                                                                }
                                                            }
                                                            else
                                                            {
                                                                notePerElaborazioneXML += oggettoCustom.DESCRIZIONE + ". ";
                                                            }

                                                        }
                                                    }
                                                    catch (Exception ex1end)
                                                    {
                                                        //if (e.Message.Equals("Corrispondente non trovato con i dati presenti nello XML."))
                                                        //{
                                                        //    throw new Exception("Corrispondente non trovato con i dati presenti nello XML.");
                                                        //}
                                                        //if (e.Message.Contains("Elaborazione XML:"))
                                                        //{
                                                        //    throw new Exception(e.Message);
                                                        //}
                                                        //else
                                                        //{
                                                        oggettoCustom.VALORE_DATABASE = string.Empty;
                                                        oggettoCustom.VALORI_SELEZIONATI = null;
                                                        //}
                                                    }

                                                    if (oggettoCustom.CAMPO_OBBLIGATORIO == "SI" && (string.IsNullOrEmpty(oggettoCustom.VALORE_DATABASE) || ((oggettoCustom.VALORI_SELEZIONATI == null || oggettoCustom.VALORI_SELEZIONATI.Length < 1) && oggettoCustom.TIPO.DESCRIZIONE_TIPO == "CasellaDiSelezione")))
                                                    {
                                                        //throw new PisException("FIELD_REQUIRED");
                                                        throw new Exception("Valore assente per il campo obbligatorio " + oggettoCustom.DESCRIZIONE + ". ");
                                                    }
                                                    // QUA DEVE FINIRE
                                                }


                                                for (int i = 0; i < this.Template.ELENCO_OGGETTI.Length; i++)
                                                {
                                                    if (this.Template.ELENCO_OGGETTI[i].DESCRIZIONE.ToUpper() == "NOTE RELATIVE ALL'ELABORAZIONE XML")
                                                    {
                                                        if (!string.IsNullOrEmpty(notePerElaborazioneXML))
                                                        {
                                                            notePerElaborazioneXML = "Mancanti: " + notePerElaborazioneXML;
                                                            if (notePerElaborazioneXML.Length > 220)
                                                            {
                                                                notePerElaborazioneXML = notePerElaborazioneXML.Substring(0, 220) + "...";
                                                            }
                                                            this.Template.ELENCO_OGGETTI[i].VALORE_DATABASE = notePerElaborazioneXML;
                                                        }
                                                        else
                                                            this.Template.ELENCO_OGGETTI[i].VALORE_DATABASE = "Elaborazione avvenuta con successo";
                                                    }
                                                }

                                                this.DocumentInWorking.template = this.Template;
                                                this.LoadTemplateDocument();
                                            }
                                        }
                                        catch (Exception x1ex)
                                        {
                                            if (x1ex.Message.Contains("Valore assente"))
                                            {
                                                this.Template = null;
                                                //DocumentDdlTypeDocument.SelectedIndex = -1;
                                                //this.DocumentImgHistoryTipology.Visible = false;
                                                //if (this.EnableStateDiagram)
                                                //{
                                                //    this.DocumentDdlStateDiagram.ClearSelection();
                                                //    this.PnlStateDiagram.Visible = false;
                                                //}
                                                //if (this.DocumentInWorking != null && string.IsNullOrEmpty(this.DocumentInWorking.systemId))
                                                //{
                                                //    this.DocumentInWorking.tipologiaAtto = null;
                                                //    this.DocumentInWorking.template = null;
                                                //    DocumentManager.setSelectedRecord(this.DocumentInWorking);
                                                //}
                                                //this.PnlTypeDocument.Controls.Clear();

                                                string msgDesc = "ErrorManualAssociationRequiredField";
                                                ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + utils.FormatJs(msgDesc) + "', 'warning', '', '" + utils.FormatJs(x1ex.Message) + "');} else {parent.ajaxDialogModal('" + utils.FormatJs(msgDesc) + "', 'warning', '', '" + utils.FormatJs(x1ex.Message) + "');}; ", true);
                                            }
                                            else
                                            {
                                                //ErrorManualAssociationProblem
                                                string msg = "ErrorManualAssociationProblem";
                                                ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + msg.Replace("'", @"\'") + "', 'warning', '');} else {parent.ajaxDialogModal('" + msg.Replace("'", @"\'") + "', 'warning', '');}", true);
                                            }
                                        }

                                    }
                                    else
                                    {
                                        //ErrorManualAssociationNoFileXML
                                        string msg = "ErrorManualAssociationNoFileXML";

                                        ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + msg.Replace("'", @"\'") + "', 'warning', '');} else {parent.ajaxDialogModal('" + msg.Replace("'", @"\'") + "', 'warning', '');}", true);

                                    }
                                }
                                else
                                {
                                    string msg = "ErrorManualAssociationNoFile";

                                    ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + msg.Replace("'", @"\'") + "', 'warning', '');} else {parent.ajaxDialogModal('" + msg.Replace("'", @"\'") + "', 'warning', '');}", true);

                                }
                            }
                            #endregion
                        }

                    }
                }
                else
                {
                    this.Template = null;
                    this.DocumentImgHistoryTipology.Visible = false;
                    if (this.EnableStateDiagram)
                    {
                        this.DocumentDdlStateDiagram.ClearSelection();
                        this.PnlStateDiagram.Visible = false;
                    }

                    if (this.DocumentInWorking != null && string.IsNullOrEmpty(this.DocumentInWorking.systemId))
                    {
                        this.DocumentInWorking.tipologiaAtto = null;
                        this.DocumentInWorking.template = null;
                        DocumentManager.setSelectedRecord(this.DocumentInWorking);
                    }
                }

                this.UpPnlTypeDocument.Update();
            }
            catch (System.Exception ex)
            {
                UIManager.AdministrationManager.DiagnosticError(ex);
                return;
            }
        }

        private void popolaComboBoxStatiSuccessivi(DocsPaWR.Stato stato, DocsPaWR.DiagrammaStato diagramma)
        {

            int selectedIndex = this.DocumentDdlStateDiagram.SelectedIndex;
            //Inizializzazione
            this.DocumentDdlStateDiagram.Items.Clear();
            ListItem itemEmpty = new ListItem();

            //Popola la combo con gli stati iniziali del diagramma
            if (stato == null)
            {
                this.LitActualStateDiagram.Text = string.Empty;
                for (int i = 0; i < diagramma.STATI.Length; i++)
                {
                    DocsPaWR.Stato st = (DocsPaWR.Stato)diagramma.STATI[i];
                    if (st.STATO_INIZIALE && DiagrammiManager.IsRuoloAssociatoStatoDia(diagramma.SYSTEM_ID.ToString(), this.Role.idGruppo, st.SYSTEM_ID.ToString()))
                    {
                        ListItem item = new ListItem(st.DESCRIZIONE, Convert.ToString(st.SYSTEM_ID));
                        this.DocumentDdlStateDiagram.Items.Add(item);
                        if (st.STATO_SISTEMA)
                            item.Enabled = false;
                    }
                }
                if (this.DocumentDdlStateDiagram.Items.Count == 2)
                    selectedIndex = 1;
            }
            //Popola la combo con i possibili stati, successivi a quello passato
            else
            {
                this.DocumentDdlStateDiagram.Items.Add(itemEmpty);
                for (int i = 0; i < diagramma.PASSI.Length; i++)
                {
                    DocsPaWR.Passo step = (DocsPaWR.Passo)diagramma.PASSI[i];
                    if (step.STATO_PADRE.SYSTEM_ID == stato.SYSTEM_ID)
                    {
                        for (int j = 0; j < step.SUCCESSIVI.Length; j++)
                        {
                            DocsPaWR.Stato st = (DocsPaWR.Stato)step.SUCCESSIVI[j];
                            if (DiagrammiManager.IsRuoloAssociatoStatoDia(diagramma.SYSTEM_ID.ToString(), this.Role.idGruppo, st.SYSTEM_ID.ToString()))
                            {
                                ListItem item = new ListItem(st.DESCRIZIONE, Convert.ToString(st.SYSTEM_ID));
                                if (st.STATO_SISTEMA)
                                    item.Enabled = false;
                                this.DocumentDdlStateDiagram.Items.Add(item);
                            }
                        }
                    }
                }
            }

            if (selectedIndex < this.DocumentDdlStateDiagram.Items.Count)
                this.DocumentDdlStateDiagram.SelectedIndex = selectedIndex;
        }











        protected void PopulateProfiledDocument()
        {
            this.PnlTypeDocument.Controls.Clear();
            this.inserisciComponenti(false);
        }


        private void inserisciComponenti(bool readOnly)
        {
            RemovePropertySearchCorrespondentIntExtWithDisabled();
            if (this.Template != null)
            {
                if (this.Template.OLD_OGG_CUSTOM.Length < 1)
                {
                    this.Template.OLD_OGG_CUSTOM = new StoricoProfilatiOldValue[this.Template.ELENCO_OGGETTI.Length];
                }

                //table = new Table();
                //table.Width = Unit.Percentage(100);
                List<AssDocFascRuoli> dirittiCampiRuolo = ProfilerDocManager.getDirittiCampiTipologiaDoc(this.Role.idGruppo, this.Template.SYSTEM_ID.ToString());

                for (int i = 0, index = 0; i < this.Template.ELENCO_OGGETTI.Length; i++)
                {
                    DocsPaWR.OggettoCustom oggettoCustom = (DocsPaWR.OggettoCustom)this.Template.ELENCO_OGGETTI[i];

                    ProfilerDocManager.addNoRightsCustomObject(dirittiCampiRuolo, oggettoCustom);

                    // INTEGRAZIONE PITRE-PARER
                    // se il documento è consolidato e il campo e soggetto a consolidamento devo renderlo non modificabile
                    if (this.DocumentInWorking.ConsolidationState != null)
                    {
                        readOnly = this.DocumentInWorking.ConsolidationState.State.Equals(DocumentConsolidationStateEnum.Step2) && (!string.IsNullOrEmpty(oggettoCustom.CONSOLIDAMENTO) && oggettoCustom.CONSOLIDAMENTO.Equals("1"));
                    }

                    switch (oggettoCustom.TIPO.DESCRIZIONE_TIPO)
                    {
                        case "CampoDiTesto":
                            this.inserisciCampoDiTesto(oggettoCustom, readOnly, index++, dirittiCampiRuolo);
                            break;
                        case "CasellaDiSelezione":
                            this.inserisciCasellaDiSelezione(oggettoCustom, readOnly, index++, dirittiCampiRuolo);
                            break;
                        case "MenuATendina":
                            this.inserisciMenuATendina(oggettoCustom, readOnly, index++, dirittiCampiRuolo);
                            break;
                        case "SelezioneEsclusiva":
                            this.inserisciSelezioneEsclusiva(oggettoCustom, readOnly, index++, dirittiCampiRuolo);
                            break;
                        case "Contatore":
                            this.inserisciContatore(oggettoCustom, readOnly, dirittiCampiRuolo);
                            break;
                        case "Data":
                            this.inserisciData(oggettoCustom, readOnly, index++, dirittiCampiRuolo);
                            break;
                        case "Corrispondente":
                            this.inserisciCorrispondente(oggettoCustom, readOnly, index++, dirittiCampiRuolo);
                            break;
                        case "Link":
                            this.inserisciLink(oggettoCustom, readOnly, dirittiCampiRuolo);
                            break;
                        case "ContatoreSottocontatore":
                            this.inserisciContatoreSottocontatore(oggettoCustom, readOnly, dirittiCampiRuolo);
                            break;
                        case "Separatore":
                            this.inserisciCampoSeparatore(oggettoCustom);
                            break;
                        case "OggettoEsterno":
                            this.inserisciOggettoEsterno(oggettoCustom, readOnly, dirittiCampiRuolo);
                            break;
                    }

                }

                //controlla che vi sia almeno un campo visibile per attivare il pulsante per lo storico
                int btn_HistoryIsVisible = 0;
                foreach (AssDocFascRuoli diritti in dirittiCampiRuolo)
                {
                    if (!diritti.VIS_OGG_CUSTOM.Equals("0"))
                        ++btn_HistoryIsVisible;
                }
            }
            // if (btn_HistoryIsVisible == 0)
            //  btn_HistoryField.Visible = false;
        }

        public void inserisciOggettoEsterno(DocsPaWR.OggettoCustom oggettoCustom, bool readOnly, List<AssDocFascRuoli> dirittiCampiRuolo)
        {
            if (string.IsNullOrEmpty(oggettoCustom.DESCRIZIONE))
            {
                return;
            }
            Label etichetta = new Label();
            etichetta.EnableViewState = true;

            if ("SI".Equals(oggettoCustom.ASTERISCO_OBBLIGATORIETA))
            {
                etichetta.Text = oggettoCustom.DESCRIZIONE + " *";
            }
            else
            {
                etichetta.Text = oggettoCustom.DESCRIZIONE;
            }
            etichetta.CssClass = "weight";
            UserControls.IntegrationAdapter intAd = (UserControls.IntegrationAdapter)this.LoadControl("../UserControls/IntegrationAdapter.ascx");
            intAd.ID = oggettoCustom.SYSTEM_ID.ToString();
            intAd.View = UserControls.IntegrationAdapterView.INSERT_MODIFY;
            intAd.ManualInsertCssClass = "txt_textdata_counter_disabled_red";
            intAd.EnableViewState = true;
            //Verifico i diritti del ruolo sul campo
            impostaDirittiRuoloSulCampo(etichetta, intAd, oggettoCustom, this.Template, dirittiCampiRuolo);
            if ((this.DocumentInWorking != null && !string.IsNullOrEmpty(this.DocumentInWorking.systemId) && !string.IsNullOrEmpty(this.DocumentInWorking.accessRights)) && ((this.DocumentInWorking.accessRights == "45" || readOnly)))
                intAd.View = UserControls.IntegrationAdapterView.READ_ONLY;
            intAd.ConfigurationValue = oggettoCustom.CONFIG_OBJ_EST;
            IntegrationAdapterValue value = new IntegrationAdapterValue(oggettoCustom.CODICE_DB, oggettoCustom.VALORE_DATABASE, oggettoCustom.MANUAL_INSERT);
            intAd.Value = value;

            Panel divRowDesc = new Panel();
            divRowDesc.CssClass = "row";
            divRowDesc.EnableViewState = true;

            Panel divColDesc = new Panel();
            divColDesc.CssClass = "col";
            divColDesc.EnableViewState = true;

            Panel divRowValue = new Panel();
            divRowValue.CssClass = "row";
            divRowValue.EnableViewState = true;

            Panel divColValue = new Panel();
            divColValue.CssClass = "col_full";
            divColValue.EnableViewState = true;

            if (etichetta.Visible)
            {
                HtmlGenericControl parDesc = new HtmlGenericControl("p");
                parDesc.Controls.Add(etichetta);
                parDesc.EnableViewState = true;
                divColDesc.Controls.Add(parDesc);
                divRowDesc.Controls.Add(divColDesc);
                this.PnlTypeDocument.Controls.Add(divRowDesc);
            }

            if (intAd.Visible)
            {
                divColValue.Controls.Add(intAd);
                divRowValue.Controls.Add(divColValue);
                this.PnlTypeDocument.Controls.Add(divRowValue);
            }

        }

        private void inserisciCampoDiTesto(DocsPaWR.OggettoCustom oggettoCustom, bool readOnly, int index, List<AssDocFascRuoli> dirittiCampiRuolo)
        {
            if (string.IsNullOrEmpty(oggettoCustom.DESCRIZIONE))
            {
                return;
            }

            DocsPaWR.StoricoProfilatiOldValue oldObjText = new StoricoProfilatiOldValue();

            Label etichettaCampoDiTesto = new Label();
            etichettaCampoDiTesto.EnableViewState = true;

            CustomTextArea txt_CampoDiTesto = new CustomTextArea();
            txt_CampoDiTesto.EnableViewState = true;

            if (oggettoCustom.MULTILINEA.Equals("SI"))
            {
                if (oggettoCustom.ASTERISCO_OBBLIGATORIETA.Equals("SI"))
                {
                    etichettaCampoDiTesto.Text = oggettoCustom.DESCRIZIONE + " *";
                }
                else
                {
                    etichettaCampoDiTesto.Text = oggettoCustom.DESCRIZIONE;
                }
                etichettaCampoDiTesto.CssClass = "weight";

                txt_CampoDiTesto.CssClass = "txt_textarea";
                txt_CampoDiTesto.CssClassReadOnly = "txt_textarea_disabled";

                if (string.IsNullOrEmpty(oggettoCustom.NUMERO_DI_LINEE))
                {
                    txt_CampoDiTesto.Height = 55;
                }
                else
                {
                    txt_CampoDiTesto.Rows = Convert.ToInt32(oggettoCustom.NUMERO_DI_LINEE);
                }

                if (string.IsNullOrEmpty(oggettoCustom.NUMERO_DI_CARATTERI))
                {
                    txt_CampoDiTesto.MaxLength = 150;
                }
                else
                {
                    txt_CampoDiTesto.MaxLength = Convert.ToInt32(oggettoCustom.NUMERO_DI_CARATTERI);
                }

                txt_CampoDiTesto.ID = oggettoCustom.SYSTEM_ID.ToString();
                txt_CampoDiTesto.Text = oggettoCustom.VALORE_DATABASE;

                string tempTXT = oggettoCustom.VALORE_DATABASE;
                if (!string.IsNullOrEmpty(tempTXT))
                {
                    tempTXT = tempTXT.Replace("&amp;", "&");
                    tempTXT = tempTXT.Replace("&lt;", "<");
                    tempTXT = tempTXT.Replace("&gt;", ">");
                    txt_CampoDiTesto.Text = tempTXT;
                }

                txt_CampoDiTesto.TextMode = TextBoxMode.MultiLine;


            }
            else
            {
                if (oggettoCustom.ASTERISCO_OBBLIGATORIETA.Equals("SI"))
                {
                    etichettaCampoDiTesto.Text = oggettoCustom.DESCRIZIONE + " *";
                }
                else
                {
                    etichettaCampoDiTesto.Text = oggettoCustom.DESCRIZIONE;
                }
                etichettaCampoDiTesto.CssClass = "weight";

                if (!string.IsNullOrEmpty(oggettoCustom.NUMERO_DI_CARATTERI))
                {
                    //ATTENZIONE : La lunghezza della textBox non è speculare al numero massimo di
                    //caratteri che l'utente inserisce.
                    if (((Convert.ToInt32(oggettoCustom.NUMERO_DI_CARATTERI) * 6) <= 400))
                    {
                        txt_CampoDiTesto.Width = Convert.ToInt32(oggettoCustom.NUMERO_DI_CARATTERI) * 6;
                    }
                    txt_CampoDiTesto.MaxLength = Convert.ToInt32(oggettoCustom.NUMERO_DI_CARATTERI);
                }
                txt_CampoDiTesto.ID = oggettoCustom.SYSTEM_ID.ToString();
                txt_CampoDiTesto.Text = oggettoCustom.VALORE_DATABASE;

                string tempTXT = oggettoCustom.VALORE_DATABASE;
                if (!string.IsNullOrEmpty(tempTXT))
                {
                    tempTXT = tempTXT.Replace("&amp;", "&");
                    tempTXT = tempTXT.Replace("&lt;", "<");
                    tempTXT = tempTXT.Replace("&gt;", ">");
                    txt_CampoDiTesto.Text = tempTXT;
                }

                txt_CampoDiTesto.CssClass = "txt_input_full";
                txt_CampoDiTesto.CssClassReadOnly = "txt_input_full_disabled";
                txt_CampoDiTesto.TextMode = TextBoxMode.SingleLine;


            }

            Panel divRowDesc = new Panel();
            divRowDesc.CssClass = "row";
            divRowDesc.EnableViewState = true;

            Panel divColDesc = new Panel();
            divColDesc.CssClass = "col";
            divColDesc.EnableViewState = true;

            Panel divRowValue = new Panel();
            divRowValue.CssClass = "row";
            divRowValue.EnableViewState = true;

            Panel divColValue = new Panel();
            divColValue.CssClass = "col_full";
            divColValue.EnableViewState = true;


            //Verifico i diritti del ruolo sul campo
            this.impostaDirittiRuoloSulCampo(etichettaCampoDiTesto, txt_CampoDiTesto, oggettoCustom, this.Template, dirittiCampiRuolo);

            if (this.DocumentInWorking != null && !string.IsNullOrEmpty(this.DocumentInWorking.systemId) && (this.DocumentInWorking.accessRights == "45" || this.AbortDocument || !this.EnableEdit))
            {
                txt_CampoDiTesto.ReadOnly = true;
                if (this.DocumentInWorking != null && this.DocumentInWorking.isRiprodotto)
                {
                    txt_CampoDiTesto.Text = string.Empty;
                }
            }

            // INTEGRAZIONE PITRE-PARER
            // se il campo è soggetto a consolidamento lo rendo non modificabile
            if (readOnly)
                txt_CampoDiTesto.ReadOnly = true;


            //txt_CampoDiTesto.Attributes.Add("onClick", "window.document.getElementById('" + txt_CampoDiTesto.ClientID + "').focus();");
            if (this.Template.OLD_OGG_CUSTOM[index] == null)//se true bisogna valorizzare OLD_OGG_CUSTOM[index] con i dati da inserire nello storico per questo campo
            {
                //blocco storico profilazione campi di testo 
                //salvo il valore corrente del campo di testo in oldObjCustom.
                oldObjText.IDTemplate = this.Template.ID_TIPO_ATTO;
                oldObjText.ID_Doc_Fasc = this.DocumentInWorking.systemId;
                oldObjText.ID_Oggetto = oggettoCustom.SYSTEM_ID.ToString();
                oldObjText.Valore = oggettoCustom.VALORE_DATABASE;
                oldObjText.Tipo_Ogg_Custom = oggettoCustom.TIPO.DESCRIZIONE_TIPO;
                InfoUtente user = this.InfoUser;
                oldObjText.ID_People = user.idPeople;
                oldObjText.ID_Ruolo_In_UO = user.idCorrGlobali;
                this.Template.OLD_OGG_CUSTOM[index] = oldObjText;
            }

            if (etichettaCampoDiTesto.Visible)
            {
                HtmlGenericControl parDesc = new HtmlGenericControl("p");
                parDesc.Controls.Add(etichettaCampoDiTesto);
                parDesc.EnableViewState = true;
                divColDesc.Controls.Add(parDesc);
                divRowDesc.Controls.Add(divColDesc);
                this.PnlTypeDocument.Controls.Add(divRowDesc);
            }

            if (txt_CampoDiTesto.Visible)
            {
                divColValue.Controls.Add(txt_CampoDiTesto);
                divRowValue.Controls.Add(divColValue);
                this.PnlTypeDocument.Controls.Add(divRowValue);
            }




        }

        private void inserisciCasellaDiSelezione(DocsPaWR.OggettoCustom oggettoCustom, bool readOnly, int index, List<AssDocFascRuoli> dirittiCampiRuolo)
        {
            if (string.IsNullOrEmpty(oggettoCustom.DESCRIZIONE))
            {
                return;
            }
            DocsPaWR.StoricoProfilatiOldValue casellaSelOldObj = new StoricoProfilatiOldValue();
            Label etichettaCasellaSelezione = new Label();
            etichettaCasellaSelezione.EnableViewState = true;

            if (oggettoCustom.ASTERISCO_OBBLIGATORIETA.Equals("SI"))
            {
                etichettaCasellaSelezione.Text = oggettoCustom.DESCRIZIONE + " *";
            }
            else
            {
                etichettaCasellaSelezione.Text = oggettoCustom.DESCRIZIONE;
            }

            etichettaCasellaSelezione.Width = Unit.Percentage(100);
            etichettaCasellaSelezione.CssClass = "weight";

            CheckBoxList casellaSelezione = new CheckBoxList();
            casellaSelezione.EnableViewState = true;
            casellaSelezione.ID = oggettoCustom.SYSTEM_ID.ToString();
            int valoreDiDefault = -1;
            for (int i = 0; i < oggettoCustom.ELENCO_VALORI.Length; i++)
            {
                DocsPaWR.ValoreOggetto valoreElenco = ((ValoreOggetto)(oggettoCustom.ELENCO_VALORI[i]));
                if (i < oggettoCustom.VALORI_SELEZIONATI.Length)
                {
                    string valoreSelezionato = (string)(oggettoCustom.VALORI_SELEZIONATI[i]);
                    if (valoreElenco.ABILITATO == 1 || (valoreElenco.ABILITATO == 0 && !string.IsNullOrEmpty(valoreSelezionato)))
                    {
                        //Nel caso il valore è disabilitato ma selezionato lo rendo disponibile solo fino al salvataggio del documento 
                        if (valoreElenco.ABILITATO == 0 && !string.IsNullOrEmpty(valoreSelezionato))
                            valoreElenco.ABILITATO = 1;

                        casellaSelezione.Items.Add(new ListItem(valoreElenco.VALORE, valoreElenco.VALORE));
                        //Valore di default
                        if (valoreElenco.VALORE_DI_DEFAULT.Equals("SI"))
                        {
                            valoreDiDefault = i;
                        }
                    }
                }
            }

            if (oggettoCustom.ORIZZONTALE_VERTICALE.Equals("Orizzontale"))
            {
                casellaSelezione.RepeatDirection = RepeatDirection.Horizontal;
            }
            else
            {
                casellaSelezione.RepeatDirection = RepeatDirection.Vertical;
            }
            if (valoreDiDefault != -1)
            {
                casellaSelezione.SelectedIndex = valoreDiDefault;
            }

            if (oggettoCustom.VALORI_SELEZIONATI != null)
            {
                this.impostaSelezioneCaselleDiSelezione(oggettoCustom, casellaSelezione);
            }

            Panel divRowDesc = new Panel();
            divRowDesc.CssClass = "row";
            divRowDesc.EnableViewState = true;

            Panel divColDesc = new Panel();
            divColDesc.CssClass = "col";
            divColDesc.EnableViewState = true;

            HtmlGenericControl parDesc = new HtmlGenericControl("p");
            parDesc.Controls.Add(etichettaCasellaSelezione);
            parDesc.EnableViewState = true;



            Panel divRowValue = new Panel();
            divRowValue.CssClass = "row";
            divRowValue.EnableViewState = true;

            Panel divColValue = new Panel();
            divColValue.CssClass = "col_full";
            divColDesc.EnableViewState = true;



            //Verifico i diritti del ruolo sul campo
            this.impostaDirittiRuoloSulCampo(etichettaCasellaSelezione, casellaSelezione, oggettoCustom, this.Template, dirittiCampiRuolo);

            if (this.DocumentInWorking != null && !string.IsNullOrEmpty(this.DocumentInWorking.systemId) && this.DocumentInWorking.accessRights == "45")
            {
                casellaSelezione.Enabled = false;
            }

            if (etichettaCasellaSelezione.Visible)
            {
                divColDesc.Controls.Add(parDesc);
                divRowDesc.Controls.Add(divColDesc);
                this.PnlTypeDocument.Controls.Add(divRowDesc);
            }

            if (casellaSelezione.Visible)
            {

                divColValue.Controls.Add(casellaSelezione);
                divRowValue.Controls.Add(divColValue);

                this.PnlTypeDocument.Controls.Add(divRowValue);
            }

            if (this.Template.OLD_OGG_CUSTOM[index] == null) //se true bisogna valorizzare OLD_OGG_CUSTOM[index] con i dati da inserire nello storico per questo campo
            {
                //blocco storico profilazione casella di selezione 
                casellaSelOldObj.Tipo_Ogg_Custom = oggettoCustom.TIPO.DESCRIZIONE_TIPO;
                casellaSelOldObj.ID_Oggetto = oggettoCustom.SYSTEM_ID.ToString();
                //per questo oggetto faccio un merge dei valori selezionati e salvo la stringa nel db
                for (int x = 0; x < oggettoCustom.VALORI_SELEZIONATI.Length; x++)
                {
                    if (!string.IsNullOrEmpty(oggettoCustom.VALORI_SELEZIONATI[x]))
                        casellaSelOldObj.Valore += string.IsNullOrEmpty(casellaSelOldObj.Valore) ?
                            oggettoCustom.VALORI_SELEZIONATI[x] : "*#?" + oggettoCustom.VALORI_SELEZIONATI[x];
                }
                InfoUtente user = this.InfoUser;
                casellaSelOldObj.IDTemplate = this.Template.ID_TIPO_ATTO;
                casellaSelOldObj.ID_Doc_Fasc = this.DocumentInWorking.systemId;
                casellaSelOldObj.ID_People = user.idPeople;
                casellaSelOldObj.ID_Ruolo_In_UO = user.idCorrGlobali;
                this.Template.OLD_OGG_CUSTOM[index] = casellaSelOldObj;
            }

            // INTEGRAZIONE PITRE-PARER
            // se il campo è soggetto a consolidamento lo rendo non modificabile
            if (readOnly)
                casellaSelezione.Enabled = false;
        }

        private void inserisciMenuATendina(DocsPaWR.OggettoCustom oggettoCustom, bool readOnly, int index, List<AssDocFascRuoli> dirittiCampiRuolo)
        {
            if (string.IsNullOrEmpty(oggettoCustom.DESCRIZIONE))
            {
                return;
            }

            DocsPaWR.StoricoProfilatiOldValue menuOldObj = new StoricoProfilatiOldValue();
            Label etichettaMenuATendina = new Label();
            etichettaMenuATendina.EnableViewState = true;
            if (oggettoCustom.ASTERISCO_OBBLIGATORIETA.Equals("SI"))
            {
                etichettaMenuATendina.Text = oggettoCustom.DESCRIZIONE + " *";
            }
            else
            {
                etichettaMenuATendina.Text = oggettoCustom.DESCRIZIONE;
            }
            etichettaMenuATendina.CssClass = "weight";

            int maxLenght = 0;
            DropDownList menuATendina = new DropDownList();
            menuATendina.EnableViewState = true;
            menuATendina.ID = oggettoCustom.SYSTEM_ID.ToString();
            int valoreDiDefault = -1;
            for (int i = 0; i < oggettoCustom.ELENCO_VALORI.Length; i++)
            {
                DocsPaWR.ValoreOggetto valoreOggetto = ((DocsPaWR.ValoreOggetto)(oggettoCustom.ELENCO_VALORI[i]));
                //Valori disabilitati/abilitati
                if (valoreOggetto.ABILITATO == 1 || (valoreOggetto.ABILITATO == 0 && valoreOggetto.VALORE == oggettoCustom.VALORE_DATABASE))
                {
                    //Nel caso il valore è disabilitato ma selezionato lo rendo disponibile solo fino al salvataggio del documento 
                    if (valoreOggetto.ABILITATO == 0 && valoreOggetto.VALORE == oggettoCustom.VALORE_DATABASE)
                        valoreOggetto.ABILITATO = 1;

                    menuATendina.Items.Add(new ListItem(valoreOggetto.VALORE, valoreOggetto.VALORE));
                    //Valore di default
                    if (valoreOggetto.VALORE_DI_DEFAULT.Equals("SI"))
                    {
                        valoreDiDefault = i;
                    }

                    if (maxLenght < valoreOggetto.VALORE.Length)
                    {
                        maxLenght = valoreOggetto.VALORE.Length;
                    }
                }
            }
            menuATendina.CssClass = "chzn-select-deselect";
            string language = UIManager.UserManager.GetUserLanguage();
            menuATendina.Attributes.Add("data-placeholder", Utils.Languages.GetLabelFromCode("SelectProflierMenu", language));
            // INC000000501634
            // fisso un limite superiore alla dimensione della ddl
            // altrimenti a basse risoluzioni (e.g. 1024x768) è impossibile effettuare il reset del campo
            //menuATendina.Width = maxLenght + 250;
            int menuWidth = maxLenght + 250;
            if (menuWidth > 370)
                menuWidth = 370;
            menuATendina.Width = menuWidth;

            if (valoreDiDefault != -1)
            {
                menuATendina.SelectedIndex = valoreDiDefault;
            }
            if (!(valoreDiDefault != -1 && oggettoCustom.ASTERISCO_OBBLIGATORIETA.Equals("SI")))
            {
                menuATendina.Items.Insert(0, "");
            }
            if (!oggettoCustom.VALORE_DATABASE.Equals(""))
            {
                menuATendina.SelectedIndex = this.impostaSelezioneMenuATendina(oggettoCustom.VALORE_DATABASE, menuATendina);
            }

            Panel divRowDesc = new Panel();
            divRowDesc.CssClass = "row";
            divRowDesc.EnableViewState = true;

            Panel divColDesc = new Panel();
            divColDesc.CssClass = "col";

            HtmlGenericControl parDesc = new HtmlGenericControl("p");
            parDesc.Controls.Add(etichettaMenuATendina);
            parDesc.EnableViewState = true;



            Panel divRowValue = new Panel();
            divRowValue.CssClass = "row";
            divRowValue.EnableViewState = true;

            Panel divColValue = new Panel();
            divColValue.CssClass = "col_full";
            divColValue.EnableViewState = true;




            //Verifico i diritti del ruolo sul campo
            this.impostaDirittiRuoloSulCampo(etichettaMenuATendina, menuATendina, oggettoCustom, this.Template, dirittiCampiRuolo);

            if (etichettaMenuATendina.Visible)
            {
                divColDesc.Controls.Add(parDesc);
                divRowDesc.Controls.Add(divColDesc);
                this.PnlTypeDocument.Controls.Add(divRowDesc);
            }

            if (menuATendina.Visible)
            {
                divColValue.Controls.Add(menuATendina);
                divRowValue.Controls.Add(divColValue);
                this.PnlTypeDocument.Controls.Add(divRowValue);
            }

            if (this.DocumentInWorking != null && !string.IsNullOrEmpty(this.DocumentInWorking.systemId) && this.DocumentInWorking.accessRights == "45")
            {
                menuATendina.Enabled = false;
            }

            if (this.Template.OLD_OGG_CUSTOM[index] == null)//se true bisogna valorizzare OLD_OGG_CUSTOM[index] con i dati da inserire nello storico per questo campo
            {
                //blocco storico profilazione del campo menu di selezione 
                //salvo il valore corrente del campo menu di selezione in oldObjCustom.
                menuOldObj.Tipo_Ogg_Custom = oggettoCustom.TIPO.DESCRIZIONE_TIPO;
                menuOldObj.ID_Oggetto = oggettoCustom.SYSTEM_ID.ToString();
                menuOldObj.Valore = oggettoCustom.VALORE_DATABASE;
                InfoUtente user = this.InfoUser;
                menuOldObj.ID_People = user.idPeople;
                menuOldObj.ID_Ruolo_In_UO = user.idCorrGlobali;
                menuOldObj.IDTemplate = this.Template.ID_TIPO_ATTO;
                SchedaDocumento doc = this.DocumentInWorking;
                menuOldObj.ID_Doc_Fasc = doc.systemId;
                this.Template.OLD_OGG_CUSTOM[index] = menuOldObj;
            }

            // INTEGRAZIONE PITRE-PARER
            // se il campo è soggetto a consolidamento lo rendo non modificabile
            if (readOnly)
                menuATendina.Enabled = false;
        }

        private void inserisciSelezioneEsclusiva(DocsPaWR.OggettoCustom oggettoCustom, bool readOnly, int index, List<AssDocFascRuoli> dirittiCampiRuolo)
        {
            DocsPaWR.StoricoProfilatiOldValue selezEsclOldObj = new StoricoProfilatiOldValue();
            if (string.IsNullOrEmpty(oggettoCustom.DESCRIZIONE))
            {
                return;
            }
            Label etichettaSelezioneEsclusiva = new Label();
            etichettaSelezioneEsclusiva.EnableViewState = true;
            CustomImageButton cancella_selezioneEsclusiva = new CustomImageButton();
            string language = UIManager.UserManager.GetUserLanguage();
            cancella_selezioneEsclusiva.AlternateText = Utils.Languages.GetLabelFromCode("LinkDocFascBtn_Reset", language);
            cancella_selezioneEsclusiva.ToolTip = Utils.Languages.GetLabelFromCode("LinkDocFascBtn_Reset", language);
            cancella_selezioneEsclusiva.EnableViewState = true;

            if (oggettoCustom.ASTERISCO_OBBLIGATORIETA.Equals("SI"))
            {
                etichettaSelezioneEsclusiva.Text = oggettoCustom.DESCRIZIONE + " *";
            }
            else
            {
                etichettaSelezioneEsclusiva.Text = oggettoCustom.DESCRIZIONE;
            }

            cancella_selezioneEsclusiva.ID = "_" + oggettoCustom.SYSTEM_ID.ToString();
            cancella_selezioneEsclusiva.ImageUrl = "../Images/Icons/clean_field_custom.png";
            cancella_selezioneEsclusiva.OnMouseOutImage = "../Images/Icons/clean_field_custom.png";
            cancella_selezioneEsclusiva.OnMouseOverImage = "../Images/Icons/clean_field_custom_hover.png";
            cancella_selezioneEsclusiva.ImageUrlDisabled = "../Images/Icons/clean_field_custom_disabled.png";
            cancella_selezioneEsclusiva.CssClass = "clickable";
            cancella_selezioneEsclusiva.Click += cancella_selezioneEsclusiva_Click;
            etichettaSelezioneEsclusiva.CssClass = "weight";

            RadioButtonList selezioneEsclusiva = new RadioButtonList();
            selezioneEsclusiva.EnableViewState = true;
            selezioneEsclusiva.ID = oggettoCustom.SYSTEM_ID.ToString();
            int valoreDiDefault = -1;
            for (int i = 0; i < oggettoCustom.ELENCO_VALORI.Length; i++)
            {
                DocsPaWR.ValoreOggetto valoreOggetto = ((DocsPaWR.ValoreOggetto)(oggettoCustom.ELENCO_VALORI[i]));
                //Valori disabilitati/abilitati
                if (valoreOggetto.ABILITATO == 1 || (valoreOggetto.ABILITATO == 0 && valoreOggetto.VALORE == oggettoCustom.VALORE_DATABASE))
                {
                    //Nel caso il valore è disabilitato ma selezionato lo rendo disponibile solo fino al salvataggio del documento 
                    if (valoreOggetto.ABILITATO == 0 && valoreOggetto.VALORE == oggettoCustom.VALORE_DATABASE)
                        valoreOggetto.ABILITATO = 1;

                    selezioneEsclusiva.Items.Add(new ListItem(valoreOggetto.VALORE, valoreOggetto.VALORE));
                    //Valore di default
                    if (valoreOggetto.VALORE_DI_DEFAULT.Equals("SI"))
                    {
                        valoreDiDefault = i;
                    }
                }
            }

            if (oggettoCustom.ORIZZONTALE_VERTICALE.Equals("Orizzontale"))
            {
                selezioneEsclusiva.RepeatDirection = RepeatDirection.Horizontal;
            }
            else
            {
                selezioneEsclusiva.RepeatDirection = RepeatDirection.Vertical;
            }

            if ((this.DocumentInWorking != null && string.IsNullOrEmpty(DocumentInWorking.systemId)) || this.DocumentInWorking.template == null)
            {
                if (valoreDiDefault != -1)
                {
                    if (oggettoCustom.VALORE_DATABASE != "-1")
                    {
                        selezioneEsclusiva.SelectedIndex = valoreDiDefault;
                    }
                }
                else if (!string.IsNullOrEmpty(oggettoCustom.VALORE_DATABASE))//Nel caso di creazione di doc da task autotipizzo il doc con i campi pre-compilati
                {
                    selezioneEsclusiva.SelectedIndex = impostaSelezioneEsclusiva(oggettoCustom.VALORE_DATABASE, selezioneEsclusiva);
                }
            }
            else
            {
                selezioneEsclusiva.SelectedIndex = impostaSelezioneEsclusiva(oggettoCustom.VALORE_DATABASE, selezioneEsclusiva);
            }


            Panel divRowDesc = new Panel();
            divRowDesc.CssClass = "row";
            divRowDesc.EnableViewState = true;

            Panel divColDesc = new Panel();
            divColDesc.CssClass = "col";
            divColDesc.EnableViewState = true;

            Panel divColImage = new Panel();
            divColImage.CssClass = "col-right-no-margin";
            divColImage.EnableViewState = true;

            divColImage.Controls.Add(cancella_selezioneEsclusiva);

            HtmlGenericControl parDesc = new HtmlGenericControl("p");
            parDesc.Controls.Add(etichettaSelezioneEsclusiva);
            parDesc.EnableViewState = true;

            divColDesc.Controls.Add(parDesc);

            divRowDesc.Controls.Add(divColDesc);
            divRowDesc.Controls.Add(divColImage);


            Panel divRowValue = new Panel();
            divRowValue.CssClass = "row";
            divRowValue.EnableViewState = true;

            Panel divColValue = new Panel();
            divColValue.CssClass = "col_full";
            divColValue.EnableViewState = true;

            divColValue.Controls.Add(selezioneEsclusiva);
            divRowValue.Controls.Add(divColValue);



            //Verifico i diritti del ruolo sul campo
            this.impostaDirittiRuoloSelezioneEsclusiva(etichettaSelezioneEsclusiva, selezioneEsclusiva, cancella_selezioneEsclusiva, oggettoCustom, this.Template, dirittiCampiRuolo);

            if (etichettaSelezioneEsclusiva.Visible)
            {
                this.PnlTypeDocument.Controls.Add(divRowDesc);
            }

            if (selezioneEsclusiva.Visible)
            {
                this.PnlTypeDocument.Controls.Add(divRowValue);
            }

            if (this.DocumentInWorking != null && !string.IsNullOrEmpty(this.DocumentInWorking.systemId) && this.DocumentInWorking.accessRights == "45")
            {
                selezioneEsclusiva.Enabled = false;
            }

            if (this.Template.OLD_OGG_CUSTOM[index] == null) //se true bisogna valorizzare OLD_OGG_CUSTOM[index] con i dati da inserire nello storico per questo campo
            {
                //blocco storico profilazione del campo di selezione esclusiva 
                //salvo il valore corrente del campo di selezione esclusiva in oldObjCustom.
                selezEsclOldObj.IDTemplate = this.Template.ID_TIPO_ATTO;
                SchedaDocumento doc = this.DocumentInWorking;
                selezEsclOldObj.ID_Doc_Fasc = doc.systemId;
                selezEsclOldObj.ID_Oggetto = oggettoCustom.SYSTEM_ID.ToString();
                selezEsclOldObj.Tipo_Ogg_Custom = oggettoCustom.TIPO.DESCRIZIONE_TIPO;
                InfoUtente user = this.InfoUser;
                selezEsclOldObj.ID_People = user.idPeople;
                selezEsclOldObj.ID_Ruolo_In_UO = user.idCorrGlobali;
                selezEsclOldObj.Valore = oggettoCustom.VALORE_DATABASE;
                this.Template.OLD_OGG_CUSTOM[index] = selezEsclOldObj;
            }

            // INTEGRAZIONE PITRE-PARER
            // se il campo è soggetto a consolidamento lo rendo non modificabile
            if (readOnly)
            {
                cancella_selezioneEsclusiva.Visible = false;
                selezioneEsclusiva.Enabled = false;
            }
        }

        private void inserisciContatore(DocsPaWR.OggettoCustom oggettoCustom, bool readOnly, List<AssDocFascRuoli> dirittiCampiRuolo)
        {
            bool paneldll = false;
            bool contaDopo = false;

            if (string.IsNullOrEmpty(oggettoCustom.DESCRIZIONE))
                return;

            Panel divColCountAfter = new Panel();

            Label etichettaContatore = new Label();
            etichettaContatore.Text = oggettoCustom.DESCRIZIONE;
            etichettaContatore.CssClass = "weight";
            etichettaContatore.EnableViewState = true;

            Panel divRowDesc = new Panel();
            divRowDesc.CssClass = "row";
            divRowDesc.EnableViewState = true;

            Panel divColDesc = new Panel();
            divColDesc.CssClass = "col";
            divColDesc.EnableViewState = true;

            HtmlGenericControl parDesc = new HtmlGenericControl("p");
            parDesc.Controls.Add(etichettaContatore);
            parDesc.EnableViewState = true;

            divColDesc.Controls.Add(parDesc);
            divRowDesc.Controls.Add(divColDesc);

            //Le dropDownLsit delle AOO o RF e la checkbox per il contaDopo vanno considerati e visualizzati
            //solo nel caso di un contatore non valorizzato, altrimenti deve essere riporato solo il valore 
            //del contatore come da formato prescelto e in readOnly
            Label etichettaDDL = new Label();
            etichettaDDL.EnableViewState = true;
            etichettaDDL.Width = 50;
            DropDownList ddl = new DropDownList();
            ddl.EnableViewState = true;

            string language = UIManager.UserManager.GetUserLanguage();
            ddl.Attributes.Add("data-placeholder", Utils.Languages.GetLabelFromCode("SelectProflierMenu", language));

            Panel divRowDll = new Panel();
            divRowDll.CssClass = "row";
            divRowDll.EnableViewState = true;

            Panel divRowEtiDll = new Panel();
            divRowEtiDll.CssClass = "row";
            divRowEtiDll.EnableViewState = true;

            HtmlGenericControl parDll = new HtmlGenericControl("p");
            parDll.EnableViewState = true;

            if (string.IsNullOrEmpty(oggettoCustom.VALORE_DATABASE) || (this.DocumentInWorking != null && this.DocumentInWorking.isRiprodotto))
            {
                if (this.DocumentInWorking != null && this.DocumentInWorking.isRiprodotto)
                {
                    oggettoCustom.VALORE_DATABASE = string.Empty;
                    oggettoCustom.DATA_ANNULLAMENTO = string.Empty;
                    if (oggettoCustom.CONTA_DOPO == "1")
                    {
                        oggettoCustom.CONTA_DOPO = ProfilerDocManager.getOggettoById(oggettoCustom.SYSTEM_ID.ToString()).CONTA_DOPO;
                    }
                }

                Ruolo ruoloUtente = this.Role;
                Registro[] registriRfVisibili = UIManager.RegistryManager.GetListRegistriesAndRF(ruoloUtente.systemId, string.Empty, string.Empty);

                Panel divColDllEti = new Panel();
                divColDllEti.CssClass = "col";
                divColDllEti.EnableViewState = true;

                Panel divColDll = new Panel();
                divColDll.CssClass = "col";
                divColDll.EnableViewState = true;

                switch (oggettoCustom.TIPO_CONTATORE)
                {
                    case "T":
                        paneldll = true;
                        break;
                    case "A":
                        paneldll = true;
                        etichettaDDL.Text = "&nbsp;AOO&nbsp;";
                        etichettaDDL.CssClass = "weight";
                        ddl.ID = oggettoCustom.SYSTEM_ID.ToString() + "_menu";
                        ddl.CssClass = "chzn-select-deselect";
                        ddl.Width = 240;

                        //Distinguo se è un registro o un rf
                        for (int i = 0; i < registriRfVisibili.Length; i++)
                        {
                            ListItem item = new ListItem();
                            if (((Registro)registriRfVisibili[i]).chaRF == "0" && !((Registro)registriRfVisibili[i]).Sospeso)
                            {
                                item.Value = ((Registro)registriRfVisibili[i]).systemId;
                                item.Text = ((Registro)registriRfVisibili[i]).codRegistro;
                                ddl.Items.Add(item);
                            }
                        }
                        if (ddl.Items.Count > 1)
                        {
                            ListItem it = new ListItem();
                            it.Text = string.Empty;
                            it.Value = string.Empty;
                            ddl.Items.Add(it);
                            ddl.SelectedValue = string.Empty;
                        }
                        else
                        {
                            ddl.SelectedValue = oggettoCustom.ID_AOO_RF;
                        }
                        if (this.DocumentInWorking != null && !string.IsNullOrEmpty(this.DocumentInWorking.systemId) && this.DocumentInWorking.accessRights == "45")
                        {
                            ddl.Enabled = false;
                        }

                        parDll.Controls.Add(etichettaDDL);
                        divColDllEti.Controls.Add(parDll);
                        divRowEtiDll.Controls.Add(divColDllEti);

                        divColDll.Controls.Add(ddl);
                        divRowDll.Controls.Add(divColDll);

                        break;
                    case "R":
                        paneldll = true;
                        etichettaDDL.Text = "&nbsp;RF&nbsp;";
                        etichettaDDL.CssClass = "weight";
                        ddl.ID = oggettoCustom.SYSTEM_ID.ToString() + "_menu";
                        ddl.CssClass = "chzn-select-deselect";
                        ddl.Width = 240;

                        //Distinguo se è un registro o un rf
                        for (int i = 0; i < registriRfVisibili.Length; i++)
                        {
                            ListItem item = new ListItem();
                            if (((Registro)registriRfVisibili[i]).chaRF == "1" && ((Registro)registriRfVisibili[i]).rfDisabled == "0")
                            {
                                item.Value = ((Registro)registriRfVisibili[i]).systemId;
                                item.Text = ((Registro)registriRfVisibili[i]).codRegistro;
                                ddl.Items.Add(item);
                            }
                        }
                        if (ddl.Items.Count > 1)
                        {
                            ListItem it = new ListItem();
                            it.Value = string.Empty;
                            it.Text = string.Empty;
                            ddl.Items.Add(it);
                            ddl.SelectedValue = string.Empty;
                        }
                        else
                            ddl.SelectedValue = oggettoCustom.ID_AOO_RF;
                        if (this.DocumentInWorking != null && !string.IsNullOrEmpty(this.DocumentInWorking.systemId) && DocumentInWorking.accessRights == "45")
                        {
                            ddl.Enabled = false;
                        }

                        ddl.CssClass = "chzn-select-deselect";

                        parDll.Controls.Add(etichettaDDL);
                        divColDllEti.Controls.Add(parDll);
                        divRowEtiDll.Controls.Add(divColDllEti);

                        divColDll.Controls.Add(ddl);
                        divRowDll.Controls.Add(divColDll);
                        break;

                }
            }

            //Imposto il contatore in funzione del formato
            CustomTextArea contatore = new CustomTextArea();
            contatore.EnableViewState = true;
            contatore.ID = oggettoCustom.SYSTEM_ID.ToString();
            contatore.CssClass = "txt_textdata_counter";
            contatore.CssClassReadOnly = "txt_textdata_counter_disabled";

            DettaglioSegnatura dettaglioSegnaturaPermanente = this.DocumentInWorking?.DettaglioSegnatura;
            if ("1".Equals(dettaglioSegnaturaPermanente?.Segnato) && String.IsNullOrWhiteSpace(dettaglioSegnaturaPermanente.SegnaturaRepertorio)){
                contatore.Text = dettaglioSegnaturaPermanente?.SegnaturaProtocollo + dettaglioSegnaturaPermanente?.SegnaturaRepertorio;
            }
            else if (oggettoCustom.FORMATO_CONTATORE != "")
            {
                contatore.Text = oggettoCustom.FORMATO_CONTATORE;
                if (Session["templateRiproposto"] != null)
                {
                    contatore.Text = contatore.Text.Replace("ANNO", "");
                    contatore.Text = contatore.Text.Replace("YY", "");
                    contatore.Text = contatore.Text.Replace("CONTATORE", "");
                    contatore.Text = contatore.Text.Replace("RF", "");
                    contatore.Text = contatore.Text.Replace("AOO", "");
                    contatore.Text = contatore.Text.Replace("COD_AMM", "");
                    contatore.Text = contatore.Text.Replace("COD_UO", "");
                    contatore.Text = contatore.Text.Replace("gg/mm/aaaa hh:mm", "");
                    contatore.Text = contatore.Text.Replace("gg/mm/aaaa", "");
                    contatore.Text = contatore.Text.Replace("TIPOLOGIA", "");
                }
                else
                {
                    if (oggettoCustom.VALORE_DATABASE != null && oggettoCustom.VALORE_DATABASE != "")
                    {
                        //controllo se il contatore è custom in tal caso visualizzo anno accademico e non il semplice anno solare
                        if (!string.IsNullOrEmpty(oggettoCustom.ANNO_ACC))
                        {

                            contatore.Text = contatore.Text.Replace("ANNO", oggettoCustom.ANNO_ACC);
                            contatore.Text = contatore.Text.Replace("YY", oggettoCustom.ANNO_ACC.Substring(oggettoCustom.ANNO_ACC.Length - 2, 2));
                        }

                        //else if (!string.IsNullOrEmpty(oggettoCustom.DATA_FINE) && string.IsNullOrEmpty(oggettoCustom.ANNO_ACC))
                        //{
                        //    string AnnoAccademico = oggettoCustom.DATA_INIZIO.ToString().Substring(6, 4) + oggettoCustom.DATA_FINE.ToString().Substring(5, 5);
                        //    contatore.Text = contatore.Text.Replace("ANNO", AnnoAccademico);
                        //}
                        else
                        {
                            contatore.Text = contatore.Text.Replace("ANNO", oggettoCustom.ANNO);
                            contatore.Text = contatore.Text.Replace("YY", oggettoCustom.ANNO.Substring(oggettoCustom.ANNO.Length - 2, 2));
                        }

                        contatore.Text = contatore.Text.Replace("CONTATORE", oggettoCustom.VALORE_DATABASE);
                        string codiceAmministrazione = UserManager.getInfoAmmCorrente(UserManager.GetInfoUser().idAmministrazione).Codice;
                        contatore.Text = contatore.Text.Replace("COD_AMM", codiceAmministrazione);
                        contatore.Text = contatore.Text.Replace("COD_UO", oggettoCustom.CODICE_DB);
                        if (!string.IsNullOrEmpty(oggettoCustom.DATA_INSERIMENTO))
                        {
                            int fine = oggettoCustom.DATA_INSERIMENTO.LastIndexOf(".");
                            if (fine == -1)
                                fine = oggettoCustom.DATA_INSERIMENTO.LastIndexOf(":");
                            contatore.Text = contatore.Text.Replace("gg/mm/aaaa hh:mm", oggettoCustom.DATA_INSERIMENTO.Substring(0, fine));
                            contatore.Text = contatore.Text.Replace("gg/mm/aaaa", oggettoCustom.DATA_INSERIMENTO.Substring(0, 10));
                        }

                        if (!string.IsNullOrEmpty(oggettoCustom.ID_AOO_RF) && oggettoCustom.ID_AOO_RF != "0")
                        {
                            Registro reg = UserManager.getRegistroBySistemId(this, oggettoCustom.ID_AOO_RF);
                            if (reg != null)
                            {
                                contatore.Text = contatore.Text.Replace("RF", reg.codRegistro);
                                contatore.Text = contatore.Text.Replace("AOO", reg.codRegistro);
                            }
                        }
                        if (contatore.Text.ToUpper().Contains("VERSIONE"))
                        {
                            contatore.Text = UIManager.DocumentManager.getSegnaturaRepertorioNoHTML(this.DocumentInWorking.systemId, codiceAmministrazione);
                        }

                        if (this.DocumentInWorking.tipologiaAtto != null) 
                        {
                            contatore.Text = contatore.Text.Replace("TIPOLOGIA", this.DocumentInWorking.tipologiaAtto.descrizione);
                        }
                    }
                    else
                    {
                        contatore.Text = "";
                        //contatore.Text = contatore.Text.Replace("ANNO", "");
                        //contatore.Text = contatore.Text.Replace("CONTATORE", "");
                        //contatore.Text = contatore.Text.Replace("RF", "");
                        //contatore.Text = contatore.Text.Replace("AOO", "");
                        //contatore.Text = contatore.Text.Replace("COD_AMM", "");
                        //contatore.Text = contatore.Text.Replace("COD_UO", "");
                        //contatore.Text = contatore.Text.Replace("gg/mm/aaaa", "");
                    }
                }
            }
            else
            {
                contatore.Text = oggettoCustom.VALORE_DATABASE;
            }

            Panel divRowCounter = new Panel();
            divRowCounter.CssClass = "row";
            divRowCounter.EnableViewState = true;

            Panel divColCountCounter = new Panel();
            divColCountCounter.CssClass = "col";
            divColCountCounter.EnableViewState = true;

            CheckBox cbContaDopo = new CheckBox();
            cbContaDopo.EnableViewState = true;
            //Pulsante annulla
            CustomButton btn_annulla = new CustomButton();
            btn_annulla.EnableViewState = true;
            btn_annulla.ID = "btn_a_" + oggettoCustom.SYSTEM_ID.ToString();
            btn_annulla.Text = Utils.Languages.GetLabelFromCode("BtnAbortProflier", language);
            btn_annulla.Visible = false;
            btn_annulla.CssClass = "buttonAbort";
            btn_annulla.OnMouseOver = "buttonAbortHover";
            btn_annulla.CssClassDisabled = "buttonAbortDisable";

            Panel divColCountAbort = new Panel();
            divColCountAbort.CssClass = "col-right-no-margin-no-top";
            divColCountAbort.EnableViewState = true;


            if (!String.IsNullOrEmpty(this.DocumentInWorking.docNumber))
            {
                btn_annulla.Click += this.OnBtnCounterAbort_Click;
            }

            //Verifico i diritti del ruolo sul campo
            this.impostaDirittiRuoloContatore(etichettaContatore, contatore, cbContaDopo, etichettaDDL, ddl, oggettoCustom, this.Template, btn_annulla, dirittiCampiRuolo);


            if (etichettaContatore.Visible)
            {
                this.PnlTypeDocument.Controls.Add(divRowDesc);
            }

            contatore.ReadOnly = true;
            if (oggettoCustom != null && !String.IsNullOrEmpty(oggettoCustom.DATA_ANNULLAMENTO) && this.EnableRepertory)
            {
                contatore.Text += " -- Annullato il :" + oggettoCustom.DATA_ANNULLAMENTO;
                contatore.CssClassReadOnly = "txt_textdata_counter_disabled_red2";
                this.UpPnlTypeDocument.Update();
            }
            //contatore.Enabled = false;
            //Inserisco il cb per il conta dopo
            if (oggettoCustom.CONTA_DOPO == "1")
            {
                paneldll = true;
                cbContaDopo.ID = oggettoCustom.SYSTEM_ID.ToString() + "_contaDopo";
                cbContaDopo.Checked = oggettoCustom.CONTATORE_DA_FAR_SCATTARE;
                cbContaDopo.CssClass = "clickableRight";
                cbContaDopo.ToolTip = "Attiva / Disattiva incremento del contatore al salvataggio dei dati.";

                if ((!string.IsNullOrEmpty(oggettoCustom.VALORE_DATABASE) && this.DocumentInWorking != null && !string.IsNullOrEmpty(this.DocumentInWorking.systemId) && this.DocumentInWorking.accessRights == "45"))
                {
                    cbContaDopo.Checked = false;
                    cbContaDopo.Visible = false;
                    cbContaDopo.Enabled = false;
                }
                else
                {
                    contaDopo = true;
                }

                divColCountAfter.CssClass = "col";
                divColCountAfter.EnableViewState = true;
                divColCountAfter.Controls.Add(cbContaDopo);
                //divRowDll.Controls.Add(divColCountAfter);
            }


            divColCountCounter.Controls.Add(contatore);
            divRowCounter.Controls.Add(divColCountCounter);

            divColCountAbort.Controls.Add(btn_annulla);
            divRowCounter.Controls.Add(divColCountAbort);

            if (paneldll)
            {
                this.PnlTypeDocument.Controls.Add(divRowEtiDll);
                this.PnlTypeDocument.Controls.Add(divRowDll);
            }

            if (contaDopo)
            {
                divRowCounter.Controls.Add(divColCountAfter);
            }

            if (contatore.Visible)
            {
                this.PnlTypeDocument.Controls.Add(divRowCounter);
            }

            // INTEGRAZIONE PITRE-PARER
            // se il campo è soggetto a consolidamento lo rendo non modificabile
            if (readOnly)
            {

            }

        }

        protected void OnBtnCounterAbort_Click(object sender, EventArgs e)
        {
            try
            {
                string idOggetto = (((CustomButton)sender).ID);
                this.IdObjectCustom = idOggetto;
                ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "UpPnlTypeDocument", "ajaxModalPopupAbortCounter();", true);
            }
            catch (System.Exception ex)
            {
                UIManager.AdministrationManager.DiagnosticError(ex);
                return;
            }
        }

        private void inserisciData(DocsPaWR.OggettoCustom oggettoCustom, bool readOnly, int index, List<AssDocFascRuoli> dirittiCampiRuolo)
        {
            //Per il momento questo tipo di campo è stato implementato con tre semplici textBox
            //Sarebbe opportuno creare un oggetto personalizzato, che espone le stesse funzionalità
            //della textBox, ma che mi permette di gestire la data con i tre campi separati.
            DocsPaWR.StoricoProfilatiOldValue dataOldOb = new StoricoProfilatiOldValue();
            if (string.IsNullOrEmpty(oggettoCustom.DESCRIZIONE))
            {
                return;
            }
            Label etichettaData = new Label();
            etichettaData.EnableViewState = true;

            if (oggettoCustom.ASTERISCO_OBBLIGATORIETA.Equals("SI"))
            {
                etichettaData.Text = oggettoCustom.DESCRIZIONE + " *";
            }
            else
            {
                etichettaData.Text = oggettoCustom.DESCRIZIONE;
            }
            etichettaData.CssClass = "weight";

            UserControls.Calendar data = (UserControls.Calendar)this.LoadControl("../UserControls/Calendar.ascx");
            data.EnableViewState = true;
            data.ID = oggettoCustom.SYSTEM_ID.ToString();
            data.VisibleTimeMode = ProfilerDocManager.getVisibleTimeMode(oggettoCustom);
            data.SetEnableTimeMode();

            if (!string.IsNullOrEmpty(oggettoCustom.VALORE_DATABASE))
            {
                data.Text = oggettoCustom.VALORE_DATABASE;
            }

            //Verifico i diritti del ruolo sul campo
            this.impostaDirittiRuoloSulCampo(etichettaData, data, oggettoCustom, this.Template, dirittiCampiRuolo);

            if (this.DocumentInWorking != null && !string.IsNullOrEmpty(this.DocumentInWorking.systemId) && (this.DocumentInWorking.accessRights == "45" || this.AbortDocument || !this.EnableEdit))
            {
                data.ReadOnly = true;
            }

            if (data.ReadOnly && this.DocumentInWorking != null && this.DocumentInWorking.isRiprodotto)
            {
                data.Text = string.Empty;

            }
            if (this.Template.OLD_OGG_CUSTOM[index] == null) //se true bisogna valorizzare OLD_OGG_CUSTOM[index] con i dati da inserire nello storico per questo campo
            {
                //blocco storico profilazione campo data
                dataOldOb.IDTemplate = this.Template.ID_TIPO_ATTO;
                SchedaDocumento doc = this.DocumentInWorking;
                dataOldOb.ID_Doc_Fasc = doc.systemId;
                dataOldOb.ID_Oggetto = oggettoCustom.SYSTEM_ID.ToString();
                dataOldOb.Valore = oggettoCustom.VALORE_DATABASE;
                dataOldOb.Tipo_Ogg_Custom = oggettoCustom.TIPO.DESCRIZIONE_TIPO;
                InfoUtente user = this.InfoUser;
                dataOldOb.ID_People = user.idPeople;
                dataOldOb.ID_Ruolo_In_UO = user.idCorrGlobali;
                this.Template.OLD_OGG_CUSTOM[index] = dataOldOb;
            }

            Panel divRowDesc = new Panel();
            divRowDesc.CssClass = "row";
            divRowDesc.EnableViewState = true;

            Panel divColDesc = new Panel();
            divColDesc.CssClass = "col";
            divColDesc.EnableViewState = true;

            HtmlGenericControl parDesc = new HtmlGenericControl("p");
            parDesc.Controls.Add(etichettaData);
            parDesc.EnableViewState = true;

            divColDesc.Controls.Add(parDesc);
            divRowDesc.Controls.Add(divColDesc);

            if (etichettaData.Visible)
            {
                this.PnlTypeDocument.Controls.Add(divRowDesc);
            }

            Panel divRowValue = new Panel();
            divRowValue.CssClass = "row";
            divRowValue.EnableViewState = true;

            Panel divColValue = new Panel();
            divColValue.CssClass = "col";
            divColValue.EnableViewState = true;

            divColValue.Controls.Add(data);
            divRowValue.Controls.Add(divColValue);

            if (data.Visible)
            {
                this.PnlTypeDocument.Controls.Add(divRowValue);
            }

            // INTEGRAZIONE PITRE-PARER
            // se il campo è soggetto a consolidamento lo rendo non modificabile
            if (readOnly)
                data.ReadOnly = true;

            ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "refreshPicker", "DatePicker('" + UIManager.UserManager.GetLanguageData() + "');", true);
        }

        private void inserisciLink(DocsPaWR.OggettoCustom oggettoCustom, bool readOnly, List<AssDocFascRuoli> dirittiCampiRuolo)
        {
            if (string.IsNullOrEmpty(oggettoCustom.DESCRIZIONE))
            {
                return;
            }

            UserControls.LinkDocFasc link = (UserControls.LinkDocFasc)this.LoadControl("../UserControls/LinkDocFasc.ascx");
            link.EnableViewState = true;
            link.From = "D";
            link.ID = oggettoCustom.SYSTEM_ID.ToString();
            link.IsEsterno = (oggettoCustom.TIPO_LINK.Equals("ESTERNO"));
            link.IsFascicolo = ("FASCICOLO".Equals(oggettoCustom.TIPO_OBJ_LINK));

            if ("SI".Equals(oggettoCustom.ASTERISCO_OBBLIGATORIETA))
            {
                link.TxtEtiLinkDocOrFasc = oggettoCustom.DESCRIZIONE + " *";
            }
            else
            {
                link.TxtEtiLinkDocOrFasc = oggettoCustom.DESCRIZIONE;
            }
            //Verifico i diritti del ruolo sul campo
            this.impostaDirittiRuoloSulCampo(link.TxtEtiLinkDocOrFasc, link, oggettoCustom, this.Template, dirittiCampiRuolo);
            SchedaDocumento sd = DocumentManager.getSelectedRecord();
            string accessRights = sd.accessRights;
            if (!string.IsNullOrEmpty(this.DocumentInWorking.systemId) && (!string.IsNullOrEmpty(sd.accessRights) && (accessRights == "45" || readOnly)))
            {
                link.IsInsertModify = false;
            }

            //bool greyWithDocNum = "G".Equals(sd.tipoProto) && !string.IsNullOrEmpty(sd.docNumber);
            //if (!string.IsNullOrEmpty(this.DocumentInWorking.systemId) && (!string.IsNullOrEmpty(sd.accessRights) && (accessRights == "45" || readOnly)))
            //{
            if (!string.IsNullOrEmpty(oggettoCustom.VALORE_DATABASE))
            {
                link.HideLink = true;
            }
            //}
            //else
            //{
            //    link.HideLink = false;
            //}

            link.Value = oggettoCustom.VALORE_DATABASE;

            //Nel caso di flusso RGS precompilo il link con il fascicolo del documento
            if (link.IsFascicolo && string.IsNullOrEmpty(oggettoCustom.VALORE_DATABASE) && !string.IsNullOrEmpty(this.Template.ID_CONTESTO_PROCEDURALE))
            { 
                SchedaDocumento schedaDoc = DocumentManager.getSelectedRecord();
                Fascicolo fasc = null; 
                if (this.Project != null && !string.IsNullOrEmpty(this.Project.systemID))
                {
                    fasc = this.Project;
                }
                else if (schedaDoc.fascicolato.Equals("1"))
                {
                    DocsPaWR.Fascicolo[] listaFascicoli = DocumentManager.GetFascicoliDaDocNoSecurity(this, schedaDoc.docNumber);
                    if (listaFascicoli != null && listaFascicoli.Count() > 0)
                    {
                        fasc = listaFascicoli[0];
                    }
                }
                if (fasc != null && fasc.folderSelezionato == null)
                {
                    link.hf_Id = fasc.systemID;
                    link.txt_NomeObj = fasc.descrizione;
                    link.txt_Maschera = fasc.codice + " " + CutValue(fasc.descrizione);
                }
                else
                {
                    //link.hf_Id = this.Project.folderSelezionato.systemID;
                    //link.txt_NomeObj = this.Project.folderSelezionato.descrizione;
                    //link.txt_Maschera = this.Project.folderSelezionato.codicelivello + " " + CutValue(Project.descrizione);
                }
            }

            if (link.Visible)
            {
                this.PnlTypeDocument.Controls.Add(link);
            }

        }

        private void inserisciCampoSeparatore(DocsPaWR.OggettoCustom oggettoCustom)
        {
            if (string.IsNullOrEmpty(oggettoCustom.DESCRIZIONE))
            {
                return;
            }

            Label etichettaCampoSeparatore = new Label();
            etichettaCampoSeparatore.CssClass = "weight";
            etichettaCampoSeparatore.EnableViewState = true;
            etichettaCampoSeparatore.Text = oggettoCustom.DESCRIZIONE.ToUpper();

            Panel divRowDesc = new Panel();
            divRowDesc.CssClass = "row";
            divRowDesc.EnableViewState = true;

            Panel divColDesc = new Panel();
            divColDesc.CssClass = "col_full_line";
            divColDesc.EnableViewState = true;

            HtmlGenericControl parDesc = new HtmlGenericControl("p");
            parDesc.Controls.Add(etichettaCampoSeparatore);
            parDesc.EnableViewState = true;

            divColDesc.Controls.Add(parDesc);
            divRowDesc.Controls.Add(divColDesc);

            if (etichettaCampoSeparatore.Visible)
            {
                this.PnlTypeDocument.Controls.Add(divRowDesc);
            }
        }

        private void inserisciContatoreSottocontatore(DocsPaWR.OggettoCustom oggettoCustom, bool readOnly, List<AssDocFascRuoli> dirittiCampiRuolo)
        {
            bool paneldll = false;

            if (string.IsNullOrEmpty(oggettoCustom.DESCRIZIONE))
                return;

            if (this.DocumentInWorking != null && this.DocumentInWorking.isRiprodotto)
            {
                oggettoCustom.VALORE_DATABASE = string.Empty;
                oggettoCustom.VALORE_SOTTOCONTATORE = string.Empty;
                oggettoCustom.DATA_INSERIMENTO = string.Empty;
            }

            Label etichettaContatoreSottocontatore = new Label();
            etichettaContatoreSottocontatore.EnableViewState = true;
            etichettaContatoreSottocontatore.Text = oggettoCustom.DESCRIZIONE;
            etichettaContatoreSottocontatore.CssClass = "weight";

            Panel divRowDesc = new Panel();
            divRowDesc.CssClass = "row";
            divRowDesc.EnableViewState = true;

            Panel divColDesc = new Panel();
            divColDesc.CssClass = "col";
            divColDesc.EnableViewState = true;

            HtmlGenericControl parDesc = new HtmlGenericControl("p");
            parDesc.Controls.Add(etichettaContatoreSottocontatore);
            parDesc.EnableViewState = true;

            divColDesc.Controls.Add(parDesc);
            divRowDesc.Controls.Add(divColDesc);

            //Le dropDownLsit delle AOO o RF e la checkbox per il contaDopo vanno considerati e visualizzati
            //solo nel caso di un contatore non valorizzato, altrimenti deve essere riporato solo il valore 
            //del contatore come da formato prescelto e in readOnly
            Label etichettaDDL = new Label();
            etichettaDDL.EnableViewState = true;
            DropDownList ddl = new DropDownList();
            ddl.EnableViewState = true;

            string language = UIManager.UserManager.GetUserLanguage();
            ddl.Attributes.Add("data-placeholder", Utils.Languages.GetLabelFromCode("SelectProflierMenu", language));

            Panel divRowDll = new Panel();
            divRowDll.CssClass = "row";
            divRowDll.EnableViewState = true;

            Panel divRowEtiDll = new Panel();
            divRowEtiDll.CssClass = "row";
            divRowEtiDll.EnableViewState = true;

            HtmlGenericControl parDll = new HtmlGenericControl("p");
            parDll.EnableViewState = true;

            if (string.IsNullOrEmpty(oggettoCustom.VALORE_DATABASE))
            {
                Ruolo ruoloUtente = this.Role;
                Registro[] registriRfVisibili = UIManager.RegistryManager.GetListRegistriesAndRF(ruoloUtente.systemId, string.Empty, string.Empty);

                Panel divColDllEti = new Panel();
                divColDllEti.CssClass = "col";
                divColDllEti.EnableViewState = true;

                Panel divColDll = new Panel();
                divColDll.CssClass = "col";
                divColDll.EnableViewState = true;

                switch (oggettoCustom.TIPO_CONTATORE)
                {
                    case "T":
                        break;
                    case "A":
                        paneldll = true;
                        etichettaDDL.Text = "&nbsp;AOO&nbsp;";
                        etichettaDDL.CssClass = "weight";
                        etichettaDDL.Width = 50;
                        ddl.ID = oggettoCustom.SYSTEM_ID.ToString() + "_menu";
                        ddl.CssClass = "chzn-select-deselect";
                        ddl.Width = 240;

                        //Distinguo se è un registro o un rf
                        for (int i = 0; i < registriRfVisibili.Length; i++)
                        {
                            ListItem item = new ListItem();
                            if (((Registro)registriRfVisibili[i]).chaRF == "0" && !((Registro)registriRfVisibili[i]).Sospeso)
                            {
                                item.Value = ((Registro)registriRfVisibili[i]).systemId;
                                item.Text = ((Registro)registriRfVisibili[i]).codRegistro;
                                ddl.Items.Add(item);
                            }
                        }
                        if (ddl.Items.Count > 1)
                        {
                            ListItem it = new ListItem();
                            it.Text = string.Empty;
                            it.Value = string.Empty;
                            ddl.Items.Add(it);
                            ddl.SelectedValue = string.Empty;
                        }
                        else
                            ddl.SelectedValue = oggettoCustom.ID_AOO_RF;
                        if (this.DocumentInWorking != null && !string.IsNullOrEmpty(this.DocumentInWorking.systemId) && this.DocumentInWorking.accessRights == "45")
                        {
                            ddl.Enabled = false;
                        }

                        parDll.Controls.Add(etichettaDDL);
                        divColDllEti.Controls.Add(parDll);
                        divRowEtiDll.Controls.Add(divColDllEti);

                        divColDll.Controls.Add(ddl);
                        divRowDll.Controls.Add(divColDll);
                        break;
                    case "R":
                        paneldll = true;
                        etichettaDDL.Text = "&nbsp;RF&nbsp;";
                        etichettaDDL.CssClass = "weight";
                        etichettaDDL.Width = 50;
                        ddl.ID = oggettoCustom.SYSTEM_ID.ToString() + "_menu";
                        ddl.CssClass = "chzn-select-deselect";
                        ddl.Width = 240;

                        //Distinguo se è un registro o un rf
                        for (int i = 0; i < registriRfVisibili.Length; i++)
                        {
                            ListItem item = new ListItem();
                            if (((Registro)registriRfVisibili[i]).chaRF == "1" && ((Registro)registriRfVisibili[i]).rfDisabled == "0")
                            {
                                item.Value = ((Registro)registriRfVisibili[i]).systemId;
                                item.Text = ((Registro)registriRfVisibili[i]).codRegistro;
                                ddl.Items.Add(item);
                            }
                        }
                        if (ddl.Items.Count > 1)
                        {
                            ListItem it = new ListItem();
                            it.Value = string.Empty;
                            it.Text = string.Empty;
                            ddl.Items.Add(it);
                            ddl.SelectedValue = string.Empty;
                        }
                        else
                        {
                            ddl.SelectedValue = oggettoCustom.ID_AOO_RF;
                        }
                        if (this.DocumentInWorking != null && !string.IsNullOrEmpty(this.DocumentInWorking.systemId) && this.DocumentInWorking.accessRights == "45")
                        {
                            ddl.Enabled = false;
                        }

                        parDll.Controls.Add(etichettaDDL);
                        divColDllEti.Controls.Add(parDll);
                        divRowEtiDll.Controls.Add(divColDllEti);

                        divColDll.Controls.Add(ddl);
                        divRowDll.Controls.Add(divColDll);
                        break;
                }
            }

            //Imposto il contatore in funzione del formato
            CustomTextArea contatore = new CustomTextArea();
            CustomTextArea sottocontatore = new CustomTextArea();
            CustomTextArea dataInserimentoSottocontatore = new CustomTextArea();
            contatore.EnableViewState = true;
            sottocontatore.EnableViewState = true;
            dataInserimentoSottocontatore.EnableViewState = true;
            //contatore.Attributes.Add("onClick", "window.document.getElementById('" + contatore.ClientID + "').focus();");
            //sottocontatore.Attributes.Add("onClick", "window.document.getElementById('" + sottocontatore.ClientID + "').focus();");
            //dataInserimentoSottocontatore.Attributes.Add("onClick", "window.document.getElementById('" + dataInserimentoSottocontatore.ClientID + "').focus();");
            contatore.ID = oggettoCustom.SYSTEM_ID.ToString();
            sottocontatore.ID = oggettoCustom.SYSTEM_ID.ToString() + "_sottocontatore";
            dataInserimentoSottocontatore.ID = oggettoCustom.SYSTEM_ID.ToString() + "_dataSottocontatore";
            if (!string.IsNullOrEmpty(oggettoCustom.FORMATO_CONTATORE))
            {
                contatore.Text = oggettoCustom.FORMATO_CONTATORE;
                sottocontatore.Text = oggettoCustom.FORMATO_CONTATORE;
                //if (Session["templateRiproposto"] != null)
                //{
                //    contatore.Text = contatore.Text.Replace("ANNO", "");
                //    contatore.Text = contatore.Text.Replace("CONTATORE", "");
                //    contatore.Text = contatore.Text.Replace("RF", "");
                //    contatore.Text = contatore.Text.Replace("AOO", "");

                //    sottocontatore.Text = sottocontatore.Text.Replace("ANNO", "");
                //    sottocontatore.Text = sottocontatore.Text.Replace("CONTATORE", "");
                //    sottocontatore.Text = sottocontatore.Text.Replace("RF", "");
                //    sottocontatore.Text = sottocontatore.Text.Replace("AOO", "");
                //}
                //else
                //{
                if (!string.IsNullOrEmpty(oggettoCustom.VALORE_DATABASE) && !string.IsNullOrEmpty(oggettoCustom.VALORE_SOTTOCONTATORE))
                {
                    contatore.Text = contatore.Text.Replace("ANNO", oggettoCustom.ANNO);
                    contatore.Text = contatore.Text.Replace("CONTATORE", oggettoCustom.VALORE_DATABASE);

                    sottocontatore.Text = sottocontatore.Text.Replace("ANNO", oggettoCustom.ANNO);
                    sottocontatore.Text = sottocontatore.Text.Replace("CONTATORE", oggettoCustom.VALORE_SOTTOCONTATORE);

                    if (!string.IsNullOrEmpty(oggettoCustom.ID_AOO_RF) && oggettoCustom.ID_AOO_RF != "0")
                    {
                        Registro reg = UserManager.getRegistroBySistemId(this, oggettoCustom.ID_AOO_RF);
                        if (reg != null)
                        {
                            contatore.Text = contatore.Text.Replace("RF", reg.codRegistro);
                            contatore.Text = contatore.Text.Replace("AOO", reg.codRegistro);

                            sottocontatore.Text = sottocontatore.Text.Replace("RF", reg.codRegistro);
                            sottocontatore.Text = sottocontatore.Text.Replace("AOO", reg.codRegistro);
                        }
                    }
                }
                else
                {
                    contatore.Text = contatore.Text.Replace("ANNO", "");
                    contatore.Text = contatore.Text.Replace("CONTATORE", "");
                    contatore.Text = contatore.Text.Replace("RF", "");
                    contatore.Text = contatore.Text.Replace("AOO", "");

                    sottocontatore.Text = sottocontatore.Text.Replace("ANNO", "");
                    sottocontatore.Text = sottocontatore.Text.Replace("CONTATORE", "");
                    sottocontatore.Text = sottocontatore.Text.Replace("RF", "");
                    sottocontatore.Text = sottocontatore.Text.Replace("AOO", "");
                }
                //}
            }
            else
            {
                contatore.Text = oggettoCustom.VALORE_DATABASE;
                sottocontatore.Text = oggettoCustom.VALORE_SOTTOCONTATORE;
            }

            Panel divRowCounter = new Panel();
            divRowCounter.CssClass = "row";
            divRowCounter.EnableViewState = true;

            Panel divColCountCounter = new Panel();
            divColCountCounter.CssClass = "col_full";
            divColCountCounter.EnableViewState = true;
            divColCountCounter.Controls.Add(contatore);
            divColCountCounter.Controls.Add(sottocontatore);
            divRowCounter.Controls.Add(divColCountCounter);

            if (!string.IsNullOrEmpty(oggettoCustom.DATA_INSERIMENTO))
            {
                dataInserimentoSottocontatore.Text = oggettoCustom.DATA_INSERIMENTO;

                Panel divColCountAbort = new Panel();
                divColCountAbort.CssClass = "col";
                divColCountAbort.EnableViewState = true;
                divColCountAbort.Controls.Add(dataInserimentoSottocontatore);
                divRowCounter.Controls.Add(divColCountAbort);
            }

            CheckBox cbContaDopo = new CheckBox();
            cbContaDopo.EnableViewState = true;

            //Verifico i diritti del ruolo sul campo
            this.impostaDirittiRuoloContatoreSottocontatore(etichettaContatoreSottocontatore, contatore, sottocontatore, dataInserimentoSottocontatore, cbContaDopo, etichettaDDL, ddl, oggettoCustom, this.Template, dirittiCampiRuolo);

            if (etichettaContatoreSottocontatore.Visible)
            {
                this.PnlTypeDocument.Controls.Add(divRowDesc);
            }

            contatore.ReadOnly = true;
            contatore.CssClass = "txt_input_half";
            contatore.CssClassReadOnly = "txt_input_half_disabled";

            sottocontatore.ReadOnly = true;
            sottocontatore.CssClass = "txt_input_half";
            sottocontatore.CssClassReadOnly = "txt_input_half_disabled";

            dataInserimentoSottocontatore.ReadOnly = true;
            dataInserimentoSottocontatore.CssClass = "txt_input_full";
            dataInserimentoSottocontatore.CssClassReadOnly = "txt_input_full_disabled";
            dataInserimentoSottocontatore.Visible = false;


            //Inserisco il cb per il conta dopo
            if (oggettoCustom.CONTA_DOPO == "1")
            {
                paneldll = true;
                cbContaDopo.ID = oggettoCustom.SYSTEM_ID.ToString() + "_contaDopo";
                cbContaDopo.Checked = oggettoCustom.CONTATORE_DA_FAR_SCATTARE;
                cbContaDopo.CssClass = "clickableRight";
                cbContaDopo.ToolTip = "Attiva / Disattiva incremento del contatore al salvataggio dei dati.";


                if ((!string.IsNullOrEmpty(oggettoCustom.VALORE_DATABASE)) || this.DocumentInWorking != null && !string.IsNullOrEmpty(this.DocumentInWorking.systemId) && this.DocumentInWorking.accessRights == "45")
                {
                    cbContaDopo.Checked = false;
                    cbContaDopo.Visible = false;
                    cbContaDopo.Enabled = false;
                }

                Panel divColCountAfter = new Panel();
                divColCountAfter.CssClass = "col";
                divColCountAfter.EnableViewState = true;
                divColCountAfter.Controls.Add(cbContaDopo);
                divRowCounter.Controls.Add(divColCountAfter);
            }

            if (paneldll)
            {
                this.PnlTypeDocument.Controls.Add(divRowEtiDll);
                this.PnlTypeDocument.Controls.Add(divRowDll);
            }

            if (contatore.Visible || sottocontatore.Visible)
            {
                this.PnlTypeDocument.Controls.Add(divRowCounter);
            }
        }

        private void inserisciCorrispondente(DocsPaWR.OggettoCustom oggettoCustom, bool readOnly, int index, List<AssDocFascRuoli> dirittiCampiRuolo)
        {
            if (string.IsNullOrEmpty(oggettoCustom.DESCRIZIONE))
            {
                return;
            }
            DocsPaWR.StoricoProfilatiOldValue corrOldOb = new StoricoProfilatiOldValue();

            UserControls.CorrespondentCustom corrispondente = (UserControls.CorrespondentCustom)this.LoadControl("../UserControls/CorrespondentCustom.ascx");
            corrispondente.EnableViewState = true;

            if (oggettoCustom.ASTERISCO_OBBLIGATORIETA.Equals("SI"))
            {
                corrispondente.TxtEtiCustomCorrespondent = oggettoCustom.DESCRIZIONE + " *";
            }
            else
            {
                corrispondente.TxtEtiCustomCorrespondent = oggettoCustom.DESCRIZIONE;
            }


            corrispondente.TypeCorrespondentCustom = oggettoCustom.TIPO_RICERCA_CORR;
            corrispondente.ID = oggettoCustom.SYSTEM_ID.ToString();

            //Da amministrazione è stato impostato un ruolo di default per questo campo.
            if (!string.IsNullOrEmpty(oggettoCustom.ID_RUOLO_DEFAULT) && oggettoCustom.ID_RUOLO_DEFAULT != "0")
            {
                DocsPaWR.Ruolo ruolo = RoleManager.getRuoloById(oggettoCustom.ID_RUOLO_DEFAULT);
                if (ruolo != null)
                {
                    corrispondente.IdCorrespondentCustom = ruolo.systemId;
                    corrispondente.TxtCodeCorrespondentCustom = ruolo.codiceRubrica;
                    corrispondente.TxtDescriptionCorrespondentCustom = ruolo.descrizione;
                }
                oggettoCustom.ID_RUOLO_DEFAULT = "0";
            }

            //Il campo è valorizzato.
            if (!string.IsNullOrEmpty(oggettoCustom.VALORE_DATABASE))
            {
                DocsPaWR.Corrispondente corr_1 = AddressBookManager.getCorrispondenteBySystemIDDisabled(oggettoCustom.VALORE_DATABASE);
                if (corr_1 != null)
                {
                    corrispondente.IdCorrespondentCustom = corr_1.systemId;
                    corrispondente.TxtCodeCorrespondentCustom = corr_1.codiceRubrica.ToString();
                    corrispondente.TxtDescriptionCorrespondentCustom = corr_1.descrizione.ToString();
                    oggettoCustom.VALORE_DATABASE = corr_1.systemId;
                }
            }

            //Verifico i diritti del ruolo sul campo
            this.impostaDirittiRuoloSulCampo(corrispondente.TxtEtiCustomCorrespondent, corrispondente, oggettoCustom, this.Template, dirittiCampiRuolo);

            corrispondente.CODICE_READ_ONLY = false;

            if (this.DocumentInWorking != null && !string.IsNullOrEmpty(this.DocumentInWorking.systemId) && this.DocumentInWorking.accessRights == "45")
            {
                corrispondente.CODICE_READ_ONLY = true;
                if (this.DocumentInWorking != null && this.DocumentInWorking.isRiprodotto)
                {
                    oggettoCustom.VALORE_DATABASE = string.Empty;
                    corrispondente.IdCorrespondentCustom = string.Empty;
                    corrispondente.TxtCodeCorrespondentCustom = string.Empty;
                    corrispondente.TxtDescriptionCorrespondentCustom = string.Empty;
                }
            }

            // INTEGRAZIONE PITRE-PARER
            // se il campo è soggetto a consolidamento lo rendo non modificabile
            if (readOnly)
            {
                corrispondente.sCodiceReadOnly = true;
                corrispondente.CODICE_READ_ONLY = true;
            }

            if (this.Template.OLD_OGG_CUSTOM[index] == null) //se true bisogna valorizzare OLD_OGG_CUSTOM[index] con i dati da inserire nello storico per questo campo
            {
                //blocco storico profilazione campo corrispondente
                corrOldOb.IDTemplate = this.Template.ID_TIPO_ATTO;
                SchedaDocumento doc = this.DocumentInWorking;
                corrOldOb.ID_Doc_Fasc = doc.systemId;
                corrOldOb.Tipo_Ogg_Custom = oggettoCustom.TIPO.DESCRIZIONE_TIPO;
                corrOldOb.ID_Oggetto = oggettoCustom.SYSTEM_ID.ToString();
                corrOldOb.Valore = corrispondente.TxtCodeCorrespondentCustom + "<br/>" + "----------" + "<br/>" + corrispondente.TxtDescriptionCorrespondentCustom;
                InfoUtente user = this.InfoUser;
                corrOldOb.ID_People = user.idPeople;
                corrOldOb.ID_Ruolo_In_UO = user.idCorrGlobali;
                this.Template.OLD_OGG_CUSTOM[index] = corrOldOb;
            }



            if (corrispondente.Visible)
            {
                this.PnlTypeDocument.Controls.Add(corrispondente);
            }



        }

        private void impostaDirittiRuoloContatore(Object etichettaContatore, Object campo, Object checkBox, Object etichettaDDL, Object ddl, DocsPaWR.OggettoCustom oggettoCustom, DocsPaWR.Templates template, Button btn_annulla, List<AssDocFascRuoli> dirittiCampiRuolo)
        {
            //DocsPaWR.AssDocFascRuoli assDocFascRuoli = ProfilazioneDocManager.getDirittiCampoTipologiaDoc(UserManager.getRuolo(this).idGruppo, template.SYSTEM_ID.ToString(), oggettoCustom.SYSTEM_ID.ToString(), this);

            foreach (DocsPaWR.AssDocFascRuoli assDocFascRuoli in dirittiCampiRuolo)
            {
                if (assDocFascRuoli.ID_OGGETTO_CUSTOM == oggettoCustom.SYSTEM_ID.ToString())
                {
                    if ((assDocFascRuoli != null && assDocFascRuoli.INS_MOD_OGG_CUSTOM == "0" && assDocFascRuoli.VIS_OGG_CUSTOM == "1") || template.IN_ESERCIZIO.ToUpper().Equals("NO"))
                    {
                        ((System.Web.UI.WebControls.CheckBox)checkBox).Enabled = false;
                        ((System.Web.UI.WebControls.DropDownList)ddl).Enabled = false;

                        //Se il contatore è solo visibile deve comunque scattare se :
                        //1. Contatore di tipologia senza conta dopo
                        //2. Contatore di AOO senza conta dopo e con una sola scelta
                        //3. Contatore di RF senza conta dopo e con una sola scelta
                        if (
                            (oggettoCustom.TIPO_CONTATORE == "T" && oggettoCustom.CONTA_DOPO == "0")
                            ||
                            (oggettoCustom.TIPO_CONTATORE == "A" && oggettoCustom.CONTA_DOPO == "0" && ((System.Web.UI.WebControls.DropDownList)ddl).Items.Count == 1)
                            ||
                           (oggettoCustom.TIPO_CONTATORE == "R" && oggettoCustom.CONTA_DOPO == "0" && ((System.Web.UI.WebControls.DropDownList)ddl).Items.Count == 1)
                            )
                        {
                            oggettoCustom.CONTA_DOPO = "0";
                            oggettoCustom.CONTATORE_DA_FAR_SCATTARE = true;
                        }
                        else
                        {
                            oggettoCustom.CONTA_DOPO = "1";
                            oggettoCustom.CONTATORE_DA_FAR_SCATTARE = false;
                        }
                    }
                    if (assDocFascRuoli != null && assDocFascRuoli.INS_MOD_OGG_CUSTOM == "0" && assDocFascRuoli.VIS_OGG_CUSTOM == "0")
                    {
                        ((System.Web.UI.WebControls.Label)etichettaContatore).Visible = false;
                        ((System.Web.UI.WebControls.Label)etichettaDDL).Visible = false;
                        ((CustomTextArea)campo).Visible = false;
                        ((System.Web.UI.WebControls.CheckBox)checkBox).Visible = false;
                        ((System.Web.UI.WebControls.DropDownList)ddl).Visible = false;

                        //Se il contatore non è nè visibile nè modificabile deve comunque scattare se :
                        //1. Contatore di tipologia senza conta dopo
                        //2. Contatore di AOO senza conta dopo e con una sola scelta
                        //3. Contatore di RF senza conta dopo e con una sola scelta
                        if (
                            (oggettoCustom.TIPO_CONTATORE == "T" && oggettoCustom.CONTA_DOPO == "0")
                            ||
                            (oggettoCustom.TIPO_CONTATORE == "A" && oggettoCustom.CONTA_DOPO == "0" && ((System.Web.UI.WebControls.DropDownList)ddl).Items.Count == 1)
                            ||
                           (oggettoCustom.TIPO_CONTATORE == "R" && oggettoCustom.CONTA_DOPO == "0" && ((System.Web.UI.WebControls.DropDownList)ddl).Items.Count == 1)
                            )
                        {
                            oggettoCustom.CONTA_DOPO = "0";
                            oggettoCustom.CONTATORE_DA_FAR_SCATTARE = true;
                        }
                        else
                        {
                            oggettoCustom.CONTA_DOPO = "1";
                            oggettoCustom.CONTATORE_DA_FAR_SCATTARE = false;
                        }
                    }
                    //Gestione del pulsante annulla
                    if (this.EnableRepertory && !this.AbortDocument && this.EnableEdit && assDocFascRuoli != null && assDocFascRuoli.ANNULLA_REPERTORIO == "1" && assDocFascRuoli.INS_MOD_OGG_CUSTOM == "1" &&
                        !String.IsNullOrEmpty(oggettoCustom.VALORE_DATABASE) && String.IsNullOrEmpty(oggettoCustom.DATA_ANNULLAMENTO) && oggettoCustom.REPERTORIO.Equals("1"))
                    {
                        RepertorioState state = RegisterRepertories.GetRepertorioState(oggettoCustom.SYSTEM_ID.ToString(), oggettoCustom.TIPO_CONTATORE, oggettoCustom.ID_AOO_RF);
                        btn_annulla.Visible = state == RepertorioState.O;
                    }
                    else
                    {
                        btn_annulla.Visible = false;
                    }
                }
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void cancella_selezioneEsclusiva_Click(object sender, EventArgs e)
        {
            try
            {
                string idOggetto = (((CustomImageButton)sender).ID).Substring(1);
                ((RadioButtonList)this.PnlTypeDocument.FindControl(idOggetto)).SelectedIndex = -1;
                ((RadioButtonList)this.PnlTypeDocument.FindControl(idOggetto)).EnableViewState = true;
                for (int i = 0; i < this.Template.ELENCO_OGGETTI.Length; i++)
                {
                    if (((DocsPaWR.OggettoCustom)this.Template.ELENCO_OGGETTI[i]).SYSTEM_ID.ToString().Equals(idOggetto))
                    {
                        ((DocsPaWR.OggettoCustom)this.Template.ELENCO_OGGETTI[i]).VALORE_DATABASE = "-1";
                    }
                }
                this.UpPnlTypeDocument.Update();
            }
            catch (System.Exception ex)
            {
                UIManager.AdministrationManager.DiagnosticError(ex);
                return;
            }
        }

        public void impostaDirittiRuoloSulCampo(Object etichetta, Object campo, DocsPaWR.OggettoCustom oggettoCustom, DocsPaWR.Templates template, List<AssDocFascRuoli> dirittiCampiRuolo)
        {
            //DocsPaWR.AssDocFascRuoli assDocFascRuoli = ProfilazioneDocManager.getDirittiCampoTipologiaDoc(UserManager.getRuolo(this).idGruppo, template.SYSTEM_ID.ToString(), oggettoCustom.SYSTEM_ID.ToString(), this);

            foreach (DocsPaWR.AssDocFascRuoli assDocFascRuoli in dirittiCampiRuolo)
            {
                if (assDocFascRuoli.ID_OGGETTO_CUSTOM == oggettoCustom.SYSTEM_ID.ToString())
                {
                    switch (oggettoCustom.TIPO.DESCRIZIONE_TIPO)
                    {
                        case "CampoDiTesto":
                            if ((assDocFascRuoli != null && assDocFascRuoli.INS_MOD_OGG_CUSTOM == "0" && assDocFascRuoli.VIS_OGG_CUSTOM == "1") || template.IN_ESERCIZIO.ToUpper().Equals("NO") || this.AbortDocument || !this.EnableEdit)
                            {
                                ((CustomTextArea)campo).ReadOnly = true;
                                oggettoCustom.CAMPO_OBBLIGATORIO = "NO";
                            }
                            if (assDocFascRuoli != null && assDocFascRuoli.INS_MOD_OGG_CUSTOM == "0" && assDocFascRuoli.VIS_OGG_CUSTOM == "0")
                            {
                                ((System.Web.UI.WebControls.Label)etichetta).Visible = false;
                                ((CustomTextArea)campo).Visible = false;
                                oggettoCustom.CAMPO_OBBLIGATORIO = "NO";
                            }
                            break;
                        case "CasellaDiSelezione":
                            if ((assDocFascRuoli != null && assDocFascRuoli.INS_MOD_OGG_CUSTOM == "0" && assDocFascRuoli.VIS_OGG_CUSTOM == "1") || template.IN_ESERCIZIO.ToUpper().Equals("NO") || this.AbortDocument || !this.EnableEdit)
                            {
                                ((System.Web.UI.WebControls.CheckBoxList)campo).Enabled = false;
                                oggettoCustom.CAMPO_OBBLIGATORIO = "NO";
                            }
                            if (assDocFascRuoli != null && assDocFascRuoli.INS_MOD_OGG_CUSTOM == "0" && assDocFascRuoli.VIS_OGG_CUSTOM == "0")
                            {
                                ((System.Web.UI.WebControls.Label)etichetta).Visible = false;
                                ((System.Web.UI.WebControls.CheckBoxList)campo).Visible = false;
                                oggettoCustom.CAMPO_OBBLIGATORIO = "NO";
                            }
                            break;
                        case "MenuATendina":
                            if ((assDocFascRuoli != null && assDocFascRuoli.INS_MOD_OGG_CUSTOM == "0" && assDocFascRuoli.VIS_OGG_CUSTOM == "1") || template.IN_ESERCIZIO.ToUpper().Equals("NO") || this.AbortDocument || !this.EnableEdit)
                            {
                                ((System.Web.UI.WebControls.DropDownList)campo).Enabled = false;
                                oggettoCustom.CAMPO_OBBLIGATORIO = "NO";
                            }
                            if (assDocFascRuoli != null && assDocFascRuoli.INS_MOD_OGG_CUSTOM == "0" && assDocFascRuoli.VIS_OGG_CUSTOM == "0")
                            {
                                ((System.Web.UI.WebControls.Label)etichetta).Visible = false;
                                ((System.Web.UI.WebControls.DropDownList)campo).Visible = false;
                                oggettoCustom.CAMPO_OBBLIGATORIO = "NO";
                            }
                            break;
                        case "SelezioneEsclusiva":
                            //Per la selezione esclusiva è stato implementato un metodo a parte perchè gli oggetti in uso sono più di due
                            break;
                        case "Contatore":
                            //Per il contatore è stato implementato un metodo a parte perchè gli oggetti in uso sono più di due
                            break;
                        case "Data":
                            if ((assDocFascRuoli != null && assDocFascRuoli.INS_MOD_OGG_CUSTOM == "0" && assDocFascRuoli.VIS_OGG_CUSTOM == "1") || template.IN_ESERCIZIO.ToUpper().Equals("NO") || this.AbortDocument || !this.EnableEdit)
                            {
                                ((UserControls.Calendar)campo).ReadOnly = true;
                                oggettoCustom.CAMPO_OBBLIGATORIO = "NO";
                            }
                            if (assDocFascRuoli != null && assDocFascRuoli.INS_MOD_OGG_CUSTOM == "0" && assDocFascRuoli.VIS_OGG_CUSTOM == "0")
                            {
                                ((System.Web.UI.WebControls.Label)etichetta).Visible = false;
                                ((UserControls.Calendar)campo).Visible = false;
                                ((UserControls.Calendar)campo).VisibleTimeMode = UserControls.Calendar.VisibleTimeModeEnum.Nothing;
                                oggettoCustom.CAMPO_OBBLIGATORIO = "NO";
                            }
                            break;
                        case "Corrispondente":

                            if ((assDocFascRuoli != null && assDocFascRuoli.INS_MOD_OGG_CUSTOM == "0" && assDocFascRuoli.VIS_OGG_CUSTOM == "1") || template.IN_ESERCIZIO.ToUpper().Equals("NO") || this.AbortDocument || !this.EnableEdit)
                            {
                                ((UserControls.CorrespondentCustom)campo).CODICE_READ_ONLY = true;
                                oggettoCustom.CAMPO_OBBLIGATORIO = "NO";
                            }
                            if (assDocFascRuoli != null && assDocFascRuoli.INS_MOD_OGG_CUSTOM == "0" && assDocFascRuoli.VIS_OGG_CUSTOM == "0")
                            {
                                ((UserControls.CorrespondentCustom)campo).Visible = false;
                                oggettoCustom.CAMPO_OBBLIGATORIO = "NO";
                            }


                            break;
                        case "Link":
                            if ((assDocFascRuoli != null && assDocFascRuoli.INS_MOD_OGG_CUSTOM == "0" && assDocFascRuoli.VIS_OGG_CUSTOM == "1") || template.IN_ESERCIZIO.ToUpper().Equals("NO") || this.AbortDocument || !this.EnableEdit)
                            {
                                ((UserControls.LinkDocFasc)campo).IsInsertModify = false;
                                oggettoCustom.CAMPO_OBBLIGATORIO = "NO";
                            }
                            else
                            {
                                ((UserControls.LinkDocFasc)campo).IsInsertModify = true;
                            }
                            if (assDocFascRuoli != null && assDocFascRuoli.INS_MOD_OGG_CUSTOM == "0" && assDocFascRuoli.VIS_OGG_CUSTOM == "0")
                            {
                                ((UserControls.LinkDocFasc)campo).Visible = false;
                                oggettoCustom.CAMPO_OBBLIGATORIO = "NO";
                            }
                            else
                            {
                                ((UserControls.LinkDocFasc)campo).IsInsertModify = true;
                            }
                            break;
                        case "OggettoEsterno":
                            if ((assDocFascRuoli != null && assDocFascRuoli.INS_MOD_OGG_CUSTOM == "0" && assDocFascRuoli.VIS_OGG_CUSTOM == "1") || template.IN_ESERCIZIO.ToUpper().Equals("NO") || this.AbortDocument || !this.EnableEdit)
                            {
                                ((UserControls.IntegrationAdapter)campo).View = UserControls.IntegrationAdapterView.READ_ONLY;
                                oggettoCustom.CAMPO_OBBLIGATORIO = "NO";
                            }
                            else
                            {
                                ((UserControls.IntegrationAdapter)campo).View = UserControls.IntegrationAdapterView.INSERT_MODIFY;
                            }
                            if (assDocFascRuoli != null && assDocFascRuoli.INS_MOD_OGG_CUSTOM == "0" && assDocFascRuoli.VIS_OGG_CUSTOM == "0")
                            {
                                ((System.Web.UI.WebControls.Label)etichetta).Visible = false;
                                ((UserControls.IntegrationAdapter)campo).Visible = false;
                                oggettoCustom.CAMPO_OBBLIGATORIO = "NO";
                            }
                            break;
                    }
                }
            }
        }

        public void impostaDirittiRuoloSelezioneEsclusiva(Object etichetta, Object campo, Object button, DocsPaWR.OggettoCustom oggettoCustom, DocsPaWR.Templates template, List<AssDocFascRuoli> dirittiCampiRuolo)
        {
            //DocsPaWR.AssDocFascRuoli assDocFascRuoli = ProfilazioneDocManager.getDirittiCampoTipologiaDoc(UserManager.getRuolo(this).idGruppo, template.SYSTEM_ID.ToString(), oggettoCustom.SYSTEM_ID.ToString(), this);

            foreach (DocsPaWR.AssDocFascRuoli assDocFascRuoli in dirittiCampiRuolo)
            {
                if (assDocFascRuoli.ID_OGGETTO_CUSTOM == oggettoCustom.SYSTEM_ID.ToString())
                {
                    if ((assDocFascRuoli != null && assDocFascRuoli.INS_MOD_OGG_CUSTOM == "0" && assDocFascRuoli.VIS_OGG_CUSTOM == "1") || template.IN_ESERCIZIO.ToUpper().Equals("NO") || this.AbortDocument || !this.EnableEdit)
                    {
                        ((System.Web.UI.WebControls.RadioButtonList)campo).Enabled = false;
                        ((CustomImageButton)button).Visible = false;
                        oggettoCustom.CAMPO_OBBLIGATORIO = "NO";
                    }
                    if (assDocFascRuoli != null && assDocFascRuoli.INS_MOD_OGG_CUSTOM == "0" && assDocFascRuoli.VIS_OGG_CUSTOM == "0")
                    {
                        ((System.Web.UI.WebControls.Label)etichetta).Visible = false;
                        ((System.Web.UI.WebControls.RadioButtonList)campo).Visible = false;
                        ((System.Web.UI.WebControls.ImageButton)button).Visible = false;
                        oggettoCustom.CAMPO_OBBLIGATORIO = "NO";
                    }
                }
            }
        }

        public void impostaDirittiRuoloContatoreSottocontatore(Object etichettaContatoreSottocontatore, Object contatore, Object sottocontatore, Object dataInserimentoSottocontatore, Object checkBox, Object etichettaDDL, Object ddl, DocsPaWR.OggettoCustom oggettoCustom, DocsPaWR.Templates template, List<AssDocFascRuoli> dirittiCampiRuolo)
        {
            foreach (DocsPaWR.AssDocFascRuoli assDocFascRuoli in dirittiCampiRuolo)
            {
                if (assDocFascRuoli.ID_OGGETTO_CUSTOM == oggettoCustom.SYSTEM_ID.ToString())
                {
                    if ((assDocFascRuoli != null && assDocFascRuoli.INS_MOD_OGG_CUSTOM == "0" && assDocFascRuoli.VIS_OGG_CUSTOM == "1") || template.IN_ESERCIZIO.ToUpper().Equals("NO"))
                    {
                        ((System.Web.UI.WebControls.CheckBox)checkBox).Enabled = false;
                        ((System.Web.UI.WebControls.DropDownList)ddl).Enabled = false;

                        //Se il contatore è solo visibile deve comunque scattare se :
                        //1. Contatore di tipologia senza conta dopo
                        //2. Contatore di AOO senza conta dopo e con una sola scelta
                        //3. Contatore di RF senza conta dopo e con una sola scelta
                        if (
                            (oggettoCustom.TIPO_CONTATORE == "T" && oggettoCustom.CONTA_DOPO == "0")
                            ||
                            (oggettoCustom.TIPO_CONTATORE == "A" && oggettoCustom.CONTA_DOPO == "0" && ((System.Web.UI.WebControls.DropDownList)ddl).Items.Count == 1)
                            ||
                           (oggettoCustom.TIPO_CONTATORE == "R" && oggettoCustom.CONTA_DOPO == "0" && ((System.Web.UI.WebControls.DropDownList)ddl).Items.Count == 1)
                            )
                        {
                            oggettoCustom.CONTA_DOPO = "0";
                            oggettoCustom.CONTATORE_DA_FAR_SCATTARE = true;
                        }
                        else
                        {
                            oggettoCustom.CONTA_DOPO = "1";
                            oggettoCustom.CONTATORE_DA_FAR_SCATTARE = false;
                        }
                    }
                    if (assDocFascRuoli != null && assDocFascRuoli.INS_MOD_OGG_CUSTOM == "0" && assDocFascRuoli.VIS_OGG_CUSTOM == "0")
                    {
                        ((System.Web.UI.WebControls.Label)etichettaContatoreSottocontatore).Visible = false;
                        ((System.Web.UI.WebControls.Label)etichettaDDL).Visible = false;
                        ((CustomTextArea)contatore).Visible = false;
                        ((CustomTextArea)sottocontatore).Visible = false;
                        ((CustomTextArea)dataInserimentoSottocontatore).Visible = false;
                        ((System.Web.UI.WebControls.CheckBox)checkBox).Visible = false;
                        ((System.Web.UI.WebControls.DropDownList)ddl).Visible = false;

                        //Se il contatore non è nè visibile nè modificabile deve comunque scattare se :
                        //1. Contatore di tipologia senza conta dopo
                        //2. Contatore di AOO senza conta dopo e con una sola scelta
                        //3. Contatore di RF senza conta dopo e con una sola scelta
                        if (
                            (oggettoCustom.TIPO_CONTATORE == "T" && oggettoCustom.CONTA_DOPO == "0")
                            ||
                            (oggettoCustom.TIPO_CONTATORE == "A" && oggettoCustom.CONTA_DOPO == "0" && ((System.Web.UI.WebControls.DropDownList)ddl).Items.Count == 1)
                            ||
                           (oggettoCustom.TIPO_CONTATORE == "R" && oggettoCustom.CONTA_DOPO == "0" && ((System.Web.UI.WebControls.DropDownList)ddl).Items.Count == 1)
                            )
                        {
                            oggettoCustom.CONTA_DOPO = "0";
                            oggettoCustom.CONTATORE_DA_FAR_SCATTARE = true;
                        }
                        else
                        {
                            oggettoCustom.CONTA_DOPO = "1";
                            oggettoCustom.CONTATORE_DA_FAR_SCATTARE = false;
                        }
                    }
                }
            }
        }

        private int impostaSelezioneEsclusiva(string valore, RadioButtonList rbl)
        {
            for (int i = 0; i < rbl.Items.Count; i++)
            {
                if (rbl.Items[i].Text == valore)
                    return i;
            }
            return -1;
        }

        private void impostaSelezioneCaselleDiSelezione(DocsPaWR.OggettoCustom objCustom, CheckBoxList cbl)
        {
            for (int i = 0; i < objCustom.VALORI_SELEZIONATI.Length; i++)
            {
                for (int j = 0; j < cbl.Items.Count; j++)
                {
                    if ((string)objCustom.VALORI_SELEZIONATI[i] == cbl.Items[j].Text)
                    {
                        cbl.Items[j].Selected = true;
                    }
                }
            }
        }

        private int impostaSelezioneMenuATendina(string valore, DropDownList ddl)
        {
            for (int i = 0; i < ddl.Items.Count; i++)
            {
                if (ddl.Items[i].Text == valore)
                    return i;
            }
            return 0;
        }

        protected void DocumentBtnUndo_Click(object sender, EventArgs e)
        {
            try
            {
                SchedaDocumento doc = this.DocumentInWorking;
                //Undo predisposed document
                if (doc != null && doc.protocollo != null && string.IsNullOrEmpty(doc.protocollo.segnatura))
                {
                    this.DocumentInWorking.privato = this.DocumentCheckPrivate.Checked ? "1" : "0";
                    string msgConfirm = "ConfirmAbortPredisposed";
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxConfirmModal", "if (parent.fra_main) {parent.fra_main.ajaxConfirmModal('" + msgConfirm.Replace("'", @"\'") + "', 'HiddenAbortPre', '');} else {parent.ajaxConfirmModal('" + msgConfirm.Replace("'", @"\'") + "', 'HiddenAbortPre', '');}", true);
                    this.UpAbortedAnnulled.Update();
                }
                else
                {
                    ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "UpPnlTypeDocument", "ajaxModalPopupAbortRecord();", true);
                }
            }
            catch (System.Exception ex)
            {
                UIManager.AdministrationManager.DiagnosticError(ex);
                return;
            }
        }

        protected void DocumentBtnSend_Click(object sender, EventArgs e)
        {
            try
            {
                if (this.DocumentInWorking != null &&
                    !string.IsNullOrEmpty(this.DocumentInWorking.systemId) &&
                    LibroFirmaManager.IsDocOrAllInLibroFirma(this.DocumentInWorking.systemId))
                {
                    string msgDesc = "WarningDocumentOrAttachIsInLfSend";
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + msgDesc.Replace("'", @"\'") + "', 'warning', '');} else {parent.ajaxDialogModal('" + msgDesc.Replace("'", @"\'") + "', 'warning', '');}", true);
                    return;
                }
                SpedizioneDocumento infoSpedizione = GetSpedizioneDocumento();
                if (!string.IsNullOrEmpty(Utils.InitConfigurationKeys.GetValue("0", DBKeys.FE_MAX_RECIPIENTS_TO_SEND.ToString())) && !Utils.InitConfigurationKeys.GetValue("0", DBKeys.FE_MAX_RECIPIENTS_TO_SEND.ToString()).Equals("0"))
                {
                    int maxRecipientsToSend = Convert.ToInt32(Utils.InitConfigurationKeys.GetValue("0", DBKeys.FE_MAX_RECIPIENTS_TO_SEND.ToString()));

                    int countDestInterop = (from c in infoSpedizione.DestinatariEsterni
                                            where c.Interoperante
                                            select c).ToList().Count();

                    if (countDestInterop >= maxRecipientsToSend)
                    {
                        //Messaggio che informa l'utente che è stato superato il numero massimo consentito dei destinatari a cui spedire e invia una mail al support
                        AsyncCallback callback = new AsyncCallback(SenderManager.CallBackSendMail);
                        SenderManager.SendMailSupportForDocumentDeliveryDelegate sendMail = new SenderManager.SendMailSupportForDocumentDeliveryDelegate(SenderManager.SendMailSupportForDocumentDelivery);
                        sendMail.BeginInvoke(DocumentManager.getSelectedRecord(), UIManager.UserManager.GetUserInSession(), RoleManager.GetRoleInSession(), callback, sendMail);
                        string msgDesc = "WarningDocumentMaxRecipientToSend";
                        ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + msgDesc.Replace("'", @"\'") + "', 'warning', '');} else {parent.ajaxDialogModal('" + msgDesc.Replace("'", @"\'") + "', 'warning', '');}", true);
                        return;
                    }
                }
                ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "UpPnlTypeDocument", "ajaxModalPopupsenderpopup();", true);
            }
            catch (System.Exception ex)
            {
                UIManager.AdministrationManager.DiagnosticError(ex);
                return;
            }
        }

        private SpedizioneDocumento GetSpedizioneDocumento()
        {
            SchedaDocumento doc = DocumentManager.getSelectedRecord();
            SpedizioneDocumento infoSpedizione;

            if (doc.spedizioneDocumento != null)
            {
                infoSpedizione = doc.spedizioneDocumento;
            }
            else
            {
                infoSpedizione = SenderManager.GetSpedizioneDocumento(DocumentManager.getSelectedRecord());
                doc.spedizioneDocumento = infoSpedizione;
                DocumentManager.setSelectedRecord(doc);
            }
            return infoSpedizione;
        }

        protected void SetAjaxAddressBook()
        {
            this.RapidSender.MinimumPrefixLength = this.AjaxAddressBookMinPrefixLenght;
            this.RapidRecipient.MinimumPrefixLength = this.AjaxAddressBookMinPrefixLenght;

            string dataUser = this.Role.systemId;
            dataUser = dataUser + "-" + this.Registry.systemId;

            string callType = string.Empty;

            if (this.RblTypeProtocol.SelectedValue.Equals("A"))
            {
                // Mittente su protocollo in ingresso
                callType = "CALLTYPE_PROTO_IN";
                RapidSender.ContextKey = dataUser + "-" + this.UserLog.idAmministrazione + "-" + callType;
            }
            else
            {

                if (this.RblTypeProtocol.SelectedValue.Equals("P"))
                {
                    // Mittente su protocollo in uscita
                    callType = "CALLTYPE_PROTO_OUT_MITT";
                    this.RapidSender.ContextKey = dataUser + "-" + this.UserLog.idAmministrazione + "-" + callType;

                    // Destinatario su protocollo in uscita
                    callType = "CALLTYPE_PROTO_OUT";
                    this.RapidRecipient.ContextKey = dataUser + "-" + this.UserLog.idAmministrazione + "-" + callType + "-" + UserManager.GetInfoUser().idPeople;
                }
                else
                {

                    if (this.RblTypeProtocol.SelectedValue.Equals("I"))
                    {
                        //Mittente su protocollo interno
                        callType = "CALLTYPE_PROTO_INT_MITT";
                        this.RapidSender.ContextKey = dataUser + "-" + this.UserLog.idAmministrazione + "-" + callType;

                        // Destinatario su protocollo interno
                        callType = "CALLTYPE_PROTO_INT_DEST";
                        this.RapidRecipient.ContextKey = dataUser + "-" + this.UserLog.idAmministrazione + "-" + callType + "-" + UserManager.GetInfoUser().idPeople;
                    }
                }
            }
        }

        /// <summary>
        /// In caso di allegato inserisce la segnatura(se protocollato) o il docnumber del documento principale
        /// </summary>
        protected void populateAttachment()
        {
            SchedaDocumento documentTab = DocumentManager.getSelectedRecord();
            string language = UIManager.UserManager.GetUserLanguage();
            string label = Utils.Languages.GetLabelFromCode("lblMainDoc", language);
            if (documentTab.documentoPrincipale != null && !string.IsNullOrEmpty(documentTab.documentoPrincipale.segnatura))
            {
                lblMainDoc.Text = "<b>" + label + "</b>: " + documentTab.documentoPrincipale.segnatura;
            }
            else
            {
                lblMainDoc.Text = "<b>" + label + "</b>: " + documentTab.documentoPrincipale.docNumber;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void imgMainDoc_Click(object sender, System.EventArgs e)
        {
            string idProfile = DocumentManager.getSelectedRecord().documentoPrincipale.idProfile;
            string docNumber = DocumentManager.getSelectedRecord().documentoPrincipale.docNumber;
            SchedaDocumento documentTabMainDoc = DocumentManager.getDocumentDetails(this, idProfile, docNumber);
            DocumentManager.setSelectedRecord(documentTabMainDoc);
            Response.Redirect("Document.aspx");
            Response.End();
        }

        protected void DocumentBtnSave_Click(object sender, EventArgs e)
        {
            bool result = false;
            try
            {
                if (this.IsDocumentInCheckOutState())
                {
                    this.SaveDocument();
                    result = true;
                }




                // logger.Info("BEGIN");
                // Se il documento è in ceckout, non si può effettuare il salvataggio
                    //if (this.IsDocumentInCheckOutState())
                    //ClientScript.RegisterStartupScript(
                    //    this.GetType(),
                    //    "NonSalvabile",
                    //    "alert('Non è possibile effettuare il salvataggio in quanto il documento principale oppure almeno un suo allegato risulta bloccato.');",
                    //    true);
                    // else
                    //this.SaveDocument();
                // La riga commentata fa comparire la popup solo quando viene messo il check su privato.
                //if (DocumentManager.IsDocPecPendente(this.DocumentInWorking.systemId) && this.DocumentCheckPrivate.Checked && (this.DocumentInWorking.protocollo != null && string.IsNullOrEmpty(this.DocumentInWorking.protocollo.segnatura) && DocumentInWorking.tipoProto == "A"))
                if (DocumentManager.IsDocPecPendente(this.DocumentInWorking.systemId) && (this.DocumentInWorking.protocollo != null && string.IsNullOrEmpty(this.DocumentInWorking.protocollo.segnatura) && DocumentInWorking.tipoProto == "A"))
                {
                    if (this.DocumentCheckPrivate.Checked)
                    {
                        string msgDesc = "WarningDocumentPendingPECSave";
                        ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + msgDesc.Replace("'", @"\'") + "', 'warning', '');} else {parent.ajaxDialogModal('" + msgDesc.Replace("'", @"\'") + "', 'warning', '');}", true);
                    }
                    this.DocumentCheckPrivate.Checked = false;
                    this.DocumentCheckPrivate.Enabled = true;
                    //this.DocumentBtnSave.Enabled = false;
                    this.DisabledDocumentCheckPrivate.Attributes.Remove("class");
                }


                // Alessandro Aiello 04/02/2019
                // nel caso di modifiche  (fascicolo o tipologia) resetto la segnatura così da ricalcolarla
                this.DocumentInWorking.DettaglioSegnatura = null;
            }
            catch (System.Exception ex)
            {
                UIManager.AdministrationManager.DiagnosticError(ex);
                result = false;
                return;
            }
            if (IsCosolidato)
            {
                HttpContext.Current.Session.Remove("IsCosolidato");
                Response.Redirect("Document.aspx");
            }
            if (result)
            {
                Response.Redirect("Document.aspx");
            }
            
        }

        private void SaveDocument()
        {
            this._logger.Info("START");
            SchedaDocumento newDoc = DocumentManager.CloneDocument(this.DocumentInWorking);
            List<string> errors = new List<string>();

            try
            {
                bool daInserireCollMSpedDoc = false;
                bool daUpdatareCollMSpedDoc = false;
                bool daCancellareCollMSpedDoc = false;
                int oldMezzo = 0;
                if (newDoc != null && newDoc.mezzoSpedizione == null)
                {
                    newDoc.mezzoSpedizione = "0";
                }

                bool enableUffRef = false;
                string message = string.Empty;
                bool daAggiornareUffRef = false;
                //if (enableUfficioRef != null && enableUfficioRef.Equals("1"))
                //{
                //    enableUffRef = true;
                //}

                //Verifico se si stà fascicolando all'interno di un fascicolo pubblico
                if (!ControlPublicFolderWarning())
                {
                    this.HiddenPublicFolderTypeOperation.Value = "SAVEDOCUMENT";
                    return;
                }
                else
                {
                    this.HiddenPublicFolder.Value = string.Empty;
                }

                string msg = this.CheckFields("S");

                msg += ProfilerDocManager.VerifyAndSetTipoDoc(this.InfoUser, ref newDoc);

                if (string.IsNullOrEmpty(msg))
                {
                    newDoc = this.SetEditDocument(newDoc);

                    if (this.RblTypeProtocol.Visible && this.RblTypeProtocol.SelectedValue.Equals("A"))
                    {
                        ((ProtocolloEntrata)newDoc.protocollo).mittente = this.Sender;
                        //((ProtocolloEntrata)newDoc.protocollo).daAggiornareMittente = true;
                    }

                    // Se il documento è in checkout non può in alcun modo essere salvato
                    if (newDoc.checkOutStatus != null)
                    {
                        //Response.Write("<script>alert('Impossibile salvare i dati del documento in quanto risulta bloccato');</script>");
                        return;
                    }

                    this.UpdateNote(newDoc);

                    //prima di salvare se il documento è personale deve essere
                    //trasformato in privato
                    if (!string.IsNullOrEmpty(this.DocumentInWorking.personale) && this.DocumentInWorking.personale.Equals("1") && this.DocumentCheckPrivate.Checked && !DocumentManager.IsDocPecPendente(DocumentInWorking.systemId))
                    {
                        newDoc.personale = "0";
                        newDoc.privato = "1";
                        newDoc.accessRights = "0";
                        //visibilità al ruolo
                        DocumentManager.cambiaDocumentoPersonalePrivato(newDoc);
                    }

                    if (newDoc != null && this.MeansSendingRequired)
                    {
                        if (newDoc.mezzoSpedizione.Equals("0") && !string.IsNullOrEmpty(this.DdlMeansSending.SelectedValue) && newDoc.mezzoSpedizione != this.DdlMeansSending.SelectedValue)
                        {
                            daInserireCollMSpedDoc = true;
                            newDoc.mezzoSpedizione = this.DdlMeansSending.SelectedValue;
                            newDoc.descMezzoSpedizione = this.DdlMeansSending.SelectedItem.Text;
                        }

                        if (!newDoc.mezzoSpedizione.Equals("0") && !string.IsNullOrEmpty(this.DdlMeansSending.SelectedValue) && newDoc.mezzoSpedizione != this.DdlMeansSending.SelectedValue)
                        {
                            daUpdatareCollMSpedDoc = true;
                            oldMezzo = Convert.ToInt32(newDoc.mezzoSpedizione);
                            newDoc.mezzoSpedizione = this.DdlMeansSending.SelectedValue;
                            newDoc.descMezzoSpedizione = this.DdlMeansSending.SelectedItem.Text;
                        }

                        if (!newDoc.mezzoSpedizione.Equals("0") && this.DdlMeansSending.SelectedIndex == 0)
                        {
                            daCancellareCollMSpedDoc = true;
                        }
                    }

                    //Per protocolli e predisposti in ingresso, controllo se al mezzo di spedizione del documento corrisponde un mittente
                    //avente popolati i campi neccessari per quel mezzo di spedizione (es. se è mail il mittente deve avere una mail)

                    if (!string.IsNullOrEmpty(newDoc.tipoProto) && newDoc.tipoProto.Equals("A") && IsEnableCheckMeansSending)
                    {
                        if (this.DdlMeansSending.Items[DdlMeansSending.SelectedIndex].Text.Equals("INTEROPERABILITA"))
                        {
                            Corrispondente sender = (newDoc.protocollo as ProtocolloEntrata).mittente;
                            if (string.IsNullOrEmpty(sender.codiceAOO) || string.IsNullOrEmpty(sender.codiceAmm) || string.IsNullOrEmpty(sender.email))
                            {
                                string msgDesc = "WarningDocumentSenderInterop";

                                ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + msgDesc.Replace("'", @"\'") + "', 'warning', '');} else {parent.ajaxDialogModal('" + msgDesc.Replace("'", @"\'") + "', 'warning', '');}", true);
                                return;
                            }
                        }

                        if (this.DdlMeansSending.Items[DdlMeansSending.SelectedIndex].Text.Equals("MAIL"))
                        {
                            Corrispondente sender = (newDoc.protocollo as ProtocolloEntrata).mittente;
                            if (string.IsNullOrEmpty(sender.email))
                            {
                                string msgDesc = "WarningDocumentSenderMail";

                                ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + msgDesc.Replace("'", @"\'") + "', 'warning', '');} else {parent.ajaxDialogModal('" + msgDesc.Replace("'", @"\'") + "', 'warning', '');}", true);
                                return;
                            }
                        }

                        if (this.DdlMeansSending.Items[DdlMeansSending.SelectedIndex].Text.Equals(SimplifiedInteroperabilityManager.ChannelDescription))
                        {
                            Corrispondente sender = (newDoc.protocollo as ProtocolloEntrata).mittente;
                            if (sender.canalePref == null || !sender.canalePref.typeId.ToUpper().Equals(SimplifiedInteroperabilityManager.SimplifiedInteroperabilityId))
                            {
                                string msgDesc = "WarningDocumentSenderInteroperabilityPitre";

                                ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + msgDesc.Replace("'", @"\'") + "', 'warning', '');} else {parent.ajaxDialogModal('" + msgDesc.Replace("'", @"\'") + "', 'warning', '');}", true);
                                return;
                            }
                        }
                    }

                    // controllo su obbligatorietà della fascicolazione e chiamata al web service
                    // che ci da informazione se il documento è già stato o meno fascicolato
                    if ((IsRapidClassificationRequired() && newDoc != null && !string.IsNullOrEmpty(newDoc.systemId) && newDoc.documentoPrincipale == null))
                    {
                        if (!DocumentManager.getSeDocFascicolato(newDoc) && string.IsNullOrEmpty(this.TxtCodeProject.Text))
                        {
                            //RegisterStartupScript("alert", "<script>alert('La fascicolazione rapida è obbligatoria !');</script>");
                            msg = "WarningDocumentRequestProject";
                            ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + msg.Replace("'", @"\'") + "', 'warning', '');} else {parent.ajaxDialogModal('" + msg.Replace("'", @"\'") + "', 'warning', '');}", true);
                            return;
                        }
                    }

                    //if (wws.isEnableRiferimentiMittente() && rbl_InOut_P.SelectedItem.Value == "In")
                    //{
                    //    schedaDocumento.riferimentoMittente = txt_riferimentoMittente.Text;
                    //}

                    DocsPaWR.Utente utente = this.UserLog;
                    newDoc.idPeople = utente.idPeople;

                    //PROFILAZIONE DINAMICA
                    if (!string.IsNullOrEmpty(this.DocumentDdlTypeDocument.SelectedValue))
                    {
                        newDoc.template = this.PopulateTemplate();
                        newDoc.tipologiaAtto = new TipologiaAtto();
                        newDoc.daAggiornareTipoAtto = true;
                        newDoc.tipologiaAtto.systemId = this.DocumentDdlTypeDocument.SelectedValue;
                        newDoc.tipologiaAtto.descrizione = this.DocumentDdlTypeDocument.SelectedItem.Text;

                        if (ProfilerDocManager.verificaCampiObbligatori(this.Template))
                        {
                            string msgDesc = "WarningDocumentRequestfields";

                            ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + msgDesc.Replace("'", @"\'") + "', 'warning', '');} else {parent.ajaxDialogModal('" + msgDesc.Replace("'", @"\'") + "', 'warning', '');}", true);

                            return;
                        }

                        string customMessaget = string.Empty;
                        string messag = ProfilerDocManager.verificaOkContatore(this.Template, out customMessaget);
                        if (messag != string.Empty)
                        {
                            if (!string.IsNullOrEmpty(customMessaget) && messag.Equals("CUSTOMERROR"))
                            {
                                string msgDesc = "WarningDocumentCustom";
                                string errFormt = Server.UrlEncode(customMessaget);
                                ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + utils.FormatJs(msgDesc) + "', 'warning', '', '" + utils.FormatJs(errFormt) + "');} else {parent.ajaxDialogModal('" + utils.FormatJs(msgDesc) + "', 'warning', '', '" + utils.FormatJs(errFormt) + "');}; ", true);
                            }
                            else
                            {
                                ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + messag.Replace("'", @"\'") + "', 'warning', '');} else {parent.ajaxDialogModal('" + messag.Replace("'", @"\'") + "', 'warning', '" + messag.Replace("'", @"\'") + "');}", true);
                            }
                            return;
                        }
                        //FINE PROFILAZIONE DINAMICA  	

                    }
                    else
                    {
                        newDoc.daAggiornareTipoAtto = false;
                    }

                    if (newDoc.tipoProto.Equals("A") && !string.IsNullOrEmpty(this.TxtProtocolSender.Text))
                    {
                        ((DocsPaWR.ProtocolloEntrata)newDoc.protocollo).descrizioneProtocolloMittente = this.TxtProtocolSender.Text;
                    }
                    else if (newDoc.tipoProto.Equals("A") && string.IsNullOrEmpty(this.TxtProtocolSender.Text))
                    {
                        ((DocsPaWR.ProtocolloEntrata)newDoc.protocollo).descrizioneProtocolloMittente = null;
                    }

                    if (newDoc.tipoProto.Equals("A") && !string.IsNullOrEmpty(this.TxtDateProtocol.Text))
                    {
                        ((DocsPaWR.ProtocolloEntrata)newDoc.protocollo).dataProtocolloMittente = this.TxtDateProtocol.Text;
                    }
                    else if (newDoc.tipoProto.Equals("A") && string.IsNullOrEmpty(this.TxtDateProtocol.Text))
                    {
                        ((DocsPaWR.ProtocolloEntrata)newDoc.protocollo).dataProtocolloMittente = null;
                    }

                    if (newDoc.tipoProto.Equals("A") && !string.IsNullOrEmpty(this.TxtArrivalDate.Text))
                    {
                        //newDoc.documenti[0].dataArrivo = this.TxtArrivalDate.Text + " " + this.TxtTimeOfArrival.Text;
                        newDoc.documenti[0].dataArrivo = Utils.dateformat.ConvertToDate(this.TxtArrivalDate.Text + " " + this.TxtTimeOfArrival.Text).ToString();
                    }
                    else if (newDoc.tipoProto.Equals("A") && string.IsNullOrEmpty(this.TxtArrivalDate.Text))
                    {
                        newDoc.documenti[0].dataArrivo = null;
                    }

                    if (this.EnableStateDiagram && this.PnlScadenza.Visible && !string.IsNullOrEmpty(this.DocumentStateDiagramDataValue.Text))
                    {
                        DateTime dataInserita = Convert.ToDateTime(this.DocumentStateDiagramDataValue.Text);
                        newDoc.dataScadenza = Utils.utils.formatDataDocsPa(dataInserita);
                    }

                    #region Popolamento typeOperational
                    //Popolamento oggetto TypeOperation per il successivo aggiornamento delle notifiche: verifica se è stata modificata
                    //l'oggetto e/o la tipologia del documento e/o tipo proto(in caso di creazione del predisposto) del documento; in tal caso vengono
                    //riportate sulle notifiche legate al fascicolo stesso, qualora esse esistano
                    List<TypeOperation> typeOperation = new List<TypeOperation>();
                    if (newDoc.oggetto.daAggiornare)
                    {
                        typeOperation.Add(TypeOperation.CHANGE_OBJECT);
                    }

                    if ((DocumentManager.getSelectedRecord().tipologiaAtto == null || newDoc.daAggiornareTipoAtto) && newDoc.tipologiaAtto != null && !string.IsNullOrEmpty(newDoc.tipologiaAtto.descrizione))
                    {
                        typeOperation.Add(TypeOperation.CHANGE_TYPE_DOC);
                    }

                    if (newDoc.predisponiProtocollazione)
                    {
                        typeOperation.Add(TypeOperation.CHANGE_TYPE_PROTO);
                        typeOperation.Add(TypeOperation.CHANGE_SENDER);
                    }
                    else if (newDoc.protocollo != null)
                    {
                        switch (newDoc.tipoProto)
                        {
                            case "P":
                                if ((newDoc.protocollo as ProtocolloUscita).daAggiornareMittente)
                                    typeOperation.Add(TypeOperation.CHANGE_SENDER);
                                break;
                            case "A":
                                if ((newDoc.protocollo as ProtocolloEntrata).daAggiornareMittente)
                                    typeOperation.Add(TypeOperation.CHANGE_SENDER);
                                break;
                            case "I":
                                if ((newDoc.protocollo as ProtocolloInterno).daAggiornareMittente)
                                    typeOperation.Add(TypeOperation.CHANGE_SENDER);
                                break;
                        }
                    }
                    #endregion

                    if (newDoc != null && newDoc.protocollo != null
                        && string.IsNullOrEmpty(newDoc.protocollo.numero)
                        && string.IsNullOrEmpty(newDoc.systemId)) //sto facendo salva di un predisposto, ma in Docspa non esiste questa funzione,
                    //quindi faccio prima adddocgrigia e poi salvo predisponendo il doc.
                    {
                        Protocollo proto = newDoc.protocollo;
                        newDoc.protocollo = null;
                        string tipoProto = newDoc.tipoProto;
                        newDoc.tipoProto = "G";
                        newDoc.predisponiProtocollazione = false;

                        newDoc = DocumentManager.creaDocumentoGrigio(this, newDoc);
                        newDoc.predisponiProtocollazione = true;
                        newDoc.tipoProto = tipoProto;
                        newDoc.protocollo = proto;
                        newDoc.registro = UIManager.RegistryManager.GetRegistryInSession();
                        newDoc = DocumentManager.salva(newDoc, enableUffRef, out daAggiornareUffRef);
                        if (newDoc != null && !string.IsNullOrEmpty(newDoc.systemId))
                        {
                            List<Navigation.NavigationObject> navigationList = Navigation.NavigationUtils.GetNavigationList();
                            Navigation.NavigationObject actualPage = new Navigation.NavigationObject();
                            actualPage.IdObject = newDoc.systemId;
                            actualPage.NamePage = Navigation.NavigationUtils.GetNamePage(Navigation.NavigationUtils.NamePage.DOCUMENT.ToString(), string.Empty);
                            actualPage.Link = Navigation.NavigationUtils.GetLink(Navigation.NavigationUtils.NamePage.DOCUMENT.ToString(), true, this.Page);
                            actualPage.CodePage = Navigation.NavigationUtils.NamePage.DOCUMENT.ToString();
                            actualPage.Page = "DOCUMENT.ASPX";
                            navigationList.Add(actualPage);
                            Navigation.NavigationUtils.SetNavigationList(navigationList);
                        }
                    }
                    else
                    {
                        InfoDocumento rispostaDocumento = DocumentManager.getDocumentDetails(this, newDoc.docNumber, newDoc.docNumber).rispostaDocumento;

                        newDoc = DocumentManager.salva(newDoc, enableUffRef, out daAggiornareUffRef);

                        if (newDoc.rispostaDocumento == null && rispostaDocumento != null) DocumentManager.scollegaDocumento(this, newDoc.docNumber);
                    }

                    #region Aggiornamento delle notifiche legate al documento

                    //effettuo il popolamento oggetto TypeOperation per il successivo aggiornamento delle notifiche: verifica se è stata modificata
                    //la descrizione o la tipologia del fascicolo; in tal caso vengono riportate sulle notifiche legate al fascicolo stesso, qualora esse esistano
                    if (newDoc != null)
                    {
                        if (typeOperation != null && typeOperation.Count > 0)
                        {
                            NotificationManager.ModifyNotificationDelegate modifyNotification = new NotificationManager.ModifyNotificationDelegate(NotificationManager.ModifyNotification);
                            modifyNotification.BeginInvoke(UserManager.GetInfoUser(), typeOperation.ToArray(), newDoc.systemId, NotificationManager.ListDomainObject.DOCUMENT, null, null);
                        }
                    }
                    #endregion

                    //Una volta settati i campi "daAggiornare..." nel metodo SetEditDocument del protocollo, metto a false le variabili in sessione, altrimenti nelle prossime operazioni
                    //(esempio il SALVA) continuano ad essere a TRUE e quindi aggiorna sempre mittente o destinatario
                    this.EditMultipleSender = false;
                    if (newDoc != null && newDoc.protocollo != null)
                    {
                        if (newDoc.tipoProto.ToUpper() == "P")
                        {
                            this.EditListRecipients = ((newDoc.protocollo as ProtocolloUscita).destinatari != null)
                                ? (newDoc.protocollo as ProtocolloUscita).destinatari.ToList() : null;
                            this.EditListRecipientsCC = ((newDoc.protocollo as ProtocolloUscita).destinatariConoscenza != null)
                                ? (newDoc.protocollo as ProtocolloUscita).destinatariConoscenza.ToList() : null;
                        }
                        else if (newDoc.tipoProto.ToUpper() == "I")
                        {
                            this.EditListRecipients = ((newDoc.protocollo as ProtocolloInterno).destinatari != null)
                                ? (newDoc.protocollo as ProtocolloInterno).destinatari.ToList() : null;
                            this.EditListRecipientsCC = ((newDoc.protocollo as ProtocolloInterno).destinatariConoscenza != null)
                                ? (newDoc.protocollo as ProtocolloInterno).destinatariConoscenza.ToList() : null;
                        }
                    }
                    //this.EditRecipients = false;
                    //this.EditRecipientsCC = false;
                    this.EditSender = false;

                    //Inizio sviluppo estensione delle funzionalità di fascicolazione e trasmissione rapida
                    DocsPaWR.Fascicolo fasc;
                    string segnatura = string.Empty;
                    string returnMsg = string.Empty;
                    string retMes2 = string.Empty;
                    fasc = this.Project;
                    if (fasc != null)
                    {
                        if (fasc.stato == "C")
                        {
                            returnMsg += "WarningDocumentProjectClosed";
                        }
                        else
                        {

                            if (fasc != null && fasc.systemID != null && this.EnableBlockClassification)
                            {

                                if (fasc.tipo.Equals("G") && fasc.isFascConsentita != null && fasc.isFascConsentita == "0")
                                {
                                    returnMsg = fasc.isFascicolazioneConsentita ? "WarningDocumentNoDocumentInsert" : "WarningDocumentNoDocumentInsertClassification";
                                }
                                if (fasc.tipo.Equals("P") && !fasc.isFascicolazioneConsentita)
                                {
                                    returnMsg = "WarningDocumentNoDocumentInsertFolder";
                                }
                            }
                            if (string.IsNullOrEmpty(returnMsg))
                            {
                                if (newDoc.protocollo != null)
                                    segnatura = newDoc.protocollo.segnatura;

                                int risultato = DocumentManager.fascicolaRapida(newDoc.systemId, newDoc.docNumber, segnatura, fasc, true);
                                switch (risultato)
                                {
                                    case 0:
                                        newDoc.fascicolato = "1";
                                        break;
                                    case 1:
                                        //returnMsg += "WarningDocumentNoClassificated";
                                        returnMsg += "WarningDocumentDocumentFound";
                                        break;
                                    case 2:
                                        returnMsg += "WarningDocumentNoClassificatedSelect";
                                        retMes2 = fasc.descrizione;
                                        break;
                                }

                            }
                            if (!string.IsNullOrEmpty(returnMsg))
                            {
                                if (!string.IsNullOrEmpty(retMes2))
                                {
                                    string language = UIManager.UserManager.GetUserLanguage();
                                    returnMsg = Utils.Languages.GetMessageFromCode("WarningDocumentNoClassificatedSelect", language);
                                    returnMsg = returnMsg + " " + retMes2;
                                    string msgDesc = "WarningDocumentCustom";
                                    ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + utils.FormatJs(msgDesc) + "', 'warning', '', '" + utils.FormatJs(returnMsg) + "');} else {parent.ajaxDialogModal('" + utils.FormatJs(msgDesc) + "', 'warning', '', '" + utils.FormatJs(returnMsg) + "');};", true);
                                }
                                else
                                {
                                    ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + returnMsg.Replace("'", @"\'") + "', 'warning', '');} else {parent.ajaxDialogModal('" + returnMsg.Replace("'", @"\'") + "', 'warning', '');};", true);
                                }
                            }
                        }

                    }

                    DocsPaWR.Ruolo ruolo = UIManager.RoleManager.GetRoleInSession();

                    // inserimento/update/cancellazione in tabella per il mezzo di spedizione (se presente)
                    if (daInserireCollMSpedDoc && newDoc.tipoProto.Equals("A") && this.MeansSendingRequired)
                    {
                        if (this.DdlMeansSending.SelectedIndex > 0)
                        {
                            InfoUtente info = this.InfoUser;
                            if (!DocumentManager.inserisciMetodoSpedizione(info, this.DdlMeansSending.SelectedValue, newDoc.systemId))
                            {
                                returnMsg = "WarningDocumentNoMeansDocument";
                                ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + returnMsg.Replace("'", @"\'") + "', 'warning', '');} else {parent.ajaxDialogModal('" + returnMsg.Replace("'", @"\'") + "', 'warning', '');};", true);
                            }
                        }
                    }
                    if (daUpdatareCollMSpedDoc && newDoc.tipoProto.Equals("A") && this.MeansSendingRequired)
                    {
                        if (DdlMeansSending.SelectedIndex > 0)
                        {
                            InfoUtente info = this.InfoUser;
                            if (!DocumentManager.updateMetodoSpedizione(info, oldMezzo.ToString(), this.DdlMeansSending.SelectedValue, newDoc.systemId))
                            {
                                returnMsg = "WarningDocumentNoMeansDocument";
                                ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + returnMsg.Replace("'", @"\'") + "', 'warning', '');} else {parent.ajaxDialogModal('" + returnMsg.Replace("'", @"\'") + "', 'warning', '');};", true);
                            }
                        }
                    }
                    if (daCancellareCollMSpedDoc && newDoc.tipoProto.Equals("A") && this.MeansSendingRequired)
                    {
                        InfoUtente info = this.InfoUser;
                        if (!DocumentManager.deleteMetodoSpedizione(info, newDoc.systemId))
                        {
                            returnMsg = "WarningDocumentNoMeansDocument";
                            ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + returnMsg.Replace("'", @"\'") + "', 'warning', '');} else {parent.ajaxDialogModal('" + returnMsg.Replace("'", @"\'") + "', 'warning', '');};", true);
                        }
                    }

                    //DIAGRAMMI DI STATO
                    if (this.EnableStateDiagram && this.CustomDocuments && this.Template != null)
                    {
                        if (this.DocumentDdlStateDiagram.SelectedItem != null)
                        {
                            if (!string.IsNullOrEmpty(this.DocumentDdlStateDiagram.SelectedItem.Value))
                            {
                                bool statoFinale = false;

                                //Controllo se lo stato selezionato è finale
                                if (controllaStatoFinale())
                                {
                                    /* APPLET_G */
                                    if (CheckInOut.CheckInOutServices.IsCheckedOutDocument(newDoc.systemId, newDoc.docNumber, this.InfoUser, true, DocumentManager.getSelectedRecord())
                                        || CheckInOutApplet.CheckInOutServices.IsCheckedOutDocument(newDoc.systemId, newDoc.docNumber, this.InfoUser, true))
                                    {
                                        string msgDesc = "WarningDocumentFinaleStatBLocked";
                                        ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + msgDesc.Replace("'", "\\'") + "', 'warning');} else {parent.ajaxDialogModal('" + msgDesc.Replace("'", "\\'") + "', 'warning');}", true);
                                        return;
                                    }
                                    statoFinale = true;
                                }
                                //Controllo se lo stato selezionato è uno stato automatico
                                if (DiagrammiManager.isStatoAuto(this.DocumentDdlStateDiagram.SelectedItem.Value, Convert.ToString(this.StateDiagram.SYSTEM_ID)))
                                {
                                    string msgConfirm = "WarningDocumentConfirmAutomaticState";
                                    ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxConfirmModal", "if (parent.fra_main) {parent.fra_main.ajaxConfirmModal('" + msgConfirm.Replace("'", @"\'") + "', 'HiddenAutomaticState', '');} else {parent.ajaxConfirmModal('" + msgConfirm.Replace("'", @"\'") + "', 'HiddenAutomaticState', '');}", true);
                                    this.UpConfirmStateDiagram.Update();
                                    return;
                                }

                                if (statoFinale)
                                {
                                    statoFinale = false;
                                    string msgConfirm = "WarningDocumentConfirmFinalState";
                                    ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxConfirmModal", "if (parent.fra_main) {parent.fra_main.ajaxConfirmModal('" + msgConfirm.Replace("'", @"\'") + "', 'HiddenFinalState', '');} else {parent.ajaxConfirmModal('" + msgConfirm.Replace("'", @"\'") + "', 'HiddenFinalState', '');}", true);
                                    this.UpConfirmStateDiagram.Update();
                                    return;
                                }
                                else
                                {
                                    DiagrammiManager.salvaModificaStato(newDoc.docNumber, this.DocumentDdlStateDiagram.SelectedItem.Value, this.StateDiagram, this.InfoUser.userId, this.InfoUser, this.DocumentStateDiagramDataValue.Text, this.Page);

                                    // Aggiornamento stato di consolidamento del documento successivamente al passaggio ad uno stato successivo
                                    newDoc.ConsolidationState = DiagrammiManager.GetDocumentConsolidationState(newDoc.systemId);
                                    if (newDoc.ConsolidationState != null && !newDoc.ConsolidationState.State.Equals(DocumentConsolidationStateEnum.None))
                                        this.IsCosolidato = true;
                                    Stato state = (from s in StateDiagram.STATI where s.SYSTEM_ID.ToString() == this.DocumentDdlStateDiagram.SelectedValue select s).FirstOrDefault();
                                    if (state.CONVERSIONE_PDF)
                                        this.IsCosolidato = true;   //FACCIO IL REDIRECT SULLA PAGINA PER AGGIORNARE NEL CASO DI CONVERSIONE PDF
                                    string idTemplate = this.Template.SYSTEM_ID.ToString();

                                    InfoDocumento infoDoc = new InfoDocumento();
                                    ArrayList modelli = new ArrayList(DiagrammiManager.isStatoTrasmAuto(this.InfoUser.idAmministrazione, this.DocumentDdlStateDiagram.SelectedItem.Value, this.Template.SYSTEM_ID.ToString()));
                                    for (int i = 0; i < modelli.Count; i++)
                                    {
                                        DocsPaWR.ModelloTrasmissione mod = (DocsPaWR.ModelloTrasmissione)modelli[i];
                                        if (mod.SINGLE == "1")
                                        {
                                            infoDoc = DocumentManager.getInfoDocumento(newDoc);
                                            TrasmManager.effettuaTrasmissioneDocDaModello(mod, this.DocumentDdlStateDiagram.SelectedItem.Value, infoDoc, this);
                                            if (mod.CEDE_DIRITTI != null && mod.CEDE_DIRITTI.Equals("1"))
                                            {
                                                newDoc = DocumentManager.getDocumentDetails(this, newDoc.systemId, newDoc.docNumber);
                                                DocumentManager.setSelectedRecord(newDoc);
                                                this.DocumentInWorking = newDoc;

                                                if (newDoc == null)
                                                    ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "function RedirectHome(){$(location).attr('href','" + this.ResolveUrl("~/Index.aspx") + "');} if (parent.fra_main) {parent.fra_main.ajaxDialogModal('RevocationAcl', 'warning', '','',null,null,'RedirectHome()')} else {parent.parent.ajaxDialogModal('RevocationAcl', 'warning', '','',null,null,'RedirectHome()');}", true);
                                                else if (mod.MANTIENI_SCRITTURA != null && !mod.MANTIENI_SCRITTURA.Equals("1"))
                                                    this.EnableEditMode();
                                            }
                                        }
                                        else
                                        {
                                            for (int k = 0; k < mod.MITTENTE.Length; k++)
                                            {
                                                if (mod.MITTENTE[k].ID_CORR_GLOBALI.ToString() == this.Role.systemId)
                                                {
                                                    infoDoc = DocumentManager.getInfoDocumento(newDoc);
                                                    TrasmManager.effettuaTrasmissioneDocDaModello(mod, this.DocumentDdlStateDiagram.SelectedItem.Value, infoDoc, this);
                                                    if (mod.CEDE_DIRITTI != null && mod.CEDE_DIRITTI.Equals("1"))
                                                    {
                                                        newDoc = DocumentManager.getDocumentDetails(this, newDoc.systemId, newDoc.docNumber);
                                                        DocumentManager.setSelectedRecord(newDoc);
                                                        this.DocumentInWorking = newDoc;

                                                        if (newDoc == null)
                                                            ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "function RedirectHome(){$(location).attr('href','" + this.ResolveUrl("~/Index.aspx") + "');} if (parent.fra_main) {parent.fra_main.ajaxDialogModal('RevocationAcl', 'warning', '','',null,null,'RedirectHome()')} else {parent.parent.ajaxDialogModal('RevocationAcl', 'warning', '','',null,null,'RedirectHome()');}", true);
                                                        else if (mod.MANTIENI_SCRITTURA != null && !mod.MANTIENI_SCRITTURA.Equals("1"))
                                                            this.EnableEditMode();
                                                    }

                                                    break;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                    }
                    //FINE DIAGRAMMI DI STATO 



                    if (this.PnlScadenza.Visible &&
           !string.IsNullOrEmpty(newDoc.dataScadenza) &&
           newDoc.tipologiaAtto != null &&
           !string.IsNullOrEmpty(newDoc.tipologiaAtto.systemId))
                    {

                        DiagrammiManager.salvaDataScadenzaDoc(newDoc.docNumber, newDoc.dataScadenza, newDoc.tipologiaAtto.systemId);
                    }

                    DocsPaWR.ConfigSpedizioneDocumento config = SenderManager.GetConfigSpedizioneDocumento();

                    if (config != null && config.SpedizioneAutomaticaDocumento)
                    {
                        if (!DocumentManager.DO_UpdateVisibilita(newDoc, ruolo))
                        {
                            returnMsg = "WarningDocumentProblemNewRecipients";
                            ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + returnMsg.Replace("'", @"\'") + "', 'warning', '');} else {parent.ajaxDialogModal('" + returnMsg.Replace("'", @"\'") + "', 'warning', '');};", true);
                        }
                    }

                    if (newDoc != null && !string.IsNullOrEmpty(newDoc.systemId))
                    {
                        //if (((ImageButton)FindControl("btn_salva")).AlternateText.Equals("Salva e acquisisci diritti"))
                        if (this.DocumentBtnSave.ToolTip == "Acquisisci diritti")
                        {
                            //acquisisce i diritti
                            DocsPaWR.DocsPaWebService ws = new DocsPaWebService();
                            bool result = ws.AcquisisciDirittiDocumento(newDoc, this.InfoUser);
                            if (!result)
                                ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('I diritti per il documento di tipo fatturazione elettronica non sono stati acquisiti', 'warning', '');} else {parent.ajaxDialogModal('I diritti per il documento di tipo fatturazione elettronica non sono stati acquisiti', 'warning', '');};", true);
                            //Response.Write("<script>alert('I diritti per il documento di tipo fatturazione elettronica non sono stati acquisiti');</script>");
                            else
                            {
                                this.DocumentBtnSave.ToolTip = null;
                                newDoc.personale = "0";
                                this.DocumentChekUser.Checked = false;
                            }
                        }
                    }
                    if (newDoc != null && newDoc.template != null && newDoc.template.CHA_ASSOC_MANUALE == "1" && newDoc.template.DESCRIZIONE.ToUpper() == "FATTURA ELETTRONICA")
                    {
                        newDoc.allegati = DocumentManager.getAttachments(DocumentInWorking, "all");
                    }
                    UIManager.DocumentManager.setSelectedRecord(newDoc);
                    this.DocumentInWorking = newDoc;
                    this.DocumentInWorking.spedizioneDocumento = SenderManager.GetSpedizioneDocumento(newDoc);
                    FileManager.setSelectedFile(newDoc.documenti[0]);

                    this.IsForwarded = false;

                    this.UpdateDataCreationDocument();

                    this.UpDocumentButtons.Update();
                    this.UpTypeProtocol.Update();
                    this.UpContainerDocumentTab.Update();
                    this.UpPnlDataDocument.Update();
                    this.HeaderDocument.RefreshDataDocument();
                    this.DocumentTabs.RefreshLayoutTab();
                    //se
                    //- il documento principale non è stato acquisito;
                    //- il documento non è in stato finale oppure è in stato finale
                    //ma è stato effetuato lo sblocco stato per il ruolo corrente 
                    //allora abilito i pulsanti di acquisizione/blocco doc e modello.
                    if (DocumentManager.getSelectedRecord() != null &&
                        (string.IsNullOrEmpty(DocumentManager.getSelectedRecord().documenti[0].fileSize) ||
                            Convert.ToUInt32(DocumentManager.getSelectedRecord().documenti[0].fileSize) == 0) &&
                        (!DiagrammiManager.IsDocumentInFinalState() ||
                        Convert.ToInt32(DocumentManager.getAccessRightDocBySystemID(
                                        DocumentManager.getSelectedRecord().docNumber, UserManager.GetInfoUser())) > 45))
                    {
                        this.DocumentButtons.RefreshButtons(NttDataWA.UserControls.DocumentButtons.TypeRefresh.D_ALL);
                        this.DocumentButtons.RefreshButtons(NttDataWA.UserControls.DocumentButtons.TypeRefresh.E_UPLOADFILE);
                        // Gabriele Melini 06-05-2014
                        // per un documento su cui non si possiedono diritti di scrittura
                        // al clic del pulsante "SALVA" vengono abilitati TUTTI gli altri pulsanti
                        // non commento il RefreshButtons con E_UPLOADFILE (potrebbe essere necessario in altri casi)
                        // aggiunto un ulteriore controllo sui diritti
                        // se non si hanno diritti di scrittura, vengono nuovamente disabilitati i pulsanti
                        // INIZIO AGGIUNTA
                        if (this.DocumentInWorking.accessRights != null && Convert.ToInt32(this.DocumentInWorking.accessRights) < Convert.ToInt32(HMdiritti.HMdiritti_Write))
                        {
                            this.DocumentButtons.RefreshButtons(NttDataWA.UserControls.DocumentButtons.TypeRefresh.D_ALL);
                            this.EnableEditMode();
                        }
                        // FINE AGGIUNTA
                        this.DocumentButtons.InitializeCheckInOutPanel();
                        this.UpDocumentButtons.Update();
                    }
                    this.UpContainerDocumentTab.Update();
                    this.UpPnlRegistry.Update();

                    ////metodo per la trasmissione rapida (templ & Modelli)
                    this.execTrasmRapida(ref errors);

                    this.DocumentDdlTransmissionsModel.SelectedValue = string.Empty;
                    this.UpPnlTransmissionsModel.Update();

                    string errorInPopup = string.Empty;

                    if (errors != null && errors.Count > 0)
                    {
                        foreach (string err in errors)
                        {
                            errorInPopup += err + "<br/>";
                        }
                        string msgDesc = "WarningDocumentCustom";
                        string errFormt = Server.UrlEncode(errorInPopup);
                        ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + utils.FormatJs(msgDesc) + "', 'warning', '', '" + utils.FormatJs(errFormt) + "');} else {parent.ajaxDialogModal('" + utils.FormatJs(msgDesc) + "', 'warning', '', '" + utils.FormatJs(errFormt) + "');}; ", true);
                    }
                    //else
                    //{
                    //    this.IsCosolidato = true;   //FACCIO IL REDIRECT SULLA PAGINA PER AGGIORNARLA COMPLETAMENTE(QUESTO NEL CASO IN CUI IL MODELLO PREVEDE LA CESSIONE DEI
                    //    //DIRITTI E QUINDI DISABILITARE TUTTO)
                    //}
                }
                else
                {
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + msg.Replace("'", @"\'") + "', 'error', '');} else {parent.ajaxDialogModal('" + msg.Replace("'", @"\'") + "', 'error', '');};", true);
                    return;
                }

                //GestioneSalvataggioRispostaAlProtocollo();

                /*if (daAggiornarePrivato == true)
                {*/
                //if (enableUffRef == true)
                //{

                //    this.txt_cod_uffRef.ReadOnly = true;
                //    //this.txt_desc_uffRef.ReadOnly = true;
                //    this.txt_cod_uffRef.BackColor = Color.WhiteSmoke;
                //    this.txt_desc_uffRef.BackColor = Color.WhiteSmoke;
                //    this.btn_Rubrica_ref.Enabled = false;
                //    schedaDocumento.protocollo.ModUffRef = false;
                //    // Trasmissione documento in entrata dopo SALVA
                //    if (daAggiornareUffRef == true)
                //    {
                //        if (this.schedaDocumento.tipoProto == "A")
                //        {
                //            string serverName = Utils.getHttpFullPath(this);
                //            bool verificaRagioni;

                //            if (DocumentManager.TrasmettiProtocolloUfficioReferente(this, serverName, this.schedaDocumento, enableUffRef, out verificaRagioni, out message))
                //            {
                //                if (!verificaRagioni)
                //                {
                //                    // Notifica utente che la trasmissione non e' stata effettuata
                //                    string theAlert = "<script>alert('Attenzione! le trasmissioni non sono state effettuate \\npoiché NON sono presenti le ragioni di trasmissione per l'Ufficio Referente!');</script>";
                //                    Response.Write(theAlert);
                //                }
                //            }
                //            else
                //            {
                //                Exception exception = new Exception("Errore durante la trasmissione al protocollo");
                //                ErrorManager.redirect(this, exception, "protocollazione");
                //            }
                //        }
                //    }
                //    else
                //    {
                //        if (this.txt_cod_uffRef.Text.Equals(""))//se non aggiorno perchè il campo uff ref è vuoto
                //            this.btn_salva_P.Enabled = true;
                //    }
                //}
                //Response.Write("<script language='javascript'>top.principale.iFrame_sx.document.location='tabGestioneDoc.aspx?tab=protocollo'; </script>");
            }
            catch (System.Exception ex)
            {
                UIManager.AdministrationManager.DiagnosticError(ex);
            }
            this._logger.Info("END");
        }

        /// <summary>
        /// Funzione per la verifica dello stato di checkout del documento selezionato
        /// </summary>
        /// <returns>True se il documento è bloccato</returns>
        private bool IsDocumentInCheckOutState()
        {
            //// La scheda del documento selezionato
            //SchedaDocumento sd;

            //// Reperimento della scheda del documento selezionato
            //sd = DocumentManager.getDocumentoSelezionato();

            //// Restituzione dello stato di checkout
            //return CheckInOut.CheckInOutServices.IsCheckedOutDocument(
            //    sd.systemId,
            //    sd.docNumber,
            //    UserManager.getInfoUtente(this),
            //    true);
            //Da cancallare una volta implementato
            return true;
        }

        /// <summary>
        /// Create document not protocol
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void DocumentBtnCreateDocument_Click(object sender, EventArgs e)
        {
            this._logger.Info("START");
            bool result = false;
            try
            {
                //logger.Info("BEGIN");
                SchedaDocumento docSave = this.DocumentInWorking;

                if (this.DocumentInWorking.checkOutStatus == null)
                {
                    result = this.CreateDocument();
                }
                else
                {
                    string msgDesc = "WarningDocumentBlockedSave";
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + msgDesc.Replace("'", @"\'") + "', 'warning', '');} else {parent.ajaxDialogModal('" + msgDesc.Replace("'", @"\'") + "', 'warning', '');}", true);
                }

                this.DisabledDocumentChekUser.Attributes.Remove("class");
                this.DisabledDocumentCheckPrivate.Attributes.Remove("class");
                this.DisabledDocumentChekUser.Attributes.Add("class", "check_disabled");
                this.DisabledDocumentCheckPrivate.Attributes.Add("class", "check_disabled");

                this.TxtObject.ReadOnly = false;
                this.DdlOggettario.Enabled = false;
                this.UpdPnlObject.Update();

                // Alessandro Aiello 04/02/2019
                // nel caso di modifiche  (fascicolo o tipologia) resetto la segnatura così da ricalcolarla
                this.DocumentInWorking.DettaglioSegnatura = null;
            }
            catch (System.Exception ex)
            {
                UIManager.AdministrationManager.DiagnosticError(ex);
                result = false;
                return;
            }
            if (IsCosolidato)
            {
                HttpContext.Current.Session.Remove("IsCosolidato");
                Response.Redirect("Document.aspx");
            }
            if (result)
            {
                Response.Redirect("Document.aspx");
            }
        }

        private bool CreateDocument()
        {

            List<string> errors = new List<string>();
            // logger.Info("BEGIN");
            try
            {
                SchedaDocumento newDoc = this.DocumentInWorking;


                if (this.DocumentCheckPrivate.Checked && !this.ControlPrivateDocumentWarning())
                {
                    //PROFILAZIONE DINAMICA
                    if (!string.IsNullOrEmpty(this.DocumentDdlTypeDocument.SelectedValue))
                    {
                        this.Template = this.PopulateTemplate();
                    }
                    this.HiddenControlPrivateTypeOperation.Value = "CREATEDOCUMENT";
                    return false;
                }

                if (this.DocumentChekUser.Checked && !this.ControlUserDocumentWarning())
                {
                    //PROFILAZIONE DINAMICA
                    if (!string.IsNullOrEmpty(this.DocumentDdlTypeDocument.SelectedValue))
                    {
                        this.Template = this.PopulateTemplate();
                    }
                    this.HiddenControlPrivateTypeOperation.Value = "CREATEDOCUMENT";
                    return false;
                }

                //Verifico se si stà fascicolando all'interno di un fascicolo pubblico
                if (!ControlPublicFolderWarning())
                {
                    this.HiddenPublicFolderTypeOperation.Value = "CREATEDOCUMENT";
                    return false;
                }
                else
                {
                    this.HiddenPublicFolder.Value = string.Empty;
                }

                if (this.DocumentCheckPrivate.Checked)
                {
                    this.ResetControlPrivateDocumentWarning();
                }


                if (this.DocumentCheckPrivate.Checked)
                {
                    newDoc.privato = "1";
                }
                else
                {
                    newDoc.privato = "0";
                }

                if (this.DocumentChekUser.Checked)
                {
                    newDoc.personale = "1";
                }
                else
                {
                    newDoc.personale = "0";
                }

                string segnatura = string.Empty;

                string msg = string.Empty;
                this.SaveNote(out msg);
                if (!string.IsNullOrEmpty(msg))
                {
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + msg.Replace("'", "\\'") + "', 'error');} else {parent.ajaxDialogModal('" + msg.Replace("'", "\\'") + "', 'error');}", true);
                    return false;
                }
                DocsPaWR.Fascicolo fasc = this.Project;

                this.DocumentInWorking.oggetto = new Oggetto();
                this.DocumentInWorking.oggetto.daAggiornare = true;
                this.DocumentInWorking.oggetto.descrizione = this.TxtObject.Text;

                if (fasc != null && fasc.systemID != null && this.EnableBlockClassification)
                {

                    if (fasc.tipo.Equals("G") && fasc.isFascConsentita != null && fasc.isFascConsentita == "0")
                    {
                        string msgDesc = fasc.isFascicolazioneConsentita ? "WarningDocumentNoDocumentInsert" : "WarningDocumentNoDocumentInsertClassification";
                        ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + msgDesc.Replace("'", @"\'") + "', 'warning', '');} else {parent.ajaxDialogModal('" + msgDesc.Replace("'", @"\'") + "', 'warning', '');}", true);
                        return false;
                    }
                    if(fasc.tipo.Equals("P") && !fasc.isFascicolazioneConsentita)
                    {
                        string msgDesc = "WarningDocumentNoDocumentInsertFolder";
                        ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + msgDesc.Replace("'", @"\'") + "', 'warning', '');} else {parent.ajaxDialogModal('" + msgDesc.Replace("'", @"\'") + "', 'warning', '');}", true);
                        return false;
                    }
                }
                //PROFILAZIONE DINAMICA
                if (!string.IsNullOrEmpty(this.DocumentDdlTypeDocument.SelectedValue))
                {
                    newDoc.template = this.PopulateTemplate();
                    newDoc.tipologiaAtto = new TipologiaAtto();
                    newDoc.daAggiornareTipoAtto = true;
                    newDoc.tipologiaAtto.systemId = this.DocumentDdlTypeDocument.SelectedValue;
                    newDoc.tipologiaAtto.descrizione = this.DocumentDdlTypeDocument.SelectedItem.Text;

                    if (ProfilerDocManager.verificaCampiObbligatori(this.Template))
                    {
                        string msgDesc = "WarningDocumentRequestfields";
                        ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + msgDesc.Replace("'", @"\'") + "', 'warning', '');} else {parent.ajaxDialogModal('" + msgDesc.Replace("'", @"\'") + "', 'warning', '');}", true);
                        return false;
                    }

                    string customMessaget = string.Empty;
                    string messag = ProfilerDocManager.verificaOkContatore(this.Template, out customMessaget);
                    if (messag != string.Empty)
                    {
                        if (!string.IsNullOrEmpty(customMessaget) && messag.Equals("CUSTOMERROR"))
                        {
                            string msgDesc = "WarningDocumentCustom";
                            string errFormt = Server.UrlEncode(customMessaget);
                            ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + utils.FormatJs(msgDesc) + "', 'warning', '', '" + utils.FormatJs(errFormt) + "');} else {parent.ajaxDialogModal('" + utils.FormatJs(msgDesc) + "', 'warning', '', '" + utils.FormatJs(errFormt) + "');}; ", true);
                        }
                        else
                        {
                            ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + messag.Replace("'", @"\'") + "', 'warning', '');} else {parent.ajaxDialogModal('" + messag.Replace("'", @"\'") + "', 'warning', '" + messag.Replace("'", @"\'") + "');}", true);
                        }
                        return false;
                    }
                    //FINE PROFILAZIONE DINAMICA  	
                }
                else
                {
                    newDoc.daAggiornareTipoAtto = false;
                }

                msg = CheckFields(this.DocumentInWorking);

                msg += ProfilerDocManager.VerifyAndSetTipoDoc(this.InfoUser, ref newDoc);

                if (!string.IsNullOrEmpty(msg))
                {
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + msg.Replace("'", @"\'") + "', 'warning', '');} else {parent.ajaxDialogModal('" + msg.Replace("'", @"\'") + "', 'warning', '');}", true);
                    return false;
                }


                //controllo campi obbligatori profilazione dinamica
                //PROFILAZIONE DINAMINCA
                if (this.CustomDocuments)
                {

                    if (ProfilerDocManager.verificaCampiObbligatori(this.Template))
                    {
                        //msg = "Ci sono dei campi obbligatori relativi al tipo di documento selezionato !";
                        msg = "WarningDocumentRequestfields";

                        ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + msg.Replace("'", @"\'") + "', 'warning', '');} else {parent.ajaxDialogModal('" + msg.Replace("'", @"\'") + "', 'warning', '" + msg.Replace("'", @"\'") + "');}", true);
                        return false;
                    }

                    string customMessaget = string.Empty;
                    string messag = ProfilerDocManager.verificaOkContatore(this.Template, out customMessaget);
                    if (messag != string.Empty)
                    {
                        if (!string.IsNullOrEmpty(customMessaget) && messag.Equals("CUSTOMERROR"))
                        {
                            string msgDesc = "WarningDocumentCustom";
                            string errFormt = Server.UrlEncode(customMessaget);
                            ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + utils.FormatJs(msgDesc) + "', 'warning', '', '" + utils.FormatJs(errFormt) + "');} else {parent.ajaxDialogModal('" + utils.FormatJs(msgDesc) + "', 'warning', '', '" + utils.FormatJs(errFormt) + "');}; ", true);
                        }
                        else
                        {
                            ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + messag.Replace("'", @"\'") + "', 'warning', '');} else {parent.ajaxDialogModal('" + messag.Replace("'", @"\'") + "', 'warning', '" + messag.Replace("'", @"\'") + "');}", true);
                        }
                        return false;
                    }

                    if (this.EnableStateDiagram && this.PnlScadenza.Visible && !string.IsNullOrEmpty(this.DocumentStateDiagramDataValue.Text))
                    {

                        DateTime dataInserita = Convert.ToDateTime(this.DocumentStateDiagramDataValue.Text);
                        DateTime dataOdierna = System.DateTime.Now;
                        if ((dataInserita < dataOdierna) && !this.DocumentStateDiagramDataValue.ReadOnly)
                        {
                            msg = "WarningDocumentDateState";
                            ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + msg.Replace("'", @"\'") + "', 'warning', '');} else {parent.ajaxDialogModal('" + msg.Replace("'", @"\'") + "', 'warning', '" + msg.Replace("'", @"\'") + "');}", true);
                            return false;
                        }
                    }
                }


                //FINE PROFILAZIONE DINAMINCA	


                if (newDoc.tipoProto != null && newDoc.tipoProto.Equals("A") && !string.IsNullOrEmpty(this.TxtProtocolSender.Text))
                {
                    ((DocsPaWR.ProtocolloEntrata)newDoc.protocollo).descrizioneProtocolloMittente = this.TxtProtocolSender.Text;
                }

                if (newDoc.tipoProto != null && newDoc.tipoProto.Equals("A") && !string.IsNullOrEmpty(this.TxtDateProtocol.Text))
                {
                    ((DocsPaWR.ProtocolloEntrata)newDoc.protocollo).dataProtocolloMittente = this.TxtDateProtocol.Text;
                }

                if (newDoc.tipoProto != null && newDoc.tipoProto.Equals("A") && !string.IsNullOrEmpty(this.TxtArrivalDate.Text))
                    newDoc.documenti[0].dataArrivo = this.TxtArrivalDate.Text + " " + this.TxtTimeOfArrival.Text;

                if (this.EnableStateDiagram && this.PnlScadenza.Visible && !string.IsNullOrEmpty(this.DocumentStateDiagramDataValue.Text))
                {
                    DateTime dataInserita = Convert.ToDateTime(this.DocumentStateDiagramDataValue.Text);
                    newDoc.dataScadenza = Utils.utils.formatDataDocsPa(dataInserita);
                }

                newDoc = DocumentManager.creaDocumentoGrigio(this, newDoc);

                if (newDoc != null && !string.IsNullOrEmpty(newDoc.systemId))
                {

                    this.DocumentInWorking = newDoc;

                    //Mev TASK (vado associare il documento creato al TASK)
                    if (this.Task != null)
                    {
                        TaskManager.AssociaContributoAlTask(this.Task, newDoc);
                        this.Task = null;
                    }
                    else
                    {
                        List<Navigation.NavigationObject> navigationList = Navigation.NavigationUtils.GetNavigationList();
                        Navigation.NavigationObject actualPage = new Navigation.NavigationObject();
                        actualPage.IdObject = newDoc.systemId;
                        actualPage.NamePage = Navigation.NavigationUtils.GetNamePage(Navigation.NavigationUtils.NamePage.DOCUMENT.ToString(), string.Empty);
                        actualPage.Link = Navigation.NavigationUtils.GetLink(Navigation.NavigationUtils.NamePage.DOCUMENT.ToString(), true, this.Page);
                        actualPage.CodePage = Navigation.NavigationUtils.NamePage.DOCUMENT.ToString();
                        actualPage.Page = "DOCUMENT.ASPX";
                        navigationList.Add(actualPage);
                        Navigation.NavigationUtils.SetNavigationList(navigationList);
                    }
                }
                else
                {
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('ErrorCreateDocument', 'error', '');} else {parent.ajaxDialogModal('ErrorCreateDocument', 'error', '');}", true);
                    return false;
                }
                //DIAGRAMMI DI STATO
                if (this.EnableStateDiagram && this.CustomDocuments && this.Template != null)
                {
                    if (this.DocumentDdlStateDiagram.SelectedItem != null)
                    {
                        if (!string.IsNullOrEmpty(this.DocumentDdlStateDiagram.SelectedItem.Value))
                        {
                            bool statoFinale = false;
                            Session.Add("statoSelezionato", this.DocumentDdlStateDiagram.SelectedItem.Value);

                            //Controllo se lo stato selezionato è finale
                            if (controllaStatoFinale())
                            {
                                /* APPLET_G */
                                if (CheckInOut.CheckInOutServices.IsCheckedOutDocument(newDoc.systemId, newDoc.docNumber, this.InfoUser, true, DocumentManager.getSelectedRecord())
                                    || CheckInOutApplet.CheckInOutServices.IsCheckedOutDocument(newDoc.systemId, newDoc.docNumber, this.InfoUser, true))
                                {
                                    string msgDesc = "WarningDocumentFinaleStatBLocked";
                                    ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + msgDesc.Replace("'", "\\'") + "', 'warning');} else {parent.ajaxDialogModal('" + msgDesc.Replace("'", "\\'") + "', 'warning');}", true);
                                    return false;
                                }
                                statoFinale = true;
                            }
                            //Controllo se lo stato selezionato è uno stato automatico
                            if (DiagrammiManager.isStatoAuto(this.DocumentDdlStateDiagram.SelectedItem.Value, Convert.ToString(this.StateDiagram.SYSTEM_ID)))
                            {
                                string msgConfirm = "WarningDocumentConfirmAutomaticState";
                                ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxConfirmModal", "if (parent.fra_main) {parent.fra_main.ajaxConfirmModal('" + msgConfirm.Replace("'", @"\'") + "', 'HiddenAutomaticState', '');} else {parent.ajaxConfirmModal('" + msgConfirm.Replace("'", @"\'") + "', 'HiddenAutomaticState', '');}", true);
                                this.UpConfirmStateDiagram.Update();
                                return false;
                            }

                            if (statoFinale)
                            {
                                statoFinale = false;
                                string msgConfirm = "WarningDocumentConfirmFinalState";
                                ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxConfirmModal", "if (parent.fra_main) {parent.fra_main.ajaxConfirmModal('" + msgConfirm.Replace("'", @"\'") + "', 'HiddenFinalState', '');} else {parent.ajaxConfirmModal('" + msgConfirm.Replace("'", @"\'") + "', 'HiddenFinalState', '');}", true);
                                this.UpConfirmStateDiagram.Update();
                                return false;
                            }
                            else
                            {
                                DiagrammiManager.salvaModificaStato(newDoc.docNumber, this.DocumentDdlStateDiagram.SelectedItem.Value, this.StateDiagram, this.InfoUser.userId, this.InfoUser, this.DocumentStateDiagramDataValue.Text, this.Page);

                                // Aggiornamento stato di consolidamento del documento successivamente al passaggio ad uno stato successivo
                                //newDoc.ConsolidationState = this.wws.GetDocumentConsolidationState(UserManager.getInfoUtente(), this.schedaDocumento.systemId);

                                string idTemplate = this.Template.SYSTEM_ID.ToString();

                                InfoDocumento infoDoc = new InfoDocumento();
                                ArrayList modelli = new ArrayList(DiagrammiManager.isStatoTrasmAuto(this.InfoUser.idAmministrazione, this.DocumentDdlStateDiagram.SelectedItem.Value, this.Template.SYSTEM_ID.ToString()));
                                for (int i = 0; i < modelli.Count; i++)
                                {
                                    DocsPaWR.ModelloTrasmissione mod = (DocsPaWR.ModelloTrasmissione)modelli[i];
                                    if (mod.SINGLE == "1")
                                    {
                                        infoDoc = DocumentManager.getInfoDocumento(newDoc);
                                        TrasmManager.effettuaTrasmissioneDocDaModello(mod, this.DocumentDdlStateDiagram.SelectedItem.Value, infoDoc, this);
                                        if (mod.CEDE_DIRITTI != null && mod.CEDE_DIRITTI.Equals("1"))
                                        {
                                            newDoc = DocumentManager.getDocumentDetails(this, newDoc.systemId, newDoc.docNumber);
                                            DocumentManager.setSelectedRecord(newDoc);
                                            this.DocumentInWorking = newDoc;

                                            if (newDoc == null)
                                                ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "function RedirectHome(){$(location).attr('href','" + this.ResolveUrl("~/Index.aspx") + "');} if (parent.fra_main) {parent.fra_main.ajaxDialogModal('RevocationAcl', 'warning', '','',null,null,'RedirectHome()')} else {parent.parent.ajaxDialogModal('RevocationAcl', 'warning', '','',null,null,'RedirectHome()');}", true);
                                            else if (mod.MANTIENI_SCRITTURA != null && !mod.MANTIENI_SCRITTURA.Equals("1"))
                                                this.EnableEditMode();
                                        }
                                    }
                                    else
                                    {
                                        for (int k = 0; k < mod.MITTENTE.Length; k++)
                                        {
                                            if (mod.MITTENTE[k].ID_CORR_GLOBALI.ToString() == this.Role.systemId)
                                            {
                                                infoDoc = DocumentManager.getInfoDocumento(newDoc);
                                                TrasmManager.effettuaTrasmissioneDocDaModello(mod, this.DocumentDdlStateDiagram.SelectedItem.Value, infoDoc, this);
                                                if (mod.CEDE_DIRITTI != null && mod.CEDE_DIRITTI.Equals("1"))
                                                {
                                                    newDoc = DocumentManager.getDocumentDetails(this, newDoc.systemId, newDoc.docNumber);
                                                    DocumentManager.setSelectedRecord(newDoc);
                                                    this.DocumentInWorking = newDoc;

                                                    if (newDoc == null)
                                                        ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "function RedirectHome(){$(location).attr('href','" + this.ResolveUrl("~/Index.aspx") + "');} if (parent.fra_main) {parent.fra_main.ajaxDialogModal('RevocationAcl', 'warning', '','',null,null,'RedirectHome()')} else {parent.parent.ajaxDialogModal('RevocationAcl', 'warning', '','',null,null,'RedirectHome()');}", true);
                                                    else if (mod.MANTIENI_SCRITTURA != null && !mod.MANTIENI_SCRITTURA.Equals("1"))
                                                        this.EnableEditMode();
                                                }
                                                break;
                                            }
                                        }
                                    }
                                }

                            }
                        }
                    }

                }

                //}
                if (newDoc != null && !string.IsNullOrEmpty(newDoc.systemId))
                {
                    // se la creazione del doc è andata a buon fine ..
                    //eseguo la fascicolazione RAPIDA
                    if (fasc != null && fasc.systemID != null)
                    {
                        if (newDoc.protocollo != null)
                            segnatura = newDoc.protocollo.segnatura;

                        msg = string.Empty;
                        if (!DocumentManager.fascicolaRapida(this, newDoc.systemId, newDoc.docNumber, segnatura, fasc, out msg))
                        {
                            if (string.IsNullOrEmpty(msg))
                            {
                                string language = UIManager.UserManager.GetUserLanguage();
                                msg = Utils.Languages.GetMessageFromCode("WarningDocumentNoClassificated", language);
                                ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + utils.FormatJs(msg) + "', 'warning', '', '" + utils.FormatJs(msg) + "');} else {parent.ajaxDialogModal('" + utils.FormatJs(msg) + "', 'warning', '', '" + utils.FormatJs(msg) + "');};", true);
                            }
                        }
                        else
                        {
                            newDoc.fascicolato = "1";
                        }
                    }

                    UIManager.DocumentManager.setSelectedRecord(newDoc);
                    this.DocumentInWorking = newDoc;

                    //Per acquisitrione file

                    FileManager.setSelectedFile(newDoc.documenti[0]);
                    this.DocumentInWorking = newDoc;
                    this.UpdateDataCreationDocument();

                    this.UpDocumentButtons.Update();
                    this.UpContainerDocumentTab.Update();
                    this.UpPnlDataDocument.Update();
                    this.HeaderDocument.RefreshDataDocument();
                    this.DocumentTabs.RefreshLayoutTab();
                    if (newDoc.documenti[0].fileSize.Equals("0"))
                    {

                        this.DocumentButtons.RefreshButtons(NttDataWA.UserControls.DocumentButtons.TypeRefresh.D_ALL);
                        this.DocumentButtons.RefreshButtons(NttDataWA.UserControls.DocumentButtons.TypeRefresh.E_UPLOADFILE);

                    }
                    this.UpContainerDocumentTab.Update();
                }

                if (newDoc != null && !string.IsNullOrEmpty(newDoc.systemId))
                {
                    this.DocumentInWorking = newDoc;
                    ////metodo per la trasmissione rapida (templ & Modelli)
                    this.execTrasmRapida(ref errors);

                    this.DocumentDdlTransmissionsModel.SelectedValue = string.Empty;
                    this.UpPnlTransmissionsModel.Update();

                    string errorInPopup = string.Empty;

                    if (errors != null && errors.Count > 0)
                    {
                        foreach (string err in errors)
                        {
                            errorInPopup += err + "<br/>";
                        }
                        string msgDesc = "WarningDocumentCustom";
                        string errFormt = Server.UrlEncode(errorInPopup);
                        ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + utils.FormatJs(msgDesc) + "', 'warning', '', '" + utils.FormatJs(errFormt) + "');} else {parent.ajaxDialogModal('" + utils.FormatJs(msgDesc) + "', 'warning', '', '" + utils.FormatJs(errFormt) + "');}; ", true);
                    }
                    else
                    {
                        this.IsCosolidato = true;   //FACCIO IL REDIRECT SULLA PAGINA PER AGGIORNARLA COMPLETAMENTE(QUESTO NEL CASO IN CUI IL MODELLO PREVEDE LA CESSIONE DEI
                        //DIRITTI E QUINDI DISABILITARE TUTTO)
                    }
                }

                //FINE DIAGRAMMI DI STATO 
                if (this.PnlScadenza.Visible &&
            !string.IsNullOrEmpty(newDoc.dataScadenza) &&
            newDoc.tipologiaAtto != null &&
            !string.IsNullOrEmpty(newDoc.tipologiaAtto.systemId))
                {

                    DiagrammiManager.salvaDataScadenzaDoc(newDoc.docNumber, newDoc.dataScadenza, newDoc.tipologiaAtto.systemId);
                }
            }
            catch (System.Exception ex)
            {
                UIManager.AdministrationManager.DiagnosticError(ex);
            }
            finally
            {
                // FascicoliManager.removeFascicoloSelezionatoFascRapida(this);
                //Session.Remove("validCodeFasc");
            }

            return true;
            // logger.Info("END");
        }

        protected void AddRecipientToCC(object sender, EventArgs e)
        {
            try
            {
                //In caso di modifica documento
                //Modifica Destinatari
                //if (schedaDocumento.protocollo.numero != null)
                //{
                //string system_id = ((NttDataWA.DocsPaWR.ProtocolloUscita)schedaDocumento.protocollo).destinatari[this.lbx_dest.SelectedIndex].systemId;
                //schedaDocumento = DocumentManager.DO_AddDestinatrioCCModificato(schedaDocumento, system_id);
                //schedaDocumento = DocumentManager.DO_RemoveDestinatarioModificati(schedaDocumento, system_id);
                ////}

                if (this.ListBoxRecipient.SelectedIndex >= 0)
                {
                    //cerca il corrispondente e lo aggiunge tra i destinatari principali
                    this.addDestinatari(this.ListBoxRecipient.SelectedIndex, "C");
                    this.removeDestinatari(this.ListBoxRecipient.SelectedIndex, "P");

                    //if (this.DocumentInWorking != null && !string.IsNullOrEmpty(this.DocumentInWorking.systemId))
                    //{
                    //    this.EditRecipients = true;
                    //    this.EditRecipientsCC = true;
                    //}
                }

                this.UpPnlRecipients.Update();
            }
            catch (System.Exception ex)
            {
                UIManager.AdministrationManager.DiagnosticError(ex);
                return;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="index"></param>
        /// <param name="tipoDest"></param>
        private void removeDestinatari(int index, string tipoDest)
        {
            if (tipoDest.Equals("P"))
            {
                this.ListRecipients = UIManager.AddressBookManager.RemoveCorrespondent(this.ListRecipients, index);

                this.ListBoxRecipient.Items.RemoveAt(index);
            }
            else
            {
                if (tipoDest.Equals("C"))
                {
                    this.ListRecipientsCC = UIManager.AddressBookManager.RemoveCorrespondent(this.ListRecipientsCC, index);

                    this.ListBoxRecipientCC.Items.RemoveAt(index);
                }
            }

        }

        //metodo per settare la descrizione dell'ufficio referente nella pagina di protocollo
        /// <summary>
        /// 
        /// </summary>
        /// <param name="index"></param>
        /// <param name="tipoDest"></param>
        private void addDestinatari(int index, string tipoDest)
        {
            //controlo se esiste già il corrispondente selezionato
            DocsPaWR.Corrispondente[] listaDest;
            DocsPaWR.Corrispondente[] listaDestCC;
            DocsPaWR.Corrispondente corr;

            listaDest = this.ListRecipients.ToArray<Corrispondente>();
            listaDestCC = this.ListRecipientsCC.ToArray<Corrispondente>();


            //aggiungo il corrispondente
            if (tipoDest.Equals("P"))
            {
                corr = listaDestCC[index];
                this.ListRecipients = UIManager.AddressBookManager.AddCorrespondent(this.ListRecipients, corr);

                ListItem item = new ListItem();
                item.Text = this.TakeDescriptionCorrespondent(corr);
                item.Value = corr.systemId;

                this.ListBoxRecipient.Items.Insert(0, item);
                this.ListBoxRecipient.SelectedIndex = 0;
                this.ListBoxRecipient.Focus();
            }
            else
            {
                if (tipoDest.Equals("C"))
                {
                    corr = listaDest[index];
                    this.ListRecipientsCC = UIManager.AddressBookManager.AddCorrespondent(this.ListRecipientsCC, corr);

                    ListItem item = new ListItem();
                    item.Text = this.TakeDescriptionCorrespondent(corr);
                    item.Value = corr.systemId;

                    this.ListBoxRecipientCC.Items.Insert(0, item);
                    this.ListBoxRecipientCC.SelectedIndex = 0;
                    this.ListBoxRecipientCC.Focus();
                }
            }

        }

        protected void AddFromCCToRecipient(object sender, EventArgs e)
        {
            try
            {
                //Modifica Destinatari
                //if (schedaDocumento.protocollo.numero != null)
                //{
                //Se vengo in modifica dal documento
                //string system_id = ((NttDataWA.DocsPaWR.ProtocolloUscita)schedaDocumento.protocollo).destinatari[this.lbx_dest.SelectedIndex].systemId;
                //schedaDocumento = DocumentManager.DO_AddDestinatrioCCModificato(schedaDocumento, system_id);
                //schedaDocumento = DocumentManager.DO_RemoveDestinatarioModificati(schedaDocumento, system_id);
                //}

                if (this.ListBoxRecipientCC.SelectedIndex >= 0)
                {
                    //cerca il corrispondente e lo aggiunge tra i destinatari principali
                    addDestinatari(this.ListBoxRecipientCC.SelectedIndex, "P");
                    removeDestinatari(this.ListBoxRecipientCC.SelectedIndex, "C");

                    //if (this.DocumentInWorking != null && !string.IsNullOrEmpty(this.DocumentInWorking.systemId))
                    //{
                    //this.EditRecipients = true;
                    //this.EditRecipientsCC = true;
                    //}
                }

                this.UpPnlRecipients.Update();
            }
            catch (System.Exception ex)
            {
                UIManager.AdministrationManager.DiagnosticError(ex);
                return;
            }
        }

        protected void SaveAttachment(SchedaDocumento doc)
        {
            bool enableUffRef = false;
            bool daAggiornareUffRef;

            String temp = doc.tipoProto;
            doc = DocumentManager.UpdateDocument(this, doc, enableUffRef, out daAggiornareUffRef);
            doc.tipoProto = temp;

            if (doc.tipologiaAtto != null)
                doc.daAggiornareTipoAtto = false;
        }

        private void LoadMeansSending()
        {
            DocsPaWR.MezzoSpedizione[] m_sped = UIManager.DocumentManager.GetMeansSendingInSession();
            if (m_sped == null)
            {
                m_sped = UIManager.DocumentManager.GetMeansSending(this.UserLog.idAmministrazione);
                UIManager.DocumentManager.SetMeansSendingInSession(m_sped);
            }

            foreach (DocsPaWR.MezzoSpedizione m_spediz in m_sped)
            {
                ListItem li = new ListItem();
                li.Value = m_spediz.IDSystem;
                li.Text = m_spediz.Descrizione;
                this.DdlMeansSending.Items.Add(li);
            }
        }

        private void LoadTransmissionMoldes()
        {
            string idTypeDoc = string.Empty;
            string idDiagram = string.Empty;
            string idState = string.Empty;
            string idDocument = string.Empty;
            string accessRights = string.Empty;

            if (this.DocumentInWorking != null && !string.IsNullOrEmpty(this.DocumentInWorking.systemId))
            {
                accessRights = this.DocumentInWorking.accessRights;
                idDocument = this.DocumentInWorking.systemId;
            }

            if (this.CustomDocuments && this.DocumentInWorking != null && !string.IsNullOrEmpty(this.DocumentInWorking.systemId) && this.DocumentInWorking.template != null)
            {
                idTypeDoc = this.DocumentInWorking.template.SYSTEM_ID.ToString();
                if (this.EnableStateDiagram)
                {
                    if (this.StateDiagram != null)
                    {
                        idDiagram = this.StateDiagram.SYSTEM_ID.ToString();
                        DocsPaWR.Stato stato = DiagrammiManager.GetStateDocument(this.DocumentInWorking.docNumber);
                        if (stato != null)
                            idState = stato.SYSTEM_ID.ToString();
                    }
                }
            }

            Registro[] listReg = null;
            if (this.Registry != null)
            {
                listReg = new Registro[1];
                listReg[0] = this.Registry;
            }

            if (listReg == null)
            {
                listReg = this.Role.registri;
            }

            ArrayList idModelli = new ArrayList(UIManager.TransmissionModelsManager.GetTransmissionModelsLite(this.UserLog.idAmministrazione, listReg, this.UserLog.idPeople, this.InfoUser.idCorrGlobali, idTypeDoc, idDiagram, idState, "D", idDocument, this.Role.idGruppo, false, accessRights));

            ModelloTrasmissione[] modTrasm = idModelli.Cast<ModelloTrasmissione>().ToArray();
            modTrasm = (from mod in modTrasm orderby mod.NOME ascending select mod).ToArray<ModelloTrasmissione>();
            idModelli = ArrayList.Adapter(modTrasm.ToList());

            System.Web.UI.WebControls.ListItem li = new System.Web.UI.WebControls.ListItem("", "");
            this.DocumentDdlTransmissionsModel.Items.Add(li);

            for (int i = 0; i < idModelli.Count; i++)
            {
                DocsPaWR.ModelloTrasmissione mod = (DocsPaWR.ModelloTrasmissione)idModelli[i];
                li = new System.Web.UI.WebControls.ListItem();
                li.Value = mod.SYSTEM_ID.ToString();
                li.Text = mod.NOME;
                if (this.ViewCodeTransmissionModels)
                {
                    li.Text += " (" + mod.CODICE + ")";
                }
                this.DocumentDdlTransmissionsModel.Items.Add(li);
            }

        }

        protected void AddSenderToMultipleSender_Click(object sender, System.EventArgs e)
        {
            try
            {
                Corrispondente corr = null;

                if (!string.IsNullOrEmpty(this.TxtCodeSender.Text))
                {

                    if (!string.IsNullOrEmpty(this.IdSender.Value))
                    {
                        corr = UIManager.AddressBookManager.getCorrispondenteBySystemIDDisabled(this.IdSender.Value);
                    }
                    else
                    {
                        corr = UIManager.AddressBookManager.getCorrispondenteByCodRubrica(this.TxtCodeSender.Text, false);
                    }

                    if (corr != null && !string.IsNullOrEmpty(corr.codiceRubrica) && !string.IsNullOrEmpty(corr.descrizione))
                    {
                        if (this.CheckDuplicatiMittMultipli(corr))
                        {
                            this.MultipleSenders = UIManager.AddressBookManager.addCorrispondente(this.MultipleSenders, corr).ToList<Corrispondente>();
                            this.SetListBoxMultipleSender(corr);
                            this.TxtCodeSender.Text = string.Empty;
                            this.TxtDescriptionSender.Text = string.Empty;
                            this.IdSender.Value = string.Empty;
                            this.Sender = null;
                            HideButtonsCheckSender();
                            this.UpPnlMultipleSender.Update();
                            this.UpPnlSender.Update();
                        }
                    }
                    else
                    {
                        corr = new DocsPaWR.Corrispondente();
                        corr.descrizione = this.TxtDescriptionSender.Text;
                        corr.tipoCorrispondente = "O";
                        corr.idAmministrazione = this.InfoUser.idAmministrazione;
                        if (this.CheckDuplicatiMittMultipli(corr))
                        {
                            this.MultipleSenders = UIManager.AddressBookManager.addCorrispondente(this.MultipleSenders, corr).ToList<Corrispondente>();
                            this.SetListBoxMultipleSender(corr);
                            this.TxtCodeSender.Text = string.Empty;
                            this.TxtDescriptionSender.Text = string.Empty;
                            this.IdSender.Value = string.Empty;
                            this.Sender = null;
                            HideButtonsCheckSender();
                            this.UpPnlMultipleSender.Update();
                            this.UpPnlSender.Update();
                        }
                    }
                }
                else
                {
                    if (!string.IsNullOrEmpty(this.TxtDescriptionSender.Text))
                    {
                        corr = new DocsPaWR.Corrispondente();
                        corr.descrizione = this.TxtDescriptionSender.Text;
                        corr.tipoCorrispondente = "O";
                        corr.idAmministrazione = this.InfoUser.idAmministrazione;
                        if (this.CheckDuplicatiMittMultipli(corr))
                        {
                            this.MultipleSenders = UIManager.AddressBookManager.addCorrispondente(this.MultipleSenders, corr).ToList<Corrispondente>();
                            this.SetListBoxMultipleSender(corr);
                            this.TxtCodeSender.Text = string.Empty;
                            this.TxtDescriptionSender.Text = string.Empty;
                            this.IdSender.Value = string.Empty;
                            this.Sender = null;
                            HideButtonsCheckSender();
                            this.UpPnlMultipleSender.Update();
                            this.UpPnlSender.Update();
                        }

                    }
                }

                if (this.DocumentInWorking != null && !string.IsNullOrEmpty(this.DocumentInWorking.systemId))
                {
                    this.EditMultipleSender = true;
                }
            }
            catch (System.Exception ex)
            {
                UIManager.AdministrationManager.DiagnosticError(ex);
                return;
            }
        }

        protected void AddMultipleSenderToSender_Click(object sender, System.EventArgs e)
        {
            try
            {
                if (!string.IsNullOrEmpty(this.ListBoxMultipleSender.SelectedValue) && this.MultipleSenders != null)
                {
                    this.TxtCodeSender.Text = this.ListBoxMultipleSender.SelectedItem.Value;
                    this.TxtDescriptionSender.Text = this.ListBoxMultipleSender.SelectedItem.Text;

                    Corrispondente corr = UIManager.AddressBookManager.getCorrispondenteByCodRubrica(this.TxtCodeSender.Text, false);

                    if (corr != null)
                    {
                        this.IdSender.Value = corr.systemId;
                    }
                    else
                    {
                        this.IdSender.Value = string.Empty;
                        this.TxtCodeSender.Text = string.Empty;
                        corr = new DocsPaWR.Corrispondente();
                        corr.descrizione = this.TxtDescriptionSender.Text;
                        corr.tipoCorrispondente = "O";
                        corr.idAmministrazione = this.InfoUser.idAmministrazione;
                    }
                    this.Sender = corr;

                    this.MultipleSenders = UIManager.AddressBookManager.RemoveCorrespondent(this.MultipleSenders, this.ListBoxMultipleSender.SelectedIndex);

                    this.RemoveFromListBoxMultipleSender(corr);

                    //Nel caso di un predisposto in arrivo, applico i controlli K1/K2 per il nuovo mittente inserito
                    if (this.DocumentInWorking.tipoProto != null && this.DocumentInWorking.tipoProto.ToUpper().Equals("A"))
                    {
                        if (DocumentInWorking != null && !string.IsNullOrEmpty(DocumentInWorking.interop) && DocumentInWorking.protocollo != null && string.IsNullOrEmpty(DocumentInWorking.protocollo.segnatura))
                            SetButtonsCheckSender();
                    }

                    this.UpPnlMultipleSender.Update();
                    this.UpPnlSender.Update();

                    if (this.DocumentInWorking != null && !string.IsNullOrEmpty(this.DocumentInWorking.systemId))
                    {
                        this.EditMultipleSender = true;
                    }
                }
            }
            catch (System.Exception ex)
            {
                UIManager.AdministrationManager.DiagnosticError(ex);
                return;
            }
        }

        protected void DeleteMultipleSender_Click(object sender, System.EventArgs e)
        {
            try
            {
                //Valido per i protocolli in Arrivo
                if (this.ListBoxMultipleSender.SelectedIndex >= 0)
                {
                    List<Corrispondente> tempCorr = UIManager.AddressBookManager.RemoveCorrespondent(this.MultipleSenders, this.ListBoxMultipleSender.SelectedIndex);
                    if (tempCorr == null)
                    {
                        this.MultipleSenders = null;
                    }
                    else
                    {
                        this.MultipleSenders = tempCorr.ToList<Corrispondente>();
                    }
                    this.ListBoxMultipleSender.Items.RemoveAt(this.ListBoxMultipleSender.SelectedIndex);
                    this.UpPnlMultipleSender.Update();

                    if (this.DocumentInWorking != null && !string.IsNullOrEmpty(this.DocumentInWorking.systemId))
                    {
                        this.EditMultipleSender = true;
                    }
                }
                else
                {
                    //string msg = "Selezionare un mittente da eliminare";
                    string msgDesc = "WarningDocumentSelectDeleteMitt";

                    ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + msgDesc.Replace("'", @"\'") + "', 'warning', '');} else {parent.ajaxDialogModal('" + msgDesc.Replace("'", @"\'") + "', 'warning', '');}", true);
                }
            }
            catch (System.Exception ex)
            {
                UIManager.AdministrationManager.DiagnosticError(ex);
                return;
            }
        }

        private void RemoveFromListBoxMultipleSender(Corrispondente corr)
        {
            ListItem item = new ListItem(UIManager.AddressBookManager.getDecrizioneCorrispondenteSemplice(corr), corr.codiceRubrica);
            this.ListBoxMultipleSender.Items.Remove(item);
        }

        private void SetListBoxMultipleSender(Corrispondente corr)
        {
            ListItem item = new ListItem(UIManager.AddressBookManager.getDecrizioneCorrispondenteSemplice(corr), corr.codiceRubrica);
            this.ListBoxMultipleSender.Items.Insert(0, item);
            this.ListBoxMultipleSender.SelectedValue = item.Value;
            this.ListBoxMultipleSender.Focus();
        }

        private void setListBoxMittentiMultipli()
        {
            if (this.DocumentInWorking != null && this.DocumentInWorking.protocollo != null)
            {
                if (((DocsPaWR.ProtocolloEntrata)this.DocumentInWorking.protocollo).mittenti != null)
                {
                    DocsPaWR.Corrispondente mittente;
                    this.ListBoxMultipleSender.Items.Clear();
                    for (int i = 0; i < ((DocsPaWR.ProtocolloEntrata)this.DocumentInWorking.protocollo).mittenti.Length; i++)
                    {
                        mittente = (((DocsPaWR.ProtocolloEntrata)this.DocumentInWorking.protocollo).mittenti[i]);
                        ListItem item = new ListItem(UIManager.AddressBookManager.getDecrizioneCorrispondenteSemplice(mittente), mittente.codiceRubrica);
                        this.ListBoxMultipleSender.Items.Add(item);
                    }
                    this.MultipleSenders = (((DocsPaWR.ProtocolloEntrata)this.DocumentInWorking.protocollo).mittenti).ToList<Corrispondente>();
                }

                if (((DocsPaWR.ProtocolloEntrata)this.DocumentInWorking.protocollo).mittenti == null)
                {
                    this.ListBoxMultipleSender.Items.Clear();
                }
            }
        }

        private void SetListBoxMultipleSenderFromAddressBook()
        {
            if (this.MultipleSenders != null && this.MultipleSenders.Count > 0)
            {
                DocsPaWR.Corrispondente mittente;
                this.ListBoxMultipleSender.Items.Clear();
                for (int i = 0; i < this.MultipleSenders.Count; i++)
                {
                    mittente = this.MultipleSenders[i];
                    ListItem item = new ListItem(UIManager.AddressBookManager.getDecrizioneCorrispondenteSemplice(mittente), mittente.codiceRubrica);
                    this.ListBoxMultipleSender.Items.Add(item);
                }
            }
        }


        private bool CheckDuplicatiMittMultipli(Corrispondente corr)
        {
            bool result = true;
            if (corr != null && this.ListBoxMultipleSender != null && this.ListBoxMultipleSender.Items.Count > 0)
            {
                foreach (ListItem item in this.ListBoxMultipleSender.Items)
                {
                    if (item.Value == corr.codiceRubrica || item.Text.ToUpper() == corr.descrizione.ToUpper())
                        result = false;
                }
            }
            return result;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void DeleteRecipient_Click(object sender, System.EventArgs e)
        {
            try
            {
                if (this.ListBoxRecipient.SelectedIndex >= 0)
                {
                    //Caso in cui il documento è stato protocollato
                    // schedaDocumento = DocumentManager.DO_RemoveDestinatarioModificati(schedaDocumento, ((NttDataWA.DocsPaWR.ProtocolloUscita)schedaDocumento.protocollo).destinatari[this.lbx_dest.SelectedIndex].systemId);
                    this.RemoveRecipient(this.ListBoxRecipient.SelectedIndex, "P");
                    this.UpPnlRecipients.Update();

                    //if (this.DocumentInWorking != null && !string.IsNullOrEmpty(this.DocumentInWorking.systemId))
                    //{
                    //    this.EditRecipients = true;
                    //}

                }
                else
                {
                    //string msg = "Selezionare un destinatario da eliminare";
                    string msgDesc = "WarningDocumentSelectDeleteDest";

                    ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + msgDesc.Replace("'", @"\'") + "', 'warning', '');} else {parent.ajaxDialogModal('" + msgDesc.Replace("'", @"\'") + "', 'warning', '');}", true);
                    //ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "no_corr", "alert('Selezionare un destinatario da eliminare');", true);
                }
            }
            catch (System.Exception ex)
            {
                UIManager.AdministrationManager.DiagnosticError(ex);
                return;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void DeleteRecipientCC_Click(object sender, System.EventArgs e)
        {
            try
            {
                if (this.ListBoxRecipientCC.SelectedIndex >= 0)
                {
                    //Caso di modifica
                    //schedaDocumento = DocumentManager.DO_RemoveDestinatarioCCModificati(schedaDocumento, ((NttDataWA.DocsPaWR.ProtocolloUscita)schedaDocumento.protocollo).destinatariConoscenza[this.lbx_destCC.SelectedIndex].systemId);
                    this.RemoveRecipient(this.ListBoxRecipientCC.SelectedIndex, "C");
                    this.UpPnlRecipients.Update();

                    //if (this.DocumentInWorking != null && !string.IsNullOrEmpty(this.DocumentInWorking.systemId))
                    //{
                    //    this.EditRecipientsCC = true;
                    //}
                }
                else
                {
                    //string msg = "Selezionare un destinatario da eliminare";
                    string msgDesc = "WarningDocumentSelectDeleteDest";

                    ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + msgDesc.Replace("'", @"\'") + "', 'warning', '');} else {parent.ajaxDialogModal('" + msgDesc.Replace("'", @"\'") + "', 'warning', '');}", true);
                    //ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "no_corr", "alert('Selezionare un destinatario da eliminare');", true);
                }
            }
            catch (System.Exception ex)
            {
                UIManager.AdministrationManager.DiagnosticError(ex);
                return;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="index"></param>
        /// <param name="tipoDest"></param>
        private void RemoveRecipient(int index, string type)
        {
            if (type.Equals("P"))
            {
                this.ListRecipients = UIManager.AddressBookManager.RemoveCorrespondent(this.ListRecipients, index);

                this.ListBoxRecipient.Items.RemoveAt(index);
            }
            else
            {
                if (type.Equals("C"))
                {
                    this.ListRecipientsCC = UIManager.AddressBookManager.RemoveCorrespondent(this.ListRecipientsCC, index);

                    this.ListBoxRecipientCC.Items.RemoveAt(index);
                }
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void AddRecipient_Click(object sender, System.EventArgs e)
        {
            try
            {
                //cerca il corrispondente e lo aggiunge tra i destinatari principali
                DocsPaWR.Corrispondente corr = null;
                if (!string.IsNullOrEmpty(this.TxtRecipientDescription.Text.Trim()))
                {
                    corr = new DocsPaWR.Corrispondente();
                    corr.descrizione = this.TxtRecipientDescription.Text;
                    corr.tipoCorrispondente = "O";
                    corr.idAmministrazione = this.InfoUser.idAmministrazione;

                }

                if (corr != null)
                {
                    DocsPaWR.Corrispondente[] listaDestCC = this.ListRecipientsCC.ToArray<Corrispondente>();
                    if (!UIManager.AddressBookManager.esisteCorrispondente(listaDestCC, corr))
                    {
                        DocsPaWR.Corrispondente[] listaDest = this.ListRecipients.ToArray<Corrispondente>();
                        if (!UIManager.AddressBookManager.esisteCorrispondente(listaDest, corr))
                        {

                            this.ListRecipients = UIManager.AddressBookManager.AddCorrespondet(this.ListRecipients, this.ListRecipientsCC, corr);

                            if (this.RblTypeProtocol.SelectedValue == "I")
                            {
                                ArrayList corrTotali = new ArrayList();
                                bool allInt = true;
                                for (int i = 0; i < this.ListRecipients.Count; i++)
                                {
                                    DocsPaWR.Corrispondente c = this.ListRecipients[i];
                                    //Controllo del corrispondente che si intende aggiungere ai destinatari partendo da un protocollo INTERNO
                                    if (c.tipoIE == "I")
                                    {
                                        if (c.tipoCorrispondente == "R")
                                        {

                                            if (UIManager.AddressBookManager.VerificaAutorizzazioneRuoloSuRegistro(UIManager.RegistryManager.GetRegistryInSession().systemId, c.systemId))
                                                corrTotali.Add(c);
                                        }
                                        if (c.tipoCorrispondente == "U")
                                        {
                                            string[] codiciAooAutorizzate = UIManager.UserManager.GetUoInterneAoo();
                                            for (int j = 0; j < codiciAooAutorizzate.Length; j++)
                                            {
                                                if (c.codiceRubrica == codiciAooAutorizzate[j])
                                                    corrTotali.Add(c);
                                            }
                                        }
                                        if (c.tipoCorrispondente == "P")
                                        {

                                            string[] systemIdRuoliAutorizzati = UIManager.UserManager.getUtenteInternoAOO(((Utente)c).idPeople, UIManager.RegistryManager.GetRegistryInSession().systemId);
                                            if (systemIdRuoliAutorizzati.Length != 0)
                                                corrTotali.Add(c);
                                        }
                                    }
                                    else
                                    {
                                        allInt = false;
                                    }
                                }

                                //if (corr.tipoCorrispondente == "L" && lsCorr.Count != corrTotali.Count)
                                if (!allInt)
                                {
                                    int corrCancella = 0;
                                    for (int i = 0; i < this.ListRecipients.Count; i++)
                                    {
                                        DocsPaWR.Corrispondente c = this.ListRecipients[i];
                                        if (c.codiceCorrispondente == corr.codiceCorrispondente)
                                        {
                                            corrCancella = i;
                                            break;
                                        }
                                    }
                                    this.ListRecipients = UIManager.AddressBookManager.RemoveCorrespondent(this.ListRecipients, corrCancella);

                                    if (corr.tipoCorrispondente == "O")
                                    {
                                        //string msg = "Non è possibile inserire destinatari occasionali";
                                        string msgDesc = "WarningDocumentNoInsertDestOcc";

                                        ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + msgDesc.Replace("'", @"\'") + "', 'warning', '');} else {parent.ajaxDialogModal('" + msgDesc.Replace("'", @"\'") + "', 'warning', '');}", true);
                                        //ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "no_prole", "alert('Non è possibile inserire destinatari occasionali');", true);
                                    }
                                    else
                                    {
                                        //string msg = "Non è possibile inserire destinatari esterni";
                                        string msgDesc = "WarningDocumentNoInsertDestEst";

                                        ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + msgDesc.Replace("'", @"\'") + "', 'warning', '');} else {parent.ajaxDialogModal('" + msgDesc.Replace("'", @"\'") + "', 'warning', '');}", true);
                                        //ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "no_prole", "alert('Non è possibile inserire destinatari esterni');", true);
                                    }
                                    return;
                                }
                            }

                            ListItem item = new ListItem();
                            item.Text = corr.descrizione;
                            item.Value = corr.systemId;
                            this.ListBoxRecipient.Items.Insert(0, item);
                            this.ListBoxRecipient.SelectedIndex = 0;
                            this.ListBoxRecipient.Focus();
                        }
                    }
                }

                //Modifica Destinatari
                if (!this.TxtRecipientDescription.Text.Trim().Equals(""))
                {
                    //IN caso di modifica documento creato
                    //schedaDocumento = DocumentManager.DO_AddDestinatrioModificato(schedaDocumento, corr.systemId);
                }

                //il campo della descrizione del corrispondente deve essere in sola lettura 
                //quando il tipo di protocollo è INTERNO
                if (this.RblTypeProtocol.SelectedItem.Value == "I")
                {
                    this.TxtRecipientCode.Text = string.Empty;
                    this.TxtRecipientDescription.Text = string.Empty;

                }
                else
                {
                    this.TxtRecipientCode.Text = string.Empty;
                    this.TxtRecipientDescription.Text = string.Empty;
                }

                //this.EditRecipients = true;

                this.UpPnlRecipients.Update();
            }
            catch (System.Exception ex)
            {
                UIManager.AdministrationManager.DiagnosticError(ex);
                return;
            }
        }

        protected bool CtrlIfDestWithRicevuta(DocsPaWR.Corrispondente dest, out string annullato)
        {
            bool rtn = false;
            annullato = string.Empty;
            DocsPaWR.ProtocolloDestinatario[] protoDest;
            try
            {
                if (this.DocumentInWorking == null || string.IsNullOrEmpty(this.DocumentInWorking.systemId) || dest == null || (dest != null && dest.systemId == null))
                {
                    return rtn;
                }
                DocsPaWR.InfoDocumento infoDoc = DocumentManager.getInfoDocumento(this.DocumentInWorking);
                protoDest = DocumentManager.getDestinatariInteropAggConferma(infoDoc.idProfile, dest);

                if (protoDest != null)
                {
                    for (int i = 0; i < protoDest.Length; i++)
                    {
                        if (protoDest[i].annullato != null && protoDest[i].annullato.Equals("E"))
                        {
                            rtn = true;
                            annullato = "E";
                        }

                        if (protoDest[i] != null && protoDest[i].dataProtocolloDestinatario != null && !protoDest[i].dataProtocolloDestinatario.Equals(""))
                        {
                            if (protoDest[i].descrizioneCorr == dest.descrizione)
                                rtn = true;
                            if (protoDest[i].annullato != null && protoDest[i].annullato.Equals("1"))
                                annullato = "1";
                        }
                    }
                }
            }
            catch (System.Exception ex)
            {
                UIManager.AdministrationManager.DiagnosticError(ex);
            }
            return rtn;
        }

        private string CheckFields(SchedaDocumento schedaDocumento)
        {
            string msg = string.Empty;
            //controllo sull'inserimento dell'oggetto

            if (string.IsNullOrEmpty(this.TxtObject.Text.Trim()))
            {

                //msg = "Inserire un valore per il campo oggetto.";
                msg = "WarningDocumentObjectNotFound";

                //this.ctrl_oggetto.oggetto_SetControlFocus();
                return msg;
            }

            if (this.TxtObject.Text.Length > this.MaxLenghtObject)
            {
                //msg = String.Format("La lunghezza massima del campo oggetto non deve superare i {0} caratteri.", this.MaxLenghtObject);
                msg = "WarningDocumentObjectMaxLenght";

                //this.ctrl_oggetto.oggetto_SetControlFocus();
                return msg;
            }

            //controllo sulla fascicolazione obbligatoria
            //if (this.RapidClassificationRequired)
            if (IsRapidClassificationRequired())
            {
                if (schedaDocumento.systemId == null)
                {
                    if (string.IsNullOrEmpty(this.TxtCodeProject.Text) || string.IsNullOrEmpty(this.TxtDescriptionProject.Text))
                    {
                        //msg = "La fascicolazione rapida è obbligatoria";
                        msg = "WarningDocumentRequestProject";

                        return msg;
                    }
                }
                else
                {
                    // controllo su obbligatorietà della fascicolazione e chiamata al web service
                    // che ci da informazione se il documento è già stato o meno fascicolato
                    if (schedaDocumento.documentoPrincipale == null)
                        if (!DocumentManager.getSeDocFascicolato(this.DocumentInWorking) && string.IsNullOrEmpty(this.TxtCodeProject.Text) && string.IsNullOrEmpty(this.TxtDescriptionProject.Text))
                        {
                            //msg = "La fascicolazione rapida è obbligatoria";
                            msg = "WarningDocumentRequestProject";

                            return msg;
                        }
                }
            }
            // fine controllo fascicolazione obbligatoria


            //tipo atto se obbligatorio
            string idAmm = this.InfoUser.idAmministrazione; ;
            if (TypeDocRequired && this.DocumentDdlTypeDocument.SelectedIndex == 0 && this.DocumentInWorking.documentoPrincipale == null)
            {
                //msg = "Inserire un valore per il campo Tipologia documento.";
                msg = "WarningDocumentInsertTipDoc";
            }
            return msg;
        }


        protected RubricaCallType GetCallType(string idControl)
        {
            RubricaCallType calltype;

            if (this.RblTypeProtocol.SelectedValue.ToUpper().Equals("A"))
            {
                calltype = RubricaCallType.CALLTYPE_PROTO_IN;
            }
            else
            {
                if (this.RblTypeProtocol.SelectedValue == "I")
                {
                    if (idControl == "TxtCodeSender")
                    {
                        calltype = RubricaCallType.CALLTYPE_PROTO_INT_MITT;
                    }
                    else
                    {
                        calltype = RubricaCallType.CALLTYPE_PROTO_INT_DEST;
                    }
                }
                else
                {
                    if (idControl == "TxtCodeSender")
                    {
                        calltype = RubricaCallType.CALLTYPE_PROTO_OUT_MITT;
                    }
                    else
                    {
                        calltype = RubricaCallType.CALLTYPE_PROTO_OUT;
                    }
                }
            }

            return calltype;
        }

        protected void DocumentImgAnswerSearch_Click(object sender, ImageClickEventArgs e)
        {
            try
            {
                string tipoProto = this.RblTypeProtocol.SelectedValue;
                if (!this.RblTypeProtocol.Visible) tipoProto = "G";

                if (tipoProto != "G") UserManager.setRegistroSelezionato(this, UserManager.getRegistroBySistemId(this, this.DdlRegistries.SelectedValue));

                if (this.DocumentInWorking != null && this.DocumentInWorking.oggetto == null)
                {
                    this.DocumentInWorking.oggetto = new Oggetto();
                    this.DocumentInWorking.oggetto.descrizione = this.TxtObject.Text;
                }

                this.DocumentInWorking.tipoProto = tipoProto;

                this.Sender = this.VerifySender();

                if (tipoProto.Equals("A"))
                {
                    if (this.DocumentInWorking.protocollo == null)
                    {
                        this.DocumentInWorking.protocollo = new DocsPaWR.ProtocolloEntrata();
                    }
                    ((ProtocolloEntrata)this.DocumentInWorking.protocollo).mittente = this.Sender;
                    ((ProtocolloEntrata)this.DocumentInWorking.protocollo).daAggiornareMittente = true;
                    if (this.EnableMultipleSenders)
                    {
                        if (this.MultipleSenders != null)
                        {
                            ((ProtocolloEntrata)this.DocumentInWorking.protocollo).mittenti = this.MultipleSenders.ToArray<Corrispondente>();
                            ((ProtocolloEntrata)this.DocumentInWorking.protocollo).daAggiornareMittentiMultipli = true;
                        }
                    }
                }
                else
                {
                    if (tipoProto.Equals("P"))
                    {
                        if (this.DocumentInWorking.protocollo == null)
                        {
                            this.DocumentInWorking.protocollo = new DocsPaWR.ProtocolloUscita();
                        }
                        ((ProtocolloUscita)this.DocumentInWorking.protocollo).mittente = this.Sender;
                        ((ProtocolloUscita)this.DocumentInWorking.protocollo).daAggiornareMittente = true;
                        ((ProtocolloUscita)this.DocumentInWorking.protocollo).destinatari = this.ListRecipients.ToArray<Corrispondente>();
                        if (this.ListRecipientsCC != null && this.ListRecipientsCC.Count > 0)
                        {
                            ((ProtocolloUscita)this.DocumentInWorking.protocollo).destinatariConoscenza = this.ListRecipientsCC.ToArray<Corrispondente>();
                        }

                        this.DocumentBtnSend.Enabled = true;
                    }
                    else
                    {
                        if (tipoProto.Equals("I"))
                        {
                            if (this.DocumentInWorking.protocollo == null)
                            {
                                this.DocumentInWorking.protocollo = new DocsPaWR.ProtocolloInterno();
                            }
                            ((ProtocolloInterno)this.DocumentInWorking.protocollo).mittente = this.Sender;
                            ((ProtocolloInterno)this.DocumentInWorking.protocollo).daAggiornareMittente = true;
                            ((ProtocolloInterno)this.DocumentInWorking.protocollo).destinatari = this.ListRecipients.ToArray<Corrispondente>();
                            if (this.ListRecipientsCC != null && this.ListRecipientsCC.Count > 0)
                            {
                                ((ProtocolloInterno)this.DocumentInWorking.protocollo).destinatariConoscenza = this.ListRecipientsCC.ToArray<Corrispondente>();
                            }
                        }
                    }
                }

                if (this.DocumentInWorking != null)
                {
                    if (this.DocumentInWorking.oggetto != null)
                    {
                        this.DocumentInWorking.oggetto.descrizione = this.TxtObject.Text;
                    }
                }

                DocumentManager.setSelectedRecord(this.DocumentInWorking);

                ScriptManager.RegisterStartupScript(this, this.GetType(), "AnswerSearchDocuments", "ajaxModalPopupAnswerSearchDocuments();", true);
            }
            catch (System.Exception ex)
            {
                UIManager.AdministrationManager.DiagnosticError(ex);
                return;
            }
        }

        protected void DocumentBtnPrepared_Click(object sender, EventArgs e)
        {

            //logger.Info("BEGIN");

            // Se il documento è in checkout non può in alcun modo essere salvato
            if (this.DocumentInWorking.checkOutStatus == null)
            {
                string messaggio = string.Empty;

                //if (this.DocumentInWorking.modificaRispostaDocumento == true)
                //{
                //    //string msg = "Risposta al documento non salvata.";
                //    string msgDesc = "WarningDocumentResponseNotSaved";

                //    ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + msgDesc.Replace("'", @"\'") + "', 'warning', '');} else {parent.ajaxDialogModal('" + msgDesc.Replace("'", @"\'") + "', 'warning', '');}", true);

                //    //string message = "Risposta al documento non salvata";
                //    //ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "no_prole", "alert('" + message + "');", true);
                //    return;

                //}
                if (this.CheckProtoEnabled())
                {
                    //Verifica se il documento da predisporre è personale, in tal caso si notifica 
                    //(e si chiede conferma) all'utente che il documento verrà trasformato 
                    //da personale a privato.
                    if (this.DocumentInWorking.personale == "1")
                    {
                        //Solo il proprietario di un documento personale può portarlo nello stato privato.
                        //Verifica dunque che l'utente che vuole predisporre e il proprietario del 
                        //documento siano la stessa persona
                        if (UIManager.UserManager.GetInfoUser().idPeople.Equals(this.DocumentInWorking.creatoreDocumento.idPeople))
                        {
                            //Controllo se il ruolo utente è autorizzato a creare documenti privati
                            if (UIManager.UserManager.IsAuthorizedFunctions("DO_CREA_PRIVATO"))
                            {
                                //messaggio = InitMessageXml.getInstance().getMessage("docPredisponiPersonale");
                                //msg_PersonaleDoc.Confirm(messaggio);
                            }
                            else
                            {
                                //messaggio = InitMessageXml.getInstance().getMessage("docPredisponiPersonale-NO");
                                ////Response.Write("<script>alert(\"" + messaggio + "\");</script>");
                                //this.Page.ClientScript.RegisterStartupScript(this.GetType(), "Prediuno", "alert('" + messaggio + "');", true);
                                ////Response.Write("<script>top.principale.iFrame_sx.document.location = 'tabGestioneDoc.aspx?tab=profilo';</script>");
                                //this.Page.ClientScript.RegisterStartupScript(this.GetType(), "predidue", "top.principale.iFrame_sx.document.location = 'tabGestioneDoc.aspx?tab=profilo';", true);
                            }
                        }
                        else
                        {
                            //messaggio = "Utente non abilitato alla protocollazione";
                            //// Response.Write("<script>alert('" + messaggio + "');</script>");
                            //this.Page.ClientScript.RegisterStartupScript(this.GetType(), "Predidue", "alert('" + messaggio + "');", true);
                            //// Response.Write("<script>top.principale.iFrame_sx.document.location = 'tabGestioneDoc.aspx?tab=profilo';</script>");
                            //this.Page.ClientScript.RegisterStartupScript(this.GetType(), "Preditre", "top.principale.iFrame_sx.document.location = 'tabGestioneDoc.aspx?tab=profilo';", true);
                        }
                    }
                    else
                    {
                        predisponi();
                    }
                }
                else
                {
                    //string message = "Utente non abilitato alla protocollazione";
                    ////Response.Write("<script>alert('" + message + "');</script>");
                    //this.Page.ClientScript.RegisterStartupScript(this.GetType(), "No_abiuno", "alert('" + message + "');", true);
                    ////Response.Write("<script>top.principale.iFrame_sx.document.location = 'tabGestioneDoc.aspx?tab=profilo';</script>");
                    //this.Page.ClientScript.RegisterStartupScript(this.GetType(), "No_abidue", "top.principale.iFrame_sx.document.location = 'tabGestioneDoc.aspx?tab=profilo';", true);
                }

            }
            else
            {
                //// Response.Write("<script>alert('Impossibile salvare i dati del documento in quanto risulta bloccato');</script>");
                //this.Page.ClientScript.RegisterStartupScript(this.GetType(), "No_salvare", "alert('Impossibile salvare i dati del documento in quanto risulta bloccato');", true);
            }
            //logger.Info("END");


        }

        private void CalcolaFascicolazioneRapida(Folder folder, ref string codice, ref string descrizione, ref bool isRootFolder, string codFascicolo)
        {
            Folder parent = null;

            if (folder.descrizione.Equals(codFascicolo))
                isRootFolder = true;
            else
            {
                codice = folder.descrizione + "//" + codice;
                descrizione = folder.descrizione + "//" + descrizione;
                parent = ProjectManager.getFolder(this, folder.idParent);
                parent = ProjectManager.getFolder(this, parent);
            }
            if (!isRootFolder)
                CalcolaFascicolazioneRapida(parent, ref codice, ref descrizione, ref isRootFolder, codFascicolo);
        }

        protected void predisponi()
        {
            // logger.Info("BEGIN");
            this.DocumentInWorking.predisponiProtocollazione = true;

            if (this.IsRoleOutwardEnabled())
            {
                this.DocumentInWorking.tipoProto = "P";
                this.DocumentInWorking.protocollo = new DocsPaWR.ProtocolloUscita();
                if (EnableSenderDefault)
                {
                    DocsPaWR.Corrispondente corr = this.Role.uo;
                    ((DocsPaWR.ProtocolloUscita)this.DocumentInWorking.protocollo).mittente = corr;
                }
            }
            else if (this.IsRoleInwardEnabled())
            {
                this.DocumentInWorking.tipoProto = "A";
                this.DocumentInWorking.protocollo = new DocsPaWR.ProtocolloEntrata();
            }
            else if (this.IsRoleInternalEnabled())
            {
                this.DocumentInWorking.tipoProto = "I";
                this.DocumentInWorking.protocollo = new DocsPaWR.ProtocolloInterno();
                if (EnableSenderDefault)
                {
                    DocsPaWR.Corrispondente corr = this.Role.uo;
                    ((DocsPaWR.ProtocolloInterno)this.DocumentInWorking.protocollo).mittente = corr;
                }
            }

            //Se un documento predisposto ha una tipologia sospesa, al predisposto non viene impostata nessuna tipologia di documento
            if (this.DocumentInWorking != null && this.DocumentInWorking.template != null && this.DocumentInWorking.template.IN_ESERCIZIO.ToUpper().Equals("NO"))
            {
                this.DocumentInWorking.template = null;
                this.DocumentInWorking.tipologiaAtto = null;
            }

            Response.Redirect("Document.aspx");
            // btn_salva.Enabled = true;
            //Session["saveButtonEnabled"] = true;
            // this.Page.ClientScript.RegisterStartupScript(this.GetType(), "Tab_gestione", "top.principale.iFrame_sx.document.location= 'tabGestioneDoc.aspx?tab=protocollo';", true);
            //   logger.Info("END");
        }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        private string CheckDate()
        {
            //Se il registro è giallo e il documento è nuovo
            //controllo sul range: la data del protocollo deve essere > data ultimo protocollo e < data odierna			
            string d_reg = string.Empty;

            //reperisco la data secondo il registro
            DocsPaWR.Registro reg = this.Registry;
            if (reg != null)
            {
                d_reg = Utils.utils.getMaxDate(reg.dataApertura, reg.dataUltimoProtocollo);
            }
            else
            {
                string msg = "Si è verificato un errore nel reperimento delle informazioni";
                return msg;
            }

            //reperisco la data odierna
            DateTime dt_cor = DateTime.Now;
            CultureInfo ci = new CultureInfo("it-IT");
            string[] formati = { "dd/MM/yyyy" };

            DateTime dt_reg = DateTime.ParseExact(d_reg, formati, ci.DateTimeFormat, DateTimeStyles.AllowWhiteSpaces);

            //DateTime dt_segn = DateTime.ParseExact(this.TxtDateProtocol.Text, formati, ci.DateTimeFormat, DateTimeStyles.AllowWhiteSpaces);

            if (dt_cor.CompareTo(dt_reg) < 0)
            //|| dt_segn.CompareTo(dt_cor) > 0)
            {
                return "Data non valida";
            }
            return string.Empty; ;
        }

        protected bool FromInteropPecOrSimpInteropOrMail(SchedaDocumento schedaDocInterop)
        {
            bool result = false;

            if (schedaDocInterop != null && schedaDocInterop.interop != null && (schedaDocInterop.interop.Equals("S") || schedaDocInterop.interop.Equals("P") || schedaDocInterop.interop.Equals("E")) && schedaDocInterop.protocollo != null && schedaDocInterop.typeId != null &&
                (schedaDocInterop.typeId.Equals("INTEROPERABILITA") || schedaDocInterop.typeId.Equals(SimplifiedInteroperabilityManager.SimplifiedInteroperabilityId) || schedaDocInterop.typeId.Equals("MAIL")) && schedaDocInterop.tipoProto != null && schedaDocInterop.tipoProto.Equals("A"))
            {
                result = true;
            }

            return result;
        }

        protected bool FromInteropPecOrSimpInterop(SchedaDocumento schedaDocInterop)
        {
            bool result = false;

            if (schedaDocInterop != null && schedaDocInterop.interop != null && schedaDocInterop.interop.Equals("S") && schedaDocInterop.protocollo != null && schedaDocInterop.typeId != null &&
                (schedaDocInterop.typeId.Equals("INTEROPERABILITA") || schedaDocInterop.typeId.Equals(SimplifiedInteroperabilityManager.SimplifiedInteroperabilityId)) && schedaDocInterop.tipoProto != null && schedaDocInterop.tipoProto.Equals("A"))
            {
                result = true;
            }

            return result;
        }

        private bool CheckProtoEnabled()
        {
            bool result = false;
            if (this.IsRoleInwardEnabled())
                return true;
            if (this.IsRoleOutwardEnabled())
                return true;
            if (this.IsRoleInternalEnabled())
                return true;
            if (UIManager.UserManager.IsAuthorizedFunctions("DO_PRO_PREDISPONI") && UIManager.UserManager.IsAuthorizedFunctions("DO_PRO_SALVA"))
                return true;

            return result;
        }

        public bool IsRoleInwardEnabled()
        {
            bool result = false;
            result = UIManager.UserManager.IsAuthorizedFunctions("PROTO_IN");
            return result;
        }

        public bool IsRoleOutwardEnabled()
        {
            bool result = false;
            result = UIManager.UserManager.IsAuthorizedFunctions("PROTO_OUT");
            return result;
        }

        public bool IsRoleInternalEnabled()
        {
            bool result = false;
            result = UIManager.UserManager.IsAuthorizedFunctions("PROTO_OWN");
            return result;
        }

        private bool RapidClassificationRequired
        {
            get
            {
                bool result = false;
                if (HttpContext.Current.Session["rapidClassificationRequired"] != null)
                {
                    result = bool.Parse(HttpContext.Current.Session["rapidClassificationRequired"].ToString());
                }
                return result;
            }
            set
            {
                HttpContext.Current.Session["rapidClassificationRequired"] = value;
            }

        }

        private bool RapidClassificationRequiredByTypeDoc
        {
            get
            {
                bool result = false;
                if (HttpContext.Current.Session["RapidClassificationRequiredByTypeDoc"] != null)
                {
                    result = bool.Parse(HttpContext.Current.Session["RapidClassificationRequiredByTypeDoc"].ToString());
                }
                return result;
            }
            set
            {
                HttpContext.Current.Session["RapidClassificationRequiredByTypeDoc"] = value;
            }

        }

        private bool IsEnableCheckMeansSending
        {
            get
            {
                bool result = false;
                if (HttpContext.Current.Session["IsEnableCheckMeansSending"] != null)
                {
                    result = bool.Parse(HttpContext.Current.Session["IsEnableCheckMeansSending"].ToString());
                }
                return result;
            }
            set
            {
                HttpContext.Current.Session["IsEnableCheckMeansSending"] = value;
            }

        }

        private bool PrintReceipt
        {
            get
            {
                bool result = false;
                if (HttpContext.Current.Session["printreceipt"] != null)
                {
                    result = bool.Parse(HttpContext.Current.Session["printreceipt"].ToString());
                }
                return result;
            }
            set
            {
                HttpContext.Current.Session["printreceipt"] = value;
            }
        }

        private bool RepeatAdvancedEnabled
        {
            get
            {
                bool result = false;
                if (HttpContext.Current.Session["RepeatAdvancedEnabled"] != null)
                {
                    result = bool.Parse(HttpContext.Current.Session["RepeatAdvancedEnabled"].ToString());
                }
                return result;
            }
            set
            {
                HttpContext.Current.Session["RepeatAdvancedEnabled"] = value;
            }
        }

        private bool EnableForward
        {
            get
            {
                bool result = false;
                if (HttpContext.Current.Session["enableForward"] != null)
                {
                    result = bool.Parse(HttpContext.Current.Session["enableForward"].ToString());
                }
                return result;
            }
            set
            {
                HttpContext.Current.Session["enableForward"] = value;
            }
        }

        private bool FindDuplicateProtocol2
        {
            get
            {
                bool result = false;
                if (HttpContext.Current.Session["FindDuplicateProtocol2"] != null)
                {
                    result = bool.Parse(HttpContext.Current.Session["FindDuplicateProtocol2"].ToString());
                }
                return result;
            }
            set
            {
                HttpContext.Current.Session["FindDuplicateProtocol2"] = value;
            }
        }

        private DocsPaWR.InfoUtente InfoUser
        {
            get
            {
                DocsPaWR.InfoUtente result = null;
                if (HttpContext.Current.Session["infoUser"] != null)
                {
                    result = HttpContext.Current.Session["infoUser"] as DocsPaWR.InfoUtente;
                }
                return result;
            }
            set
            {
                HttpContext.Current.Session["infoUser"] = value;
            }
        }

        private DocsPaWR.Utente UserLog
        {
            get
            {
                DocsPaWR.Utente result = null;
                if (HttpContext.Current.Session["user"] != null)
                {
                    result = HttpContext.Current.Session["user"] as DocsPaWR.Utente;
                }
                return result;
            }
            set
            {
                HttpContext.Current.Session["user"] = value;
            }
        }

        private DocsPaWR.Ruolo Role
        {
            get
            {
                DocsPaWR.Ruolo result = null;
                if (HttpContext.Current.Session["role"] != null)
                {
                    result = HttpContext.Current.Session["role"] as DocsPaWR.Ruolo;
                }
                return result;
            }
            set
            {
                HttpContext.Current.Session["role"] = value;
            }
        }

        private DocsPaWR.Registro Registry
        {
            get
            {
                DocsPaWR.Registro result = null;
                if (HttpContext.Current.Session["registry"] != null)
                {
                    result = HttpContext.Current.Session["registry"] as DocsPaWR.Registro;
                }
                return result;
            }
            set
            {
                HttpContext.Current.Session["registry"] = value;
            }
        }

        private bool ReferenceOffice
        {
            get
            {
                bool result = false;
                if (HttpContext.Current.Session["referenceOffice"] != null)
                {
                    result = bool.Parse(HttpContext.Current.Session["referenceOffice"].ToString());
                }
                return result;
            }
            set
            {
                HttpContext.Current.Session["referenceOffice"] = value;
            }
        }

        //private bool IsEnabledRepeatWithKnowledge
        //{
        //    get
        //    {
        //        bool result = false;
        //        if (HttpContext.Current.Session["IsEnabledRepeatWithKnowledge"] != null)
        //        {
        //            result = bool.Parse(HttpContext.Current.Session["IsEnabledRepeatWithKnowledge"].ToString());
        //        }
        //        return result;
        //    }
        //    set
        //    {
        //        HttpContext.Current.Session["IsEnabledRepeatWithKnowledge"] = value;
        //    }
        //}

        private bool MeansSendingRequired
        {
            get
            {
                bool result = false;
                if (HttpContext.Current.Session["meansSendingRequired"] != null)
                {
                    result = bool.Parse(HttpContext.Current.Session["meansSendingRequired"].ToString());
                }
                return result;
            }
            set
            {
                HttpContext.Current.Session["meansSendingRequired"] = value;
            }
        }

        private bool ModifyArrivalDate
        {
            get
            {
                bool result = false;
                if (HttpContext.Current.Session["modifyArrivalDate"] != null)
                {
                    result = bool.Parse(HttpContext.Current.Session["modifyArrivalDate"].ToString());
                }
                return result;
            }
            set
            {
                HttpContext.Current.Session["modifyArrivalDate"] = value;
            }
        }

        private bool DirectClassification
        {
            get
            {
                bool result = false;
                if (HttpContext.Current.Session["directClassification"] != null)
                {
                    result = bool.Parse(HttpContext.Current.Session["directClassification"].ToString());
                }
                return result;
            }
            set
            {
                HttpContext.Current.Session["directClassification"] = value;
            }
        }

        private bool InternalRecordEnable
        {
            get
            {
                bool result = false;
                if (HttpContext.Current.Session["internalRecordEnable"] != null)
                {
                    result = bool.Parse(HttpContext.Current.Session["internalRecordEnable"].ToString());
                }
                return result;
            }
            set
            {
                HttpContext.Current.Session["internalRecordEnable"] = value;
            }
        }

        private bool ChainsOdDocuments
        {
            get
            {
                bool result = false;
                if (HttpContext.Current.Session["chainsOdDocuments"] != null)
                {
                    result = bool.Parse(HttpContext.Current.Session["chainsOdDocuments"].ToString());
                }
                return result;
            }
            set
            {
                HttpContext.Current.Session["chainsOdDocuments"] = value;
            }
        }

        private bool CustomDocuments
        {
            get
            {
                bool result = false;
                if (HttpContext.Current.Session["customDocuments"] != null)
                {
                    result = bool.Parse(HttpContext.Current.Session["customDocuments"].ToString());
                }
                return result;
            }
            set
            {
                HttpContext.Current.Session["customDocuments"] = value;
            }
        }

        private bool EnableAjaxAddressBook
        {
            get
            {
                bool result = false;
                if (HttpContext.Current.Session["enableAjaxAddressBook"] != null)
                {
                    result = bool.Parse(HttpContext.Current.Session["enableAjaxAddressBook"].ToString());
                }
                return result;
            }
            set
            {
                HttpContext.Current.Session["enableAjaxAddressBook"] = value;
            }
        }

        private int AjaxAddressBookMinPrefixLenght
        {
            get
            {
                int result = 3;
                if (HttpContext.Current.Session["ajaxAddressBookMinPrefixLenght"] != null)
                {
                    result = int.Parse(HttpContext.Current.Session["ajaxAddressBookMinPrefixLenght"].ToString());
                }
                return result;
            }
            set
            {
                HttpContext.Current.Session["ajaxAddressBookMinPrefixLenght"] = value;
            }
        }

        protected int MaxLenghtObject
        {
            get
            {
                int result = 2000;
                if (HttpContext.Current.Session["maxLenghtObject"] != null)
                {
                    result = int.Parse(HttpContext.Current.Session["maxLenghtObject"].ToString());
                }
                return result;
            }
            set
            {
                HttpContext.Current.Session["maxLenghtObject"] = value;
            }
        }

        protected int MaxLenghtNote
        {
            get
            {
                int result = 2000;
                if (HttpContext.Current.Session["MaxLenghtNote"] != null)
                {
                    result = int.Parse(HttpContext.Current.Session["MaxLenghtNote"].ToString());
                }
                return result;
            }
            set
            {
                HttpContext.Current.Session["MaxLenghtNote"] = value;
            }
        }

        protected int AutocompleteMinimumPrefixLength
        {
            get
            {
                int result = 3;
                if (HttpContext.Current.Session["AutocompleteMinimumPrefixLength"] != null)
                {
                    result = int.Parse(HttpContext.Current.Session["AutocompleteMinimumPrefixLength"].ToString());
                }
                return result;
            }
            set
            {
                HttpContext.Current.Session["AutocompleteMinimumPrefixLength"] = value;
            }
        }

        private bool EnableCodeObject
        {
            get
            {
                bool result = false;
                if (HttpContext.Current.Session["enableCodeObject"] != null)
                {
                    result = bool.Parse(HttpContext.Current.Session["enableCodeObject"].ToString());
                }
                return result;
            }
            set
            {
                HttpContext.Current.Session["enableCodeObject"] = value;
            }
        }

        private bool ViewCodeTransmissionModels
        {
            get
            {
                bool result = false;
                if (HttpContext.Current.Session["viewCodeTransmissionModels"] != null)
                {
                    result = bool.Parse(HttpContext.Current.Session["viewCodeTransmissionModels"].ToString());
                }
                return result;
            }
            set
            {
                HttpContext.Current.Session["viewCodeTransmissionModels"] = value;
            }
        }

        private bool EnableStateDiagram
        {
            get
            {
                bool result = false;
                if (HttpContext.Current.Session["enableStateDiagram"] != null)
                {
                    result = bool.Parse(HttpContext.Current.Session["enableStateDiagram"].ToString());
                }
                return result;
            }
            set
            {
                HttpContext.Current.Session["enableStateDiagram"] = value;
            }
        }

        private bool EnableDistributionLists
        {
            get
            {
                bool result = false;
                if (HttpContext.Current.Session["enableDistributionLists"] != null)
                {
                    result = bool.Parse(HttpContext.Current.Session["enableDistributionLists"].ToString());
                }
                return result;
            }
            set
            {
                HttpContext.Current.Session["enableDistributionLists"] = value;
            }
        }

        private bool EnableRifSender
        {
            get
            {
                bool result = false;
                if (HttpContext.Current.Session["enableRifSender"] != null)
                {
                    result = bool.Parse(HttpContext.Current.Session["enableRifSender"].ToString());
                }
                return result;
            }
            set
            {
                HttpContext.Current.Session["enableRifSender"] = value;
            }
        }

        private bool EnableSenderDefault
        {
            get
            {
                bool result = false;
                if (HttpContext.Current.Session["enableSenderDefault"] != null)
                {
                    result = bool.Parse(HttpContext.Current.Session["enableSenderDefault"].ToString());
                }
                return result;
            }
            set
            {
                HttpContext.Current.Session["enableSenderDefault"] = value;
            }
        }

        public List<Corrispondente> ListRecipientsCC
        {
            get
            {
                List<Corrispondente> result = new List<Corrispondente>();
                if (HttpContext.Current.Session["listRecipientsCC"] != null)
                {
                    result = HttpContext.Current.Session["listRecipientsCC"] as List<Corrispondente>;
                }
                return result;
            }
            set
            {
                HttpContext.Current.Session["listRecipientsCC"] = value;
            }
        }

        public List<Corrispondente> ListRecipients
        {
            get
            {
                List<Corrispondente> result = new List<Corrispondente>();
                if (HttpContext.Current.Session["listRecipients"] != null)
                {
                    result = HttpContext.Current.Session["listRecipients"] as List<Corrispondente>;
                }
                return result;
            }
            set
            {
                HttpContext.Current.Session["listRecipients"] = value;
            }
        }

        public DocsPaWR.Corrispondente Sender
        {
            get
            {
                DocsPaWR.Corrispondente result = null;
                if (HttpContext.Current.Session["sender"] != null)
                {
                    result = HttpContext.Current.Session["sender"] as DocsPaWR.Corrispondente;
                }
                return result;
            }
            set
            {
                HttpContext.Current.Session["sender"] = value;
            }
        }

        private string NewIdCorr
        {
            get
            {
                if (HttpContext.Current.Session["newIdCorr"] != null)
                {
                    return HttpContext.Current.Session["newIdCorr"] as String;
                }
                return null;
            }
            set
            {
                HttpContext.Current.Session["newIdCorr"] = value;
            }
        }

        public DocsPaWR.Corrispondente TempSender
        {
            get
            {
                DocsPaWR.Corrispondente result = null;
                if (HttpContext.Current.Session["tempSender"] != null)
                {
                    result = HttpContext.Current.Session["tempSender"] as DocsPaWR.Corrispondente;
                }
                return result;
            }
            set
            {
                HttpContext.Current.Session["tempSender"] = value;
            }
        }

        private DocsPaWR.Corrispondente NewSender
        {
            get
            {
                DocsPaWR.Corrispondente result = null;
                if (HttpContext.Current.Session["newSender"] != null)
                {
                    result = HttpContext.Current.Session["newSender"] as DocsPaWR.Corrispondente;
                }
                return result;
            }
            set
            {
                HttpContext.Current.Session["newSender"] = value;
            }
        }

        private DocsPaWR.Corrispondente SenderDetail
        {
            get
            {
                return Session["senderDetail"] as DocsPaWR.Corrispondente;
            }
            set
            {
                Session["senderDetail"] = value;
            }
        }

        private CheckInOut.CheckOutContext CheckOutContext
        {
            get
            {
                return Session["CheckOutContext"] as CheckInOut.CheckOutContext;
            }
            set
            {
                Session["CheckOutContext"] = value;
            }
        }

        // APPLET_G
        private CheckInOutApplet.CheckOutAppletContext CheckOutAppletContext
        {
            get
            {
                return Session["CheckOutContext"] as CheckInOutApplet.CheckOutAppletContext;
            }
            set
            {
                Session["CheckOutContext"] = value;
            }
        }

        private bool DaAggiornareMittente
        {
            get
            {
                bool result = false;
                if (HttpContext.Current.Session["daAggiornareMittente"] != null)
                {
                    result = bool.Parse(HttpContext.Current.Session["daAggiornareMittente"].ToString());
                }
                return result;
            }
            set
            {
                HttpContext.Current.Session["daAggiornareMittente"] = value;
            }
        }

        private Dictionary<string, string> Parameter
        {
            get
            {
                Dictionary<string, string> result = null;
                if (HttpContext.Current.Session["Parameter"] != null)
                {
                    result = HttpContext.Current.Session["Parameter"] as Dictionary<string, string>;
                }
                return result;
            }
            set
            {
                HttpContext.Current.Session["Parameter"] = value;
            }
        }

        public DocsPaWR.Corrispondente SenderIntermediate
        {
            get
            {
                DocsPaWR.Corrispondente result = null;
                if (HttpContext.Current.Session["SenderIntermediate"] != null)
                {
                    result = HttpContext.Current.Session["SenderIntermediate"] as DocsPaWR.Corrispondente;
                }
                return result;
            }
            set
            {
                HttpContext.Current.Session["SenderIntermediate"] = value;
            }
        }

        public string TypeChooseCorrespondent
        {
            get
            {
                string result = string.Empty;
                if (HttpContext.Current.Session["typeChooseCorrespondent"] != null)
                {
                    result = HttpContext.Current.Session["typeChooseCorrespondent"] as string;
                }
                return result;
            }
            set
            {
                HttpContext.Current.Session["typeChooseCorrespondent"] = value;
            }
        }

        public DocsPaWR.ElementoRubrica[] FoundCorr
        {
            get
            {
                DocsPaWR.ElementoRubrica[] result = null;
                if (HttpContext.Current.Session["foundCorr"] != null)
                {
                    result = HttpContext.Current.Session["foundCorr"] as DocsPaWR.ElementoRubrica[];
                }
                return result;
            }
            set
            {
                HttpContext.Current.Session["foundCorr"] = value;
            }
        }

        public string TypeRecord
        {
            get
            {
                string result = string.Empty;
                if (HttpContext.Current.Session["typeRecord"] != null)
                {
                    result = HttpContext.Current.Session["typeRecord"] as string;
                }
                return result;
            }
            set
            {
                HttpContext.Current.Session["typeRecord"] = value;
            }
        }

        public List<Corrispondente> MultipleSenders
        {
            get
            {
                List<Corrispondente> result = new List<Corrispondente>();
                if (HttpContext.Current.Session["multipleSenders"] != null)
                {
                    result = HttpContext.Current.Session["multipleSenders"] as List<Corrispondente>;
                }
                return result;
            }
            set
            {
                HttpContext.Current.Session["multipleSenders"] = value;
            }
        }

        private bool EnableMultipleSenders
        {
            get
            {
                bool result = false;
                if (HttpContext.Current.Session["enableMultipleSenders"] != null)
                {
                    result = bool.Parse(HttpContext.Current.Session["enableMultipleSenders"].ToString());
                }
                return result;
            }
            set
            {
                HttpContext.Current.Session["enableMultipleSenders"] = value;
            }
        }

        private bool EnableRFReferenceCode
        {
            get
            {
                bool result = false;
                if (HttpContext.Current.Session["enableRFReferenceCode"] != null)
                {
                    result = bool.Parse(HttpContext.Current.Session["enableRFReferenceCode"].ToString());
                }
                return result;
            }
            set
            {
                HttpContext.Current.Session["enableRFReferenceCode"] = value;
            }
        }

        private bool EnableRepertory
        {
            get
            {
                bool result = false;
                if (HttpContext.Current.Session["enableRepertory"] != null)
                {
                    result = bool.Parse(HttpContext.Current.Session["enableRepertory"].ToString());
                }
                return result;
            }
            set
            {
                HttpContext.Current.Session["enableRepertory"] = value;
            }
        }

        private bool TypeDocRequired
        {
            get
            {
                bool result = false;
                if (HttpContext.Current.Session["typeDocRequired"] != null)
                {
                    result = bool.Parse(HttpContext.Current.Session["typeDocRequired"].ToString());
                }
                return result;
            }
            set
            {
                HttpContext.Current.Session["typeDocRequired"] = value;
            }
        }

        private bool EnableBlockClassification
        {
            get
            {
                bool result = false;
                if (HttpContext.Current.Session["enableBlockClassification"] != null)
                {
                    result = bool.Parse(HttpContext.Current.Session["enableBlockClassification"].ToString());
                }
                return result;
            }
            set
            {
                HttpContext.Current.Session["enableBlockClassification"] = value;
            }
        }

        private bool EnableSearchDuplicateRecord_1
        {
            get
            {
                bool result = false;
                if (HttpContext.Current.Session["enableSearchDuplicateRecord_1"] != null)
                {
                    result = bool.Parse(HttpContext.Current.Session["enableSearchDuplicateRecord_1"].ToString());
                }
                return result;
            }
            set
            {
                HttpContext.Current.Session["enableSearchDuplicateRecord_1"] = value;
            }
        }

        private string CorrType
        {
            get
            {
                return HttpContext.Current.Session["corrType"] as String;
            }
            set
            {
                HttpContext.Current.Session["corrType"] = value;
            }
        }

        private string IndexCorr
        {
            get
            {
                return HttpContext.Current.Session["indexCorr"] as String;
            }
            set
            {
                HttpContext.Current.Session["indexCorr"] = value;
            }
        }

        private SchedaDocumento DocumentInWorking
        {
            get
            {
                SchedaDocumento result = null;
                if (HttpContext.Current.Session["document"] != null)
                {
                    result = HttpContext.Current.Session["document"] as SchedaDocumento;
                }
                return result;
            }
            set
            {
                HttpContext.Current.Session["document"] = value;
            }
        }

        private DocsPaWR.Templates Template
        {
            get
            {
                Templates result = null;
                if (HttpContext.Current.Session["template"] != null)
                {
                    result = HttpContext.Current.Session["template"] as Templates;
                }
                return result;
            }
            set
            {
                HttpContext.Current.Session["template"] = value;
            }
        }

        private DocsPaWR.Fascicolo Project
        {
            get
            {
                Fascicolo result = null;
                if (HttpContext.Current.Session["project"] != null)
                {
                    result = HttpContext.Current.Session["project"] as Fascicolo;
                }
                return result;
            }
            set
            {
                HttpContext.Current.Session["project"] = value;
            }
        }

        private bool HideAnswers
        {
            get
            {
                bool result = false;
                if (HttpContext.Current.Session["HideAnswers"] != null)
                {
                    result = bool.Parse(HttpContext.Current.Session["HideAnswers"].ToString());
                }
                return result;
            }
            set
            {
                HttpContext.Current.Session["HideAnswers"] = value;
            }
        }

        private DiagrammaStato StateDiagram
        {
            get
            {
                DiagrammaStato result = null;
                if (HttpContext.Current.Session["stateDiagram"] != null)
                {
                    result = HttpContext.Current.Session["stateDiagram"] as DiagrammaStato;
                }
                return result;
            }
            set
            {
                HttpContext.Current.Session["stateDiagram"] = value;
            }
        }

        public string IdObjectCustom
        {
            get
            {
                string result = string.Empty;
                if (HttpContext.Current.Session["idObjectCustom"] != null)
                {
                    result = HttpContext.Current.Session["idObjectCustom"].ToString();
                }
                return result;
            }
            set
            {
                HttpContext.Current.Session["idObjectCustom"] = value;
            }
        }

        public Corrispondente ChooseMultipleCorrespondent
        {
            get
            {
                Corrispondente result = null;
                if (HttpContext.Current.Session["chooseMultipleCorrespondent"] != null)
                {
                    result = HttpContext.Current.Session["chooseMultipleCorrespondent"] as Corrispondente;
                }
                return result;
            }
            set
            {
                HttpContext.Current.Session["chooseMultipleCorrespondent"] = value;
            }
        }

        public bool ProceedingsEnabled
        {
            get
            {
                bool result = false;
                if (HttpContext.Current.Session["EnableProceedings"] != null)
                {
                    result = bool.Parse(HttpContext.Current.Session["EnableProceedings"].ToString());
                }
                return result;
            }
            set
            {
                HttpContext.Current.Session["EnableProceedings"] = value;
            }
        }

        /// <summary>
        /// Aggiorna le informazioni sul registro selezionato in sessione
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void DdlRegistries_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                ListItem itemSelect = (sender as DropDownList).SelectedItem;
                Registro RegSel = (from reg in this.Role.registri
                                   where reg.systemId.Equals(itemSelect.Value) &&
                                       reg.codRegistro.Equals(itemSelect.Text.Trim())
                                   select reg).FirstOrDefault();
                UIManager.RegistryManager.SetRegistryInSession(RegSel);
                this.Registry = RegSel;
                this.Project = null;
                Registro r = UserManager.getRegistroBySistemId(this, this.DdlRegistries.SelectedValue);
                string state = UIManager.RegistryManager.getStatoRegistro(r);
                if (state.Equals("R"))
                {
                    this.DocumentLblRegistry.Attributes.Remove("class");
                    this.DocumentBntRecord.Enabled = false;
                    this.DocumentLblRegistry.Attributes.Add("class", "redWeight");
                }
                else
                {
                    if (state.Equals("V"))
                    {
                        this.DocumentLblRegistry.Attributes.Remove("class");
                        this.DocumentBntRecord.Enabled = true;
                        this.DocumentLblRegistry.Attributes.Add("class", "green");
                    }
                    else
                    {
                        this.DocumentLblRegistry.Attributes.Remove("class");
                        this.DocumentBntRecord.Enabled = false;
                        this.DocumentLblRegistry.Attributes.Add("class", "orange");
                    }
                }

                //Laura 25 Marzo
                ProjectManager.setProjectInSessionForRicFasc(null);
                ProjectManager.setFascicoloSelezionatoFascRapida(this, null);
                this.IdProject.Value = string.Empty;
                this.TxtCodeProject.Text = string.Empty;
                this.TxtDescriptionProject.Text = string.Empty;
                this.SetAjaxDescriptionProject();
                this.DocumentDdlTransmissionsModel.Items.Clear();
                this.LoadTransmissionMoldes();
                this.UpPnlProject.Update();
                this.UpPnlTransmissionsModel.Update();
                this.UpDocumentButtons.Update();
            }
            catch (System.Exception ex)
            {
                UIManager.AdministrationManager.DiagnosticError(ex);
                return;
            }
        }

        private void AnswerWith(bool sameAsOriginal)
        {
            SchedaDocumento doc = this.DocumentInWorking;
            List<Navigation.NavigationObject> navigationList = Navigation.NavigationUtils.GetNavigationList();
            Navigation.NavigationObject pre = navigationList.Last();
            Navigation.NavigationObject actualPage = new Navigation.NavigationObject();
            if (!string.IsNullOrEmpty(this.DocumentInWorking.systemId) && (pre.CodePage != Navigation.NavigationUtils.NamePage.DOCUMENT.ToString() || pre.IdObject != this.DocumentInWorking.systemId))
            {
                actualPage.IdObject = doc.systemId;
                actualPage.NamePage = Navigation.NavigationUtils.GetNamePage(Navigation.NavigationUtils.NamePage.DOCUMENT.ToString(), string.Empty);
                actualPage.Link = Navigation.NavigationUtils.GetLink(Navigation.NavigationUtils.NamePage.DOCUMENT.ToString(), true, this.Page);
                actualPage.CodePage = Navigation.NavigationUtils.NamePage.DOCUMENT.ToString();
                actualPage.Page = "DOCUMENT.ASPX";
                navigationList.Add(actualPage);
                Navigation.NavigationUtils.SetNavigationList(navigationList);
            }

            if (this.DocumentInWorking.tipoProto.ToUpper().Equals("G"))
            {
                if (sameAsOriginal)
                    this.AnswerWithDocument();
                else
                    this.AnswerWithProtocol();
            }
            else
            {
                if (sameAsOriginal)
                    this.AnswerWithProtocol();
                else
                    this.AnswerWithDocument();
            }
        }

        private void AnswerWithProtocol()
        {
            // Nel caso di predisposto alla protocollazione 20/08/2010 Fabio altrimenti non crea documento in risposta
            if (!string.IsNullOrEmpty(this.DocumentInWorking.systemId))
            {


                if (this.RblTypeProtocol.SelectedItem.Value == "P")
                {
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "AnswerChooseRecipient", "ajaxModalPopupAnswerChooseRecipient();", true);
                }



                if (this.RblTypeProtocol.SelectedItem.Value == "A")
                {
                    //Data una scheda documento (quella del protocollo in ingresso) ne viene creata una nuova 
                    //(per il protocollo in uscita) riproponendo l'oggetto e il mittente come destinatario del protocollo in uscita 
                    SchedaDocumento schedaNewDoc = DocumentManager.NewSchedaDocumento();
                    if (this.DocumentInWorking.oggetto != null)
                    {
                        schedaNewDoc.oggetto = this.DocumentInWorking.oggetto;
                    }
                    schedaNewDoc.idPeople = this.DocumentInWorking.idPeople;
                    schedaNewDoc.userId = this.DocumentInWorking.userId;
                    schedaNewDoc.typeId = this.DocumentInWorking.typeId;
                    schedaNewDoc.appId = this.DocumentInWorking.appId;
                    schedaNewDoc.privato = "0";
                    //pezza EM

                    FileManager.removeSelectedFile();

                    schedaNewDoc.registro = this.DocumentInWorking.registro;
                    schedaNewDoc.tipoProto = "P";

                    if (this.DocumentInWorking.tipoProto.Equals("A"))
                    {
                        schedaNewDoc.protocollo = new DocsPaWR.ProtocolloUscita();
                        ((DocsPaWR.ProtocolloUscita)schedaNewDoc.protocollo).destinatari = new DocsPaWR.Corrispondente[1];
                        ((DocsPaWR.ProtocolloUscita)schedaNewDoc.protocollo).destinatari[0] = new DocsPaWR.Corrispondente();
                        ((DocsPaWR.ProtocolloUscita)schedaNewDoc.protocollo).destinatari[0] = ((DocsPaWR.ProtocolloEntrata)this.DocumentInWorking.protocollo).mittente;
                        if (EnableSenderDefault)
                        {
                            DocsPaWR.Corrispondente corr = this.Role.uo;
                            ((DocsPaWR.ProtocolloUscita)schedaNewDoc.protocollo).mittente = corr;
                        }
                    }

                    schedaNewDoc.predisponiProtocollazione = true;
                    DocsPaWR.InfoDocumento infoDoc = DocumentManager.getInfoDocumento(this.DocumentInWorking);
                    schedaNewDoc.rispostaDocumento = infoDoc;

                    DocumentManager.setSelectedRecord(schedaNewDoc);
                    this.RblTypeProtocol.Enabled = true;

                    Response.Redirect("Document.aspx");
                }



                if (this.RblTypeProtocol.SelectedItem.Value == "I")
                {
                    //Data una scheda documento (quella del protocollo interno) ne viene creata una nuova 
                    //(sempre interno) riproponendo l'oggetto e il mittente e il destinatario del protocollo interno 
                    SchedaDocumento schedaNewDoc = DocumentManager.NewSchedaDocumento();
                    if (this.DocumentInWorking.oggetto != null)
                    {
                        schedaNewDoc.oggetto = this.DocumentInWorking.oggetto;
                    }
                    schedaNewDoc.idPeople = this.DocumentInWorking.idPeople;
                    schedaNewDoc.userId = this.DocumentInWorking.userId;
                    schedaNewDoc.typeId = this.DocumentInWorking.typeId;
                    schedaNewDoc.appId = this.DocumentInWorking.appId;
                    schedaNewDoc.privato = "0";

                    FileManager.removeSelectedFile();

                    schedaNewDoc.registro = this.DocumentInWorking.registro;
                    schedaNewDoc.tipoProto = "I";

                    //PRENDO IL MIO RUOLO COME MITTENTE
                    Corrispondente corrispondenteIoMitt = null;

                    if (UserManager.GetSelectedRole() != null)
                    {
                        DocsPaWR.Ruolo ruo = UserManager.GetSelectedRole();
                        DocsPaWR.Corrispondente corr = ruo.uo;
                        if (corr != null)
                        {
                            corrispondenteIoMitt = corr;
                        }
                    }

                    schedaNewDoc.protocollo = new DocsPaWR.ProtocolloInterno();

                    //PRENDO IL MITTENTE DEL PROTOCOLLO INTERNO DI PARTENZA
                    Corrispondente corrispondenteMitt = ((DocsPaWR.ProtocolloInterno)this.DocumentInWorking.protocollo).mittente;
                    ((DocsPaWR.ProtocolloInterno)schedaNewDoc.protocollo).destinatari = ((DocsPaWR.ProtocolloInterno)this.DocumentInWorking.protocollo).destinatari;

                    if (!corrispondenteMitt.systemId.Equals(corrispondenteIoMitt.systemId))
                    {
                        if (!UserManager.esisteCorrispondente(((DocsPaWR.ProtocolloInterno)this.DocumentInWorking.protocollo).destinatariConoscenza, corrispondenteMitt))
                        {
                            ((DocsPaWR.ProtocolloInterno)schedaNewDoc.protocollo).destinatari = UserManager.addCorrispondente(((DocsPaWR.ProtocolloInterno)schedaNewDoc.protocollo).destinatari, corrispondenteMitt);
                        }
                    }

                    int cancellaDest = -1;
                    if (((DocsPaWR.ProtocolloInterno)schedaNewDoc.protocollo).destinatari != null)
                    {
                        for (int i = 0; i < (((DocsPaWR.ProtocolloInterno)schedaNewDoc.protocollo).destinatari).Length; i++)
                        {
                            Corrispondente temp = ((DocsPaWR.ProtocolloInterno)schedaNewDoc.protocollo).destinatari[i];
                            if (temp.systemId.Equals(corrispondenteIoMitt.systemId))
                            {
                                cancellaDest = i;
                                break;
                            }
                        }
                    }

                    if (cancellaDest != -1)
                    {
                        //SE IL MITTENTE è presente nei destinatari lo elimino
                        ((DocsPaWR.ProtocolloInterno)schedaNewDoc.protocollo).destinatari = UserManager.removeCorrispondente(((DocsPaWR.ProtocolloInterno)schedaNewDoc.protocollo).destinatari, cancellaDest);
                    }

                    if (((DocsPaWR.ProtocolloInterno)this.DocumentInWorking.protocollo).destinatariConoscenza != null && ((DocsPaWR.ProtocolloInterno)this.DocumentInWorking.protocollo).destinatariConoscenza.Length > 0)
                    {
                        ((DocsPaWR.ProtocolloInterno)schedaNewDoc.protocollo).destinatariConoscenza = ((DocsPaWR.ProtocolloInterno)this.DocumentInWorking.protocollo).destinatariConoscenza;

                        cancellaDest = -1;

                        for (int i = 0; i < (((DocsPaWR.ProtocolloInterno)schedaNewDoc.protocollo).destinatariConoscenza).Length; i++)
                        {
                            Corrispondente temp = ((DocsPaWR.ProtocolloInterno)schedaNewDoc.protocollo).destinatariConoscenza[i];
                            if (temp.systemId.Equals(corrispondenteIoMitt.systemId))
                            {
                                cancellaDest = i;
                                break;
                            }
                        }

                        if (cancellaDest != -1)
                        {
                            //SE IL MITTENTE è presente nei destinatari lo elimino
                            ((DocsPaWR.ProtocolloInterno)schedaNewDoc.protocollo).destinatariConoscenza = UserManager.removeCorrispondente(((DocsPaWR.ProtocolloInterno)schedaNewDoc.protocollo).destinatariConoscenza, cancellaDest);
                        }
                    }

                    ((DocsPaWR.ProtocolloInterno)schedaNewDoc.protocollo).mittente = corrispondenteIoMitt;


                    schedaNewDoc.predisponiProtocollazione = true;
                    //Viene popolato l'oggetto risposta al protocollo:
                    if (this.DocumentInWorking.protocollo != null &&
                        (this.DocumentInWorking.protocollo.numero != null && !this.DocumentInWorking.protocollo.numero.Equals(""))
                       )
                    {
                        DocsPaWR.InfoDocumento infoDoc = DocumentManager.getInfoDocumento(this.DocumentInWorking);
                        schedaNewDoc.rispostaDocumento = infoDoc;
                    }

                    DocumentManager.setSelectedRecord(schedaNewDoc);
                    this.RblTypeProtocol.Enabled = true;

                    Response.Redirect("Document.aspx");
                }


            }
        }

        private void AnswerWithDocument()
        {
            if (!string.IsNullOrEmpty(this.DocumentInWorking.docNumber))
            {
                SchedaDocumento schedaNewDoc = DocumentManager.NewSchedaDocumento();
                if (this.DocumentInWorking.oggetto != null)
                {
                    schedaNewDoc.oggetto = this.DocumentInWorking.oggetto;
                }
                schedaNewDoc.idPeople = this.DocumentInWorking.idPeople;
                schedaNewDoc.userId = this.DocumentInWorking.userId;
                schedaNewDoc.typeId = this.DocumentInWorking.typeId;
                schedaNewDoc.appId = this.DocumentInWorking.appId;
                schedaNewDoc.privato = "0";

                FileManager.removeSelectedFile();

                schedaNewDoc.registro = null;
                schedaNewDoc.tipoProto = "G";
                schedaNewDoc.protocollo = null;
                schedaNewDoc.predisponiProtocollazione = false;

                //Viene popolato l'oggetto risposta al protocollo:
                DocsPaWR.InfoDocumento infoDoc = DocumentManager.getInfoDocumento(this.DocumentInWorking);
                schedaNewDoc.rispostaDocumento = infoDoc;

                //ABBATANGELI GIANLUIGI - risoluzione seconda segnalazione aggiunta al bug 1132
                if (schedaNewDoc.repositoryContext != null)
                {
                    schedaNewDoc.repositoryContext.IsDocumentoGrigio = true;
                }

                DocumentManager.setSelectedRecord(schedaNewDoc);
                this.RblTypeProtocol.Enabled = true;

                Response.Redirect("Document.aspx");
            }
        }

        protected void DocumentImgAnswerWithProtocol_Click(object sender, System.Web.UI.ImageClickEventArgs e)
        {
            //try
            //{
            this.AnswerWith(true);
            //}
            //catch (System.Exception ex)
            //{
            //UIManager.AdministrationManager.DiagnosticError(ex);
            //return;
            //}
        }

        protected void DocumentImgAnswerWithDocument_Click(object sender, System.Web.UI.ImageClickEventArgs e)
        {
            //try
            //{
            this.AnswerWith(false);
            //}
            //catch (System.Exception ex)
            //{
            //    UIManager.AdministrationManager.DiagnosticError(ex);
            //    return;
            //}
        }

        protected void DocumentImgDelAnswer_Click(object sender, System.Web.UI.ImageClickEventArgs e)
        {
            try
            {
                HttpContext.Current.Session["Answer.DocumentWIP"] = null;
                ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "setReturnValue", "SetRetValue('AnswerSearchDocuments','');", true);
                this.DocumentInWorking.rispostaDocumento = null;
                this.DocumentInWorking.modificaRispostaDocumento = true;
                this.DocumentImgGoAnswer.Visible = false;
                this.plcAnswerRif.Visible = false;
                this.DocumentImgGoAnswer.Visible = false;
                this.plcViewResponse.Visible = false;
                this.DocumentLblAnswer.ToolTip = string.Empty;
                this.DocumentImgAnswerSearch.ToolTip = Utils.Languages.GetLabelFromCode("DocumentLblAnswerText", UIManager.UserManager.GetUserLanguage());
                this.UpPnlResponseProtocol.Update();
                this.UpPnlResponse.Update();
            }
            catch (System.Exception ex)
            {
                UIManager.AdministrationManager.DiagnosticError(ex);
                return;
            }
        }

        protected void DocumentImgViewAnswers_Click(object sender, System.Web.UI.ImageClickEventArgs e)
        {
            int count = this.GetCountDocInRisposta(this.DocumentInWorking.systemId);
            if (count == 1)
            {
                DocsPaWR.InfoDocumento infoDocRisposta = this.GetDocInRisposta(this.DocumentInWorking.systemId);

                if (infoDocRisposta != null)
                {
                    SchedaDocumento doc = DocumentManager.getDocumentDetails(this, infoDocRisposta.docNumber, infoDocRisposta.docNumber);
                    DocumentManager.setSelectedRecord(doc);

                    if (doc.rispostaDocumento != null)
                    {
                        HttpContext.Current.Session["Answer.DocumentWIP"] = DocumentManager.getDocumentDetails(this, doc.rispostaDocumento.docNumber, doc.rispostaDocumento.docNumber);
                    }
                    else
                    {
                        HttpContext.Current.Session["Answer.DocumentWIP"] = null;
                    }

                    List<Navigation.NavigationObject> navigationList = Navigation.NavigationUtils.GetNavigationList();
                    Navigation.NavigationObject pre = navigationList.Last();
                    Navigation.NavigationObject actualPage = new Navigation.NavigationObject();
                    if (!string.IsNullOrEmpty(this.DocumentInWorking.systemId) && (pre.CodePage != Navigation.NavigationUtils.NamePage.DOCUMENT.ToString() || pre.IdObject != this.DocumentInWorking.systemId))
                    {
                        actualPage.IdObject = doc.systemId;
                        actualPage.NamePage = Navigation.NavigationUtils.GetNamePage(Navigation.NavigationUtils.NamePage.DOCUMENT.ToString(), string.Empty);
                        actualPage.Link = Navigation.NavigationUtils.GetLink(Navigation.NavigationUtils.NamePage.DOCUMENT.ToString(), true, this.Page);
                        actualPage.CodePage = Navigation.NavigationUtils.NamePage.DOCUMENT.ToString();
                        actualPage.Page = "DOCUMENT.ASPX";
                        navigationList.Add(actualPage);
                        Navigation.NavigationUtils.SetNavigationList(navigationList);
                    }

                    Response.Redirect("Document.aspx");
                }
            }
            else if (count > 1)
            {
                ScriptManager.RegisterStartupScript(this, this.GetType(), "AnswerShowAnswers", "ajaxModalPopupAnswerShowAnswers();", true);
            }
        }

        public bool GetFiltroDocInRisposta(DocsPaWR.SchedaDocumento sd) //string docSys, string idRegistro, string tipoProto
        {
            try
            {
                if (sd == null)
                    return false;

                qV = new DocsPaWR.FiltroRicerca[1][];
                qV[0] = new DocsPaWR.FiltroRicerca[1];
                fVList = new DocsPaWR.FiltroRicerca[0];

                //if (!UserManager.isFiltroAooEnabled())
                //{
                //    if (sd.tipoProto.Equals("A") || sd.tipoProto.Equals("P") || (sd.protocollo != null && !string.IsNullOrEmpty(sd.protocollo.daProtocollare) && sd.protocollo.daProtocollare.Equals("1") || sd.predisponiProtocollazione == true))
                //    {
                //        //Filtro per REGISTRI VISIBILI ALL'UTENTE
                //        fV1 = new DocsPaWR.FiltroRicerca();
                //        fV1.argomento = DocsPaWR.FiltriDocumento.REGISTRI_UTENTE_IN_CONDITION_CON_NULL.ToString();
                //        fV1.valore = (String)Session["inRegCondition"];
                //        fVList = utils.addToArrayFiltroRicerca(fVList, fV1);
                //    }
                //    else
                //    {

                //        //Filtro per REGISTRO DEL DOCUMENTO PROTOCOLLATO
                //        fV1 = new DocsPaWR.FiltroRicerca();
                //        fV1.argomento = DocsPaWR.FiltriDocumento.REGISTRO.ToString();
                //        fV1.valore = sd.registro.systemId;
                //        fVList = utils.addToArrayFiltroRicerca(fVList, fV1);
                //    }
                //}

                //Filtro per ID_PARENT
                fV1 = new DocsPaWR.FiltroRicerca();
                fV1.argomento = DocsPaWR.FiltriDocumento.ID_PARENT.ToString();
                fV1.valore = sd.systemId;
                fVList = utils.addToArrayFiltroRicerca(fVList, fV1);

                qV[0] = fVList;
                return true;

            }
            catch (System.Exception ex)
            {
                UIManager.AdministrationManager.DiagnosticError(ex);
                return false;
            }
        }

        public DocsPaWR.InfoDocumento GetDocInRisposta(string sys)
        {
            DocsPaWR.InfoDocumento infoDocRisp = null;
            if (GetFiltroDocInRisposta(this.DocumentInWorking))
            {
                int numTotPage;
                int nRec;
                DocsPaWR.InfoUtente infoUt = new DocsPaWR.InfoUtente();
                infoUt = UserManager.GetInfoUser();
                ListaFiltri = qV;
                DocsPaWR.InfoDocumento[] infoDoc;
                SearchResultInfo[] idProfileList;
                if (UserManager.isFiltroAooEnabled())
                    infoDoc = DocumentManager.getQueryInfoDocumentoPaging(infoUt.idGruppo, infoUt.idPeople, this, this.ListaFiltri, 1, out numTotPage, out nRec, true, true, false, false, out idProfileList);
                else
                    infoDoc = DocumentManager.getQueryInfoDocumentoPaging(infoUt.idGruppo, infoUt.idPeople, this, this.ListaFiltri, 1, out numTotPage, out nRec, true, true, true, false, out idProfileList);

                if (infoDoc != null && infoDoc.Length == 1)
                {
                    infoDocRisp = infoDoc[0];
                }
            }
            return infoDocRisp;
        }

        public int GetCountDocInRisposta(string sys)
        {
            int numDocInRisposta = 0;

            //ABBATANGELI GIANLUIGI
            if (!string.IsNullOrEmpty(sys))
            {
                if (GetFiltroDocInRisposta(this.DocumentInWorking))
                {
                    DocsPaWR.InfoUtente infoUt = new DocsPaWR.InfoUtente();
                    infoUt = UserManager.GetInfoUser();
                    ListaFiltri = qV;
                    if (UserManager.isFiltroAooEnabled())
                        numDocInRisposta = DocumentManager.getNumDocInRisposta(infoUt.idGruppo, infoUt.idPeople, this, this.ListaFiltri, false);
                    else
                        numDocInRisposta = DocumentManager.getNumDocInRisposta(infoUt.idGruppo, infoUt.idPeople, this, this.ListaFiltri, true);
                }
            }
            return numDocInRisposta;
        }

        protected void RblTypeNote_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                this.ddlNoteRF.Visible = false;
                this.txtNoteAutoComplete.Visible = false;

                ListItem item = this.RblTypeNote.Items.FindByValue("RF");
                //Se è presente il bottone di selezione esclusiva "RF" si verifica quanti sono gli
                //RF associati al ruolo dell'utente
                if (item != null && RblTypeNote.SelectedIndex == 2)
                {
                    //DocsPaWR.Registro[] registriRf = UserManager.getListaRegistriWithRF(RoleManager.GetRoleInSession().systemId, "1", "");
                    DocsPaWR.Registro[] registriRf = RegistryManager.GetRFListInSession();
                    //Se un ruolo appartiene a più di un RF, allora selezionando dal menù il valore RF
                    //l'utente deve selezionare su quale degli RF creare la nota
                    if (registriRf != null && registriRf.Length > 0)
                    {
                        //Se l'inserimento della nota avviene durante la protocollazione 
                        //ed è impostato nella segnatura il codice del RF, la selezione del RF dal quale
                        //prendere il codice sarà mantenuta valida anche per l'eventuale inserimento delle note
                        //in questo caso non si deve presentare la popup di selezione del RF
                        if (this.ddlNoteRF != null)
                            this.LoadNoteRF(registriRf);

                        this.txtNoteAutoComplete.Visible = false;

                        if (UserManager.IsAuthorizedFunctions("RICERCA_NOTE_ELENCO"))
                        {
                            this.txtNoteAutoComplete.Enabled = false;
                            this.txtNoteAutoComplete.Visible = true;
                            this.ddlNoteRF_SelectedIndexChanged(null, null);
                        }
                    }
                }
                this.UpPnlNote.Update();
            }
            catch (System.Exception ex)
            {
                UIManager.AdministrationManager.DiagnosticError(ex);
                return;
            }
        }

        private void LoadNoteRF(DocsPaWR.Registro[] listaRF)
        {
            this.txtNoteAutoComplete.Text = "";
            this.ddlNoteRF.Items.Clear();
            if (listaRF != null && listaRF.Length > 0)
            {
                this.ddlNoteRF.Visible = true;
                this.txtNoteAutoComplete.Visible = true;

                if (listaRF.Length == 1)
                {
                    ListItem item = new ListItem();
                    item.Value = listaRF[0].systemId;
                    item.Text = listaRF[0].codRegistro;
                    this.ddlNoteRF.Items.Add(item);
                    this.EnableNoteAutoComplete();
                }
                else
                {
                    ListItem itemVuoto = new ListItem();
                    itemVuoto.Value = "";
                    itemVuoto.Text = Utils.Languages.GetLabelFromCode("DocumentNoteSelectAnRF", UIManager.UserManager.GetUserLanguage());
                    this.ddlNoteRF.Items.Add(itemVuoto);
                    foreach (DocsPaWR.Registro regis in listaRF)
                    {
                        ListItem item = new ListItem();
                        item.Value = regis.systemId;
                        item.Text = regis.codRegistro;
                        this.ddlNoteRF.Items.Add(item);
                    }
                }
            }
        }

        private void EnableNoteAutoComplete()
        {
            Session.Add("RFNote", "OK^" + this.ddlNoteRF.SelectedItem.Value + "^" + this.ddlNoteRF.SelectedItem.Text);
            this.txtNoteAutoComplete.Enabled = true;
            this.autoComplete1.ContextKey = ddlNoteRF.SelectedItem.Value;
            this.autoComplete1.MinimumPrefixLength = this.AutocompleteMinimumPrefixLength;
            this.txtNoteAutoComplete.Text = "";
        }

        protected void ddlNoteRF_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                if ((this.ddlNoteRF.Items.Count > 1 && this.ddlNoteRF.SelectedIndex != 0) || (this.ddlNoteRF.Items.Count == 1))
                {
                    this.EnableNoteAutoComplete();
                    //this.TxtNote.Text = "";
                }
                else
                {
                    this.txtNoteAutoComplete.Text = "";
                    this.txtNoteAutoComplete.Enabled = false;
                    Session.Add("RFNote", "");
                }
            }
            catch (System.Exception ex)
            {
                UIManager.AdministrationManager.DiagnosticError(ex);
                return;
            }
        }

        public virtual void SaveNote(out string msg)
        {
            if (this.TxtNote.Text.Length > this.MaxLenghtNote)
            {
                msg = "ErrorDocumentNoteMaxLength";
                return;
            }
            else
            {
                // Se la nota non contiene testo, viene ripristinato il vecchio valore
                // e viene mostrato un messaggio di errore
                if (String.IsNullOrEmpty(this.TxtNote.Text.Trim()) && this.GetLastNote() != null)
                {
                    this.TxtNote.Text = this.GetLastNote().Testo;
                    msg = "ErrorDocumentNoteEmpty";
                    return;
                }

                Ruolo ruoloUtente = RoleManager.GetRoleInSession();
                //DocsPaWR.Registro[] registriRf = UserManager.getListaRegistriWithRF(ruoloUtente.systemId, "1", "");
                DocsPaWR.Registro[] registriRf = RegistryManager.GetRFListInSession();
                // verifico se è stata selezionata una nota di RF e se si sia selezionato un RF corretto nel caso di utenti con 2 RF almeno
                if (registriRf != null && registriRf.Length > 1 && this.RblTypeNote.SelectedValue.Equals("RF") && string.IsNullOrEmpty(this.ddlNoteRF.SelectedValue))
                {
                    msg = "ErrorDocumentNoneRF";
                    return;
                }

                // Se i dati risultano modificati, viene creata una nuova nota
                this.InsertNote();
                this.FetchNote();
            }

            msg = string.Empty;
        }

        /// <summary>
        /// Reperimento ultima nota inserita per un documento in ordine cronologico
        /// </summary>
        /// <returns></returns>
        public InfoNota GetLastNote()
        {
            InfoNota retValue = null;

            if (this.DocumentInWorking.noteDocumento != null)
            {
                foreach (InfoNota nota in this.DocumentInWorking.noteDocumento)
                {
                    if (!nota.DaRimuovere)
                    {
                        retValue = nota;
                        break;
                    }
                }
            }

            return retValue;
        }

        /// <summary>
        /// Creazione nuova nota a seguito di una modifica dei dati
        /// </summary>
        protected void InsertNote()
        {
            InfoNota nota = new InfoNota();

            if (this.RblTypeNote.SelectedItem != null)
                nota.TipoVisibilita = (TipiVisibilitaNotaEnum)Enum.Parse(typeof(TipiVisibilitaNotaEnum), this.RblTypeNote.SelectedItem.Value, true);
            else
                nota.TipoVisibilita = TipiVisibilitaNotaEnum.Tutti;

            nota.Testo = this.TxtNote.Text;

            if (nota.TipoVisibilita == TipiVisibilitaNotaEnum.RF)
            {
                /*
                                if (this.DocumentInWorking != null && !string.IsNullOrEmpty(this.DocumentInWorking.cod_rf_prot) && !string.IsNullOrEmpty(this.DocumentInWorking.id_rf_prot))
                                {
                                    nota.IdRfAssociato = this.DocumentInWorking.id_rf_prot;
                                }
                                else
                                {
                                    if (Session["RFNote"] != null)
                                    {
                                        string[] mySplitResult = Session["RFNote"].ToString().Split('^');
                                        if (mySplitResult[0] == "OK")
                                            nota.IdRfAssociato = mySplitResult[1];
                                    }
                                }
                 */
                nota.IdRfAssociato = this.ddlNoteRF.SelectedValue;
            }

            // Se la nota contiene del testo (vengono eliminati anche i ritorni a capo ai lati della stringa ed i\r inseriti come ritorno a capo del testo in IE)
            if (!String.IsNullOrEmpty(this.TxtNote.Text.Trim()) && (this.GetLastNote() == null || (this.GetLastNote() != null && this.TxtNote.Text.Replace("\r", "").Trim() != this.GetLastNote().Testo.Replace("\r", "").Trim())))
                nota = this.InsertNote(nota);
        }

        /// <summary>
        /// Inserimento di una nuova nota da associare ad un documento / fascicolo
        /// </summary>
        /// <param name="nota"></param>
        /// <returns></returns>
        public InfoNota InsertNote(InfoNota nota)
        {
            nota.DaInserire = true;
            nota.Id = Guid.NewGuid().ToString();
            nota.DataCreazione = DateTime.Now;
            nota.UtenteCreatore = new InfoUtenteCreatoreNota();

            InfoUtente utente = UserManager.GetInfoUser();
            nota.UtenteCreatore.IdUtente = utente.idPeople;
            nota.UtenteCreatore.DescrizioneUtente = utente.userId;
            if (utente.delegato != null)
            {
                nota.IdPeopleDelegato = utente.delegato.idPeople;
                nota.DescrPeopleDelegato = utente.delegato.userId;
            }
            Ruolo ruolo = RoleManager.GetRoleInSession();
            nota.UtenteCreatore.IdRuolo = ruolo.idGruppo;
            nota.UtenteCreatore.DescrizioneRuolo = ruolo.descrizione;

            // Inserimento della nota nella scheda documento (come primo elemento della lista, 
            // solo se il testo della nota da inserire ed il tipo di visibilità sono differenti
            // da quelli dell'ultima nota inserita)
            if (!String.IsNullOrEmpty(nota.Testo.Trim()) &&
                (this.DocumentInWorking.noteDocumento.Length == 0 ||
                !this.DocumentInWorking.noteDocumento[0].Testo.Trim().Equals(nota.Testo.Trim())
                || !this.DocumentInWorking.noteDocumento[0].TipoVisibilita.Equals(nota.TipoVisibilita)))
            {
                List<InfoNota> note = new List<InfoNota>(this.DocumentInWorking.noteDocumento);
                note.Insert(0, nota);
                this.DocumentInWorking.noteDocumento = note.ToArray();
            }

            return nota;
        }

        /// <summary>
        /// Caricamento dati
        /// </summary>
        public virtual void FetchNote()
        {
            // Reperimento ultima nota
            InfoNota nota = this.GetLastNote();

            if (nota != null)
            {
                // Impostazione dell'autore dell'ultima nota
                if (string.IsNullOrEmpty(this.GetAuthorLastNote(nota)))
                    this.DocumentLitNoteAuthor.Text = string.Empty;
                else
                    this.DocumentLitNoteAuthor.Text = "<br />" + Utils.Languages.GetLabelFromCode("DocumentNoteAuthor", UIManager.UserManager.GetUserLanguage()) + " " + this.GetAuthorLastNote(nota);

                this.RblTypeNote.SelectedValue = nota.TipoVisibilita.ToString();
                this.RblTypeNote_SelectedIndexChanged(null, null);
                if (nota.TipoVisibilita.ToString() == "RF") this.ddlNoteRF.SelectedValue = nota.IdRfAssociato;
                this.TxtNote.Text = nota.Testo;

                // Impostazione numero note visibili dall'utente corrente
                this.SetVisibleNote(this.CountNote());
            }
            else
            {
                this.ClearNote();
                this.SetVisibleNote(0);
            }

            this.UpPnlNote.Update();
        }

        /// <summary>
        /// Reperimento dell'autore dell'ultima nota
        /// </summary>
        /// <param name="ultimaNota"></param>
        /// <returns></returns>
        protected string GetAuthorLastNote(InfoNota ultimaNota)
        {
            string autore = string.Empty;

            if (ultimaNota.UtenteCreatore != null)
            {

                if (!string.IsNullOrEmpty(ultimaNota.UtenteCreatore.DescrizioneUtente))
                    autore = ultimaNota.UtenteCreatore.DescrizioneUtente;

                if (autore != string.Empty && !string.IsNullOrEmpty(ultimaNota.UtenteCreatore.DescrizioneRuolo))
                    autore = string.Concat(autore, " (", ultimaNota.UtenteCreatore.DescrizioneRuolo, ")");

                if (!string.IsNullOrEmpty(ultimaNota.DescrPeopleDelegato))
                {
                    string temp = ultimaNota.DescrPeopleDelegato + "<br />" + Utils.Languages.GetLabelFromCode("DocumentNoteAuthorDelegatedBy", UIManager.UserManager.GetUserLanguage()) + " " + autore;
                    autore = temp;
                }
            }

            return autore;
        }

        public virtual void ClearNote()
        {
            this.SetVisibleNote(0);
            this.DocumentLitVisibleNotes.Text = string.Empty;
            this.DocumentLitNoteAuthor.Text = string.Empty;
            //this.RblTypeNote.SelectedValue = TipiVisibilitaNotaEnum.Tutti.ToString();
            this.TxtNote.Text = string.Empty;
            this.ddlNoteRF.Visible = false;
            this.txtNoteAutoComplete.Visible = false;
        }

        /// <summary>
        /// Impostazione messaggio di visibilità delle note
        /// </summary>
        /// <param name="countNote"></param>
        protected virtual void SetVisibleNote(int countNote)
        {
            string language = UIManager.UserManager.GetUserLanguage();

            if (countNote == 0)
                this.DocumentLitVisibleNotes.Text = Utils.Languages.GetLabelFromCode("DocumentNoteNoneVisible", language);
            else
            {
                string format = string.Empty;

                if (countNote == 1)
                    format = "{0} " + Utils.Languages.GetLabelFromCode("DocumentNoteVisibleOne", language);
                else
                    format = "{0} " + Utils.Languages.GetLabelFromCode("DocumentNoteVisibleMore", language);

                this.DocumentLitVisibleNotes.Text = string.Format(format, countNote.ToString());
            }
        }

        public int CountNote()
        {
            int count = 0;
            foreach (InfoNota item in this.DocumentInWorking.noteDocumento)
                if (!item.DaRimuovere)
                    count++;
            return count;
        }

        /// <summary>
        /// Aggiornamento in batch delle sole note
        /// </summary>
        protected virtual void UpdateNote(SchedaDocumento doc)
        {
            AssociazioneNota oggettoAssociato = new AssociazioneNota();
            oggettoAssociato.TipoOggetto = OggettiAssociazioniNotaEnum.Documento;
            oggettoAssociato.Id = doc.systemId;

            // Inserimento della nota creata
            string msg = string.Empty;
            this.SaveNote(out msg);
            if (!string.IsNullOrEmpty(msg))
            {
                ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + msg.Replace("'", "\\'") + "', 'error');} else {parent.ajaxDialogModal('" + msg.Replace("'", "\\'") + "', 'error');}", true);
                return;
            }

            // Aggiornamento delle note sul backend
            doc.noteDocumento = this.DocumentInWorking.noteDocumento;
            doc.noteDocumento = DocumentManager.UpdateNote(oggettoAssociato, doc.noteDocumento);
        }

        //protected void DocumentImgReceivedSending_Click(object sender, ImageClickEventArgs e)
        //{
        //    try
        //    {
        //        CorrType = "D";
        //        IndexCorr = this.ListBoxRecipient.SelectedIndex.ToString();
        //        ScriptManager.RegisterStartupScript(this, this.GetType(), "ReceivedSending", "ajaxModalPopupReceivedSending();", true);
        //    }
        //    catch (System.Exception ex)
        //    {
        //        UIManager.AdministrationManager.DiagnosticError(ex);
        //        return;
        //    }
        //}

        protected void DocumentImgReportSpedizioni_Click(object sender, ImageClickEventArgs e)
        {
            try
            {
                Session["ReportSpedizioni_IdDocumento"] = this.DocumentInWorking.systemId;
                IndexCorr = this.ListBoxRecipient.SelectedIndex.ToString();
                ScriptManager.RegisterStartupScript(this, this.GetType(), "SendingReportDocument", "ajaxModalPopupSendingReportDocument();", true);

            }
            catch (System.Exception ex)
            {
                UIManager.AdministrationManager.DiagnosticError(ex);
                return;
            }
        }

        protected void DocumentImgFlussoProcedurale_Click(object sender, ImageClickEventArgs e)
        {
            try
            {
                Session["ReportSpedizioni_IdDocumento"] = this.DocumentInWorking.systemId;
                IndexCorr = this.ListBoxRecipient.SelectedIndex.ToString();
                ScriptManager.RegisterStartupScript(this, this.GetType(), "SendingReportDocument", "ajaxModalPopupFlussoAutomatico();", true);

            }
            catch (System.Exception ex)
            {
                UIManager.AdministrationManager.DiagnosticError(ex);
                return;
            }
        }

        protected void DocumentImgReceivedSendingCC_Click(object sender, ImageClickEventArgs e)
        {
            try
            {
                CorrType = "C";
                IndexCorr = this.ListBoxRecipientCC.SelectedIndex.ToString();
                ScriptManager.RegisterStartupScript(this, this.GetType(), "ReceivedSending", "ajaxModalPopupReceivedSending();", true);
            }
            catch (System.Exception ex)
            {
                UIManager.AdministrationManager.DiagnosticError(ex);
                return;
            }
        }

        protected void DocumentImgRecipientDetails_Click(object sender, EventArgs e)
        {
            try
            {
                if (string.IsNullOrEmpty(this.DocumentInWorking.systemId))
                {
                    string tipoProto = this.RblTypeProtocol.SelectedValue;
                    if (!this.RblTypeProtocol.Visible) tipoProto = "G";
                    this.DocumentInWorking.tipoProto = tipoProto;
                }

                if (string.IsNullOrEmpty(this.ListBoxRecipient.SelectedValue))
                {
                    string msg = "ErrorDocumentRecipientNotSelected";
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + msg.Replace("'", "\\'") + "', 'warning');} else {parent.ajaxDialogModal('" + msg.Replace("'", "\\'") + "', 'warning');}", true);
                }
                else
                {
                    Session["CorrespondentDetails_Type"] = "D";
                    Session["CorrespondentDetails_Index"] = this.ListBoxRecipient.SelectedIndex;
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "CorrespondentDetails", "ajaxModalPopupCorrespondentDetails();", true);
                }
            }
            catch (System.Exception ex)
            {
                UIManager.AdministrationManager.DiagnosticError(ex);
                return;
            }
        }

        protected void DocumentImgRecipientDetailsCC_Click(object sender, EventArgs e)
        {
            try
            {
                if (string.IsNullOrEmpty(this.DocumentInWorking.systemId))
                {
                    string tipoProto = this.RblTypeProtocol.SelectedValue;
                    if (!this.RblTypeProtocol.Visible) tipoProto = "G";
                    this.DocumentInWorking.tipoProto = tipoProto;
                }

                if (string.IsNullOrEmpty(this.ListBoxRecipientCC.SelectedValue))
                {
                    string msg = "ErrorDocumentRecipientNotSelected";
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + msg.Replace("'", "\\'") + "', 'warning');} else {parent.ajaxDialogModal('" + msg.Replace("'", "\\'") + "', 'warning');}", true);
                }
                else
                {
                    Session["CorrespondentDetails_Type"] = "C";
                    Session["CorrespondentDetails_Index"] = this.ListBoxRecipientCC.SelectedIndex;
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "CorrespondentDetails", "ajaxModalPopupCorrespondentDetails();", true);
                }
            }
            catch (System.Exception ex)
            {
                UIManager.AdministrationManager.DiagnosticError(ex);
                return;
            }
        }

        private Corrispondente SenderDetails()
        {
            Corrispondente result = this.Sender;

            if (result == null || !this.Sender.descrizione.Equals(this.TxtDescriptionSender.Text))
            {
                result = new DocsPaWR.Corrispondente();
                result.descrizione = this.TxtDescriptionSender.Text;
                result.tipoCorrispondente = "O";
                result.idAmministrazione = this.InfoUser.idAmministrazione;
            }

            return result;
        }

        protected void DocumentImgSenderDetails_Click(object sender, EventArgs e)
        {
            try
            {
                if (string.IsNullOrEmpty(this.DocumentInWorking.systemId))
                {
                    string tipoProto = this.RblTypeProtocol.SelectedValue;
                    if (!this.RblTypeProtocol.Visible) tipoProto = "G";
                    this.DocumentInWorking.tipoProto = tipoProto;
                }

                if (this.Sender == null && string.IsNullOrEmpty(this.TxtDescriptionSender.Text))
                {
                    string msg = "ErrorDocumentSenderNotSelected";
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + msg.Replace("'", "\\'") + "', 'warning');} else {parent.ajaxDialogModal('" + msg.Replace("'", "\\'") + "', 'warning');}", true);
                }
                else
                {
                    this.TempSender = this.Sender;
                    if ((this.Sender == null && !string.IsNullOrEmpty(this.TxtDescriptionSender.Text)) || (this.Sender != null && !this.Sender.descrizione.Equals(this.TxtDescriptionSender.Text)))
                    {
                        Corrispondente corr = new DocsPaWR.Corrispondente();
                        corr.descrizione = this.TxtDescriptionSender.Text;
                        corr.tipoCorrispondente = "O";
                        corr.idAmministrazione = this.InfoUser.idAmministrazione;
                        this.TempSender = corr;
                    }

                    Session["CorrespondentDetails_Type"] = "M";
                    Session["CorrespondentDetails_Index"] = "0";
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "CorrespondentDetails", "ajaxModalPopupCorrespondentDetails();", true);
                }
            }
            catch (System.Exception ex)
            {
                UIManager.AdministrationManager.DiagnosticError(ex);
                return;
            }
        }

        protected void DocumentImgAddNewCorrispondent_Click(object sender, EventArgs e)
        {
            try
            {
                Corrispondente corr = new DocsPaWR.Corrispondente();
                corr.email = this.Sender.email;
                corr.Emails = this.Sender.Emails;
                corr.oldDescrizione = this.Sender.oldDescrizione;
                Canale canale = new Canale();
                canale.systemId = this.DocumentInWorking.mezzoSpedizione;
                corr.canalePref = canale;
                this.NewSender = corr;
                ScriptManager.RegisterStartupScript(this, this.GetType(), "CorrespondentDetails", "ajaxModalPopupAddressBook_New();", true);
            }
            catch (System.Exception ex)
            {
                UIManager.AdministrationManager.DiagnosticError(ex);
                return;
            }
        }

        protected void DocumentImgMultipleSenderDetails_Click(object sender, EventArgs e)
        {
            try
            {
                if (string.IsNullOrEmpty(this.DocumentInWorking.systemId))
                {
                    string tipoProto = this.RblTypeProtocol.SelectedValue;
                    if (!this.RblTypeProtocol.Visible) tipoProto = "G";
                    this.DocumentInWorking.tipoProto = tipoProto;
                }

                if (string.IsNullOrEmpty(this.ListBoxMultipleSender.SelectedValue))
                {
                    string msg = "ErrorDocumentSendersNotSelected";
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + msg.Replace("'", "\\'") + "', 'warning');} else {parent.ajaxDialogModal('" + msg.Replace("'", "\\'") + "', 'warning');}", true);
                }
                else
                {
                    Session["CorrespondentDetails_Type"] = "MD";
                    Session["CorrespondentDetails_Index"] = this.ListBoxMultipleSender.SelectedIndex;
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "CorrespondentDetails", "ajaxModalPopupCorrespondentDetails();", true);
                }
            }
            catch (System.Exception ex)
            {
                UIManager.AdministrationManager.DiagnosticError(ex);
                return;
            }
        }

        protected void btnSenderPostback_Click(object sender, EventArgs e)
        {
            try
            {
                if (this.DocumentInWorking.spedizioneDocumento != null)
                    setSendOrResendButtonText(UIManager.UserManager.GetUserLanguage(), this.DocumentInWorking.spedizioneDocumento.Spedito);

                // Gabriele Melini 06-05-2014
                // ricarico i diritti di lettura/scrittura
                // dopo cessione diritti i metadati rimangono modificabili (e l'upload del documento consentito)
                // fino alla successiva ricerca del documento
                if (this.DocumentInWorking != null)
                {
                    this.DocumentInWorking.accessRights = string.Empty;
                    this.DocumentInWorking.accessRights = DocumentManager.GetAccessRightDocByDocument(this.DocumentInWorking, this.InfoUser);

                    this.EnableEditMode();
                }

            }
            catch (System.Exception ex)
            {
                UIManager.AdministrationManager.DiagnosticError(ex);
                return;
            }
        }

        protected void BtnVerifyPreviousViewer_Click(object sender, EventArgs e)
        {
            try
            {
                DocumentManager.setSelectedRecord(this.DocumentInWorking);
                FileManager.setSelectedFile(this.DocumentInWorking.documenti[0]);
            }
            catch (System.Exception ex)
            {
                UIManager.AdministrationManager.DiagnosticError(ex);
                return;
            }
        }

        protected void btnReportSpedizioniPostback_Click(object sender, EventArgs e)
        {
            Session["ReportSpedizioni_IdDocumento"] = null;
            this.UpPnlRecipients.Update();
        }


        protected void btnAddressBookPostback_Click(object sender, EventArgs e)
        {
            try
            {
                List<NttDataWA.Popup.AddressBook.CorrespondentDetail> atList = (List<NttDataWA.Popup.AddressBook.CorrespondentDetail>)HttpContext.Current.Session["AddressBook.At"];
                List<NttDataWA.Popup.AddressBook.CorrespondentDetail> ccList = (List<NttDataWA.Popup.AddressBook.CorrespondentDetail>)HttpContext.Current.Session["AddressBook.Cc"];
                string addressBookCallFrom = HttpContext.Current.Session["AddressBook.from"].ToString();
                bool esterniInListaInt = false;

                switch (addressBookCallFrom)
                {
                    case "D_A_S_S":
                    case "D_I_S_S":
                    case "D_P_S_S":
                        if (atList != null && atList.Count > 0)
                        {
                            NttDataWA.Popup.AddressBook.CorrespondentDetail corrInSess = atList[0];
                            Corrispondente tempCorrSingle;
                            if (!corrInSess.isRubricaComune)
                                tempCorrSingle = UIManager.AddressBookManager.GetCorrespondentBySystemId(atList[0].SystemID);
                            else
                                tempCorrSingle = UIManager.AddressBookManager.getCorrispondenteByCodRubricaRubricaComune(corrInSess.CodiceRubrica);
                            if (this.CheckDuplicatiMittMultipli(tempCorrSingle))
                            {
                                this.TxtCodeSender.Text = tempCorrSingle.codiceRubrica;
                                this.TxtDescriptionSender.Text = tempCorrSingle.descrizione;
                                this.IdSender.Value = tempCorrSingle.systemId;
                                this.Sender = tempCorrSingle;

                                //Nel caso di un predisposto in arrivo, applico i controlli K1/K2 per il nuovo mittente inserito
                                if (this.DocumentInWorking.tipoProto != null && this.DocumentInWorking.tipoProto.ToUpper().Equals("A"))
                                {
                                    if (DocumentInWorking != null && !string.IsNullOrEmpty(DocumentInWorking.interop) && DocumentInWorking.protocollo != null && string.IsNullOrEmpty(DocumentInWorking.protocollo.segnatura))
                                        SetButtonsCheckSender();
                                }

                                this.UpPnlSender.Update();
                                if (this.DocumentInWorking != null && !string.IsNullOrEmpty(this.DocumentInWorking.systemId))
                                {
                                    this.EditSender = true;
                                }
                            }
                        }
                        break;

                    case "D_A_S_M":
                    case "D_I_S_M":
                    case "D_P_S_M":
                        if (atList != null && atList.Count > 0)
                        {
                            ArrayList lsCorr = new ArrayList();
                            Corrispondente corr = null;
                            foreach (NttDataWA.Popup.AddressBook.CorrespondentDetail addressBookCorrespondent in atList)
                            {
                                if (this.EnableDistributionLists)
                                {
                                    string idAmm = UIManager.UserManager.GetInfoUser().idAmministrazione;
                                    lsCorr = UIManager.AddressBookManager.getCorrispondentiByCodLista(addressBookCorrespondent.CodiceRubrica, idAmm);
                                    if (lsCorr.Count != 0)
                                    {
                                        corr = new DocsPaWR.Corrispondente();
                                        corr.codiceRubrica = addressBookCorrespondent.CodiceRubrica;
                                        corr.descrizione = UIManager.AddressBookManager.getNomeLista(addressBookCorrespondent.CodiceRubrica, idAmm);
                                        corr.tipoCorrispondente = "L";
                                    }
                                    else
                                    {
                                        lsCorr = UIManager.AddressBookManager.getCorrispondentiByCodRFIdAmm(addressBookCorrespondent.CodiceRubrica, idAmm);
                                        if (lsCorr.Count != 0)
                                        {
                                            corr = new DocsPaWR.Corrispondente();
                                            corr.codiceRubrica = addressBookCorrespondent.CodiceRubrica;
                                            corr.descrizione = UIManager.AddressBookManager.getNomeRF(addressBookCorrespondent.CodiceRubrica);
                                            corr.tipoCorrispondente = "F";
                                        }
                                        else
                                        {
                                            if (!addressBookCorrespondent.isRubricaComune)
                                            {
                                                corr = UIManager.AddressBookManager.GetCorrespondentBySystemId(addressBookCorrespondent.SystemID);
                                            }
                                            else
                                            {
                                                corr = UIManager.AddressBookManager.getCorrispondenteByCodRubricaRubricaComune(addressBookCorrespondent.CodiceRubrica);
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    if (!addressBookCorrespondent.isRubricaComune)
                                    {
                                        corr = UIManager.AddressBookManager.GetCorrespondentBySystemId(addressBookCorrespondent.SystemID);
                                    }
                                    else
                                    {
                                        corr = UIManager.AddressBookManager.getCorrispondenteByCodRubricaRubricaComune(addressBookCorrespondent.CodiceRubrica);
                                    }
                                }

                                if (corr != null)
                                {
                                    if (this.CheckDuplicatiMittMultipli(corr))
                                    {
                                        this.MultipleSenders = UIManager.AddressBookManager.addCorrispondente(this.MultipleSenders, corr).ToList<Corrispondente>();
                                        this.SetListBoxMultipleSenderFromAddressBook();
                                        this.EditMultipleSender = true;
                                    }
                                }
                            }
                        }

                        this.UpPnlMultipleSender.Update();

                        break;

                    case "D_A_R_S":
                    case "D_I_R_S":
                    case "D_P_R_S":

                        break;

                    case "D_A_R_M":
                    case "D_I_R_M":
                    case "D_P_R_M":
                        if (atList != null && atList.Count > 0)
                        {
                            ArrayList lsCorr = new ArrayList();
                            Corrispondente corr = null;
                            bool corrAdded = false;
                            foreach (NttDataWA.Popup.AddressBook.CorrespondentDetail addressBookCorrespondent in atList)
                            {
                                if (this.EnableDistributionLists)
                                {
                                    string idAmm = UIManager.UserManager.GetInfoUser().idAmministrazione;
                                    lsCorr = UIManager.AddressBookManager.getCorrispondentiByCodLista(addressBookCorrespondent.CodiceRubrica, idAmm);
                                    if (lsCorr.Count != 0)
                                    {
                                        corr = new DocsPaWR.Corrispondente();
                                        corr.codiceRubrica = addressBookCorrespondent.CodiceRubrica;
                                        corr.descrizione = UIManager.AddressBookManager.getNomeLista(addressBookCorrespondent.CodiceRubrica, idAmm);
                                        corr.tipoCorrispondente = "L";
                                        if (addressBookCallFrom == "D_I_R_M")
                                        {
                                            ArrayList lsCorr2 = new ArrayList();
                                            foreach (Corrispondente corrTemp in lsCorr)
                                            {
                                                if (corrTemp.tipoIE == "I") lsCorr2.Add(corrTemp);
                                            }
                                            if (lsCorr.Count != lsCorr2.Count)
                                            {
                                                lsCorr = lsCorr2;
                                                esterniInListaInt = true;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        lsCorr = UIManager.AddressBookManager.getCorrispondentiByCodRFIdAmm(addressBookCorrespondent.CodiceRubrica, idAmm);
                                        if (lsCorr.Count != 0)
                                        {
                                            corr = new DocsPaWR.Corrispondente();
                                            corr.codiceRubrica = addressBookCorrespondent.CodiceRubrica;
                                            corr.descrizione = UIManager.AddressBookManager.getNomeRF(addressBookCorrespondent.CodiceRubrica);
                                            corr.tipoCorrispondente = "F";
                                        }
                                        else
                                        {
                                            if (!addressBookCorrespondent.isRubricaComune)
                                            {
                                                corr = UIManager.AddressBookManager.GetCorrespondentBySystemId(addressBookCorrespondent.SystemID);
                                            }
                                            else
                                            {
                                                corr = UIManager.AddressBookManager.getCorrispondenteByCodRubricaRubricaComune(addressBookCorrespondent.CodiceRubrica);
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    if (!addressBookCorrespondent.isRubricaComune)
                                    {
                                        corr = UIManager.AddressBookManager.GetCorrespondentBySystemId(addressBookCorrespondent.SystemID);
                                    }
                                    else
                                    {
                                        corr = UIManager.AddressBookManager.getCorrispondenteByCodRubricaRubricaComune(addressBookCorrespondent.CodiceRubrica);
                                    }
                                }

                                if (corr != null && !string.IsNullOrEmpty(corr.codiceRubrica))
                                {

                                    if (!AddressBookManager.alradyExistCorrespondent(this.ListRecipients, corr))
                                    {
                                        if (!AddressBookManager.alradyExistCorrespondent(this.ListRecipientsCC, corr))
                                        {
                                            HttpContext.Current.Session["typeDoc"] = this.RblTypeProtocol.SelectedValue;
                                            this.ListRecipients = AddressBookManager.AddCorrespondet(this.ListRecipients, this.ListRecipientsCC, corr);
                                            corrAdded = true;
                                        }
                                    }
                                }
                            }

                            if (corrAdded)
                            {
                                this.SetListRecipientsOutProtocolFromAddressBook();
                                //this.EditRecipients = true;
                                corrAdded = false;
                            }
                        }

                        if (ccList != null && ccList.Count > 0)
                        {
                            ArrayList lsCorrCC = new ArrayList();
                            Corrispondente corrCC = null;
                            bool corrAddedCC = false;
                            foreach (NttDataWA.Popup.AddressBook.CorrespondentDetail addressBookCorrespondent in ccList)
                            {
                                if (this.EnableDistributionLists)
                                {
                                    string idAmm = UIManager.UserManager.GetInfoUser().idAmministrazione;
                                    lsCorrCC = UIManager.AddressBookManager.getCorrispondentiByCodLista(addressBookCorrespondent.CodiceRubrica, idAmm);
                                    if (lsCorrCC.Count != 0)
                                    {
                                        corrCC = new DocsPaWR.Corrispondente();
                                        corrCC.codiceRubrica = addressBookCorrespondent.CodiceRubrica;
                                        corrCC.descrizione = UIManager.AddressBookManager.getNomeLista(addressBookCorrespondent.CodiceRubrica, idAmm);
                                        corrCC.tipoCorrispondente = "L";
                                        if (addressBookCallFrom == "D_I_R_M")
                                        {
                                            ArrayList lsCorr2 = new ArrayList();
                                            foreach (Corrispondente corrTemp in lsCorrCC)
                                            {
                                                if (corrTemp.tipoIE == "I") lsCorr2.Add(corrTemp);
                                            }
                                            if (lsCorrCC.Count != lsCorr2.Count)
                                            {
                                                lsCorrCC = lsCorr2;
                                                esterniInListaInt = true;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        lsCorrCC = UIManager.AddressBookManager.getCorrispondentiByCodRFIdAmm(addressBookCorrespondent.CodiceRubrica, idAmm);
                                        if (lsCorrCC.Count != 0)
                                        {
                                            corrCC = new DocsPaWR.Corrispondente();
                                            corrCC.codiceRubrica = addressBookCorrespondent.CodiceRubrica;
                                            corrCC.descrizione = UIManager.AddressBookManager.getNomeRF(addressBookCorrespondent.CodiceRubrica);
                                            corrCC.tipoCorrispondente = "F";
                                        }
                                        else
                                        {
                                            if (!addressBookCorrespondent.isRubricaComune)
                                            {
                                                corrCC = UIManager.AddressBookManager.GetCorrespondentBySystemId(addressBookCorrespondent.SystemID);
                                            }
                                            else
                                            {
                                                corrCC = UIManager.AddressBookManager.getCorrispondenteByCodRubricaRubricaComune(addressBookCorrespondent.CodiceRubrica);
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    if (!addressBookCorrespondent.isRubricaComune)
                                    {
                                        corrCC = UIManager.AddressBookManager.GetCorrespondentBySystemId(addressBookCorrespondent.SystemID);
                                    }
                                    else
                                    {
                                        corrCC = UIManager.AddressBookManager.getCorrispondenteByCodRubricaRubricaComune(addressBookCorrespondent.CodiceRubrica);
                                    }
                                }

                                if (corrCC != null && !string.IsNullOrEmpty(corrCC.codiceRubrica))
                                {

                                    if (!AddressBookManager.alradyExistCorrespondent(this.ListRecipients, corrCC))
                                    {
                                        if (!AddressBookManager.alradyExistCorrespondent(this.ListRecipientsCC, corrCC))
                                        {
                                            //this.TypeDocument = (this.DocumentInWorking.documentoPrincipale != null &&
                                            //     !string.IsNullOrEmpty(this.DocumentInWorking.documentoPrincipale.docNumber)) ? ATTACHMENT : this.DocumentInWorking.tipoProto.ToUpper();
                                            HttpContext.Current.Session["typeDoc"] = this.RblTypeProtocol.SelectedValue;
                                            this.ListRecipientsCC = AddressBookManager.AddCorrespondet(this.ListRecipientsCC, this.ListRecipients, corrCC);
                                            corrAddedCC = true;
                                        }
                                    }
                                }
                            }

                            if (corrAddedCC)
                            {
                                this.SetListRecipientsOutProtocolCCFromAddressBook();
                                //this.EditRecipientsCC = true;
                            }
                        }

                        this.UpPnlRecipients.Update();
                        break;
                    case "CUSTOM":
                        if (atList != null && atList.Count > 0)
                        {
                            Corrispondente corr = null;
                            //Profiler document
                            UserControls.CorrespondentCustom userCorr = (UserControls.CorrespondentCustom)this.PnlTypeDocument.FindControl(this.IdCustomObjectCustomCorrespondent);

                            string idAmm = UIManager.UserManager.GetInfoUser().idAmministrazione;
                            foreach (NttDataWA.Popup.AddressBook.CorrespondentDetail addressBookCorrespondent in atList)
                            {

                                if (!addressBookCorrespondent.isRubricaComune)
                                {
                                    corr = UIManager.AddressBookManager.GetCorrespondentBySystemId(addressBookCorrespondent.SystemID);
                                }
                                else
                                {
                                    corr = UIManager.AddressBookManager.getCorrispondenteByCodRubricaRubricaComune(addressBookCorrespondent.CodiceRubrica);
                                }

                            }
                            userCorr.TxtCodeCorrespondentCustom = corr.codiceRubrica;
                            userCorr.TxtDescriptionCorrespondentCustom = corr.descrizione;
                            userCorr.IdCorrespondentCustom = corr.systemId;
                            this.UpPnlTypeDocument.Update();
                        }
                        break;
                }
                HttpContext.Current.Session["AddressBook.At"] = null;
                HttpContext.Current.Session["AddressBook.Cc"] = null;
                if (esterniInListaInt)
                {
                    string msgDesc = "WarningDocumentCorrExtInListProtInt";

                    ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + msgDesc.Replace("'", @"\'") + "', 'warning', '');} else {parent.ajaxDialogModal('" + msgDesc.Replace("'", @"\'") + "', 'warning', '');}", true);

                }
            }
            catch (System.Exception ex)
            {
                UIManager.AdministrationManager.DiagnosticError(ex);
                return;
            }
        }

        protected void btnLinkCustom_Click(object sender, EventArgs e)
        {
            UserControls.LinkDocFasc link = (LinkDocFasc)this.PnlTypeDocument.FindControl(this.OpenAddDocCustom.ReturnValue);
            if (link == null)
            {
                link = (LinkDocFasc)this.PnlTypeDocument.FindControl(this.SearchProjectCustom.ReturnValue);
            }

            if (link.IsFascicolo)
            {

                Fascicolo fasc = ProjectManager.getFascicoloById(HttpContext.Current.Session["LinkCustom.return"].ToString());
                if (fasc != null)
                {
                    link.hf_Id = fasc.systemID;
                    link.txt_NomeObj = fasc.descrizione;
                    link.txt_Maschera = fasc.codice + " " + CutValue(fasc.descrizione);
                }
                ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "setReturnValue", "SetRetValue('SearchProjectCustom','');", true);
            }
            else
            {
                InfoDocumento infoDoc = DocumentManager.GetInfoDocumento(HttpContext.Current.Session["LinkCustom.return"].ToString(), HttpContext.Current.Session["LinkCustom.return"].ToString(), this.Page);
                if (infoDoc != null)
                {

                    link.hf_Id = infoDoc.idProfile;
                    link.txt_NomeObj = infoDoc.oggetto;
                    //this.txt_NomeObj.Text = infoDoc.oggetto;

                    if (!string.IsNullOrEmpty(infoDoc.segnatura))
                    {
                        link.txt_Maschera = infoDoc.segnatura + " " + CutValue(infoDoc.oggetto);
                        //this.txt_Maschera.Text = infoDoc.segnatura + " " + CutValue(infoDoc.oggetto);
                    }
                    else
                    {
                        link.txt_Maschera = infoDoc.idProfile + " " + CutValue(infoDoc.oggetto);
                    }
                }
            }
            //this.hf_SelectedObject.Value = "0";

            //this.hpl_Link.Text = this.LinkText;

            HttpContext.Current.Session["LinkCustom.return"] = null;
            ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "setReturnValue", "SetRetValue('OpenAddDocCustom','');", true);
        }

        private string CutValue(string value)
        {
            if (value.Length < 20) return value;
            int firstSpacePos = value.IndexOf(' ', 20);
            if (firstSpacePos == -1) firstSpacePos = 20;
            return value.Substring(0, firstSpacePos) + "...";
        }

        protected void btnUpdateCorrespondentsDetails_Click(object sender, EventArgs e)
        {
            try
            {
                if (!string.IsNullOrEmpty(this.CorrespondentDetails.ReturnValue))
                {
                    ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "setReturnValue", "SetRetValue('CorrespondentDetails','');", true);

                    if (this.IdSender.Value != null && this.Sender != null && !string.IsNullOrEmpty(this.Sender.systemId) && this.IdSender.Value != this.Sender.systemId)
                    {
                        this.TxtCodeSender.Text = this.Sender.codiceRubrica;
                        this.TxtDescriptionSender.Text = this.Sender.descrizione;
                        this.TxtDescriptionSender.Focus();
                        this.IdSender.Value = this.Sender.systemId;
                        this.UpPnlSender.Update();

                        return;
                    }

                    bool multipleSenderHasChanged = false;
                    for (int i = 0; i < this.ListBoxMultipleSender.Items.Count; i++)
                        if (this.ListBoxMultipleSender.Items[i].Value != this.MultipleSenders[i].systemId)
                        {
                            multipleSenderHasChanged = true;
                            break;
                        }
                    if (multipleSenderHasChanged)
                    {
                        this.ListBoxMultipleSender.Items.Clear();
                        foreach (Corrispondente corr in this.MultipleSenders)
                        {
                            ListItem item = new ListItem(UIManager.AddressBookManager.getDecrizioneCorrispondenteSemplice(corr), corr.codiceRubrica);
                            this.ListBoxMultipleSender.Items.Add(item);
                        }

                        this.ListBoxMultipleSender.Focus();
                        this.UpPnlMultipleSender.Update();

                        return;
                    }


                    bool recipientsHasChanged = false;
                    for (int i = 0; i < this.ListBoxRecipient.Items.Count; i++)
                        if (this.ListBoxRecipient.Items[i].Value != this.ListRecipients[i].systemId)
                        {
                            recipientsHasChanged = true;
                            break;
                        }
                    if (recipientsHasChanged)
                    {
                        this.ListBoxRecipient.Items.Clear();
                        foreach (Corrispondente corr in this.ListRecipients)
                        {
                            ListItem item = new ListItem();
                            item.Value = corr.codiceRubrica;
                            item.Text = this.TakeDescriptionCorrespondent(corr);
                            this.ListBoxRecipient.Items.Add(item);
                        }

                        this.ListBoxRecipient.Focus();
                        this.UpPnlRecipients.Update();

                        return;
                    }

                    bool recipientsCCHasChanged = false;
                    for (int i = 0; i < this.ListBoxRecipientCC.Items.Count; i++)
                        if (this.ListBoxRecipientCC.Items[i].Value != this.ListRecipientsCC[i].systemId)
                        {
                            recipientsCCHasChanged = true;
                            break;
                        }
                    if (recipientsCCHasChanged)
                    {
                        this.ListBoxRecipientCC.Items.Clear();
                        foreach (Corrispondente corr in this.ListRecipientsCC)
                        {
                            ListItem item = new ListItem();
                            item.Value = corr.codiceRubrica;
                            item.Text = this.TakeDescriptionCorrespondent(corr);
                            this.ListBoxRecipientCC.Items.Add(item);
                        }

                        this.ListBoxRecipient.Focus();
                        this.UpPnlRecipients.Update();


                        return;
                    }
                }
            }
            catch (System.Exception ex)
            {
                UIManager.AdministrationManager.DiagnosticError(ex);
                return;
            }
        }

        protected void DocumentImgSending_Click(object sender, EventArgs e)
        {
            try
            {
                bool editMode = false;
                if (this.DocumentInWorking.protocollo != null && this.DocumentInWorking.protocollo.segnatura != null)
                {
                    if (
                        (this.DocumentInWorking != null && !string.IsNullOrEmpty(this.DocumentInWorking.accessRights) && Convert.ToInt32(this.DocumentInWorking.accessRights) >= Convert.ToInt32(Utils.HMdiritti.HMdiritti_Read))
                        && UserManager.IsAuthorizedFunctions("DO_PROT_SALVA")
                    ) editMode = true;
                }
                else
                {
                    editMode = true;
                }
                Session["ChoiceTypeDelivery_editMode"] = editMode;
                ScriptManager.RegisterStartupScript(this, this.GetType(), "ChoiceTypeDelivery", "ajaxModalPopupChoiceTypeDelivery();", true);
            }
            catch (System.Exception ex)
            {
                UIManager.AdministrationManager.DiagnosticError(ex);
                return;
            }
        }

        protected void DocumentImgPrintEnvelopesRecipients_Click(object sender, EventArgs e)
        {
            try
            {
                if (this.ListRecipients.Count > 0)
                {
                    HttpContext.Current.Session["visualReportAlreadyDownloaded" + Session.SessionID] = null;
                    DocsPaWR.FileDocumento fileRep = DocumentManager.getBustaReport(this, this.DocumentInWorking);
                    FileManager.setSelectedFileReport(this, fileRep, "../popup");
                }
            }
            catch (System.Exception ex)
            {
                UIManager.AdministrationManager.DiagnosticError(ex);
            }
        }

        protected void DocumentBtnRemove_Click(object sender, EventArgs e)
        {
            try
            {
                if (this.DocumentInWorking != null &&
                    !string.IsNullOrEmpty(this.DocumentInWorking.systemId) &&
                    LibroFirmaManager.IsDocOrAllInLibroFirma(this.DocumentInWorking.systemId))
                {
                    string msgDesc = "WarningDocumentOrAttachIsInLfRemove";
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + msgDesc.Replace("'", @"\'") + "', 'warning', '');} else {parent.ajaxDialogModal('" + msgDesc.Replace("'", @"\'") + "', 'warning', '');}", true);
                }
                else
                {
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "RemoveProfile", "ajaxModalPopupRemoveProfile();", true);
                }
            }
            catch (System.Exception ex)
            {
                UIManager.AdministrationManager.DiagnosticError(ex);
                return;
            }
        }

        protected void DocumentImgViewDocumentExists_Click(object sender, EventArgs e)
        {
            try
            {
                Session["VerifyPrevious_RecordOk"] = null;
                //Tatiana - modifica 25/03/2013
                bool exist = this.CheckIfDocumentExists(true);
                if (!exist)
                {
                    string msg = "ErrorClassificationSchemeNoSearch";
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + msg.Replace("'", @"\'") + "', 'warning');} else {parent.ajaxDialogModal('" + msg.Replace("'", @"\'") + "', 'warning');}", true);
                }
            }
            catch (System.Exception ex)
            {
                UIManager.AdministrationManager.DiagnosticError(ex);
                return;
            }
        }

        private bool CheckIfDocumentExists(bool showMessages)
        {
            Session["VerifyPrevious_RecordOk"] = null;

            this.DocumentInWorking = this.SetTypeRecord(this.DocumentInWorking);

            if (!string.IsNullOrEmpty(this.TxtDateProtocol.Text))
            {
                ((DocsPaWR.ProtocolloEntrata)this.DocumentInWorking.protocollo).dataProtocolloMittente = this.TxtDateProtocol.Text;
            }
            if (!string.IsNullOrEmpty(this.TxtProtocolSender.Text))
            {
                ((DocsPaWR.ProtocolloEntrata)this.DocumentInWorking.protocollo).descrizioneProtocolloMittente = this.TxtProtocolSender.Text;
            }
            if (string.IsNullOrEmpty(this.TxtDescriptionSender.Text))
            {
                if (showMessages)
                {
                    string msg = "WarningDocumentInsertSender";
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + msg.Replace("'", @"\'") + "', 'warning');} else {parent.ajaxDialogModal('" + msg.Replace("'", @"\'") + "', 'warning');}", true);
                }
                return false;
            }

            if (string.IsNullOrEmpty(this.TxtObject.Text) && this.FindDuplicateProtocol2)
            {
                if (showMessages)
                {
                    string msg = "WarningDocumentInsertObject";
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + msg.Replace("'", @"\'") + "', 'warning');} else {parent.ajaxDialogModal('" + msg.Replace("'", @"\'") + "', 'warning');}", true);
                }
                return false;
            }

            DocsPaWR.InfoProtocolloDuplicato[] datiProtDupl = null;
            DocsPaWR.EsitoRicercaDuplicatiEnum esitoRicercaDuplicati = DocumentManager.cercaDuplicati(this.DocumentInWorking, Convert.ToInt32(this.FindDuplicateProtocol2).ToString(), out datiProtDupl);

            string scriptString = string.Empty;
            if (esitoRicercaDuplicati != DocsPaWR.EsitoRicercaDuplicatiEnum.NessunDuplicato)
            {
                if (datiProtDupl != null && datiProtDupl.Length > 0)
                {
                    Session["VerifyPrevious_datiProtDupl"] = datiProtDupl;
                    Session["VerifyPrevious_esitoRicercaDuplicati"] = esitoRicercaDuplicati;
                    //Session["VerifyPrevious_trasmModel"] = this.DocumentDdlTransmissionsModel.SelectedIndex;

                    if (showMessages)
                    {
                        ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "VerifyPrevious", "ajaxModalPopupVerifyPrevious();", true);
                        return true;
                    }
                    else
                    {
                        if (string.IsNullOrEmpty(this.VerifyPrevious.ReturnValue))
                        {
                            Session["VerifyPrevious_RecordOk"] = showMessages.ToString();
                            ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "VerifyPrevious", "ajaxModalPopupVerifyPrevious();", true);
                            return true;
                        }
                        else
                        {
                            // Gabriele Melini 09-07-2014
                            // fix per riproponi con Firefox
                            Session["VerifyPrevious_datiProtDupl"] = null;
                            return false;
                        }
                    }
                }
                else  // verifica senza precedenti
                {
                    if (showMessages)
                    {
                        string msg = "WarningDocumentPreviousNone";
                        ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + msg.Replace("'", @"\'") + "', 'info');} else {parent.ajaxDialogModal('" + msg.Replace("'", @"\'") + "', 'info');}", true);
                    }
                }
            }

            return false;
        }

        protected void DocumentBtnRepeat_Click(object sender, EventArgs e)
        {
            try
            {
                if ((this.DocumentInWorking.documenti != null && (!string.IsNullOrEmpty(this.DocumentInWorking.documenti[0].fileName)))
                    || (this.DocumentInWorking.allegati != null && this.DocumentInWorking.allegati.Length > 0))
                {
                    if (this.RepeatAdvancedEnabled)
                    {
                        string msg = "ConfirmRepeatCopyDocuments";
                        ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxConfirmModal", "if (parent.fra_main) {parent.fra_main.ajaxConfirmModal('" + msg.Replace("'", @"\'") + "', 'HiddenControlRepeatCopyDocuments', '');} else {parent.ajaxConfirmModal('" + msg.Replace("'", @"\'") + "', 'HiddenControlRepeatCopyDocuments', '');}", true);
                        this.HiddenControlRepeatCopyDocuments2.Value = "true";
                        this.UpDocumentButtons.Update();
                        return;
                    }
                }
                this.RepeatDocument(false);
                this.DisabledDocumentChekUser.Attributes.Remove("class");
                this.DisabledDocumentCheckPrivate.Attributes.Remove("class");
                string language = UIManager.UserManager.GetUserLanguage();
                this.DocumentBtnSend.Text = Utils.Languages.GetLabelFromCode("DocumentBtnSend", language);
                this.DocumentBtnTransmit.Text = Utils.Languages.GetLabelFromCode("DocumentBtnTransmit", language);
                this._attivaPulsanteApponiSegnaturaPermanente(false, true);
            }
            catch (System.Exception ex)
            {
                UIManager.AdministrationManager.DiagnosticError(ex);
                return;
            }
        }

        private void RepeatDocument(bool withFile)
        {
            SchedaDocumento repeat = DocumentManager.NewSchedaDocumento();

            if (withFile)
            {
                //Non testato probabilmente non funziona
                this.DocumentInWorking = DocumentManager.riproponiConCopiaDoc(this, this.DocumentInWorking, this.ReferenceOffice);
                FileManager.setSelectedFile(this.DocumentInWorking.documenti[0]);
            }
            else
            {
                repeat = this.RiproponiDati(this.DocumentInWorking, this.ReferenceOffice);
                this.DocumentInWorking = repeat;
                DocumentManager.setSelectedRecord(this.DocumentInWorking);
                FileManager.removeSelectedFile();
            }

            this.PopulateRecord(true);
            string language = UIManager.UserManager.GetUserLanguage();
            this.DocumentBtnAdL.Text = Utils.Languages.GetLabelFromCode("DocumentBtnAdL", language);
            this.DocumentBtnAdLRole.Text = Utils.Languages.GetLabelFromCode("DocumentBtnAdLRole", language);
            this.DocumentBtnAdL.Enabled = true;
            this.DocumentBtnAdLRole.Enabled = true;

            this.DocumentImgObjectary.Enabled = true;
            this.DocumentImgSenderAddressBook.Enabled = true;
            this.DocumentImgDownSender.Enabled = true;
            this.DocumentImgUpSender.Enabled = true;
            this.DocumentImgMultipleSenderAddressBook.Enabled = true;
            this.DocumentImgMultipleSenderDelete.Enabled = true;
            this.DocumentImgRecipientAddressBook.Enabled = true;
            this.DocumentImgAddRecipient.Enabled = true;
            this.DocumentImgDeleteRecipient.Enabled = true;
            this.DocumentImgAddRecipientToCC.Enabled = true;
            this.DocumentImgAddRecipientFromCC.Enabled = true;
            this.DocumentImgDeleteRecipientCC.Enabled = true;
            this.DocumentImgAnswerSearch.Enabled = true;

            this.TxtNote.ReadOnly = false;
            this.btnclassificationschema.Enabled = true;
            this.TxtDescriptionProject.ReadOnly = false;
            this.TxtCodeProject.ReadOnly = false;

            this.DocumentImgSearchProjects.Enabled = true;
            this.DocumentImgSelectKeyword.Enabled = true;
            this.DocumentImgDeleteKeyword.Enabled = true;

            this.DocumentImgViewDocumentExists.Enabled = true;
            this.DocumentImgAnswerWithProtocol.Enabled = false;
            this.DocumentImgAnswerWithDocument.Enabled = false;
            this.DocumentImgGoAnswer.Visible = false;
            this.DocumentImgMailSender.Visible = false;
            this.DocumentImgPecSender.Visible = false;
            this.UpPnlImgSender.Update();
            // updatepanels
            this.pnl_fasc_Primaria.Visible = false;
            this.UpPnlPrimaryClassification.Update();
            this.HeaderDocument.RefreshLayoutHeader();
            this.UpUserControlHeaderDocument.Update();
            this.UpPnlResponse.Update();

            this.DocumentTabs.RefreshLayoutTab();

            this.RblTypeProtocol.Enabled = true;
            this.UpTypeProtocol.Update();

            this.DdlRegistries.Enabled = true;
            this.UpPnlRegistry.Update();

            this.DocumentChekUser.Enabled = true;
            this.DocumentCheckPrivate.Enabled = true;
            this.UpDocumentPrivate.Update();

            this.PnlDataDocument.Visible = false;
            this.UpPnlDataDocument.Update();

            this.PnlAbortRecord.Visible = false;
            this.UpAbortedAnnulled.Update();

            this.PnlConsolidate.Visible = false;
            this.UpConsolidate.Update();

            this.TxtCodeObject.ReadOnly = false;
            this.TxtObject.ReadOnly = false;
            this.UpdPnlObject.Update();

            this.TxtCodeSender.ReadOnly = false;
            this.TxtDescriptionSender.ReadOnly = false;
            this.UpPnlImgSender.Update();
            this.UpPnlSender.Update();

            this.ListBoxMultipleSender.Enabled = true;
            this.UpPnlMultipleSender.Update();

            this.TxtRecipientCode.ReadOnly = false;
            this.TxtRecipientDescription.ReadOnly = false;
            this.TxtRecipientCode.Enabled = true;
            this.TxtRecipientDescription.Enabled = true;
            this.ListBoxRecipient.Enabled = true;
            this.ListBoxRecipientCC.Enabled = true;
            this.UpPnlRecipients.Update();

            this.DdlMeansSending.Enabled = true;
            this.UpPnlMeansSender.Update();

            this.TxtProtocolSender.ReadOnly = false;
            this.TxtProtocolSender.Text = string.Empty;
            this.TxtDateProtocol.ReadOnly = false;
            this.TxtDateProtocol.Text = string.Empty;
            this.UpPnlSenderProtocol.Update();

            this.TxtArrivalDate.ReadOnly = false;
            this.TxtArrivalDate.Text = string.Empty;
            this.TxtTimeOfArrival.ReadOnly = false;
            this.TxtTimeOfArrival.Text = string.Empty;
            this.UpPnlArrivaleDate.Update();

            this.DocumentLitVisibleNotes.Text = Utils.Languages.GetLabelFromCode("DocumentNoteNoneVisible", UIManager.UserManager.GetUserLanguage());
            this.DocumentLitNoteAuthor.Text = string.Empty;
            this.RblTypeNote.Enabled = true;
            this.RblTypeNote.SelectedIndex = -1;
            this.DocumentItemNoteAll.Selected = true;
            this.ddlNoteRF.SelectedIndex = -1;
            this.isTutti.Value = string.Empty;
            this.TxtNote.Text = string.Empty;
            this.ddlNoteRF.Enabled = true;
            this.UpPnlNote.Update();

            this.plcAnswerRif.Visible = false;
            this.UpPnlResponseProtocol.Update();
            this.UpPnlResponse.Update();

            this.TxtCodeProject.Enabled = true;
            this.TxtDescriptionProject.Enabled = true;
            this.UpPnlProject.Update();

            this.DocumentDdlTransmissionsModel.Enabled = true;
            this.DocumentDdlTransmissionsModel.SelectedIndex = -1;
            this.UpPnlTransmissionsModel.Update();

            this.DocumentDdlTypeDocument.Enabled = true;
            this.UpPnlTypeDocument.Update();

            //this.ListKeywords.Enabled = true;
            //this.ListKeywords.Items.Clear();
            this.UpPnlKeywords.Update();

            this.DocumentBtnPrepared.Enabled = false;
            this.DocumentBtnRemove.Enabled = false;
            this.DocumentBtnUndo.Enabled = false;
            this.DocumentBtnForward.Enabled = false;
            this.DocumentBtnConsolid.Enabled = false;
            this.DocumentBtnSave.Enabled = false;
            this.DocumentBtnRepeat.Enabled = false;
            this.DocumentBtnAdL.Enabled = false;
            this.DocumentBtnAdLRole.Enabled = false;
            this.DocumentBtnSend.Enabled = false;
            this.DocumentBtnTransmit.Enabled = false;
            this.DocumentBtnPrint.Enabled = false;
            if (!string.IsNullOrEmpty(this.DocumentInWorking.tipoProto) && (this.DocumentInWorking.tipoProto.Equals("P") || this.DocumentInWorking.tipoProto.Equals("A") || this.DocumentInWorking.tipoProto.Equals("I")))
            {
                this.DocumentBntRecord.Visible = true;
                this.DocumentBntRecord.Enabled = true;

                //Se il protocollo è GIALLO disabilito la protocollazione
                if (this.Registry != null)
                {
                    string state = UIManager.RegistryManager.getStatoRegistro(this.Registry);
                    if (!string.IsNullOrEmpty(state) && !state.Equals("V"))
                    {
                        this.DocumentBntRecord.Enabled = false;
                    }
                }

                this.DocumentBtnCreateDocument.Enabled = false;
            }
            else
            {
                this.DocumentBtnSave.Visible = false;
                this.DocumentBtnCreateDocument.Visible = true;
                this.DocumentBtnCreateDocument.Enabled = true;
            }


            this.HeaderDocument.FindControl("DocumentLblDocumentId").Visible = false;
            this.HeaderDocument.FindControl("LblIdDocument").Visible = false;
            this.HeaderDocument.FindControl("DocumentLblReferenceCodeLabel").Visible = false;
            this.HeaderDocument.FindControl("LblReferenceCode").Visible = false;
            this.HeaderDocument.FindControl("DocumentLblRepertoryCodeLabel").Visible = false;
            this.HeaderDocument.FindControl("LblRepertory").Visible = false;
            this.HeaderDocument.FindControl("DocumentLitTypeDocumentHead").Visible = false;
            this.HeaderDocument.FindControl("DocumentLitTypeDocumentValue").Visible = false;
            ((UpdatePanel)this.HeaderDocument.FindControl("UpcontainerDocumentTopCx")).Update();

            this.DocumentTabs.ResetLayoutTab(this.RepeatAdvancedEnabled);

            this.ViewDocument.InitializeContent();
            ((UpdatePanel)this.ViewDocument.FindControl("UpBottomButtons")).Update();
            ((UpdatePanel)this.ViewDocument.FindControl("UpPnlContentDxSx")).Update();
            ((UpdatePanel)this.ViewDocument.FindControl("UpPnlContentDxDx")).Update();

            //this.DisableCheckInOut(false);

            if (this.DocumentInWorking.documenti[0].fileSize.Equals("0"))
            {
                this.DocumentButtons.RefreshButtons(NttDataWA.UserControls.DocumentButtons.TypeRefresh.D_ALL);
                //this.DocumentButtons.RefreshButtons(NttDataWA.UserControls.DocumentButtons.TypeRefresh.E_UPLOADFILE);
                this.DocumentButtons.InitializeCheckInOutPanel();
            }

            /*
            CheckInOut.CheckInOutServices.RefreshCheckOutStatus();
            CheckInOutApplet.CheckInOutServices.RefreshCheckOutStatus();
            this.DocumentButtons.InitializeCheckInOutPanel();
            */

            this.UpPnlIconObjects.Update();
            this.pPnlBUttonsProject.Update();
            this.UpContainerDocumentTab.Update();
            this.UpDocumentButtons.Update();
        }

        private SchedaDocumento RiproponiDati(SchedaDocumento schedaDoc, bool eUffRef)
        {
            ListItem empty = new ListItem("", "");
            //data una scheda documento ne crea una nuova riproponendo l'oggetto e il mittente (o destinatario)
            SchedaDocumento schedaNewDoc = DocumentManager.NewSchedaDocumento();
            schedaNewDoc.oggetto = schedaDoc.oggetto;
            schedaNewDoc.registro = schedaDoc.registro;
            schedaNewDoc.tipoProto = schedaDoc.tipoProto;
            schedaNewDoc.idPeople = schedaDoc.idPeople;
            schedaNewDoc.userId = schedaDoc.userId;
            schedaNewDoc.typeId = schedaDoc.typeId;
            schedaNewDoc.appId = schedaDoc.appId;
            schedaNewDoc.privato = schedaDoc.privato;
            schedaNewDoc.mezzoSpedizione = schedaDoc.mezzoSpedizione;
            schedaNewDoc.descMezzoSpedizione = schedaDoc.descMezzoSpedizione;
            schedaNewDoc.isRiprodotto = true;
            this.DocumentInWorking.isRiprodotto = true;
            schedaNewDoc.paroleChiave = schedaDoc.paroleChiave;
            schedaNewDoc.daAggiornareParoleChiave = true;
            if (this.CustomDocuments)
            {
                if (schedaDoc.template != null)
                {
                    schedaNewDoc.tipologiaAtto = schedaDoc.tipologiaAtto;
                    schedaNewDoc.template = schedaDoc.template;
                    ListItem item = new ListItem();
                    item.Value = schedaDoc.template.SYSTEM_ID.ToString();
                    item.Text = schedaDoc.template.DESCRIZIONE;
                    this.DocumentDdlTypeDocument.Items.Clear();
                    this.DocumentDdlTypeDocument.Items.Add(empty);
                    this.LoadCustomDocuments(true);
                    if (this.DocumentDdlTypeDocument.Items != null && this.DocumentDdlTypeDocument.Items.Count > 0 && this.DocumentDdlTypeDocument.Items.Contains(item))
                    {
                        this.DocumentDdlTypeDocument.SelectedValue = item.Value;
                        this.PopulateProfiledDocument();
                        if (this.EnableStateDiagram)
                        {
                            this.DocumentDdlStateDiagram.ClearSelection();
                            //Verifico se esiste un diagramma di stato associato al tipo di documento
                            this.StateDiagram = DiagrammiManager.getDgByIdTipoDoc(this.DocumentDdlTypeDocument.SelectedItem.Value, this.InfoUser.idAmministrazione);
                            if (this.StateDiagram != null)
                            {
                                this.PnlStateDiagram.Visible = true;
                                this.popolaComboBoxStatiSuccessivi(null, this.StateDiagram);
                            }
                            else
                            {
                                this.PnlStateDiagram.Visible = false;
                            }
                        }

                    }
                    else
                    {
                        this.Template = null;
                        this.StateDiagram = null;
                        schedaNewDoc.tipologiaAtto = null;
                        schedaNewDoc.template = null;
                        this.PnlTypeDocument.Controls.Clear();
                        this.DocumentDdlTypeDocument.Items.Clear();
                        this.DocumentDdlTypeDocument.Items.Add(empty);
                        this.DocumentDdlTypeDocument.SelectedIndex = -1;
                        this.LoadCustomDocuments(true);
                    }
                }
                else
                {
                    this.Template = null;
                    schedaNewDoc.tipologiaAtto = null;
                    schedaNewDoc.template = null;
                    this.PnlTypeDocument.Controls.Clear();
                    this.DocumentDdlTypeDocument.Items.Clear();
                    this.DocumentDdlTypeDocument.Items.Add(empty);
                    this.DocumentDdlTypeDocument.SelectedIndex = -1;
                    this.LoadCustomDocuments(true);

                }
            }

            //switch (schedaDoc.tipoProto)
            //{
            //    case "A":
            //        schedaNewDoc.protocollo = new DocsPaWR.ProtocolloEntrata();
            //        ((DocsPaWR.ProtocolloEntrata)schedaNewDoc.protocollo).mittente = ((DocsPaWR.ProtocolloEntrata)schedaDoc.protocollo).mittente;
            //        ((DocsPaWR.ProtocolloEntrata)schedaNewDoc.protocollo).mittenteIntermedio = ((DocsPaWR.ProtocolloEntrata)schedaDoc.protocollo).mittenteIntermedio;
            //        if (eUffRef)
            //        {
            //            ((DocsPaWR.ProtocolloEntrata)schedaNewDoc.protocollo).ufficioReferente = ((DocsPaWR.ProtocolloEntrata)schedaDoc.protocollo).ufficioReferente;
            //        }
            //        this.Sender = ((DocsPaWR.ProtocolloEntrata)schedaNewDoc.protocollo).mittente;

            //        if (this.EnableMultipleSenders)
            //        {
            //            ((DocsPaWR.ProtocolloEntrata)schedaNewDoc.protocollo).mittenti = ((DocsPaWR.ProtocolloEntrata)schedaDoc.protocollo).mittenti;
            //            if (((DocsPaWR.ProtocolloEntrata)schedaDoc.protocollo).mittenti != null)
            //            {
            //                this.MultipleSenders = ((DocsPaWR.ProtocolloEntrata)schedaDoc.protocollo).mittenti.ToList<Corrispondente>();
            //            }
            //        }
            //        this.RblTypeProtocol.Items[0].Attributes.Add("class", "orange");
            //        break;
            //    case "P":
            //        schedaNewDoc.protocollo = new DocsPaWR.ProtocolloUscita();
            //        ((DocsPaWR.ProtocolloUscita)schedaNewDoc.protocollo).mittente = ((DocsPaWR.ProtocolloUscita)schedaDoc.protocollo).mittente;
            //        ((DocsPaWR.ProtocolloUscita)schedaNewDoc.protocollo).destinatari = ((DocsPaWR.ProtocolloUscita)schedaDoc.protocollo).destinatari;
            //        ((DocsPaWR.ProtocolloUscita)schedaNewDoc.protocollo).destinatariConoscenza = ((DocsPaWR.ProtocolloUscita)schedaDoc.protocollo).destinatariConoscenza;
            //        if (eUffRef)
            //        {
            //            ((DocsPaWR.ProtocolloUscita)schedaNewDoc.protocollo).ufficioReferente = ((DocsPaWR.ProtocolloUscita)schedaDoc.protocollo).ufficioReferente;
            //        }

            //        this.Sender = ((DocsPaWR.ProtocolloUscita)schedaDoc.protocollo).mittente;

            //        if (((DocsPaWR.ProtocolloUscita)schedaNewDoc.protocollo).destinatari != null)
            //        {
            //            this.ListRecipients = ((DocsPaWR.ProtocolloUscita)schedaDoc.protocollo).destinatari.ToList<Corrispondente>();
            //        }

            //        if (((DocsPaWR.ProtocolloUscita)schedaNewDoc.protocollo).destinatariConoscenza != null)
            //        {
            //            this.ListRecipientsCC = ((DocsPaWR.ProtocolloUscita)schedaDoc.protocollo).destinatariConoscenza.ToList<Corrispondente>();
            //        }

            //        // Pulizia delle informazioni sui protocolli destinatari, se il protocollo è un protocollo
            //        // in uscita
            //        foreach (Corrispondente destinatario in ((ProtocolloUscita)schedaNewDoc.protocollo).destinatari)
            //            destinatario.protocolloDestinatario = null;

            //        this.RblTypeProtocol.Items[1].Attributes.Add("class", "green");
            //        break;
            //    case "I":
            //        schedaNewDoc.protocollo = new DocsPaWR.ProtocolloInterno();
            //        ((DocsPaWR.ProtocolloInterno)schedaNewDoc.protocollo).mittente = ((DocsPaWR.ProtocolloInterno)schedaDoc.protocollo).mittente;
            //        ((DocsPaWR.ProtocolloInterno)schedaNewDoc.protocollo).destinatari = ((DocsPaWR.ProtocolloInterno)schedaDoc.protocollo).destinatari;
            //        ((DocsPaWR.ProtocolloInterno)schedaNewDoc.protocollo).destinatariConoscenza = ((DocsPaWR.ProtocolloInterno)schedaDoc.protocollo).destinatariConoscenza;
            //        if (eUffRef)
            //        {
            //            ((DocsPaWR.ProtocolloInterno)schedaNewDoc.protocollo).ufficioReferente = ((DocsPaWR.ProtocolloInterno)schedaDoc.protocollo).ufficioReferente;
            //        }
            //        this.Sender = ((DocsPaWR.ProtocolloInterno)schedaDoc.protocollo).mittente;

            //        if (((DocsPaWR.ProtocolloInterno)schedaNewDoc.protocollo).destinatari != null)
            //        {
            //            this.ListRecipients = ((DocsPaWR.ProtocolloInterno)schedaDoc.protocollo).destinatari.ToList<Corrispondente>();
            //        }

            //        if (((DocsPaWR.ProtocolloInterno)schedaNewDoc.protocollo).destinatariConoscenza != null)
            //        {
            //            this.ListRecipientsCC = ((DocsPaWR.ProtocolloInterno)schedaDoc.protocollo).destinatariConoscenza.ToList<Corrispondente>();
            //        }

            //        this.RblTypeProtocol.Items[2].Attributes.Add("class", "blue");
            //        break;
            //    case "G":
            //        schedaNewDoc.tipoProto = "G";
            //        break;
            //}

            switch (schedaDoc.tipoProto)
            {
                case "P":
                    this.ListBoxRecipient.Items.Clear();
                    this.ListBoxRecipientCC.Items.Clear();
                    this.SetListRecipientsOutProtocol();
                    break;
                case "I":
                    this.ListBoxRecipient.Items.Clear();
                    this.ListBoxRecipientCC.Items.Clear();
                    this.SetListRecipientsInternalProtocol();
                    break;
            }

            Fascicolo[] projects = DocumentManager.GetFascicoliDaDoc(this, schedaDoc.docNumber);
            if (projects != null && projects.Length > 0)
            {
                if (projects.Length > 1)
                {
                    this.Project = null;
                    //Laura 25 Marzo
                    ProjectManager.setProjectInSessionForRicFasc(null);
                    ProjectManager.setFascicoloSelezionatoFascRapida(this, null);
                    this.TxtCodeProject.Text = string.Empty;
                    this.TxtDescriptionProject.Text = string.Empty;
                }
                else if (this.Project == null)
                {
                    this.Project = projects[0];
                    //Laura 25 Marzo
                    DocsPaWR.FascicolazioneClassifica[] gerClassifica = ProjectManager.getGerarchia(this, projects[0].idClassificazione, UserManager.GetUserInSession().idAmministrazione);
                    ProjectManager.setProjectInSessionForRicFasc(gerClassifica[gerClassifica.Length - 1].codice);
                    ProjectManager.setFascicoloSelezionatoFascRapida(this, projects[0]);
                    this.TxtCodeProject.Text = projects[0].codice;
                    this.TxtDescriptionProject.Text = projects[0].descrizione;
                }
            }

            for (int i = 0; i < ListBoxRecipient.Items.Count; i++)
            {
                ListBoxRecipient.Items[i].Text = ListBoxRecipient.Items[i].Text.Replace("(*)", string.Empty);
                ListBoxRecipient.Items[i].Text = ListBoxRecipient.Items[i].Text.Replace("(A)", string.Empty);
                ListBoxRecipient.Items[i].Text = ListBoxRecipient.Items[i].Text.Replace("(!)", string.Empty);

            }
            for (int i = 0; i < ListBoxRecipientCC.Items.Count; i++)
            {
                ListBoxRecipientCC.Items[i].Text = ListBoxRecipientCC.Items[i].Text.Replace("(*)", string.Empty);
                ListBoxRecipientCC.Items[i].Text = ListBoxRecipientCC.Items[i].Text.Replace("(A)", string.Empty);
                ListBoxRecipientCC.Items[i].Text = ListBoxRecipientCC.Items[i].Text.Replace("(!)", string.Empty);

            }

            schedaNewDoc.isRiprodotto = false;

            return schedaNewDoc;
        }

        protected void DocumentBtnForward_Click(object sender, EventArgs e)
        {
            //logger.Info("BEGIN");
            if (this.DocumentInWorking.protocollo != null &&
                this.DocumentInWorking.protocollo.GetType() == typeof(DocsPaWR.ProtocolloUscita))
            {
                //Prima di riproporre devo pulire l'oggetto ProtocolloDestinatario per ogni destinatario del protocollo
                DocsPaWR.Corrispondente destinatario;
                if (((DocsPaWR.ProtocolloUscita)this.DocumentInWorking.protocollo).destinatari != null)
                {
                    for (int i = 0; i < ((DocsPaWR.ProtocolloUscita)this.DocumentInWorking.protocollo).destinatari.Length; i++)
                    {
                        destinatario = (((DocsPaWR.ProtocolloUscita)this.DocumentInWorking.protocollo).destinatari[i]);
                        destinatario.protocolloDestinatario = null;
                    }
                }
            }

            this.DocumentInWorking = DocumentManager.InoltraDocumento(this, this.DocumentInWorking, this.ReferenceOffice);

            FileManager.removeSelectedFile();

            this.DocumentInWorking.predisponiProtocollazione = true;
            this.IsForwarded = true;

            for (int i = 0; i < this.DocumentInWorking.allegati.Length; i++)
                this.DocumentInWorking.allegati[i].TypeAttachment = 1;
            DocumentManager.setSelectedRecord(this.DocumentInWorking);

            Response.Redirect("Document.aspx");
            //logger.Info("END");
        }

        public string IdCustomObjectCustomCorrespondent
        {
            get
            {
                string result = string.Empty;
                if (HttpContext.Current.Session["idCustomObjectCustomCorrespondent"] != null)
                {
                    result = HttpContext.Current.Session["idCustomObjectCustomCorrespondent"] as string;
                }
                return result;
            }
            set
            {
                HttpContext.Current.Session["idCustomObjectCustomCorrespondent"] = value;
            }
        }

        protected void DocumentBtnPrint_Click(object sender, EventArgs e)
        {
            try
            {
                //controllo solo protocollati si stampa altri no.
                HttpContext.Current.Session["visualReportAlreadyDownloaded" + Session.SessionID] = null;
                InfoUtente infoUtente = UserManager.GetInfoUser();
                DocsPaWR.FileDocumento fileRep = DocumentManager.getSchedaDocReport(this, this.DocumentInWorking, infoUtente);
                FileManager.setSelectedFileReport(this, fileRep, "../popup");
                if (fileRep != null)
                {
                    exportDatiSessionManager session = new exportDatiSessionManager();
                    session.SetSessionExportFile(fileRep);
                }
            }
            catch (System.Exception ex)
            {
                UIManager.AdministrationManager.DiagnosticError(ex);
            }
        }

        protected void DocumentBtnAdL_Click(object sender, EventArgs e)
        {
            if (this.DocumentInWorking.tipoProto != "C" && this.DocumentInWorking.tipoProto != "R")
            {
                try
                {
                    int isInAdl = DocumentManager.isDocInADL(this.DocumentInWorking.systemId, this);
                    string msg = string.Empty;
                    string language = UIManager.UserManager.GetUserLanguage();
                    if (isInAdl == 1)
                    {
                        DocumentManager.eliminaDaAreaLavoro(this.Page, this.DocumentInWorking.systemId, null);
                        this.DocumentBtnAdL.Text = Utils.Languages.GetLabelFromCode("DocumentBtnAdL", language);
                        //msg = "Documento rimosso dall'Area di Lavoro";
                        msg = "CheckDocumentRemoveAdL";
                    }
                    else
                    {
                        DocumentManager.addAreaLavoro(this, DocumentInWorking);
                        this.DocumentBtnAdL.Text = Utils.Languages.GetLabelFromCode("DocumentBtnAdLRemove", language);
                        //msg = "Documento aggiunto all'Area di Lavoro";
                        msg = "CheckDocumentAddAdL";
                    }

                    ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + msg.Replace("'", @"\'") + "', 'check', '');} else {parent.ajaxDialogModal('" + msg.Replace("'", @"\'") + "', 'check', '');}", true);
                    this.Page.ClientScript.RegisterStartupScript(this.GetType(), "No_aggiunto", "alert(\"" + msg + "\");", true);
                }
                catch (System.Exception ex)
                {
                    UIManager.AdministrationManager.DiagnosticError(ex);
                }
            }
            //}
            //else
            //    ClientScript.RegisterStartupScript(this.GetType(), "alertStampe", "alert('Non è possibile inserire una stampa in Area Di Lavoro');", true);
        }

        protected void DocumentBtnAdLRole_Click(object sender, EventArgs e)
        {
            if (this.DocumentInWorking.tipoProto != "C" && this.DocumentInWorking.tipoProto != "R")
            {
                try
                {
                    int isInAdl = DocumentManager.isDocInADLRole(this.DocumentInWorking.systemId, this);
                    string msg = string.Empty;
                    string language = UIManager.UserManager.GetUserLanguage();
                    if (isInAdl == 1)
                    {
                        DocumentManager.eliminaDaAreaLavoroRole(this.Page, this.DocumentInWorking.systemId, null);
                        this.DocumentBtnAdLRole.Text = Utils.Languages.GetLabelFromCode("DocumentBtnAdLRole", language);
                        this.DocumentBtnAdL.Enabled = true;
                        msg = "CheckDocumentRemoveAdL";
                        this.DocumentBtnAdL.Text = Utils.Languages.GetLabelFromCode("DocumentBtnAdL", language);
                    }
                    else
                    {
                        DocumentManager.addAreaLavoroRole(this, DocumentInWorking);
                        this.DocumentBtnAdLRole.Text = Utils.Languages.GetLabelFromCode("DocumentBtnAdLRoleRemove", language);
                        this.DocumentBtnAdL.Text = Utils.Languages.GetLabelFromCode("DocumentBtnAdL", language);
                        this.DocumentBtnAdL.Enabled = false;
                        msg = "CheckDocumentAddAdL";
                    }

                    ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + msg.Replace("'", @"\'") + "', 'check', '');} else {parent.ajaxDialogModal('" + msg.Replace("'", @"\'") + "', 'check', '');}", true);
                    this.Page.ClientScript.RegisterStartupScript(this.GetType(), "No_aggiunto", "alert(\"" + msg + "\");", true);
                }
                catch (System.Exception ex)
                {
                    UIManager.AdministrationManager.DiagnosticError(ex);
                }
            }
        }

        protected bool NotaDocumentoEnabled
        {
            get
            {
                return this.FindControl("tbl_note").Visible;
            }
            set
            {
                this.FindControl("tbl_note").Visible = value;
            }
        }

        private bool AbortDocument
        {
            get
            {
                bool result = false;
                if (HttpContext.Current.Session["abortDocument"] != null)
                {
                    result = bool.Parse(HttpContext.Current.Session["abortDocument"].ToString());
                }
                return result;
            }
            set
            {
                HttpContext.Current.Session["abortDocument"] = value;
            }
        }

        protected void DocumentBtnConsolid_Click(object sender, EventArgs e)
        {
            try
            {
                if (this.DocumentInWorking != null &&
                    !string.IsNullOrEmpty(this.DocumentInWorking.systemId) &&
                    LibroFirmaManager.IsDocOrAllInLibroFirma(this.DocumentInWorking.systemId))
                {
                    string msgDesc = "WarningDocumentOrAttachIsInLf";
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + msgDesc.Replace("'", @"\'") + "', 'warning', '');} else {parent.ajaxDialogModal('" + msgDesc.Replace("'", @"\'") + "', 'warning', '');}", true);
                }
                else
                {
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "Consolidation", "ajaxModalPopupConsolidation();", true);
                }
            }
            catch (System.Exception ex)
            {
                UIManager.AdministrationManager.DiagnosticError(ex);
                return;
            }
        }

        private bool RemovedDocument
        {
            get
            {
                bool result = false;
                if (HttpContext.Current.Session["RemovedDocument"] != null)
                {
                    result = bool.Parse(HttpContext.Current.Session["RemovedDocument"].ToString());
                }
                return result;
            }
            set
            {
                HttpContext.Current.Session["RemovedDocument"] = value;
            }
        }

        private bool EnableEdit
        {
            get
            {
                bool result = false;
                if (HttpContext.Current.Session["enableEdit"] != null)
                {
                    result = bool.Parse(HttpContext.Current.Session["enableEdit"].ToString());
                }
                return result;
            }
            set
            {
                HttpContext.Current.Session["enableEdit"] = value;
            }
        }

        protected void DocumentImgSelectKeyword_Click(object sender, ImageClickEventArgs e)
        {
            try
            {
                ScriptManager.RegisterStartupScript(this, this.GetType(), "SelectKeyword", "ajaxModalPopupSelectKeyword();", true);
            }
            catch (System.Exception ex)
            {
                UIManager.AdministrationManager.DiagnosticError(ex);
                return;
            }
        }

        public RubricaCallType CallType
        {
            get
            {
                if (HttpContext.Current.Session["callType"] != null)
                    return (RubricaCallType)HttpContext.Current.Session["callType"];
                else return RubricaCallType.CALLTYPE_PROTO_IN;
            }
            set
            {
                HttpContext.Current.Session["callType"] = value;
            }

        }

        public string TxtObjectViewer
        {
            get
            {
                string result = string.Empty;
                if (HttpContext.Current.Session["txtObjectViewer"] != null)
                {
                    result = HttpContext.Current.Session["txtObjectViewer"].ToString();
                }
                return result;
            }
            set
            {
                HttpContext.Current.Session["txtObjectViewer"] = value;
            }
        }

        protected void DocumentImgDeleteKeyword_Click(object sender, ImageClickEventArgs e)
        {
            try
            {
                if (this.ListKeywords.SelectedIndex >= 0)
                {
                    SchedaDocumento doc = DocumentManager.getSelectedRecord();
                    DocsPaWR.DocumentoParolaChiave[] listaParole;
                    listaParole = doc.paroleChiave;
                    doc.paroleChiave = DocumentManager.removeParoleChiave(listaParole, this.ListKeywords.SelectedIndex);
                    doc.daAggiornareParoleChiave = true;
                    this.ListKeywords.Items.RemoveAt(this.ListKeywords.SelectedIndex);
                    DocumentManager.setSelectedRecord(doc);
                }
                else
                {
                    string msgDesc = "WarningDocumentKeywordNotFound";

                    ScriptManager.RegisterStartupScript(this, this.GetType(), "ajaxDialogModal", "if (parent.fra_main) {parent.fra_main.ajaxDialogModal('" + msgDesc.Replace("'", @"\'") + "', 'warning', '');} else {parent.ajaxDialogModal('" + msgDesc.Replace("'", @"\'") + "', 'warning', '');}", true);
                }
            }
            catch (System.Exception ex)
            {
                UIManager.AdministrationManager.DiagnosticError(ex);
                return;
            }
        }

        protected void DocumentImgHistory_Click(object sender, ImageClickEventArgs e)
        {
            try
            {
                // In base all'immagine cliccata si apre lo storico relativo
                CustomImageButton caller = sender as CustomImageButton;

                if (caller.ID != null && !string.IsNullOrEmpty(caller.ID))
                {
                    this.TypeHistory = caller.ID;
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "History", "ajaxModalPopupHistory();", true);
                }
            }
            catch (System.Exception ex)
            {
                UIManager.AdministrationManager.DiagnosticError(ex);
                return;
            }
        }

        public string TypeHistory
        {
            get
            {
                string result = string.Empty;
                if (HttpContext.Current.Session["typeHistory"] != null)
                {
                    result = HttpContext.Current.Session["typeHistory"].ToString();
                }
                return result;
            }
            set
            {
                HttpContext.Current.Session["typeHistory"] = value;
            }
        }

        private bool EditSender
        {
            get
            {
                bool result = false;
                if (HttpContext.Current.Session["editSender"] != null)
                {
                    result = bool.Parse(HttpContext.Current.Session["editSender"].ToString());
                }
                return result;
            }
            set
            {
                HttpContext.Current.Session["editSender"] = value;
            }
        }

        private bool EditRecipients
        {
            get
            {
                bool result = false;
                if (HttpContext.Current.Session["editRecipients"] != null)
                {
                    result = bool.Parse(HttpContext.Current.Session["editRecipients"].ToString());
                }
                return result;
            }
            set
            {
                HttpContext.Current.Session["editRecipients"] = value;
            }
        }

        private List<Corrispondente> EditListRecipientsCC
        {
            get
            {
                List<Corrispondente> result = null;
                if (HttpContext.Current.Session["editListRecipientsCC"] != null)
                {
                    result = (List<Corrispondente>)HttpContext.Current.Session["editListRecipientsCC"];
                }
                return result;
            }
            set
            {
                HttpContext.Current.Session["editListRecipientsCC"] = value;
            }
        }

        private List<Corrispondente> EditListRecipients
        {
            get
            {
                List<Corrispondente> result = null;
                if (HttpContext.Current.Session["editListRecipients"] != null)
                {
                    result = (List<Corrispondente>)HttpContext.Current.Session["editListRecipients"];
                }
                return result;
            }
            set
            {
                HttpContext.Current.Session["editListRecipients"] = value;
            }
        }

        private bool EditRecipientsCC
        {
            get
            {
                bool result = false;
                if (HttpContext.Current.Session["editRecipientsCC"] != null)
                {
                    result = bool.Parse(HttpContext.Current.Session["editRecipientsCC"].ToString());
                }
                return result;
            }
            set
            {
                HttpContext.Current.Session["editRecipientsCC"] = value;
            }
        }

        /// <summary>
        /// Blocca l'apertura di K2 a seguito dell'inserimento di un nuovo corrispondente dalla
        /// maschera di protocollazione nel caso di un predisposto di tipo interop
        /// </summary>
        private bool NotOpenK1K2
        {
            get
            {
                bool result = false;
                if (HttpContext.Current.Session["notOpenK1K2"] != null)
                {
                    result = bool.Parse(HttpContext.Current.Session["notOpenK1K2"].ToString());
                }
                return result;
            }
            set
            {
                HttpContext.Current.Session["notOpenK1K2"] = value;
            }
        }

        private bool EditMultipleSender
        {
            get
            {
                bool result = false;
                if (HttpContext.Current.Session["editMultipleSender"] != null)
                {
                    result = bool.Parse(HttpContext.Current.Session["editMultipleSender"].ToString());
                }
                return result;
            }
            set
            {
                HttpContext.Current.Session["editMultipleSender"] = value;
            }
        }

        private bool IsCosolidato
        {
            get
            {
                bool result = false;
                if (HttpContext.Current.Session["IsCosolidato"] != null)
                {
                    result = bool.Parse(HttpContext.Current.Session["IsCosolidato"].ToString());
                }
                return result;
            }
            set
            {
                HttpContext.Current.Session["IsCosolidato"] = value;
            }
        }


        private string verifyK1K2()
        {

            string checkInteroperante = string.Empty;
            string checkSameMail = string.Empty;
            string check = string.Empty;
            SchedaDocumento newDoc = this.DocumentInWorking;
            if (this.Sender == null)
                this.Sender = ((DocsPaWR.ProtocolloEntrata)newDoc.protocollo).mittente;
            Corrispondente mittIE = this.Sender;
            string allRegs = string.Empty;
            //Check chiave interop
            checkInteroperante = Utils.InitConfigurationKeys.GetValue(this.InfoUser.idAmministrazione, DBKeys.CHECK_MITT_INTEROPERANTE.ToString());
            // Se il documento è stato ricevuto per IS, K1 viene disablitato
            if (this.FromInteropPecOrSimpInterop(newDoc) &&
                this.Sender != null &&
                this.Sender.inRubricaComune)
            {
                check = "-1";
                checkInteroperante = "0";
            }

            // Replicato il metodo FromInteropPecOrSimpInterop con aggiunta dei controlli interop=p || interop=e e typeId.equals("MAIL")
            //In questi casi K1 spento.
            if (this.FromInteropPecOrSimpInteropOrMail(newDoc) &&
                this.Sender != null &&
                this.Sender.inRubricaComune)
            {
                check = "-1";
                checkInteroperante = "0";
            }

            /* nel caso in cui le mail della casella istituzionale  vengano INOLTRATE da un utente interno, 
            il mittente del predisposto può risultare interno, in questo caso non deve scattare k1 e k2 quindi
            metto le chiavi a 0 prima che partano i controlli. */

            /* nel caso in cui le mail della casella istituzionale  vengano INOLTRATE da un utente interno, 
            il mittente del predisposto può risultare interno, in questo caso non deve scattare k1 e k2 quindi
            metto le chiavi a 0 prima che partano i controlli. */
            if ((mittIE != null && (!string.IsNullOrEmpty(mittIE.tipoCorrispondente)) && mittIE.tipoCorrispondente.Equals("O")) ||
                (mittIE != null && mittIE.tipoIE.Equals("I")) ||
                (newDoc.tipoProto.Equals("A") && ((DocsPaWR.ProtocolloEntrata)newDoc.protocollo).daAggiornareMittente)
                )
            {
                checkInteroperante = "0";
                checkSameMail = "0";
                mittIE = null;
            }
            if (mittIE != null && mittIE.tipoIE.Equals("I"))
            {
                checkInteroperante = "0";
                checkSameMail = "0";
                mittIE = null;
            }

            //Check chiave stessa mail
            checkSameMail =
                Utils.InitConfigurationKeys.GetValue(this.InfoUser.idAmministrazione, DBKeys.CHECK_MAILBOX_INTEROPERANTE.ToString());


            // Se il documento è stato ricevuto per IS, K2 deve essere spento
            if (this.FromInteropPecOrSimpInterop(newDoc) &&
                this.Sender != null &&
                this.Sender.inRubricaComune)
            {
                check = "-1";
                checkSameMail = "0";
            }

            // Replicato il metodo FromInteropPecOrSimpInterop con aggiunta dei controlli interop=p || interop=e e typeId.equals("MAIL")
            //In questi casi K2 spento.
            if (this.FromInteropPecOrSimpInteropOrMail(newDoc) &&
                this.Sender != null &&
                this.Sender.inRubricaComune)
            {
                check = "-1";
                checkSameMail = "0";
            }

            if (!((string.IsNullOrEmpty(checkInteroperante) || checkInteroperante.Equals("0"))
                && (string.IsNullOrEmpty(checkSameMail) || checkSameMail.Equals("0"))))
            {

                Corrispondente mitt = this.Sender;
                string sysid = mitt.systemId;
                //necessito della vecchia descrizione del corrispondente
                mitt.oldDescrizione = AddressBookManager.getOldDescByCorr(mitt.systemId);
                //se descOld è empty la setto ugugale a var_desc_corr
                if (string.IsNullOrEmpty(mitt.oldDescrizione))
                    mitt.oldDescrizione = mitt.descrizione;
                string var_insert = AddressBookManager.getCheckInteropFromSysIdCorrGlob(sysid);
                ////Session.Add("IdRegistro", mitt.idRegistro);
                //    string idAOOColl = newDoc.registro.systemId;
                Registro[] regs = RegistryManager.GetListRegistriesAndRF(this.Role.systemId, string.Empty, string.Empty);
                foreach (Registro registro in regs)
                {
                    allRegs += registro.systemId + "','";
                }
                if (!string.IsNullOrEmpty(allRegs) && allRegs.EndsWith("','"))
                    allRegs = allRegs.Substring(0, allRegs.Length - 3);
                DataSet datas = new DataSet();
                //Andrea De Marco - Modifica per Gestioni Eccezioni - interop = E viene trattato come MAIL
                //Per ripristino commentare De Marco e ripristinare il codice commentato sottostante
                string email = mitt.email;
                if (newDoc.protocollo != null && !string.IsNullOrEmpty((newDoc.protocollo as ProtocolloEntrata).emailMittente) && mitt.Emails != null &&
                    (from e in mitt.Emails where e.Email.Equals((newDoc.protocollo as ProtocolloEntrata).emailMittente) select e).FirstOrDefault() != null)
                {
                    email = (newDoc.protocollo as ProtocolloEntrata).emailMittente;
                }
                if (newDoc.interop == "P" || newDoc.interop == "E")
                {
                    datas = AddressBookManager.GetCorrByEmail(email, allRegs);
                }
                else if (newDoc.interop == "S")
                {
                    datas = AddressBookManager.GetCorrByEmailAndDescr(email, mitt.oldDescrizione, allRegs);
                }

                if (datas != null)
                {
                    check = (datas.Tables[0].Rows.Count).ToString();
                }
                if (newDoc.interop == "S" && !check.Equals("0"))

                    //old
                // if (((from r in datas.Tables[0].AsEnumerable() where r.Field<decimal>("SYSTEM_ID").ToString().Equals(mitt.systemId) select r).Count()) < 1)
                //check = "0";

                {
                    bool exist = false;
                    foreach (DataRow r in datas.Tables[0].AsEnumerable())
                    {
                        if (r["SYSTEM_ID"].ToString().Equals(mitt.systemId))
                        {
                            exist = true;
                        }
                    }
                    //if (((from r in datas.Tables[0].AsEnumerable() where r.Field<decimal>("SYSTEM_ID").ToString().Equals(mitt.systemId) select r).Count()) < 1)
                    if (!exist)
                        check = "0";

                }
            }
            return check;
        }

        private List<string> LoadRegistersRFResearch(string itemSelect, string systemId = "")
        {
            List<string> listIdRF = new List<string>();
            listIdRF.Add(string.Empty);
            Registro[] regs = RegistryManager.GetListRegistriesAndRF(this.Role.systemId, string.Empty, string.Empty);
            foreach (Registro reg in regs)
            {
                listIdRF.Add(reg.systemId);
            }

            return listIdRF;
        }

        private void LoadOggettarioLite()
        {
            this.PnlDdlOggettario.Visible = true;
            List<string> ListIdregistersRF = new List<string>();
            ListIdregistersRF = LoadRegistersRFResearch("A");

            this.ObjectstList = ObjectManager.getListaOggetti(this, ListIdregistersRF, "");


            if (this.ObjectstList != null && this.ObjectstList.Length > 0)
            {
                List<DocsPaWR.Oggetto> list = new List<Oggetto>(this.ObjectstList);

                foreach (DocsPaWR.Oggetto ogg in list)
                {
                    ListItem li = new ListItem();
                    li.Value = ogg.systemId;
                    li.Text = ogg.codOggetto + " - " + ogg.descrizione;
                    this.DdlOggettario.Items.Add(li);
                }
            }

        }

        protected void DdlOggettario_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                string sel = this.DdlOggettario.SelectedItem.ToString();
                if (sel.Length > 0)
                {
                    int pos = sel.IndexOf("-");

                    string selLeft = sel.Substring(0, pos - 1);
                    string selRight = sel.Substring(pos + 2, sel.Length - (pos + 2));

                    this.TxtCodeObject.Text = selLeft.ToString();
                    this.TxtObject.Text = selRight.ToString();

                    TxtCodeObject.ReadOnly = true;
                }
                else
                {
                    TxtCodeObject.Text = string.Empty;
                    TxtObject.Text = string.Empty;
                    TxtCodeObject.ReadOnly = false;
                }
            }
            catch (System.Exception ex)
            {
                UIManager.AdministrationManager.DiagnosticError(ex);
                return;
            }
        }

        /// <summary>
        /// Nasconde i bottoni che controllano lo stato del mittente per il predisposto in arrivo(se esiste uno, più o nessun corrispondente con la mail mittente)
        /// </summary>
        private void HideButtonsCheckSender()
        {
            this.DocumentImgSenderWarning.Visible = false;
            this.DocumentImgSenderInt.Visible = false;
            this.DocumentImgAddNewCorrispondent.Visible = false;
            this.UpPnlImgSender.Update();
        }

        /// <summary>
        /// Abilita i bottoni che visualizzano lo stato del mittente per il predisposto in arrivo(se esiste uno, più o nessun corrispondente con la mail mittente)
        /// </summary>
        private void SetButtonsCheckSender()
        {
            string check = verifyK1K2();
            if (!string.IsNullOrEmpty(check))
            {
                switch (check)
                {
                    case "0":
                        this.DocumentImgSenderWarning.Visible = true;
                        this.DocumentImgSenderInt.Visible = false;
                        this.DocumentImgAddNewCorrispondent.Visible = false;
                        this.DocumentImgSenderWarning.AlternateText = Utils.Languages.GetLabelFromCode("DocumentImgSenderWarningToolTipSenderE", UIManager.UserManager.GetUserLanguage());
                        this.DocumentImgSenderWarning.ToolTip = Utils.Languages.GetLabelFromCode("DocumentImgSenderWarningToolTipSenderE", UIManager.UserManager.GetUserLanguage());
                        NotOpenK1K2 = false;
                        break;
                    case "1":
                        this.DocumentImgSenderWarning.Visible = false;
                        this.DocumentImgSenderInt.Visible = true;
                        this.DocumentImgAddNewCorrispondent.Visible = true;
                        NotOpenK1K2 = true;
                        break;
                    case "-1":
                        this.DocumentImgSenderWarning.Visible = false;
                        this.DocumentImgAddNewCorrispondent.Visible = false;
                        this.DocumentImgSenderInt.Visible = true;
                        NotOpenK1K2 = true;
                        break;
                    default:
                        this.DocumentImgSenderWarning.Visible = true;
                        this.DocumentImgSenderInt.Visible = false;
                        this.DocumentImgAddNewCorrispondent.Visible = false;
                        this.DocumentImgSenderWarning.AlternateText = Utils.Languages.GetLabelFromCode("DocumentImgSenderWarningToolTipMoreSender", UIManager.UserManager.GetUserLanguage());
                        this.DocumentImgSenderWarning.ToolTip = Utils.Languages.GetLabelFromCode("DocumentImgSenderWarningToolTipMoreSender", UIManager.UserManager.GetUserLanguage());
                        NotOpenK1K2 = false;
                        break;
                }
                this.UpPnlImgSender.Update();
            }
        }

        private void DeletePropertyDetailsSenderK1K2()
        {
            HttpContext.Current.Session.Remove("UpdateDocumentProfileButton");
            HttpContext.Current.Session.Remove("newIdCorr");
            HttpContext.Current.Session.Remove("senderDetail");
            HttpContext.Current.Session.Remove("listCorrespondentSameMail");
            HttpContext.Current.Session.Remove("listObj");
            HttpContext.Current.Session.Remove("newCorrespondent");
            HttpContext.Current.Session.Remove("Parameter");
            HttpContext.Current.Session.Remove("AddressBook_details_gvCaselle");
        }

        private string TakeDescriptionCorrespondent(Corrispondente corr)
        {

            StringBuilder formatDestinatario = new StringBuilder();
            //elenco canali preferenziale /destinatario proto
            System.Collections.Generic.List<Corrispondente> listPrefChannelDest = new System.Collections.Generic.List<Corrispondente>();
            if (this.DocumentInWorking.systemId != null)
            {
                listPrefChannelDest = UserManager.GetPrefChannelAllDest(this.DocumentInWorking.systemId, "D");
            }
            string annullato = string.Empty;
            bool rtn = CtrlIfDestWithRicevuta_NEW(corr, out annullato);
            if (rtn)
            {
                string canaleRef = string.Empty;
                if (corr != null && corr.canalePref != null)
                {
                    Canale canaleOrig = corr.canalePref = (from c in listPrefChannelDest where c.systemId.Equals(corr.systemId) select c.canalePref).FirstOrDefault();
                    //non abbiamo ancora salvato quindi il canale preferenziale è uguale al mezzo di spedizione
                    if (canaleOrig == null)
                    {
                        canaleOrig = corr.canalePref;
                    }
                    if (canaleOrig != null && canaleOrig.typeId != null)
                    {
                        if (canaleOrig.typeId.ToUpper().Equals("MAIL") ||
                            canaleOrig.typeId.ToUpper().Equals("INTEROPERABILITA") ||
                            canaleOrig.typeId.ToUpper().Equals("INTEROPERABILITAPITRE"))
                        {
                            canaleRef = "(" + canaleOrig.typeId + ")  ";
                        }
                        else
                            if (canaleOrig.typeId.ToUpper().Equals(SimplifiedInteroperabilityManager.SimplifiedInteroperabilityId))
                                canaleRef = String.Format("({0})", SimplifiedInteroperabilityManager.ChannelDescription);
                            else
                                canaleRef = "  ";
                    }
                    else
                    {
                        canaleRef = "  ";
                    }
                }
                if (annullato == string.Empty)
                    formatDestinatario = new StringBuilder().AppendFormat("(*){0}{1}", canaleRef, AddressBookManager.getDecrizioneCorrispondenteSemplice(corr));
                else if (annullato == "1")
                    formatDestinatario = new StringBuilder().AppendFormat("(*)(A){0}{1}", canaleRef, AddressBookManager.getDecrizioneCorrispondenteSemplice(corr));
                else if (annullato == "E")
                    formatDestinatario = new StringBuilder().AppendFormat("(!){0}{1}", canaleRef, AddressBookManager.getDecrizioneCorrispondenteSemplice(corr));

            }
            else
            {

                if (corr != null && corr.canalePref != null)
                {
                    Canale canaleOrig = (from c in listPrefChannelDest where c.systemId.Equals(corr.systemId) select c.canalePref).FirstOrDefault();
                    //non abbiamo ancora salvato quindi il canale preferenziale è uguale al mezzo di spedizione
                    if (canaleOrig == null)
                    {
                        canaleOrig = corr.canalePref;
                    }
                    if (canaleOrig != null && canaleOrig.typeId != null)
                    {
                        if (canaleOrig.typeId.ToUpper().Equals("MAIL") ||
                            canaleOrig.typeId.ToUpper().Equals("INTEROPERABILITA") ||
                            canaleOrig.typeId.ToUpper().Equals("INTEROPERABILITAPITRE"))
                        {

                            formatDestinatario.AppendFormat("({0})  {1}", canaleOrig.typeId, AddressBookManager.getDecrizioneCorrispondenteSemplice(corr));
                        }
                        else
                            if (canaleOrig.typeId.ToUpper().Equals(SimplifiedInteroperabilityManager.SimplifiedInteroperabilityId))
                                formatDestinatario.AppendFormat("({0})  {1}", SimplifiedInteroperabilityManager.ChannelDescription, AddressBookManager.getDecrizioneCorrispondenteSemplice(corr));
                    }
                }
                if (string.IsNullOrEmpty(formatDestinatario.ToString()))
                    formatDestinatario.AppendFormat(AddressBookManager.getDecrizioneCorrispondenteSemplice(corr));
            }
            this.bypassaControlloRicevute = null;
            return formatDestinatario.ToString();
        }

        /// <summary>
        /// Confronta le liste passate in input; il metodo torna true se le due liste non sono uguali
        /// </summary>
        /// <param name="edit"></param>
        /// <param name="list"></param>
        /// <returns></returns>
        private bool IsNotEqualListRecipients(List<Corrispondente> oldRecipients, List<Corrispondente> newRecipients)
        {
            bool result = false;
            if ((oldRecipients == null && newRecipients != null && newRecipients.Count > 0)
                || (newRecipients == null && oldRecipients != null && oldRecipients.Count > 0))
            {
                result = true;
            }
            else if (oldRecipients != null && newRecipients != null)
            {
                StringBuilder strBuildA = new StringBuilder();
                StringBuilder strBuildB = new StringBuilder();
                List<string> a = (from c in oldRecipients where !string.IsNullOrEmpty(c.systemId) select c.systemId).ToList();
                a.AddRange((from c in oldRecipients where string.IsNullOrEmpty(c.systemId) select c.descrizione).ToList());
                // Modifica corrispondenti quando modifico il mezzo di spedizione.
                a.AddRange((from c in oldRecipients where c.canalePref != null select c.canalePref.systemId).ToList());
                a = (from a1 in a orderby a1.ToString() descending select a1).ToList();
                List<string> b = (from c in newRecipients where !string.IsNullOrEmpty(c.systemId) select c.systemId).ToList();
                b.AddRange((from c in newRecipients where string.IsNullOrEmpty(c.systemId) select c.descrizione).ToList());
                b.AddRange((from c in newRecipients where c.canalePref != null select c.canalePref.systemId).ToList());

                b = (from b1 in b orderby b1.ToString() descending select b1).ToList();
                foreach (string str in a)
                {
                    strBuildA.Append(str);
                }

                foreach (string str in b)
                {
                    strBuildB.Append(str);
                }
                byte[] oldList = ASCIIEncoding.ASCII.GetBytes(strBuildA.ToString());
                byte[] newList = ASCIIEncoding.ASCII.GetBytes(strBuildB.ToString());
                byte[] hashOldList = new MD5CryptoServiceProvider().ComputeHash(oldList);
                byte[] hashNewList = new MD5CryptoServiceProvider().ComputeHash(newList);
                if (hashOldList.Length == hashNewList.Length)
                {
                    int i = 0;
                    while ((i < hashOldList.Length) && (hashOldList[i] == hashNewList[i]))
                    {
                        i += 1;
                    }
                    if (i != hashOldList.Length)
                    {
                        result = true;
                    }
                }
                else
                {
                    result = true;
                }
            }
            return result;
        }

        private void RemovePropertySearchCorrespondentIntExtWithDisabled()
        {
            HttpContext.Current.Session.Remove("searchCorrespondentIntExtWithDisabled");
        }

        private bool IsRapidClassificationRequired()
        {
            bool classificationRequired = false;
            if (this.RapidClassificationRequired)
            {
                classificationRequired = true;
            }
            if (this.RapidClassificationRequiredByTypeDoc)
            {
                if (!string.IsNullOrEmpty(this.TypeDocument))
                {
                    if (this.TypeDocument.ToUpper().Equals(NOTPROTOCOL))
                    {
                        classificationRequired = DocumentManager.IsClassificationRqueredByTypeDoc("G");
                    }
                    else
                    {
                        classificationRequired = DocumentManager.IsClassificationRqueredByTypeDoc(this.TypeDocument);
                    }
                }
                else if (this.DocumentInWorking != null && !string.IsNullOrEmpty(this.DocumentInWorking.tipoProto))
                    classificationRequired = DocumentManager.IsClassificationRqueredByTypeDoc(this.DocumentInWorking.tipoProto);
            }
            return classificationRequired;
        }

        private void InitDragAndDropReport()
        {
            this.UploadLiveuploads.Visible = false;
            if (!string.IsNullOrEmpty(Utils.InitConfigurationKeys.GetValue("0", Utils.DBKeys.FE_ENABLE_DRAG_AND_DROP.ToString())) && Utils.InitConfigurationKeys.GetValue("0", Utils.DBKeys.FE_ENABLE_DRAG_AND_DROP.ToString()).Equals("1"))
            {
                this.UploadLiveuploads.Visible = true;
                if (DragAndDropManager.Report != null)
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "MassiveReportDragAndDrop", " ajaxModalPopupMassiveReportDragAndDrop();", true);
            }
        }







        /// <summary>
        /// Apposisione della Segnatura Permanente
        /// Author: Alessandro Aiello
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void DocumentBtnApponiSegnaturaPermanente_Click(object sender, EventArgs e)
        {
            this._logger.Info("START");
            bool _result;
            try
            {
                _result = DocumentManager.ApponiSegnaturaPermanente(this.DocumentInWorking, this.DocumentInWorking.DettaglioSegnatura, this.InfoUser);
                if (!_result)
                {
                    this._logger.Warn("SEGNATURA NON APPOSTA");
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "ErroreApposizionePermanente", " alert('Errore nell'apposizione della Segnatura Permanente');", true);
                }
                else
                {
                    // resetto la segnatura attuale così da recuperarla dal DB al reload della pagina!
                    this.DocumentInWorking.DettaglioSegnatura = null;

                    //this.DocumentInWorking.ConsolidationState = DiagrammiManager.GetDocumentConsolidationState(this.DocumentInWorking.systemId);
                    //if (this.DocumentInWorking.ConsolidationState == null)
                    //{
                    //    this._logger.Warn("SEGNATURA APPOSTA MA NON CONSOLIDATO");
                    //    ScriptManager.RegisterStartupScript(this, this.GetType(), "ErroreApposizionePermanente", " alert('Errore nel Consolidamento');", true);
                    //}

                }
            }
            catch(Exception ex)
            {
                _result = false;
                this._logger.Error(ex.Message, ex);
            }


            this._logger.Info("END");
            if (_result) { Response.Redirect("Document.aspx"); }
            
        }
    }
}
